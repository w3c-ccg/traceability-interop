{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ee1439a7-8cea-47be-b918-4e45a70c830f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b9b4286f-6d18-4bf0-bffc-3a146a656615",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5ef9d739-aa56-4128-8bc1-643ba969a870",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6393565f-fb71-472e-8064-347f9e5a3e4c"
                }
              }
            ]
          },
          {
            "id": "a20b04d2-9c4a-4498-b38b-7eace749b111",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a5e0ee6c-0b62-4540-89cf-873a20368ee5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0e3899e6-962d-493c-a16b-3f455cfb6a5f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "569a0155-7602-4efb-8d5d-dbc8567604fc",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e8090e58-20d6-43c3-965e-1a10ecfbfb6f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "661f2ed7-a119-44ee-a69a-f37deb0991e4",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc1f8352-0243-4a80-90d0-f9ab252978d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "88c85b2b-8176-4563-b9d5-6e81f10b14e5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3efe91e7-e7e4-4d3c-912a-bf7ffefab7d7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e06d3637-88a6-4535-9e40-956c0b21e0fa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "198f0df9-e1c5-4c3b-829e-c0742ef9386d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c97ebeaa-1a1a-4181-8087-3b630c505d07"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec2343db-7d2d-4ece-9e82-a46922bf998d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "56325992-ae34-43cd-a83c-968410221aaa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "46a50c10-c2e6-406f-95f9-192b1523a0ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e178c842-55fe-4010-af8e-ca4f3eea1642"
            }
          }
        ]
      },
      {
        "id": "2ec36479-7fc0-4a89-bb77-b82ef787b45f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2e02e6ea-4f5a-4a75-8230-4f006b2f7d03",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cd60a449-e4d9-400a-8385-90fe06e2de01",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "af6ddd9b-88e6-4f3a-b41f-c105ffb801e4",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c6e1b1-3091-4178-ac8e-e7ee5d710dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "106aa161-5e9a-4a95-bf95-935c4ff8592c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4744b7-2dd2-4aca-b909-b6fe75f71163",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ecdf84-bc8d-444b-bdf1-341400e674dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb2ae0cb-06a9-40a4-8afc-a31526c251b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b27fff3-6f53-4230-9c7b-47bd69141547",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2040f5a-f727-4a21-ba52-eeb0587931f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da950910-2932-4768-b639-ecc1dff41868"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f47939ea-7a07-4a96-9bf9-a0ea0801b3fe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "881bb55c-4fa9-475a-a0f9-4f1738fd2e47",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ae731b-a68b-4cb2-aef1-33435dd587c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c26abc55-19da-4a7e-bf3c-0f625270ddef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6113fb83-559d-4dfd-8998-4239b14adc22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41516fef-a2f8-46f0-bf6d-c0ed8afc2609"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b2a1a327-fbfa-404d-ba23-7a3850fd9338",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fc4ee8b8-f240-40ae-b43d-26e96b2ff0f1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0980e3d-99ab-415f-bb7c-0ab5f772db97",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "69d0ce1b-50d4-487c-b14a-e671ee7eb4cb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00aba392-468d-4fb7-8026-ede1da47afe3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "259c91cc-c93e-4dc9-b2fa-253094234444"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5036e0c9-887e-43e7-b1b3-c4dfad35ff29",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "72eb670a-7ddc-44f2-ba5e-df8d42ff751d"
            }
          }
        ]
      },
      {
        "id": "930e7e40-9832-4758-a851-51abc1596b10",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f521e8f6-10bd-4b9c-bd88-46a52bc49dd3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3bc46022-c275-4929-a58f-d77b3426c8f2",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "af8d9127-bb23-48bb-a8b0-92dd7e237bf6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5284fc5-a5f2-4b70-8a11-ae975fd352ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e05c6bf-d16a-4c9b-b9c0-1a33b835247d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22fcb7b7-1d79-4fd5-be82-66bf66ba431a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "860e0572-cdd4-428d-aabc-3de6ba1b7ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633d204d-a29d-469e-8fb1-fe3ad179414c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8c7246-b1ae-4b9e-a72c-db68970606c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3189aa04-62b2-4560-bd47-3cdf2f129ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ac2567-af09-41b5-8a6b-fdb775751c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05cea8c6-970f-4c62-ba2e-57eac412f2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc747644-f8b0-4ccc-a4af-2bd8c98aa5cb",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14079bb1-fafd-4a08-8028-7aadce88a092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c380b60-8b02-4392-a7c9-ee4095d3e1dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a23697-0f96-4043-9e5f-c6f45e6be98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce299334-b4e0-479d-9858-2006150cce54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c322151-d3b9-46df-a949-91d6d91b6804",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd63d73e-cadd-4b87-8771-698a2298a3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0121650f-fc8d-4967-8631-9dfe2298e239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef9a800-06aa-45b3-8ba6-6de898d06d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9fcd9616-ad01-42f7-b205-94b6fc1bc827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e417ff3-4d36-43d7-85f1-4a9fafc98fa8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4c31ed-fe3f-4d03-a8a8-f58748c6e9b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "602433ed-3806-4e26-b132-55c98624e72c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410ac949-c6b2-494c-bda6-f2365f2ec771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "539562fd-0021-444b-a08d-4e7eadae68c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a18e67-2ad5-447b-9dc1-998e2d60eecb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d0e33c-6691-46ad-b62c-5b9a9481953f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d157644e-7f71-4c49-85c0-670e8d59d029"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde06af5-6847-4db6-b938-37101bb61720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24df1fd1-4b87-402c-9c6d-bb5065671a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04dd0b4e-9fe7-456a-8399-8f1cde93b807",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e790bee-3ec9-4618-91a5-d0c5d8380330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7baeaf85-0ef5-4161-aba4-9639c5d182ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29cf552-0bbd-4d80-92ba-8fb79b3dcb07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31f15381-d3a1-4b89-b83c-67efd71b18fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c86b88c-82c8-4b59-95c6-78810820979c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71d894f-56b4-4a1c-ba42-3e54516245d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19b836be-54f5-4968-b1fa-f83f66d19958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f09b9b-3254-4fe2-b8f4-eb066e0d9f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ef73b24-8e6f-4ce7-a651-e97400de59a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85983d84-e07e-4fc8-8678-43fa71adf5ad",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277ec1f0-7c90-430a-957c-b1b52e9d84f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "963cc002-10a5-47dd-a212-b76c35270689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d266e6d8-378c-45e7-a00b-249ae74a338a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4c64bfd-9468-4af7-a0ad-79faa38ef919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88aed5c1-690e-4022-a547-4c2f42401445",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b8f098-6734-41ad-a50f-7a3fbccb87ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434d536e-4f43-4cf3-b1d6-02b9cff2c6cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6819757b-0ed7-48cd-b330-3cd999f0f09d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "802006d4-85d8-4552-822d-a57c927ba704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25e6134-9629-4258-89f0-f10546f2eff6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7d621b-a6ac-48d8-99a4-9a04116af14a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba7c76b-714d-44f9-9204-cb61a08db916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e4bd24-9663-41a5-8c17-3784eb990256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e2725e7-e2b0-40bd-892a-e49493c374c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0236c5ac-fa85-4492-a0ae-2b5df8526cc8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd24a2df-bdb2-487f-a07d-108de8c9a0d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5a53374-b137-4f83-bcf9-5a3293f84e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a30bbb-56c7-4356-a70b-874f9767c9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9bbd40e4-1bbd-4d31-9cd1-ef02fc2b3c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db1b577-85fc-4246-b25b-c7351435f155",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f34770-a4ab-4dac-9cfc-ff3ffc68395b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e85e2eeb-71ee-4f2c-8494-2402bb4c7823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7418ccb-e049-4847-983f-231b58948579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "828edbdd-593f-4ca3-8a74-7b82c2391a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a155b66-3641-4736-ba58-55faede6e869",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f037152f-a06f-4616-be07-d056f41a66cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e7375a-0120-4a7c-b9b6-35e90ce5ed9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c284c0-2f5c-485c-9fdf-7bcdd153d7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d4d10d9-1baf-47c5-a2e6-25990fac03fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b3532c-98f5-403f-b43e-785af74ef66d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f48184-9050-499b-bd37-c0127a5eb907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5154ee9f-3df7-433e-9cfa-bd95a7de7371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bfa5371-ca9d-4b69-8891-863c88be9f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33fa3e81-7040-42a6-810c-1dda177faab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e948470-e4a0-4b9f-8020-df1a3bcfea6f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fac449-7fd8-42be-a749-7890a46b0130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb66a634-eb09-4760-91e6-03996adf6e45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d575c08d-b27d-400b-97d1-ff43cf9749f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bdefc015-ab79-4281-980a-296dc6203c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5648ebcf-7b19-42bd-9a91-c119b7898558",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad01861-4bb7-4175-8567-15fbc422566b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0d995e5-6243-4bcb-a15d-973bc5093afa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67093fd5-c39b-40d0-870e-a5bfc43b2656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "496f76b0-475a-4bf3-9a94-9b93a6abad33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb8493b-5dc2-4978-a629-5cf6bf1fd8c1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a870faa9-f110-4759-a701-8b4d246b3e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca6415a7-0aa3-4c42-863b-77176294844b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b18446-685e-4d0e-825f-25126d7b09e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "56969a7f-09e4-4a10-a54f-c3100a2d9dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c50762-abef-4a59-ab0b-44416a5b992e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c8bdbf-6ea3-4ccd-b586-b38a4bb829c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc33f91f-21aa-4690-b8a5-649e4524ca01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4528740e-97ab-498a-90de-d32a7fd6ee2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4400cfa-1801-43ee-bfad-44dcd8bf5aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6cc403-2108-4e6c-8737-59c6797fde79",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670f7b72-d523-48c8-941e-832fe542c2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "323866a0-0946-4107-a128-b60ad6e57c07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2378518d-6e67-481d-b483-95477591e30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "058932e0-33a1-4068-b7ae-3b4f5f7bd75b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3e505c-f740-4ece-b579-9e37d34c09b1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad27788-2a37-46d0-b1fc-610905ef7b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6500ef61-856b-4976-bc95-d54486d636b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27ad4f3-7284-4ee6-b920-d1b46109e81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a881b3e-2aed-4377-b83e-4288bd6b9da4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2dc2c8b-b118-48ab-9652-8971a86238d5",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64f12c4-b2cd-48f9-a5f1-b1f91937e6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5945cfba-d732-4acd-9e6a-9acd82b4859c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94fb12c5-0a28-422c-b2a6-11697d244cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1133d62f-a43a-402e-85bc-36c3885f701d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42579970-3ca9-4551-95de-c94ef54e610c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08c81a6-7600-4536-8f52-e4b25863e234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7fe308-8ef2-430d-87d7-8d393dde298a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced65e6f-fcde-49bd-9492-e69debaf9091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "38bd045b-57ae-499b-afc0-499a6bb2e823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e44959-4ed9-4357-80d7-68982959fd0c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed68dd3-7e94-4b65-b016-d0a76aad3a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b70443-4f5c-4b2f-9629-055332dc5c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2971e6-4a9d-407c-b565-625fbf966cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f33bbcfd-678c-4b69-95da-d4d645ddfce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6009897f-e2a2-42f6-be4e-d33d04414355",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4522c26-4cfd-4c6c-a93c-4507d61dd9d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1a0aad2-16a6-4988-a9c0-45118bee88e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e47ce9b-70c1-4277-b6af-06dd8f8f8a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "50d14b1a-6487-4271-8f8c-f18d134946e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11084e0-26f6-4545-a374-4c9100b4bc11",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "089ef733-0155-4496-bab9-02d53d7cf739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5d4a18-d338-4fe3-acaf-d59526fc057c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589ccd93-949a-4d46-b039-17088c9baf6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "34af5cf1-33fe-4c21-aab9-c0530cd4b5bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d413e136-a441-4e0d-bd5f-0d43cd7e60a6",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c188fb77-025f-4d03-97e8-0291d2919ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dcaa0fa-f81d-4359-a613-8fc023e6d047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2767a08a-f512-4db9-88ee-76ff08fe5491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "96bba05f-3511-4b31-87df-ada6ee11e443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0e5a22-9287-4f5a-b1c9-6b66a9572559",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2956784c-9b9c-47c9-b33b-0d3cbe4adbc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b34de56-3da5-4715-8d2e-28165c6be05e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db81186-a0b2-43b7-9c50-094ba1b8a49b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4542e69f-57df-4ad6-97ba-994f2aa3a634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ea2e35-7374-4444-ad3b-49785f893076",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16dc5831-59a7-4a56-a843-f0dbcabafa7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de62a74b-e1e4-4e42-90d2-cb7fdc748c10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077fd317-fb56-4bef-9248-50f5f112fe16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bce0d00-f64e-41d8-81b2-e56c36b974c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6005c18-fa19-4899-ab91-9710597daa52",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b4deea-0907-407c-9e40-c227d6d7ab25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0feae582-7e51-4f74-b88f-34d55b693fbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8677ece-a0e9-463e-bad4-eab9d72ba407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2cb6795-0038-4dc2-acc3-5620b0c26426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afce8928-cfd2-4d8c-9f74-726e8dbf5195",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6183c5-a41f-4734-af6d-a0866e8878a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0dbb952-2129-4959-a921-4a5136853c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2332e24b-5d9c-4233-8dd1-b49d118846aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5aba39c-614f-46fb-bfb6-7230759c9361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57174568-b4f9-48a2-994e-89347c025855",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7994647d-0c43-4866-b115-e02f9235444b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31ac30c1-d565-4828-abff-b5f5d7e29fd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac0240c-86b4-4766-8c5a-f3543ea69f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "68f6967d-3564-4d61-a4de-3f0b82a5c54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80454444-1602-44a5-8cf2-27a7672435eb",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42c77a4-aa28-4138-94bf-d84df8f814e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e47d4cb-d6bc-4f1b-9a3d-cdb87528cd20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88eef2e-87fa-46f1-8497-0dd967f40697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d636bf8-1dbe-458f-bd9f-688a4fc5cdd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7396c16-8c4e-44d8-888d-b25b091e0fb6",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d9f2f2-7ace-4be7-96ca-204130ac86d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cdd63db-aa0a-473b-8b60-3b166750eb6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f580413-aa87-42ef-80ff-ddb51657cf6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "474f7939-2e23-41b4-b2ea-56073c6643aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3e510c-790c-442e-895e-08771d3ce5f1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85023f5-90a6-4c77-9016-f682751c74ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "502b0d44-a11e-445a-92d7-9ece10f6d8b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d26fe0-26e9-4c09-884e-d3e660c1a2cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab72a3a-2473-4eae-938a-c25d627900bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837aebed-47a4-4e76-971d-bdfc2858ff23",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85d9109-ca82-4b80-8204-f65cdd07a5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a9a0e00-ae4e-4937-86ea-a3b064515341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e0c974-e19b-4e2a-a798-ef6cc28a8cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd233dd0-8ff2-4f76-a49d-678f4ec6822e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0bdc23a-c57e-4aab-81f7-2d158511ac98",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b73922-9cc8-4bfb-ba58-a7adab3cc2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b15a280-0011-438e-a473-a3271f26b640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d9575e-3835-4feb-881c-abcc2626797a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "20074bcd-a507-4dbb-a2f3-f653e80bac96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3c8346-27f6-4084-a8fc-3cbb43fc8a11",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c20130-8fc8-4a5d-a1a4-83a9c1c944fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bf462c3-0f3a-40cb-b8d8-af85a57cb997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4b81bb-6454-4296-8ff5-06b152c20dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7056e73f-9568-49c1-bfc8-0ac70e302c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871475aa-25c7-4da3-b6d6-2bd423c57296",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8cde598-83be-4dab-ad13-f46f13725f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98495b22-c312-4bc4-80fc-a84787fd9ffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33960f09-86c3-4b76-9edb-8f18956223ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ed2f8fe-a55c-4392-a61b-0e63aefd12b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17abd7be-116d-4727-965a-d16264497350",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e676ddf9-0400-48a0-9ebf-76198c0615a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fa01502-2bc0-4ad5-9ac0-31b49e18c143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94c89a8-7491-476c-96ed-97c67dbb2fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "021e315b-1049-4cd3-8e74-4510a52c9bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576c4009-8e48-4aaf-8876-e29358e25128",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6629e471-06fb-48d5-8d1f-3c2f978d31f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "613db01e-19f1-40c6-a19a-c05b074fc9f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09dd7a0b-4b4a-47ee-8ba3-45f78b7caab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b986cf19-65ac-4e35-afc8-425db53bfaba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1ca262-389a-450a-abed-fd7bc36e13d9",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30de6738-91a0-4fc7-8144-8619edf5da3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afa629b8-e97a-4e0d-a1a5-b387165d12dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1de845-eef8-4108-a749-7037eece4d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f6dddbaf-27e0-44c3-bf17-9f31fb5d3cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f137ac95-ef17-4390-8e99-8d452d7d3d17",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6bca02-f2d2-4ec9-921d-585bc27a01a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4397258c-3856-4b30-9ddf-00027509df8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd37b9e5-a062-4a84-9eca-44a9c28f90f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "eadc4dee-6d44-4f99-adda-ff52226dc6dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b6babf4-c905-4fa4-83a8-29228d0d15e4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2fee5c7-6d79-4544-897c-0a68d33e183b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf2aff3-095b-431f-8355-1daa7646d8bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f34aa57-84d5-4cde-acb0-9f2461163204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9aef7a9c-4d6f-460c-989d-2263c0714a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55d2bbb-a603-48e0-b2a9-51828025d85c",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d825b3b2-6a51-4a21-8bf0-64b6833ce714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ee48c2-2b6f-4ec2-bcfc-0e353ea9f6a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f7c9a1-538a-4a1b-8335-4e7535148c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a904b4d4-9157-4cd1-8c3a-75d125547c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a2c852-5af4-4f95-8f8e-57f37ee7797b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24852945-e37e-400f-8a0e-f5eb782d5182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24db522a-358b-48e9-bcbb-ec64eb963a7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7585148-a397-4892-b195-45007d5aa3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f15c2273-6cfd-4964-b51b-c1e12da7f3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ca92c5-126a-4c1c-b8ec-9781b43f436e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c71db4-38a2-4254-be57-f86c9182b5fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37ffc655-b089-4811-bcdd-c8281dd6b226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593e3723-0992-475b-a299-e380820240ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f017eaf0-6ccb-45e5-bc6c-142ca7678682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8cb4336-9469-4fbd-a516-37c8beb40413",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2891e201-222c-4345-8236-5d267408817f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "384bbb12-ef70-499d-a290-f2ea82365094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c047fb-4bda-498d-91e7-9d1b60170b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce318d80-b49b-47da-a50a-e47bb51adaf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61824104-a493-46ab-bcb9-738fb8f7ee17",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25969c8c-38cf-4cf6-aaee-194e56a08243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18610337-24fd-4672-a53a-9843385c4cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895d11fb-389a-4850-815b-a5ee727b9dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "26ee8f43-ede2-4dad-8f43-8c59f4b969af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8316d9d7-b941-45a0-ab1d-c4e0c19b212c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57198cb2-d8aa-419d-968a-3b726cce92f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a54b08a-0bd9-401e-93f1-97f8591585c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "131f6d65-670f-4f12-ab8a-b988bfdd8200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5db47ed3-9f26-4b10-b69c-361eea1ceee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f859eee2-5ee6-4d86-9313-0a74334a4e47",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "634c723a-673f-48e4-9729-91c2a2705a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a0f7bc9-5e9f-4c09-ac30-e768bc04bad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f179cb4-b48c-409c-acba-3b341d076f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "587f51c3-b03a-4f48-b134-9f414093a299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f984a2-ca74-49fd-9432-b3ef7c6609f0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f96f8afe-c4e2-466f-a54d-06fadc941180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d37d5780-e9f2-4079-82fe-7af3af3ca435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b9acbb-1cfb-44cf-bac1-ccd86796ccc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "14989394-38f2-41d4-85db-6ae47a393aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe7d747-e531-4643-8eec-586232c60985",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b14936-3662-47c2-80cc-2fe5f343b030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f49b97c1-45e4-46c2-a25e-9f31caf6c3ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3863215-3293-4b0f-8527-06b249201bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f648998c-a36f-4b7d-a032-5a44fec0be2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a8d055-c1c4-46bb-9bfa-da980e46df1a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be115c78-9aaf-4048-8d51-d489eefc06fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "313ca012-9125-4a4f-a58c-30fa27632b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e694b6-7d7b-4d68-9c8b-0fb3cf9464e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "46709253-f664-42c4-a26e-4796ed22e952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a75ef8-6699-41ee-adcf-1c23d79a7951",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df533c6d-bbf8-4668-b4c3-ebf349272a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80d7537-60db-46b5-8671-7384ac9a9853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca837649-e7ce-4dc0-8ad8-8dc2a48b5592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f663da11-81b0-4829-9aba-c0e66197f274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adac7b31-7df6-4fd0-8435-3fb8a5f82959",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26811ac-b08b-4ed3-8d86-c2b58b28040f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbf7c61d-8b88-4eba-a399-755b9eb172ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d351e1e1-92c4-4adf-86f5-69e09459ae26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8f4483a3-b9d4-45c0-ac42-49336107f1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2250f0-0013-4dc2-b1cf-f442ce5f6930",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "287123be-1c06-451f-98e8-b6f91aa1f78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed9f702-cda5-4500-a09a-ed2d3638e416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34eb2f40-9ac3-47c4-8369-2e175edc8362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a665bb78-23a2-4b52-b45c-79168f1c16d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbad6d5-7ba4-48b1-8c46-3112c56b0f25",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da5d06b-1fa9-4592-87bc-ff3085f86255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d237fa5b-97bb-45f0-8671-6a74176c5606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70e12c7-6c67-4efc-b96d-5c8c9818949b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b5a74a0-7a37-461a-b4bb-8536b8f5ec96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "820ea4d2-68d9-43d4-b23b-7b8b7802c440",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3fac25-3da1-4a45-a65a-fc01ae686f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0798f2f4-2b59-44ae-99da-2e6ea3bb1ac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5a1448-474a-461e-a1db-0dabfb0bcce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce97f5e5-9cea-4206-a4a6-235ee44b7673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52138817-e315-4112-88cd-fa4ad90c173f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567f639f-49bd-47ab-b333-1d9cecbc6b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9ca711-e73a-40db-89b2-4198233c67ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96f7e76-a1ba-4966-98ec-bebd96ce1f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e44340db-0ab0-41b5-80de-b133f273cf42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618edd2b-0d36-4458-8dc6-5c54f121288a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a27c2e-3a3e-4770-aea8-dba60cf09897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4d32c3-8c12-4792-93e7-9cfa416efa35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a2aa67-29bb-42e4-8aa8-d66e9b19e88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dcb1e4aa-4002-4eac-b588-8ad2b220563a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2bf8ec-6d1b-4e61-8630-4be58985feac",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23f85db-2845-4019-b904-1ff637befcd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d291213-481e-491b-ba0f-6d8adbedf2ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e750f0a-1099-4bac-8416-6fa624a65361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8675f79-728f-4c2b-be37-2b6c57f67856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a614de-103c-4b3a-abc1-5ed3d2c6f7d6",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2beeabc8-bedc-4dde-b08a-b2b51c8c5348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb474b3-57c5-4e53-b45d-364ae4f032b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ee7ecf-6858-4840-8c69-73082a137509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b246523c-10eb-4165-b33e-bc0651f8e1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126117ac-a4fa-4d2a-a67f-b6000d6fc4ff",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a1d1c6-73a5-4183-b234-b4482c5e5e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f5051d4-7c80-43f0-afc3-464b16e1f31a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767bc383-d45f-475e-8e2a-81a386043c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "43f9add4-3762-4eaf-929d-61256f8d1485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f55df65-a93b-49b3-bc1f-9e612dd90e9b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8d9f01-74af-4698-9454-4649da43b65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b505c849-43bd-49a3-b954-a5653bc78ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7946d6be-066d-4562-ae23-7045bba26e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9207f613-7a7d-44b0-8857-b219c315d513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160c90b1-6ea9-4d88-a5f7-7dccefbb87d4",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "016e78a1-906a-4737-bc2e-d74b14083623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1425040-c974-429b-ae0d-e70d33092495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff621ea-ba26-44d5-a311-2ffe0649394f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ae4ac31-c0dd-430d-b9c8-c7b107fc439d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb9b8c3-faff-4936-a142-889cd61cc44d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5a55f1-6d53-40ec-8e8b-97a42f1b9260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f261527-e01a-496d-8324-6dfa667b86dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b089970-8c3c-425b-9b78-25607b070784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e024cada-a2c9-4e1e-a573-bb30f8e8a681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19b2ce9-fb53-4135-84e5-d0f254d32a4b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a0f881-7841-4713-a7da-476ee98b7629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf8a7fa8-6913-4caa-acb0-1ff38bc98349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad513455-7638-41ca-b0b9-9590ffa2341e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c2f2f53-e37d-4a96-8dc8-720b5da892f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a060b5-5bdd-4919-aa6b-da54f28fc4d0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "159be69d-efd2-4846-b8e6-c982872a7314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db95fd11-52e4-40db-bc20-f4c0fc1d1744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7c044c-c52b-4781-94d2-f884c9ebb7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b7536ce-90c3-44c1-a42a-e95e36a4893a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c5eba5-57ae-447e-8827-d528052a9be8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "761ed196-c8ee-4980-82ef-ca37c5ddd124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f172196-8ad1-4304-8f3c-506b43deee88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97fba9c-635e-4cc2-8484-8c7fecdce6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "65e9936c-a5de-47c7-823d-51380aa4918b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "198f61c3-0aa0-4efd-b555-b23a57da060a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "366163cf-8109-4824-9a8e-2b1801dc1149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d521439-1fe4-4258-b702-31d5ad75754d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2478e8a6-05e1-4f60-8ac3-92f7b5462e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "46175847-bc64-44f6-bee0-86c13749cc55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d45e81e-d5a9-4343-83a3-2c9055ee384f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edcff76f-3ecb-4347-813b-8ede0efbc1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03de7198-69b6-494d-af26-231060417f8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad4ae6d-8544-4da2-89a4-e11cfdfa198d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fafeb90d-0c06-4b5d-9ddb-eac1d46d83ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e76aac4d-cf55-43c1-a8ac-2fb46acb5ee7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "575ed250-08ab-45ad-af7d-0e55f91c2441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94c428bb-5c57-44bc-b528-153a215de564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4857e3a7-8b29-4324-abdb-60ede57f82e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1aa87575-daec-4db9-ac04-79ca6465a21a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1208bd18-6d64-4331-985d-3701b5cba8a3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28439771-f168-49bd-8a85-b22d79b1e5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ebe479b-e570-42bd-b1f9-b9d536abc650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "872316e0-71ce-4da7-a7f4-946aa623b6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3340b020-1f54-4d99-a67e-0ff2c14fce26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6ab52c-7ee4-45e9-ad83-93920863dca6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e39151-08aa-42e7-ac7b-889742a24104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a58a253b-868e-4425-9596-f7fa3b4a8eec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e18ddf8-3df3-46a2-8c54-ac5a14a13126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca0dc3d7-3b12-4d04-8942-2885035eb793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918c5216-5e15-4949-bae4-543fd7682115",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93c05de-67cc-4aa0-a11b-44277725c6d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd8263a6-7629-4f94-9a55-2d4bad250653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b908311-d654-4dd7-9130-1ddad9b0ec39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a66ff349-eabd-43f3-9190-c0e17b239b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e1aecc-7806-40e3-994d-d7cb14220dde",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca47f5c5-0e68-4304-b481-ee41ad4faeb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de64bb74-ced8-4a74-a3ae-b93fc4d2a024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42638bef-5e31-4286-9874-c3ca3fdb798b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a43fdfff-2418-457a-80d4-c255027ef762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54564acd-d628-4ece-a6ac-93fc57e363e0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f266aad-bbd2-4fa7-9079-925c11aa2e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f1a034c-e900-45bc-a4cf-47e2da4792a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cecdf88-43ef-458a-8663-b54455b3e803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e39c83f4-6f50-4bd7-aea5-971bc7e05c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72266f77-6e1b-4168-a1d9-577cba166a7b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00125c36-07c1-4ce1-a51a-d70737ed2528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d21956a2-ca16-4c2e-87dc-b29ad33a40a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fdeb9f-eac0-44a8-8819-337e1ac872de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "879204a1-9e91-4ecf-9da2-53e25bfcb8f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c4a0f8-b2dc-4448-9828-a8198fe33344",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e69ba6-f676-43f0-b6f6-42a9abfceab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0602416-6b4a-4b99-b7fe-ff0037ee5f53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8e7170-7cb0-4920-b419-a1128a42038a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "723c3e83-06fe-4eeb-b665-97eed9df688c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282f9487-f6e5-4fcf-9544-480cd1ad6c00",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901061df-415e-4070-95a7-165338d4a7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef2c6e78-618e-4223-a989-6a8da2eaba96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101ac8bd-e6dc-44b6-9301-b2d8823bb8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4af40ef2-5648-4eb4-85d7-52738cb58e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702e8c8a-66b6-446b-9d6a-a34edc806f30",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "522a9e75-3079-4d88-9151-136d103ec3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "583bbd51-cd6b-49df-9f50-9c6dfe7f8b18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de54aa7a-8909-43b4-b8f5-fc7f3cc38156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3d8777b-94ac-4a48-a30c-ed40f34e791a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1713b8-6715-4744-bf7e-16558001b9b6",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f8255f-eca9-466d-8b95-b94ca789249e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7b54d85-52fb-4189-b13c-88b3e2da8fac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14412c5d-2096-4129-9675-d7d2b5b9f33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf7cf094-12c9-4913-bb93-d03d3cd2d1af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d83be0-e04d-41b4-9226-61ec1470663f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7ba90d-7cd4-4156-86a2-959ecb6c26b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c6f3994-afbb-4495-bb06-c7143e0a82af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905bd83c-f5ad-4022-abf0-aee5979c1b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "25c8bff1-cf0e-4b9d-b7c1-d670291d6a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228f075c-985f-4e33-b3fb-3c5316934d30",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd30a43c-85c4-4ef2-87d9-e503cf323dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "502ba440-0c9e-4822-8881-4be1f201fb39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ceb87c3-381b-46cf-9b53-7c76b2007f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8be0415c-a452-49e8-bdff-ca50a6b13401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f514d243-10db-4adb-89dc-79dbe71ecbf0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd2f467-54e2-4142-b77f-7104de107571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ebf5945-5b52-4156-990d-43ca7e2a4183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e298657-2cbe-40a9-82c7-97913f48eaa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b013a4be-dbba-4e35-bd6c-60b6b77d5085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f057579-9e13-47e8-8473-aa41fbe6d7bf",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76a1dc9-ed38-48db-a9b6-fb28713efb36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec54b3e6-e388-4ff5-95db-ef54faf200f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc7b26b-e50c-41b0-9270-afa484a8986b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a3a43c1-a512-4116-87cf-6b9585cc4e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc2d46b-d5f2-4c6d-a684-c81ed1e77892",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c862b2-5aa0-4b7c-a157-6878f8480290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4620d3f0-dff6-4e00-b3a3-dd13a693a952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82196861-f33f-427c-b718-d66eafc11f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "78643a7f-502a-4d63-bc16-26cde0f475d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f4dcc2-c03e-45e8-ad3c-c8222891db1e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ef26e3-7ce2-4712-bb32-f033e69eeea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f339bbd-3e9a-47ac-a66e-9e4961977a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe09d51-99fd-439e-bd48-29c06e30c2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9753be87-6594-4bab-bc25-34ff256df892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a39bac1b-22a9-4c21-9932-338ebc6d7f11",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "515145c7-3ea6-4f5f-84a1-fe65beea7d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f43f05f8-6862-46a5-ab6b-0009d1fee285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e9b38d-1220-4207-8053-12522b14f241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "40e4df7c-0bcd-4f7c-a176-aafcb180cfa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45640583-f0b9-43b5-b32b-5bb71194eac0",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42801b58-739b-4b2b-9222-ffef39e891cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b716d706-43a6-41e6-a326-5f156b3c16a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74877773-30dc-43ec-933e-445266dc4897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "510d3891-60b1-46b3-b7b6-06946df94098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd7467c-e344-4cfa-b325-5b999d9b7459",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04854cc6-24b1-431b-8027-3e78092defa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ded05bca-147a-4ed5-be24-3e2a4e35a88d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b162ac89-52a8-4e2b-9aac-70e0ad7dfe98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d37e11cb-0ca1-454f-b0d8-99d1785e5ff3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f5ec0688-33eb-4153-b131-ca7d3a3ad17b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9cdf5b7d-525f-4c52-a215-209b2deb5309",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ef8217-5d4a-4195-a24a-859e68091990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ea26612-2d8d-41a1-85da-6eb1bb0c63c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905032ba-fcf7-4773-9747-91571c7ce871",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1fdf2ae7-badc-4e2a-b517-9f8dce7aec39"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb2baf20-e9e1-4ebb-9260-519e8b9df69f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c35588b4-d76e-412e-b590-6a69dd68304b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "22f010d5-4eca-4722-864c-84c8e1cc8563",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af743b85-e90e-4ce7-96ef-c309631eacf6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e18a285f-9e5e-4fae-a648-34cd5b91f73b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "775db1bd-a080-41b7-a121-7e55a524148f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "65dc88f3-190c-441b-bbdd-3014b193bcb2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b0b85230-ae43-4023-a440-489b57cacc14"
                }
              }
            ]
          },
          {
            "id": "82dc65e9-06fb-4762-a02a-d236dcde4964",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cbbe837b-a46c-4f1a-8e45-3f4d8377c1c3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b793cc8-4f6a-45ac-b83c-cf07e6a33751",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f37c4e71-1b36-4628-862c-b23bb99efe8f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "707d68a3-284e-4d0a-ab31-47b8323ee534",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d06314f9-a456-4929-8055-3f626b9fd883"
                    }
                  }
                ]
              },
              {
                "id": "67c3487c-e148-43ed-9705-958e3b7100b5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68de1b40-cbbe-4039-85b4-4e8c11e51cf0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f2518371-8049-4c68-9e0d-98a57fceb53d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "997901fb-7e58-45a3-b2c5-8af20ccc8f6a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7e6e4251-c80a-431d-a2a2-6de92d5237dd"
                    }
                  }
                ]
              },
              {
                "id": "1e03dbac-7511-44fb-83e2-66ad981af57d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8ebcf3a-c9f2-4a17-b435-b373be6a7c5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f1e4c682-d68c-429d-9ada-6664daa4151e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cbdfee55-9d28-4d01-bd1b-d5097b95a9af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bcfa0e31-48c4-49f3-92c3-6fe00b797355"
                    }
                  }
                ]
              },
              {
                "id": "b5d1e082-3387-4bc3-8a19-3ab378ac9b93",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62b95976-129a-4a18-8639-b52a183eb7d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2bbe11b6-7763-4af1-b3c4-8b8b8f9cd54b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba090320-fc93-4128-b888-687c7c8e63e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1f03eb78-b575-483e-b1c4-7c80edfb97ad"
                    }
                  }
                ]
              },
              {
                "id": "5f285023-4a64-40e4-9adc-0df2805b4483",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f731b75-2968-4361-bb1f-d32141748c77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0f8abebc-36ad-4960-b2e8-8019177e9c43"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "591e5cbc-6d0a-43c5-a19d-2f3f8e8c9f8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "68e80ad5-a747-45a1-98b7-9a73a64d0ae3"
                    }
                  }
                ]
              },
              {
                "id": "f317219f-dc34-4fee-be78-1d5938a42cf0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09a5a424-44ef-4fb5-b7ca-5ff41c043ed0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d26476b4-6b3a-49aa-bf50-6c0d3706cfcf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e48a729-d094-403f-a0b1-d535729cc7ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "026c906b-09f1-47de-9717-611c49edffa9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f0067f28-fed7-49c8-bdc0-3b8f338531d6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "27c2340a-0782-48ec-b777-137e2d895f3c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "57a43e22-a2b0-4296-ab7a-820cdf05dccd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3ce115df-8f90-48f7-9b92-b53f336ebd1c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be665a2b-16e5-4e3f-bc02-c19cc815e24f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3e0be5f3-f6e0-45f3-89ee-ccb1a03dd4a5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6496e45e-8c87-4b80-ad1d-3e9847d18fd6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f09761c7-e69e-4cf8-b1dc-df6bc9f963ba"
            }
          }
        ]
      },
      {
        "id": "253ad390-2aaa-4fcb-a21e-8a2aba5a9a5e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c0d6e89f-d121-437f-b9bd-909eb4055a1a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81667c02-cfaa-4069-b121-ace18202fe8c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d58c074f-3c88-41de-a3e9-b45f3c5852da",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b31457c7-7b7d-41e3-b5b1-90843025839b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb86a9e2-ed59-4b56-afa3-d6cf8452540a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d054a95d-04b4-477a-8e84-8f0b806d7ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "94a5ae44-84ae-40f4-a4a1-f022c18ae5ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba61527-3d0b-414e-9b31-9504c7d1ea2c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f642ac09-466f-4c79-8b72-01bbdf42c6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10640eca-245e-48d0-9ef0-9760849db030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e42ec0a-8328-4502-9b5b-42eee1233692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "930c730a-bdc0-420c-b649-1c4297a60e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda0ef68-231a-4c92-b122-0aba34ff73e9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4beff0c6-0cba-4de5-9ae9-f8523a4a192f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a3ea8e-0970-4db8-a264-4552c6fb2181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc258a3-3313-4885-bfaa-adc2120e32a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1021f651-b538-48b2-b134-496e2f680819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5ccc5a-c5aa-4913-9cff-b29fcc69f35c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "353e43e8-6baf-48e5-87df-b01a0d4770bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14812e41-8aa3-4f56-99d3-a8236a28f726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d755f8-84db-4836-af6e-cea457329a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1019086-4111-4012-9143-23b382dd4606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a32b562-04f3-435a-aa8e-74d9fdf31d13",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb2ecc7-fb66-4467-a489-78524854fe22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a79bff85-2ee0-443e-bda3-669d14ced0f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef7fb4f-1fa1-48dd-956a-f894d22ebe09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "411ad1da-3515-4225-9827-bc82256c69bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68efc635-5610-4350-b9b0-7b15d605cac1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9a6d2d-157b-41b2-a4aa-f28b5e002f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "725cf084-dccb-4a58-8388-a9f7223577c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c4a897-507b-4daa-8a93-44227b1288e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1d2b9e7-a787-449f-a230-3f8acaab4039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c57372-4140-42af-ab90-ec0b5f1764a2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49463546-7b70-4c38-ad40-48986171e52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd2470d4-d62e-4007-8747-d81985a66c93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4158ae0-107f-4c15-ba1b-6302f82c1917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a34e66f3-45ef-418a-8764-cdc2aeda0c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3344a36-9675-4e5b-874b-6bd326c46089",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdbb8e8d-06b7-49c8-bc28-8250b7aa8067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee13866b-98fb-4d26-8148-9f3c4f12a3fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65ca954-eb2f-4a2a-b657-79caaa3f3be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca5df5b5-54ad-4dd6-9666-933ad8c9ec3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f1acc19-2388-46b9-99a7-b9c949465f64",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "580268c4-c98a-45ab-adba-4d37cfe7865c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb96627-dabf-48e2-b4f5-3580b6bd23d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27ac97a-7e18-4c43-a3ff-42389980cacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "35510c55-4277-4e29-bc00-f7c83ba5d694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff50e95-eb54-485c-bdb6-ba962dd513a7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dcf6bf1-44c0-4507-b276-08d7b42d3cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f6fb8a1-f8d1-4562-b1a2-f8dac51ddc87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e0d436-064f-40c8-97dd-4c335e4aef7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d4889c-2dad-4048-ac68-69ac448e12da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9caf734c-caa2-4d14-a4a2-3c81a4b791a2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4160cb5-4fc8-4aae-bd49-8453a145b2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af9bf8ff-94d3-4da7-860c-67d0edb646c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7cb528-f39e-44d7-85e1-5d8cbfa188b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "45952404-0d6f-4695-89e6-0b99e618309b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412830e5-104d-4d4a-b093-d1bb8587e0e3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b07dda-9893-422b-b34b-1bf37d0a7cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81612952-8b14-4edb-bbd8-60ac930d0dcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd58abf-1812-4cb5-83ee-4ad8a9bbc661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "45e5962f-5513-4e09-b272-17bb8533ac57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd26fcfd-209b-4915-93f9-ab091a9973a4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80aed8a8-a5e9-4d51-a17e-2a8f2a830d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed7ac086-0cf7-4463-b9d1-ebc09d911687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4b95d6-e8d9-46d1-8cb5-a6fb6db10515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b0cfaf6-fa47-451c-a829-1c7ef3ea7209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad987a66-ced2-4466-84c9-b5e43684a920",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8fed06-d4d2-49e2-bd61-00dc370e95f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa389225-c481-4904-9360-7d3a16e023b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9590766a-7d81-4f25-9a08-8b3231a54c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d3c1476-fb97-49d9-8a21-d3716fe15924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb18eda3-bc07-4377-950f-6c4041e07ce7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03aabd55-6d07-44fe-8bfb-ecf84ba10a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5160b1b-8b4f-4533-b77b-5d65623d21b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed9bf2f-8c4f-47ca-a696-5406368028f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "11173097-771f-443d-85de-66f0d87d3068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef0fe81-b2a8-4a13-ac5c-c28ee5d68462",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9079f293-e897-4d0a-a657-82f31ab6053e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10cb4a17-60a3-4459-a9f8-6ebb599c231f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91d1b1f-2b98-4d19-88e8-629c895f6de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e88686be-0607-4237-a375-c7ea5e9f1a06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ea0666-ceb9-4e84-920e-de6ccffe76f5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e413e27-d7c4-4486-aa7f-83bc2460b325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c13acc-9e27-4041-ae7b-01f8eb62cc11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d12017-f202-47fe-8dc7-733e8e215916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ebb01e1-0b7c-4e73-a1c4-640269efd32d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae3b07b-c208-46a4-bbf5-f04a0480afe3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a28a8e-4734-4bdb-8942-2251d69fd138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de01a4ce-1394-4768-9799-0e9abf5bd7a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebbf18c-56b1-4cc9-8608-014e47ac8774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d34e95e0-0862-4ed1-a198-d3e516beb078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0ee669-27d2-4fd9-b949-b574b905287e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb66724-1ab9-4509-b44d-34e5fc731cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dce9b7a9-e7fd-4fb8-b5bb-fec526259568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7a9118-73b3-4c88-8337-0aedb247de4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5abdb91c-4d87-4033-82cf-f48fd8cdfd47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b6caf32-1941-43df-ad59-8c7bb53c2216",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcefaac6-4303-4ca1-96e3-dbc8955631c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b966700-e248-4e9d-878b-3deb0536cca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8cd8d2-2b41-453d-b550-f45573604906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de713889-95fb-414c-9a73-23026f6f99ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d492671-507a-43ff-ad7b-f0a034c12200",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eadc48d-00a2-43e5-81f9-b36ba57cd65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a7f2027-54b5-427a-b23b-cb11b3e166ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac80ce7f-0db1-4d61-b6c8-913ec208d002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a6f3e0c-96f6-4d05-94d5-86ebf9994767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575c38c5-ecda-4062-b75b-103a117dee49",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46be32e0-d00b-4e56-bc51-c319324b748e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9979db10-ac38-4d7d-8d90-7f06e72a4174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b061a12-9751-4d80-afa6-a715a4f74407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96cc40b0-d03e-4d24-b922-fb7b6bd0c406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d25f4ac-cf9c-4510-a394-ea73bd82fca3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e1d0fe-1fba-43f0-b96f-b4882aebbd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfcbb219-0161-45fd-9169-016852e10c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68df1967-2d6a-41b2-a6e2-0f8795d23cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc744771-f0ae-4927-8d26-a5b15fe3bcdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eeb2e80-3a73-4254-bf23-0243b44a1dc6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6e2397-6b24-46f4-a364-8ca1abf14198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ced04e3-864d-4553-9fdc-b96a8d6257d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85017a25-0689-4bdc-85af-a4e87e8d0aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3216e970-d3f8-4c7c-ba9e-adb6e9dea31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0a0092-549f-4036-b2c7-23ea6a3ab308",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e834f98-f598-4126-97ef-30d4657e69c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d41ece-670c-46f6-9d8b-ef3ed435e363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f835f5a-eaba-4eae-a8ac-d257c9eb8965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eebb8656-6235-44d7-acb4-a9d15c96449c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf03f4a-90e3-4cf2-93be-69c734376001",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c28db1-ddc9-4ee5-8134-8d451c378bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46d0d663-ba7e-4cfd-bbb6-17013e48cdb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9b4af7-f6a0-45f5-b025-ed14c862c829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7ef2047-6646-4a80-bef5-f5bf65b7b133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f555fc-72a7-480f-9582-fbc0180614c5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09124d9-17e2-4010-8bf5-883a5aa9fc8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "789147a2-333d-4d8b-8f5c-4d31c279c0cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7919a9d6-e156-496a-bbf8-06e398754c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6153730-842e-438e-a065-2576f2463278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe141ad-e082-40ae-82cf-2e5ef570bfe0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8707165-cea7-4631-82f4-0648634e6255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeca7d80-bd93-4dfc-b7e1-83d5a51009de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618e1d56-000a-4bae-be2a-db078a31765a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77a1ce02-c3e9-4490-b951-db657bcd346c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1478736c-7212-418b-b463-a24766074601",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "349e1157-042a-4d4c-a228-9cf6214c6093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6812c0d6-0bb3-49d6-9862-7ae2e649ca91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd6df70-e5b4-4a64-b834-53efa0d10dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fa9a09a-a44d-493d-9e38-7886c615a41e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bed8f27-5f42-4e03-9e0c-abda111ac101",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c386f1f-7f88-4164-81a4-9985f442aa45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d83b0db1-dacb-47ef-bbf1-5d5eb379ec80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1851ffb0-79f8-4085-b0fb-b0df166d67e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "786e524b-af42-433f-b38e-67f0c1a5d29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1496f20-5861-4a5d-8324-ad6e3454afaf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b5938d-fb07-471c-bec2-320d1a452cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5102b1f8-3097-414c-bd8a-b435f2b1b696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cdd0242-b783-4948-ac55-4a4bc9cd1c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa212afa-8fd6-4357-9a5c-cbf5f0b01de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050ebbcc-18ba-4357-9b17-371f38bfe738",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0cfde21-52ba-4039-8a90-ea7aa278f724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f3118c-ac01-4fa7-aa81-2fef413fc394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55a9594-7713-41e4-80e1-b4ddbbca123e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7750f901-8a56-4017-8bb0-c7886e5986f8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "15247da1-d6d8-4731-b4e5-2f101e4d0ec2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "155f93fb-9b3d-46c5-a412-177985c15af5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee12a13-3dbf-4798-9fb4-8034b0de77c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ba69d8be-5206-49c1-b91a-312a75922212"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71623aa-66a4-4942-a4bd-7cf7ce14406e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "264b172a-53fd-4589-9ce6-2f4dc1d1740c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dafa8831-6a6d-4bbe-87de-706a6479c9ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e25e542e-e088-4c94-a437-a69483e9e06c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "03778b63-be77-4276-b90a-bce655abb007",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "474582f9-a1c3-4519-a6c2-7d48150edb71"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17e77095-353c-483f-83e6-d846ef86a669",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bf6e51cf-17fd-48b9-9b05-624f76086782"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce3528f1-26fc-49e0-8fcb-519ef0e1d44d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e0b6947-2d96-41c3-86b7-ba3c450c41ba"
            }
          }
        ]
      },
      {
        "id": "78623e99-b3d3-450f-9300-d9195e759f10",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "8ea43621-7a5b-4057-94e6-4dc0515ee080",
            "name": "Negative Testing",
            "item": [
              {
                "id": "16aefce2-28de-44de-8612-8879ef649027",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fe4b405f-c607-4b74-966f-c50b47756a59",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe1be58-d93e-4193-9822-9db0ed1db325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "212add15-07b0-4925-887f-8edc59b68399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd9c311-e6a5-4708-8e38-40e9ca3a190d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1fae0af-db2e-42a2-a8e0-fa8bb3fcbdf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4794eed3-2a05-471f-846f-27b03543a46c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc306ea-078f-493d-9282-620316895416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c06f44-3193-4029-911f-08892de3f92a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6538be0f-17ac-426e-9552-dd3ce70de732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8023faf-79c4-4b13-b3f3-b7c7cb8e49ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5d68a3-2889-4b65-9c1c-a9779f68eed7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e5602e-1e01-4a35-a271-25f55442eef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea56e02-4022-404a-a2c8-5a07e51950b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5208c006-8883-4a65-9f46-f4cc9219ec86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f9b9c7e-e479-47a2-96fe-bab21033edaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321d3521-5ef0-46fe-9de8-36c8a47ff548",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3d6429-aecf-4c32-9af7-009e778b4ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b47cd13-ed31-40bf-9a77-3dd34c1f3017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab5318b-0856-4b56-959c-5e55d48f0753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fa7c479-f2d3-4cd1-894a-c107741dff46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b27abe5-8ccd-4fc3-b84d-e5c5f7d25418",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269db5d2-3c8c-4739-b61a-1d4d13e29848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45270fd4-6ea1-4b5a-ae4c-84a3c927300d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b9a62a-4a42-4009-a009-be23767c6f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "27f9ffaf-b723-4d00-8617-2463a8efacc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba5e8ce-b097-442b-a3c5-963905cf65a3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c70f6ce-9d55-44c5-b243-70c70dcdd230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e69b766-e46c-4839-b34f-b95d6bbd7149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8803b1b4-6879-4c4d-be87-ccb6715b04ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "619dabcd-cf58-400b-a9d7-09ce343f306e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f306ee-5fa7-4aa4-8370-f2397469f1af",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da52add0-83b9-420f-a1a0-bc71c67b0cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63bd8b7-c2ff-4858-95dc-760c404099e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd07d34e-c517-4e85-a67f-b6bfc927add8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c722124b-10eb-406d-bd3a-1e96b96cd815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a8f7b1-a5f1-4e74-8d2a-3c1247cc9aa5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8165511-c916-4a46-a764-964bea3980d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "983e76a4-10c9-4a6e-a149-54fd7073d55e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c7e98c-a30b-4263-af14-a924c5233d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b96b08d8-e1b1-4c1d-a80a-b8585099d60a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77b539b-e995-448d-9c1d-44b087d7417c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd6a15d9-35e3-40f6-9462-928a6c6e748f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec8d443-0717-4e25-a7c4-5c4d7b4401dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ebe078f-6fd8-4a13-9c40-d6e1bffac351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "612def20-653e-482a-b7ad-3d0d1800e4bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa5d929-f9b5-449e-977d-1e862646edc3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc69bb9-dcb9-43a4-912a-8e4bd723fafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf12245b-3781-47ab-b604-03a944fe09c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d148252-5caa-4534-b73e-481f20f05f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e86047af-ede7-48a3-82a9-2b175687c313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931afbbd-433b-4e92-8fa6-d5823542ab15",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c761581f-3afa-45ef-aa44-380a90a3b12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a36e9648-ea79-4d65-a636-c38a847c09ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8197df8f-502f-4711-bff5-a6d002caf5fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "bd23734f-3240-40d9-bfd4-16eafb321c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec010f4-ed6d-4b7a-bf96-fa468cf5229d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da4af00-6dc4-478c-8f1d-0a8f309ba8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cd38116-a2dd-4eb0-9f7a-522a2d72e229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86bb7d63-53d3-44e4-b905-35378f4ae034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ad466c93-f6c5-4506-a6be-4236626a8d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e59f55-66d2-4ee3-a612-d6fd2f6a6e9f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b92cdf-7c80-437e-b561-af996d11a86f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca043fba-f621-4231-a878-d1efe9608248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43568ed8-cf7e-4097-bd3d-6eb748e940f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1021b3bb-327a-41fd-9e5c-2428ff6bbc15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e1e506-d04f-4dc0-a6c1-2c2074a66623",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ff22e7-702a-4935-8932-5a09c964757e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a7c2a07-f887-4176-8fa3-d29a8edfba2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbab4c7-dc92-43c1-b50b-a0a33a69d026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebde783f-2c5f-4715-a725-09d04ae8de62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928c02ec-a3e0-4ebd-8ef9-dcffcc507d13",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670de45d-eb84-459c-8143-4d451d633f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa555720-e4f4-4010-b064-503648f4bb7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e47f68-c68c-4e0d-b1ae-15b40f6976c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "01369c05-a99d-4596-92d4-5615469ff787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d5d1380-ba37-45bf-a2e8-3935931e0395",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa96192b-8a15-4808-abae-f558dd3f87c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40d90de-b469-4cde-8797-757f5821b33c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b089ad2-466b-4873-9dd1-8953e37c1b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d4ed1a0-1f1b-4fb4-a8e4-0ac7bdc1ef70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2baf065-68e2-4e9d-8d0f-674ff0e08abf",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39bfb03-71b1-4130-8acc-90883747d8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "420d2b26-40f3-412e-8a47-99e97bfe665f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fcd35f0-5c3c-4f02-a703-3337012dd567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "64fdcf51-693c-4bc7-a108-9805154dba0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e3a413-16bd-4e4f-af89-ea84dbf96b4c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2adf4b-b45a-4d46-b1e2-5d4e8f314fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21d0f3ed-f50d-4202-8e1e-45d3607d7e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b37260-58ac-4664-815d-bee048a23874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee1ca17b-f43b-4941-99f7-5c162f96792a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f90584-bf33-4d95-8377-56779f509f5a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0cb4e7-ccc0-450e-b392-5a93633199a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "148be0f2-b012-45fa-9994-131aa3b59bc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90376dfd-4de0-4857-b1b6-98615a7db94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a6d413c-75ab-4243-9259-9c98503dc156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609175e2-55a5-4eed-8862-4a3fe888e9c2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc61f84-be42-4da3-955b-967ed6b11a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c0f228-f026-4b68-8ab2-75431e8c94a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d262ac66-58d1-4948-80dc-1232beb351d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de80b993-2eda-4f18-835e-3c38fa6b2f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8162be-350d-43eb-91a1-73dd5597d051",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44dc86e-c87c-4f84-887f-5942c7bdfea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3087403c-3a67-4aee-97b4-a4eb7203a8da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f6096d5-b58a-4c02-9822-e5cc62847bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce80e6b6-4022-40d7-89c1-a7822f4f1dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32830f81-95bb-4135-a864-93a504c1a736",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6231b31-1178-4d1e-8f58-62b7b046aca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8f3d3d2-5d11-4387-a9f0-3e07a03cbbdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0ab863-b796-4ba4-9ff8-066bf511e80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2020bcbc-d5dd-4606-af1a-2aec7405e42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe920fc-6785-4901-9ca1-57fbab9daabe",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd05856-34b7-49f9-9ac3-08c30c6adfd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e9acc69-3787-401b-9be6-ec2ce0a7d947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb5b2da-e31c-4a82-b7ba-aebe961a2662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cdbef89-3b5c-4c03-9720-e83847305f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0157cc5-cdb0-4626-aa2a-af4f03416a2a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db874bb6-876d-41b0-a564-0e9e99fecc3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35c06181-f627-4b3c-85a6-26d9a8bb0757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25638db6-7c46-42c1-a822-4707eb368926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70e12d06-30d8-4db6-b5fb-dcb007143da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f48dfe-3cfa-4675-b51d-f1697dca24ec",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fadc6707-5d1c-4c4b-a607-689b24e01a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "334ff2e0-d62e-4d8f-81a9-d05cb5791a8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad1a7be-181e-40f6-aff6-38fbb241c091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "411e4a20-c9e6-4121-8a16-9397e18be3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90522959-9ced-48fa-91e2-233be3788d60",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74d75b3-d442-4cec-9aa7-97e12b869bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c73225f-fe5b-4826-8b14-d5ad0b0ed332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d6c97a-d247-48b0-97ff-b4a6cc67f0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14e6188f-ea2c-4e2e-b6b5-480b9169b674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d56bc5-e6de-478e-be7f-38ad36280e9a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "184769f8-a915-4239-998a-d6eca095f93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71a6d883-75b0-4960-827e-c402dfbebc25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557907ba-2690-4390-ae19-9df3cafcf7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ca9ef97-52c3-4862-a966-ec4db2ef6830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554c9a59-89bc-4116-8948-38280b37f237",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "701fe1e9-610c-47be-b691-fd43167ad5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75301f2f-a21d-4825-994d-262daa6f2db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da630390-ccbb-471c-950a-8cfecb8dbdc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12b245d5-9c6b-4fb2-8eb0-64eb26e91740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9783a4e-9666-4984-a3e0-4bb126ca8903",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3712622b-e867-4b66-abdf-63bc9ccff16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9091a3f0-7a79-4961-924e-2c79cf40729c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d89baf6-5c48-44df-b542-cdb83660c5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ebdd9bd-19ab-4a26-81f7-a322453f4160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868dca90-38ea-410a-b681-9b031df44cf4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e58dd5-a67f-428d-855b-33711ce94be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8110cd7c-c752-4f68-b48d-fb402b197b7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f832dc-0634-4328-bc1c-127d460d75a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "972355d0-e1f4-4086-8b91-4b63d99dfc98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4f1125-d4e4-4174-8200-ea6f5686b999",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80488e69-9958-47a6-9d37-6cebe4581e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0bea3da-7447-465f-b15e-09c536ce173a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f587c5-0489-4a3e-ba2a-bdb2ef7163e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0550436-182a-4fd9-87fa-0ffd9e4801a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68789584-806e-4f30-952a-bded530fb0a1",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37aeb23f-5840-4d2a-a2d5-34c3b2ce5692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d66afc30-1123-45a2-96ce-d05ec1a41367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188d69a4-6975-4a05-8b30-85024b6ccf68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "457cb7bb-80b6-4b48-9d14-c23fdd33625b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a080ed-bee0-4e4d-a359-570271d46f99",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ee5af3-114f-4f14-907c-8f14c17fba06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db2d6d8c-e3d1-4630-bc31-cff37b49ad99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1fd1fb-d2cd-4cd8-be22-aa332b224820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70e5bb9e-7199-4fd5-9803-015f033d6d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf7001e-82fb-44a4-8f6b-bdbb9fbfbf25",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9ff88e-9d7d-4378-91bd-6b50a24148fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf8959b6-c7a7-44fa-b3e0-a62bfe61e48a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db70dc3-4e28-4c00-961c-e9f6b68a713f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6c37b61-f9a9-4cd4-81b2-3c14fc886746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de35811-6c47-4c81-8489-13c1e179d0b1",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3298ff-326e-4cdf-91fc-7acb225a5ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9bd4689-4bef-483c-9b70-a435ca04821e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e102f6e5-af9b-49ef-a06b-278aebf215e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ccb58c-7125-4a32-b60a-9e21eb95a459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a325ff-cadb-4b4d-8bf5-60a1a7a82367",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1a6291-1618-4c76-9136-c7c8513c92e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f0f54a5-65df-4eba-8c17-89ffc54ad2bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179d5ba6-6b08-4374-9822-6ba6b1b6346e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "011e0046-0014-4f70-9703-8f1d25afde39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52457846-b67f-40f0-9013-a63a08516297",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a520dfe5-03c3-430f-8624-7de57c624e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb486057-e199-4bdc-a396-036ae42a3a49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ddb42e-fd5d-4a65-90e1-553a76261b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb0f27e5-fb84-4827-9de8-060b01355794"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ccd9d4a0-1c41-48e2-9c98-bf1dd8e824c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "80d9bf22-65e5-4f5e-bca1-178a9e3a3562",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e588adb3-9130-4022-ab70-1f9ecd70bb03",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "10d045ce-7510-4615-8fe6-36af7d4a19da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbb85d9-159b-4c5f-a127-b059cfabf7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "168c3570-875b-434b-ad14-8e4a5e44eb3d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c71fa9b3-ed2a-412a-b220-d6524e9760a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "412b529e-06eb-4654-b3c4-f148c5d91f95"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb5c2ce5-1346-4e9c-a75e-5301f9a67464",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "390351fd-1fb3-4f54-87e5-53fe92b02934"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4b8d728-6140-4556-824c-335e54590499",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "778f80c8-d130-4ffe-b57a-275a302fa70c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b8e6bc2-57a1-43c8-b388-61b67171f931",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e133feea-b256-4647-bd8b-fea1a8659d36"
            }
          }
        ]
      },
      {
        "id": "333e8318-2933-4add-9d5b-fb656c0277bb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a54681e3-13db-49fe-a687-83b9830d3887",
            "name": "Negative Testing",
            "item": [
              {
                "id": "11ef6589-7859-499f-a64d-68873bdce7e8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "628c2fb3-c694-4dfb-939f-7be89b33351e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23e3a9b-73f7-4689-9789-4a89c598e760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ef20476-0d70-4908-a6e6-1cf2bcfa687a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58534de2-ce73-45a1-b47c-d152ba92661d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e27fe3-2f64-4e89-91e4-9501c8680930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a9f4b05-4300-4f43-adc8-5bbad1df16bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee37c04-2221-4135-bc57-7605d14f14fe",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b61f49c-a969-4fc5-9732-1fb675088edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc366cc3-8467-456d-b990-38f6c322fd11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1200ee-f344-485c-9fb6-2f0a237bbae1",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "491fdaaf-7300-4759-a353-782cde61141e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d330123-a37b-4a85-9897-1f4764ff7ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca784b9-7dce-4c97-9b6a-f0c77a15f1a4",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e5e098-f598-4836-8789-5628061a6a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e45862d-4eac-4989-9da6-ae42f14bc094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c997b044-6e60-4b21-afb1-460cb7c02658",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a830ff6e-7fa5-4a38-adf5-f1542232cf72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa2178e-b815-4263-a2fb-fdfdd844dc26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f93ef7-04d7-4e12-8fc6-4f0c193060c7",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8dc1597-433f-48fc-a68f-d8e6482e742f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb3416ad-2881-48d4-a70b-619d85c06159"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c628eecf-b8f1-476f-a0e9-a5c303abcab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f04e10b0-a217-434d-8e81-a3f439f3071d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "781f3183-d363-4747-ae11-4a3de710ee6c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7276a4a-8d5e-417a-9f03-737b0cecc836",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "196d08ee-682d-42f0-8fab-82f50f593236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51117fc0-91d9-4064-a10a-81472e1d77d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e036d4d6-2632-4438-bd90-a908d58ddc8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97acf4f7-aa49-453a-b15a-38fcf4132a71",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84446230-d7b7-4d75-bbf4-69eea457625d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f8b72a2-525f-4799-bc8c-24e327c89a21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "954f968f-c1f3-48e1-92ac-259fb93bfbfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "489b73ca-4f79-4e61-b72f-939bc741ea4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e83b19dc-68f8-469c-85a4-9c88cfe64c87",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f1e9c0-3cb1-4d82-91dd-0c89636a38bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68f0db7b-8f5c-4d53-810b-f01420961594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7688ef2a-29af-4460-9f3d-a0aa7c46a3b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef0136e1-3943-4487-b4fc-22aac25ad999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27bebcca-1c06-4494-90d0-6d0aef020e3b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d872fca4-c68a-4c05-83e0-98005c727945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4adedbfa-350a-428a-9de4-ec742a649102"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0a0d1f-2bca-48ae-a177-f0cea74aa009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f56790-cd59-4fc6-9d01-c5e11bb6902d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f56dc391-b48f-4f44-b362-7e89652d48a7",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361743e2-7c49-48d2-8363-55e6d0931fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f56fd2b-22d6-43c9-b391-f940aac0a822"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1099b2-54d6-4a2a-a0e0-22b9f992e9da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daaa889c-6ae6-450c-be1b-99c47aa131c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9662fe6-54c0-4ad7-8432-86a236032581",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32424151-ebe7-4bab-8187-79e05fd5b8e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9741b7f0-b264-4517-b261-557ef30954a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "238cd89b-1f45-44c3-89d0-00d999832dfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50b92685-1821-4359-b94d-57047da08f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8625d723-45c0-4ec4-b392-9d6fb20cc90c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c30366-376b-4a9b-b81c-233443950ae3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dbe644c-a806-4399-b6c7-66191db8ee8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a06158-9194-424d-80d0-3cc61c58d474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2c74306-b849-407d-b151-96c199955477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6e18e4-92b5-4dd3-a21d-6ba1ac788f53",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c726d5de-756d-454e-8e41-31918129fee0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40e9e455-a751-4995-b7f3-ea5a803676db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb76711e-7772-4a62-bd95-9c7af0e76454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a3f06fa-dfd0-49d8-985e-8004f880879f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4eccbc-be2c-4899-a401-7de44e6ffba6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55449caf-066d-42a6-a7ca-29340f9c027e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3465ebfd-e563-41fb-bba5-f519fb9a17ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f736ebc-77d8-40cb-8ebf-0f17afe564f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d42c7d5d-df80-4b2b-93b7-aea1bd90fa74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851fa635-b3a8-4703-bc5b-0986b469494e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5980d2e0-c7b2-432f-a6cc-6bdeccbf7608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed79b68-a01f-42bf-8380-7ef777bf4c18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0676734-6460-41bb-8403-98a626bc6d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e094b07-4b05-4157-9734-d1d7150cae88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c998147-40ba-482d-85e8-eff89a288a71",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2d5d46-7c29-4ab9-9872-a929e30b7fec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c0d9c52-761e-496f-87ef-21fda96d246f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f47404-fef5-464a-8ede-f932a0a3cd2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ac895a3-6c61-4aa8-8e2b-2958476764f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390f2346-0a40-4606-ab7f-b9c1e71ba617",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee914eb0-88f6-4b42-b7d7-2d2b592be630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b574215c-aab8-406b-a587-12850d6a1130"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7074913f-7880-41b5-8239-01598d2f952c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad86c327-a98c-4ba3-8e68-c306806d10ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61cba2a3-3dcd-4dfb-8db3-1d55a5b0ee06",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a297dc-69d6-4da9-9215-b7ef4260372d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e09975-86a1-437d-b65e-4df19967bec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cee58e7-ec2a-475d-ab2d-e5f0bd8616e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ddc58f6-2b84-4f33-aa93-dd57e7593ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "178770e8-c612-4cfa-be89-05799cb7ba85",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a7433a-e612-41cd-b60f-52ed7409e531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b44fd0d7-5deb-41ad-82cb-8461f9f26e37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73d33ec-dffe-462c-be73-3195901ef2ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05de357b-e5b7-4f64-862e-95ba6fc0e72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370cc1b0-0557-430e-8035-83780895fb60",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e204ba-11e1-4d7c-835e-e5ee082772cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b460da69-42e3-4e83-b4e4-75308ddffd8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba9c89c-8bf8-432f-b7b6-f1e9c44672a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c5ddb52-0248-4c51-9bec-2c3c7336e2a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5659230-c589-430d-955d-8dca7433c1e0",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3f6667-1f6b-4400-81f2-c09f9c89d8b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a319710-089f-4cb1-b0c8-4cb5b408d05f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1fe820-67bc-4745-97ba-cb70c9680792",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02d0c804-dc68-4bb0-b8f0-2ae9cf17c2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd20242a-8ea2-4a5a-947d-65d99d68b49b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422a9320-d2f7-48f1-a9dd-5a05d1cc9b00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ed12744-9c6a-45a8-abf4-84af561d3e72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2460bc72-9192-4eef-8326-96b4a44a559e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f118eaa1-2674-4dd8-b6b3-bc8553a80963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f880d227-0a59-4f20-bb55-a466c122f574",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ac4736-f031-4ea1-9715-86764696fc3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c4a7d63-5091-4b64-8e7a-0f483d0b0fdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd6a6bd-0953-4120-9c93-dda676794af5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef47821-d028-4106-adaa-659d08f4831e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f20c3b9-4076-457e-bfd5-1a4842aca1ea",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31869538-e339-4803-9998-cf5803a6f625",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb056f29-2c2b-46b5-9725-cff9f945a891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36dbde2e-f382-4db4-aa1d-09327e023f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1e9930d-ea8f-45b2-8fbc-b1b28b128871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae88a90d-3bad-410d-a7cd-7833ae6ea28c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085f25f0-e69a-40ab-a320-3900c84269c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78ee59d5-4007-438d-bcf6-b0acb33555c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43733d2c-cb4a-4c06-9761-9572fb477830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83071307-373b-4e8e-9687-8d8aa927eec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110c75ab-613e-4898-919c-22ace486c100",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e29a32-a3f9-4647-aa5e-b0cec8123aa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e966eea5-3025-4332-8adc-745a9700651c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6820b709-5667-41bb-9b79-151c0bec95df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "200aaffc-7052-4bc2-98d9-a3b1ec7d6124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6c4585-aff1-493a-9889-f8fabb02f60a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97aebc1-603e-48a8-8b54-25f4633ba1c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6818281-449a-41ec-8c4c-6f67981cf162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a50a087-615e-4565-8730-98a3c4f4289e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fbe8750-f070-42a0-a710-3f9310fb6bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b709fc5-60b0-4aeb-8185-b6324281fac1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0de6da1-2a30-4dc8-83f6-0827b4ab1462",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19b69a7b-3817-4ec7-b074-4ecd0fac37ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c094bbec-ecdd-41be-bb69-16432d058368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ea08cf-a7c1-4b24-a053-633943529460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0019ce8-4c47-4390-b88e-e846276a6f56",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4980b945-a135-44b7-a6a0-8b4877236731",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7144a5f5-869b-4a4a-9d1d-f887bb157343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b4ad60-f98f-444f-afb2-5d4ea3bd91e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed9d0717-6d28-4383-8afd-170e0531ef97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba147cb-1ab0-420e-a60c-2096e23113ba",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b4ea52-e620-4f86-ad22-94002773c057",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c80420d7-7dfd-473f-8283-ff8b9896adf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4593680e-7303-4d21-88a8-be8b20e1223a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c811b7a4-47c1-420a-8135-c3eb40006fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88df45d-a40e-47ce-9661-a72f04729e04",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ef6229-e448-4a67-a9fd-09a451941461",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51173e6f-0fe8-4827-bae4-ce242df65f6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60f9195-1bde-43b0-9c13-5c6940569ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "898aa0eb-575a-4c1f-b319-e3ea8c592018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f939d4-10dd-4d13-b10c-1a8561240715",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf196f4-158c-4358-9b6e-cdf249a3fdaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6b6776c-10e5-450a-8793-abcc3393f144"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e46a39-aab3-47ee-a4f6-7bd8fc9a3e3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1541ffaf-de44-476a-a316-de0a5cbd53cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530141dd-6a45-461f-be55-44d2528ee501",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d580938a-aa76-4619-ba41-ef603d18fa80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1720a547-d8b6-4d0d-80a9-952e1c51a123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b309e2d-3064-4a5e-a99a-88f23f9d8f43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0887f5a1-0cfa-465b-8d23-6ee309305610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504f4243-c39a-487a-bc5c-6ef3a551727d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8969cf-cae0-467d-aff6-d1682e90d904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e817b17-162f-4a23-a41d-a7071d8bb29c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0553fb8f-fcbe-4489-bcd3-9fcdd8e81b03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c4c1e8-6726-4b3f-9e9a-66970d8e2ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f10f64-3042-4a62-bdcc-df6d683ac7ba",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5142a38-26ca-4dc2-906b-37377d844092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b3d933b-615a-4961-afed-43bb73cac0d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8975f3f-d49f-41b3-b20e-d71f9d0d7351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e14831de-4e30-40fa-a19d-cd28b6d1a595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37500966-5a45-4598-957d-84b0aff39cb0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f9349c-7755-4b43-b0fc-0220b2af93ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "627c930c-a4fc-4ef0-a069-06f0887b603c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d8634e-b6a4-443c-9b33-cb704450b911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "776df001-495f-4607-b6f3-e618bf04107e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bdeb533-e4a6-473e-9b0e-9c5215971e4c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b58f56d6-8584-4769-9555-7b6671046c45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1678ece1-1a6e-49e1-a7dc-35d81273c49c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32d5bcc-2b17-4701-a442-ce66ac0a6cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec31f7a4-3ddd-4956-90c8-b2b072c8d3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e3870c-cf2b-480b-a077-9923d25a2323",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7dc10a1-f6b8-49b1-b28b-0f83d902ce20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05fda74-2860-47b9-8cbf-e3e277ee627b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b15095b-97ba-4c44-9e7f-45f94cab2135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70fb50e9-3a5e-43b0-9f88-95ec4e439eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20dec51e-e8ee-45bd-8c8e-7e61f8fcac66",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d17ff2b1-e4e5-48d7-b8da-ea46cb534662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59498ab9-56f7-42d3-915c-1eb740d08a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fb456d-3c5f-4e56-8488-2e3e4e6d25da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ee7fe3-0d3e-45ea-bf93-ec2094fd16e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d49f0d7-1769-4de7-aad5-a37493ba8983",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b19c79dd-b0d6-4391-9fc7-6e56937b3340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78f49d63-0d39-461f-bfa3-96ebbfdc8fac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a61dfcf-63b4-438a-8138-111822c83085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c167908c-23a1-40ae-9116-19d9c26036c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30238f9d-64ea-4c5b-baee-e27f2b924bb1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b498f467-dcd5-403b-a44d-50f82b603ef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef1967d0-cce2-4cd3-8702-cc7884e4ea9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef1dba90-c2c8-48ea-82f9-9bd501e821ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54fe61aa-50cd-4857-bd3e-1f37b5c20446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5da8739-ca2d-4259-930b-892f566df8c6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6e3e0b-5963-4503-bee3-98264a837e34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37fcefa1-4f0e-4403-b517-657ad10eec9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02494d32-6212-4b9c-97e6-d5edf57d432f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91e91056-1b71-47e7-8d19-bb6f549c3920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca681bd3-6561-4458-b8e9-4317dc9ab222",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b69bcad7-0234-4fab-b561-ff7eb1f144cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50a06803-c0c2-4531-8330-7628eee77ee4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60adc973-21ed-46e1-8eb5-5879f0e682e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b65de9f-ab48-4c0e-8530-24d9fbb2d4bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c519e5fd-ed0d-49b7-8da9-24e0291c7960",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36ce9cd-6f2f-4c25-bd8a-aebef4f3c4d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d8bfc94-360d-44c7-9051-8fca0df84300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31170734-2192-4ecc-bb79-9f4dd4d5e03a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2768f9-fd12-40ae-b775-8d26c48be261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac1ad83-e6ec-4fb5-8e9d-17e321e51a93",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37619a11-85db-4afc-88ab-b34baa73f89b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98d6a536-9d07-46c3-aaf1-cabe93ed4c2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1925b537-cd11-441e-a58f-7f6542921aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e04f06-bff2-45f5-b503-21123098c167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d1e1c3-159e-418f-92e2-5b4dde5ba5e5",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bda887d-4784-4312-a1e9-4884626b223e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab32b66-0639-4384-914d-d44add65b636"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea045afa-33b5-4453-a711-5e8a372d35be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf00d599-f4af-4dc3-9d6a-6471a5cb18ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1f9260-a0e2-4e01-9d04-6f5ffbc0d2a2",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c77cd13-32db-4d53-a4ec-646e8d1657eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eebaed2-f8d0-44cb-9c20-a01783179fd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1c7410-1c83-4dd9-8e26-de39664be64e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e2c9f62-82be-4db8-bd3a-482d7d820dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c94b9f-7dc0-416f-b3c8-401a7233a1d9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de96aff3-75c4-40e6-be72-8f3de3fd80a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd65f6f4-8c17-4fb5-88ad-37dd652acf59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ecd7d04-88e3-42ed-923e-008995975530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "692d5559-8c33-4c21-969b-df7e7eec9442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3a1578-c74a-4c20-9f83-38e7589e02ca",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc6dd31-e0fa-4a1c-b33a-72e9c5c4dbae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7a696ae-e782-4da9-bda3-07fbf3ae4395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76cff552-95b3-4606-986a-99cd3fda3c5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea5815a8-5b41-4843-ac4e-f06ecbba8297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c571a0-1780-427e-8dac-7b4907bc2453",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0935ba-8c97-44af-965f-36de9ff56a52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d0061a-f1b0-43cb-89da-cf667a96f3b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "208e797f-b14e-4a2a-93ea-add316943f58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3135df7-5e27-44e1-985b-8769833acff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17cb1da-6a5e-43a5-bbb6-95f8fc37c6a7",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b660a96a-3efd-4094-a367-f11cd2a8e071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f839447-a36f-438f-8018-47a95b923a9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff92053-59b6-4b7b-8bf4-43e53945272d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a1646d7-1e36-47f0-b333-b03d5d85eb7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0d0a21-6bd2-4990-b299-2001f1162a77",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9f50a8-fd5f-44e6-9d80-bcccb8cb64ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04d308c4-7f48-4092-9e1c-479753278900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ec6f23-b075-4c90-8455-c362eef4f1de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c46ab812-08c2-40d8-99fa-d770a2cbb04a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e1a8af7-f10a-492b-a0b7-18d4f35b5867",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4877d3f-9117-4da3-b5a9-130a244abfd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "277e51c3-8f1d-4ca3-b6c8-3fe5e1b961d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a92007-0303-4e91-8be8-f2d0c6744153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ea8ea53-004b-4811-8e36-14b047251365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de5035f0-2a3f-4ff3-9358-89c28ef1031e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71451bdd-132a-43f0-b4ee-adbf7b768f6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c2ceb3-f620-4f27-812d-6a933aa5bd00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38902c9-5657-4d0d-9896-5f299b0cc328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efc93203-cd41-4ec6-84fc-d09bc6dd380d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98d9f42-0aa1-4e9d-a3ad-42b7e3715c57",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d35b47b-5bf5-41e3-9cf9-e7512680d92e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c6ea26d-bcc5-4d03-af8c-7a9822e2538f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c45878-1d2b-4a9c-a0e0-b61dfbd29b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6792998e-f24c-4bf6-a0f0-a7114c815a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a255ea46-41b1-4221-9bb1-d9b6c7252d8e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781319b6-6f52-4c65-a8b3-70a0335d05f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59d134a3-ebf6-4d4d-8046-80828db5ec04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea2b20c2-5365-4864-baaf-94942bfe87ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a8cac4f-92dc-4f16-8e0b-f86ad0160a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58d5e13-99a2-49ff-996b-61a2b4a31374",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07687234-afc4-4a09-9b33-5f81ae8d7866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80325fbf-9975-4fa3-b6de-49753a9a8106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6466b72-2f0f-4536-b091-d174851f1442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88888cbf-c3a3-42cb-a3e4-02d0dfd36c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012882db-7363-4613-b903-1211da2bebdf",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b39c5ff6-f955-416c-b8f3-75fa3a3c3784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0747a89-038c-4a3a-a822-dbec41ec9a60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7427f565-a8d5-48f2-88a9-2333ed2badbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87585b6f-153e-4b1d-9b74-af95866aee23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754a445c-5ed7-4d0e-9285-f2a54b6167b9",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ff7473-0623-45f3-a756-469e82b6763a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9941f8b8-ed52-4e97-ad5e-eb39be5d1171"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d342f499-0aa5-48c4-98d3-6f9fd4ec9f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53543d9b-2025-4039-92d6-8451743221c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0222012d-0d53-4077-b9a1-05a609aea807",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02205fd-d5f6-45b9-ae70-9a73990177b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13eae5c8-fdeb-4bc2-84c0-0b3e5c8ecc49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf48de8-92ac-4b85-a670-ad705d220014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9c13152-9f2c-4d6e-9406-03298abb4439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a67882-e5af-4c57-aa8b-14bfb2fb71cc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b89f867a-03a9-4625-aa06-a155b2d9ca82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "372d5836-f09d-4495-86f3-a5b21a1869dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8548c2c-9137-402c-a074-d23947d5cea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5654f620-6989-4493-a55a-44d5d96012df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37664b13-8689-419c-8edd-443aaf2e6882",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95987e3-75fa-47df-ae51-c98885c50a10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35829bfd-7685-47b4-835d-376d3443d1e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6502afb7-df21-4047-adaf-e9ce472f1b05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9317e07c-6d32-42a4-8251-d26607941013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d38dc8-6bb1-4323-b053-cddbaf694bf6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1550642-bcc8-4694-828e-627f83aa232d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2826b706-6b6a-4e0f-9847-2a385c2def94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e48885-26b8-4aaa-80fa-5b9842d3b8cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "105e39fb-d745-46bf-acbb-78fc51741079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89df10d9-ef03-4966-9b3d-528abdcb64f6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f40b51a-0d65-402e-a678-89bc712a5fc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab94a269-b594-46f8-9be6-89b9c0eaf568"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1639cd7d-c785-4475-890f-31f5cee60604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2425712b-66db-4cae-99ef-7f0bc1825cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeff0580-0fdf-4e6f-9613-adc2fff4b90a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b7153c-ae1d-4938-b776-cc145a5dba6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b332527-7042-4248-aee9-ed024555b4df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eba66e16-6bf1-4791-9c72-a53840510649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70036437-1228-45e8-85b4-ae97dc94787b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a5df3e-a686-41d8-98a2-2366cfd75280",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a456adf-bfc1-448f-aeb0-c3bb12766ca2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8000bfe0-0ad4-4df5-8b61-7f3ec1a5984a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7baccdb8-e9fd-4cae-bb79-095d53fff8da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c95630b-b80f-4d65-a9ed-48951dcde748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e16970-eacd-40ce-b12c-4e318e52ff03",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6f0c03-43d7-4f18-ae87-b049307f4a59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee3a600f-0cc9-450b-a6d4-6a0561956d9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b708e0-4927-472f-8799-74ff79469d4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c3de4ed-3c08-478d-a828-38afa82e1e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c2c596-1494-40fc-abd5-7e22bf0d298c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2268d30-fa89-4074-89b4-bb2990fbbcc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ce6ae6d-f74b-4eb6-8a80-30ea2c98c64d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9349cfe2-d73a-42ac-9019-0d02df490c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "513d2504-9737-47b2-a7ac-c0aec42e99f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f3553d-cbe0-4c5e-97c3-6977ea28cfc0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71d9219-f104-4264-8b61-38a5c9db6715",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7936c8ad-132f-445c-ae82-2a4a3640aea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb883cf-3bd1-4680-b3fc-877cbfb422ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15b750f8-d35c-4453-963e-829db39f6448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9736e84b-b1d7-4db5-9272-a76b5e93d95b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42ce190-782e-4d39-a610-a307b3a00b41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a92374e-64ca-48c4-831f-0cd1483e674b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa86b90-e1fd-4390-8574-eee223e51228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af3940d2-fc7d-45a5-9426-1acdfc76ffbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22076fdf-cb5d-4230-afb3-2b11cd72d367",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb741494-6251-4d24-9a90-f84cca759e01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73a06879-d604-4689-ad60-7b599f63811f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a9b381-da31-4605-b670-c31d36e79e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fb319bd-83d9-4c6d-897b-24685640ce22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b014a7-e9fb-45fa-8bb2-0fabbc7e5f38",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f34367-ebc5-4873-8916-479f730c4612",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34bbf66c-4f46-4b05-84be-4d340af91520"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d13a18-0156-43ec-b75c-433a0a1cb61c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b7a992f-601f-4c11-be03-4dea8ba493c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c4c8ce-2e63-4511-b8c3-429fa79c86fc",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ec0dc9-9478-42ce-9a9a-4ed52814aa52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03c9edcd-93c0-4987-9037-a465673388b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9138d86-44f8-4dea-b8ed-e99c6c204f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0f741ab-a995-4b36-aa6a-a02d1ed2a1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34832b4d-44ef-4270-91e7-72cd95abef25",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f5fee3-720d-4b10-a177-4488d133e573",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51193ae2-129b-41de-bf70-a263e97b52a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64523205-a688-41d7-afce-a09208c0f4f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c909df1c-dd38-4f1a-b367-94c8d0a86236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1098a540-a751-48e8-ae49-715db7d49cd3",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c863a741-500e-401d-9d7b-22a12a54457f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df4c5252-9191-474f-8359-7adcc4bc7467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa072ac8-bca1-4839-88f2-0d48b19af3a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f5cadc5-c3c4-49c6-b552-370e4e494677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8781ef89-6c6b-4c2e-8144-1c3cc67c8dd9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2084477-1fd0-45d1-8921-ae72d45e92c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc9173c6-80c4-4bc3-88b8-08c8926a1659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "972b0b73-c9c5-437e-b554-61193981f505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e6c46a-7da0-4748-8dea-766c230a4606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357d06ca-a457-4b4e-a54f-1e48b7b238d5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2515153b-aa28-492c-897d-218b9016c28f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c322fd81-2c22-4d7c-a8c8-536a427653c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33bf515d-c564-47bd-8c19-f215af605af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb521c75-65c1-4e75-a846-730a7e7d4986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24019a81-87a8-467c-880b-9c31580e1cfc",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b8aa69-bb64-4d15-9e9b-30ad4b3ee066",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81792f9e-2f48-4db8-afe7-63b95bf34410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "675d5468-3e84-4bda-b255-0f1f923cf159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517dc084-db10-4966-98be-7edbe054201e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b78c40-33da-42b0-a294-d304189d9db6",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b850a9a9-e2d4-4bc9-b2df-3ad9256a223f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e2920d0-7d36-4003-94c9-fe1e23f1f8f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ea4aea-076e-4d95-8f7f-f3a9398a06cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3bd48c6-cdfd-4ef4-ae5b-a7ba98fa465a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba81edba-13c3-4c43-b505-695eb17719a5",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e86efd-6b39-466b-abfe-05739e91378e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb60cc3e-721a-42fc-babc-2d9ade2509a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15dd540-3115-4af6-831c-97d72744fa99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d19b805-15ba-4e4a-9cdb-e93cd2e9e886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6999f1-fe5a-47d6-8075-48d4b09a73b9",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd61917b-9f54-4e6f-abd1-e56caacd423d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8adcc04f-c7ab-4584-9435-4d7931a4ab17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e34c608-4e31-4625-b31a-722887948ffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44f30766-3344-4f74-abd9-89cb498e4b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38eb85c3-fd03-4f84-b5dc-0b5bed10cbc4",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67d16ce-3031-48ad-bd24-634e716c49f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7a6bc83-fcba-420e-91f3-330079b993ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e32e6b0-c966-4551-9a40-4e51afd704a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02e5bfab-c1e4-4cb7-8a38-b409766cb07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81560557-5497-4dcd-9457-488923be796b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad67f54d-77e5-42d7-b1ab-59c8119eb008",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44caeac5-dfd9-4afb-9d2e-dc059f527d2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e2076a-af9f-44f7-bd73-94af3d4fd7df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933b0175-df3e-4453-98b4-3b9d1c9efbe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb3e301-2ef5-4599-a94d-bb9650903cc5",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ca68b8-ab6c-4527-888e-ef6d5ddacde1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ab7de7f-8c2b-4e99-a089-dbbc3e728f28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a92912a-93c6-4505-9a6d-9d3b481a02bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e24b642-ee0e-4378-b487-e994e2c81c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c15240b-2065-4443-9042-734df8be4c3f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "463bfc13-fa2e-4283-84c9-0bc4a65c1f03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74f6a94f-7f8f-4689-9e02-27eb0be7d886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8532d37a-313b-486f-8a3d-5e877838cb75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fc7de68-aca1-4dd0-b57d-59cf7f69f236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0166c69d-644e-4edf-851b-87d89e9f8423",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1533ed5e-4a3e-436a-ab10-fe7fb7ac90ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddd3fcd5-7acb-4074-bc21-8ff35b5fb0a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9135ad-42ac-4c68-82e2-fa20a5401079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61ebaf09-4481-4d22-a26a-22b3623994b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "affa5246-6a37-4ef1-a246-18fcef0aa2ff",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b95f11b-9640-408e-b923-3f2ca12a4ba8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c4ab8df-4f94-414b-afa7-0d5546f51557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9546d3b0-0129-428e-b8db-34d80845cb5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1456594d-c97e-4888-a98c-89722a72123c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "915fdbbb-b4c4-4491-a6c8-c85cd5767457",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d295fb0-3ac7-46aa-9471-88292f85f976",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fad17cd-07b2-4501-ae7e-689ab7d4101e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a4453f-c8a8-4fa1-ba86-53b7f6ca645e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "418a7109-94e0-4fb5-8f46-b7e02f1daa58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07557605-f09b-4197-b7bd-273d558ca32f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3095965c-57bc-405a-98ea-b28db8e3a14b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca905dda-05f6-4a97-86b6-43087aa7af2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad43d79b-69b5-42ac-aa3b-429c83a5d4a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa8d047f-ee16-44d0-8005-6a27fa42e0e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8588009a-2fdb-4c54-a8e3-9f3a8a48728c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4984ab0-2345-47b6-87f8-d78ecb270540",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b697ba87-1d74-4044-b439-bec618de0d3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e21044f-2a37-4dab-bfea-6d4769d68f74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85932d09-40bd-4000-9e26-8148c0ae0a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7072508d-1069-4b01-8246-39d0aa61cb4d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "428f48a1-4473-480b-ab7b-0d36f4ba4e32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68962c4f-3074-4867-8742-d3d2fdd66cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc40e0f-fb6b-4435-bcba-0d6242c631aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbe12c0f-5756-4086-993a-39219b3ac1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bec4336-f4b8-4744-aad5-985013d8e183",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba990392-3198-4ec7-8a56-96cdbbdcfed9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93d10d72-bd33-4269-a149-3583325990e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "528dc9c2-caac-4dfc-a5f6-5afcb9a73d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e11d4679-ed17-41f6-b9e8-6c088a4b491a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336546a8-ebaa-4ff5-a722-ffb4b4a86094",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a276fca-e85a-4c66-8793-e8892e598a4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8f9db0c-2f1e-482f-9897-e0e57a91d434"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96341a8b-1422-4186-848b-ddea77d10de2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "136ec81c-60b7-4a79-a1c7-db54b3bc5b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d89dba8-74bb-4419-a926-16b2b0cfdfb7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9224e18d-f815-4d2c-8852-cf3fc0f53442",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07dc74a1-32b6-402a-ab71-66d7afb6d970"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "babf0f18-1a05-4ead-ad67-c6f92ee28ae2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b362de0f-20d8-4d2a-9cec-bc36070d4d80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e65208-325d-48f1-b1ca-99f02a41f21f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38d7103-2240-4df5-b8ab-9c35e5f3271a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fb108f7-07a0-4de9-adcd-f515cd3a4f96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3fa348-be61-4c51-bb79-3a0cdca5bd14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40f7fa08-01d4-4ccf-94e1-2ed0c73eb494"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6842d599-b93b-46e0-83fe-1ceb9e4f8ba5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9deb2169-d6bd-42ce-864f-1f3dcd2eda9d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c863bb84-1879-4555-ae2c-64f1f5801599",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e305aef-545b-4507-98bf-952345255e9e"
                    }
                  }
                ]
              },
              {
                "id": "a654637a-f6a1-45e2-9641-09fd23e70433",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "76031d2e-5c91-4cb7-9e52-4b717a0fc537",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8c2c30-e612-4c45-971e-3e18e112150f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ca127cea-5788-46f1-9653-cf02a3319045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90295b1c-1a83-4ce0-bcfd-834d232bd8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3a34456-6729-431d-8f8a-d0d4aa627ed4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8cc34819-8c0a-4326-8e89-eee9361f04b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9938af4-b612-4654-a820-7f5c03017ab5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c2931d1-524f-4fee-95c7-5ba7f891ccc2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "759dc950-b28f-4899-aab2-bf588a74a890"
                    }
                  }
                ]
              },
              {
                "id": "2c3cb512-225e-48d5-a2ac-640b03748e4a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "10369827-f60f-4703-9d4c-5f0524f298d3",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ffed3c-c301-4902-92ae-42975ad60c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "5d02a21f-212b-4989-b7a1-b08a26381f1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1646a6c-347d-49c2-b642-09f6389daab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76d7e88a-670b-4c76-801a-c6c35921ddb0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "049dcede-8c8d-4c53-8df2-eca6e828a7f9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "610c22c8-bdf2-427a-a14d-51017aee5804",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "843b97d1-84cd-4ec5-a964-72a44c926c4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b5cc7af1-2f10-47e5-89f0-0d8ac175d721"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93dd9000-bbd1-4439-b971-700ef1e3c667",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c43b1cc-4787-4916-954e-669197511777"
                    }
                  }
                ]
              },
              {
                "id": "1957f3b6-d30d-4df8-a203-391c7f3a9da0",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a85fc35-519c-431f-a57d-80f1ad04b5d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c068d94f-0ab2-4143-a5bc-635bc40f84f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24f9650e-d9df-4c95-8b1e-8830ec1d260b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71486249-12d4-43c8-9038-4335e88c82f3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6e1a76d9-cfaa-4a9d-95ac-062ab9644c63",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "466fcfd3-97e3-48f7-87c9-ebcd25ec1dfc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2b6169fc-7705-4d6e-920f-733c2747245c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7e7c354d-fca8-413b-8b25-819ab2634882"
            }
          }
        ]
      },
      {
        "id": "0457a493-0341-4351-96fb-b947999234a4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a7b82295-0d66-4eda-99d4-49a07bfa9048",
            "name": "Negative Testing",
            "item": [
              {
                "id": "25f38d3d-56ce-4ffa-b17c-7476ccc40f96",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "173a9336-51f4-44a5-9c91-bd4709c742aa",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50acdd02-23c4-4a6f-baf1-7e35f59eab32",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "32bd27d3-3b0d-49ff-928b-4be2b2d45265"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e31604-0cf2-4508-8939-c3aafd03811d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3b7db0b-4249-4a72-a48b-38803d105e4e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2be59b23-e8b9-4503-a645-212526f21ee9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "237050b8-96b4-4d5f-aa31-2f4667676476"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe0dd018-ae8b-4799-abb2-6ef175617c33",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1cd98c4a-1319-4c9e-897c-35ad800672d8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "88f16e81-2744-4fa5-a65d-d7fa6ef6e781",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3ac058d3-1c62-40fc-b876-0f9eac8d36c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8836e6d9-9563-480a-bdcf-22c99f9d203d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "530799c3-cb57-4dc7-a9db-42537397fb1d"
            }
          }
        ]
      },
      {
        "id": "19831a81-1694-4b25-9dfa-03c5f8a8ebce",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ce7a00bb-15f5-4f16-8a99-2bf65e2d5813",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e96db640-8c80-4052-a1c3-088124dc7c32",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e85cec02-380a-4a52-bfbe-29db5f09b320",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2093edf7-1ad8-4c09-ade5-df61be35efbf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c84080e5-8ba2-41d2-bf47-014376de9456"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "283e235b-f5f2-47ba-8add-7ac6288c640f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb2ef304-6c5f-478e-9fae-9a464bda9d57"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc4a2034-b474-45d2-9660-4fe0894e6f47",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aaf0d21e-3f19-4c69-9db5-5a8aee378a94"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ebf91f35-d9cc-4b58-aa0d-20ebf7eda899",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32d06d6b-48e4-4635-9388-964b011ef504"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eee667bd-86d9-4b8e-848e-141d2771cbc7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7944f274-cf5d-42fe-a84b-67b412016a19"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c414eeb2-16cb-49b0-91a5-3ed095713fa4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "54c6c9e4-f392-4f59-939e-a24d8165928b"
            }
          }
        ]
      },
      {
        "id": "e5b46cea-9383-449e-892b-feb50aca4752",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e464bc5d-57cb-43b3-801a-d393b4dc8268",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b2941267-4e97-4b9e-b59c-811951ce7e53",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e4d3ea47-cdc7-48b8-999e-69287bf96aaa",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4267ecd-fdc4-4361-8a37-8c7f8b4078b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f37b0f86-ed48-4e3a-a505-778cd56780d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57be56f3-2117-407c-9246-f99926d4d1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "50c3dbc0-303c-4d4d-a9e8-e528f7a34888"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3818cdc-a53d-4d42-99f1-033cae447e80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b71cf8d-6d80-473a-a35b-7cb30d4b7812"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcaffd60-bd86-4c36-abee-d252e8ced1b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "626ff430-0f58-4306-8430-de9f97232bf0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af24158d-efac-4345-b97a-d1ba137fecb1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f99f0f7b-c3ec-4b68-91b2-017a63c7b991"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0b9f484e-0ae3-47c8-b6cf-e579faf012dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d13ace6e-fb5b-46b0-b5cb-05135cf06e3b"
            }
          }
        ]
      },
      {
        "id": "317d2a98-df77-4d28-8d6b-5358d5833d75",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "308d36b0-b83c-4f50-bf59-8d4f9918f0c9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a816706-7f3f-483a-a157-0682b6dbf82f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3e7caa6c-9d0e-4462-80c1-952d2b3c5cfc",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e1ff697-651d-47f8-87b6-cb566b21a419",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f17a0e8-0e61-47f8-8750-b0e5a29fa9e2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 87
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 100.9225352112676,
      "responseMin": 11,
      "responseMax": 1728,
      "responseSd": 219.95708845083809,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1690764144705,
      "completed": 1690764185000
    },
    "executions": [
      {
        "id": "b9b4286f-6d18-4bf0-bffc-3a146a656615",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fd585d62-2306-42a6-bdb8-7032a6eb3655",
          "httpRequestId": "bf38ec7b-1ac0-438f-8272-49b8c1cb4054"
        },
        "item": {
          "id": "b9b4286f-6d18-4bf0-bffc-3a146a656615",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "744cd340-af16-4ade-8e48-cf2d6a7ce624",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 0
        }
      },
      {
        "id": "a20b04d2-9c4a-4498-b38b-7eace749b111",
        "cursor": {
          "ref": "0802dad1-cde0-4c01-890a-7cc6c17f1eef",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9865036f-8a3b-4a05-9ed2-e7b58acb0c89"
        },
        "item": {
          "id": "a20b04d2-9c4a-4498-b38b-7eace749b111",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7c22c8a4-fde6-46aa-a662-7de43221f80a",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "661f2ed7-a119-44ee-a69a-f37deb0991e4",
        "cursor": {
          "ref": "51961285-d152-4293-907d-e61e9378fc97",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "22598039-0cf6-42b0-ad78-91824ec8c00a"
        },
        "item": {
          "id": "661f2ed7-a119-44ee-a69a-f37deb0991e4",
          "name": "did_json"
        },
        "response": {
          "id": "8421f566-5de0-4bc8-a950-a64b92517f5f",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 1102
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6ddd9b-88e6-4f3a-b41f-c105ffb801e4",
        "cursor": {
          "ref": "9679515a-deb6-46d6-a0e8-2c4871107eff",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bca3c37c-f03d-4496-938e-398164c9bba8"
        },
        "item": {
          "id": "af6ddd9b-88e6-4f3a-b41f-c105ffb801e4",
          "name": "did:invalid"
        },
        "response": {
          "id": "6bf83739-6793-4863-bce7-3259a3198120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6ddd9b-88e6-4f3a-b41f-c105ffb801e4",
        "cursor": {
          "ref": "9679515a-deb6-46d6-a0e8-2c4871107eff",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bca3c37c-f03d-4496-938e-398164c9bba8"
        },
        "item": {
          "id": "af6ddd9b-88e6-4f3a-b41f-c105ffb801e4",
          "name": "did:invalid"
        },
        "response": {
          "id": "6bf83739-6793-4863-bce7-3259a3198120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4744b7-2dd2-4aca-b909-b6fe75f71163",
        "cursor": {
          "ref": "79e12e39-33a5-484b-9ba3-fb1b75762dff",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0acc2c47-c13d-4e52-99ac-b7152a8e725d"
        },
        "item": {
          "id": "3b4744b7-2dd2-4aca-b909-b6fe75f71163",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "55320e61-80d6-4d6b-8e10-b361db3cc11b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 101,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b27fff3-6f53-4230-9c7b-47bd69141547",
        "cursor": {
          "ref": "652ca7ac-6013-46fe-85a4-d460626f3f8e",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "50a0e4d3-7584-4157-a3c6-25fec5cd9a9e"
        },
        "item": {
          "id": "2b27fff3-6f53-4230-9c7b-47bd69141547",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b47d8279-a63f-459f-9350-446b47aa8bd9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881bb55c-4fa9-475a-a0f9-4f1738fd2e47",
        "cursor": {
          "ref": "ca41cfb1-8f7d-46b0-a074-a3741359a0e9",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fd921647-57f8-4392-b842-4f12ee1a566e"
        },
        "item": {
          "id": "881bb55c-4fa9-475a-a0f9-4f1738fd2e47",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "05053b03-34b3-4d8a-a55d-8d9672dd496b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4ee8b8-f240-40ae-b43d-26e96b2ff0f1",
        "cursor": {
          "ref": "3756ced0-9702-4bac-9ec1-99cea2ad7cae",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "08f10c6b-2d59-4b69-bab8-2bd6e3c8ece6"
        },
        "item": {
          "id": "fc4ee8b8-f240-40ae-b43d-26e96b2ff0f1",
          "name": "identifiers"
        },
        "response": {
          "id": "771c98db-70b0-4fba-bad7-d1b8e933fad4",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 1118
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8d9127-bb23-48bb-a8b0-92dd7e237bf6",
        "cursor": {
          "ref": "30ddb8c1-c567-482f-90e8-50f551eb76a8",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "eb6ef782-af8e-4c2c-b433-088e6dfcb756"
        },
        "item": {
          "id": "af8d9127-bb23-48bb-a8b0-92dd7e237bf6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1e9270b6-232a-4fd3-893d-0c49da29632f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633d204d-a29d-469e-8fb1-fe3ad179414c",
        "cursor": {
          "ref": "b74e2caa-49b5-4a55-9d96-068286d79cf3",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ae0eec54-6b5f-482d-8bd6-8c50facc3822"
        },
        "item": {
          "id": "633d204d-a29d-469e-8fb1-fe3ad179414c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8bcf703a-5542-4f0e-ae82-f2c9bdedc290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc747644-f8b0-4ccc-a4af-2bd8c98aa5cb",
        "cursor": {
          "ref": "71a00239-d31f-414b-bd19-a872d061a48f",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e8600a9a-c121-472e-97a6-21da5c11f2a8"
        },
        "item": {
          "id": "bc747644-f8b0-4ccc-a4af-2bd8c98aa5cb",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2222d958-a712-464d-a8f6-3b4f9b4c88ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c322151-d3b9-46df-a949-91d6d91b6804",
        "cursor": {
          "ref": "b58ec506-0115-4335-99dc-4429f1b94e5e",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "062074bd-9ebb-4d6d-b322-42e090ba3bd7"
        },
        "item": {
          "id": "8c322151-d3b9-46df-a949-91d6d91b6804",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d53f6c99-bc4b-4416-be98-c0bdef7ce08a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e417ff3-4d36-43d7-85f1-4a9fafc98fa8",
        "cursor": {
          "ref": "247865b9-d8cd-4436-9184-575fb921e3c6",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ae969018-1d13-4153-b07d-a41a78c62c45"
        },
        "item": {
          "id": "5e417ff3-4d36-43d7-85f1-4a9fafc98fa8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e008ee00-ca5a-4ca6-89d9-fd3be573501e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a18e67-2ad5-447b-9dc1-998e2d60eecb",
        "cursor": {
          "ref": "08d04f4a-d501-4e87-94fd-48e26c0abf24",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7782852d-1c44-4726-a141-4e350783fc01"
        },
        "item": {
          "id": "a2a18e67-2ad5-447b-9dc1-998e2d60eecb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a74a674b-dd28-469a-a4eb-521e9f16fe4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04dd0b4e-9fe7-456a-8399-8f1cde93b807",
        "cursor": {
          "ref": "990687ec-f99b-462f-80a5-2ac89a820628",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "aeab3f55-0fd9-405b-8718-5b292833d36b"
        },
        "item": {
          "id": "04dd0b4e-9fe7-456a-8399-8f1cde93b807",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "335ab1ac-1f40-4e70-8e31-19d038952b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c86b88c-82c8-4b59-95c6-78810820979c",
        "cursor": {
          "ref": "c9187fb9-5667-41fd-8f55-4caa8f8af04a",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b36c7010-d4fd-40d8-89e4-05aa75f598cc"
        },
        "item": {
          "id": "8c86b88c-82c8-4b59-95c6-78810820979c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e60dd196-b902-4be3-9f54-a6bcd7cee8bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85983d84-e07e-4fc8-8678-43fa71adf5ad",
        "cursor": {
          "ref": "01a356f0-cd17-4b28-8149-75b351778b88",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d9d36f63-d5be-478f-82b3-401ede205669"
        },
        "item": {
          "id": "85983d84-e07e-4fc8-8678-43fa71adf5ad",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b4997eab-db57-4d77-af54-d9ebf87f2f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88aed5c1-690e-4022-a547-4c2f42401445",
        "cursor": {
          "ref": "0a2d3042-bda5-478e-97e2-d285ba0e1fa9",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f639818d-3159-4217-8d75-548c583d6bd8"
        },
        "item": {
          "id": "88aed5c1-690e-4022-a547-4c2f42401445",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a980625a-1397-4f32-a223-8c1e2c5060d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25e6134-9629-4258-89f0-f10546f2eff6",
        "cursor": {
          "ref": "5a6b6f23-e972-4f67-9bb1-761fe1ebda38",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8c350434-44a3-4409-b594-f2d3458bc6ab"
        },
        "item": {
          "id": "d25e6134-9629-4258-89f0-f10546f2eff6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a62f20c0-b00a-4dd6-bbb3-2cadf2a0095c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0236c5ac-fa85-4492-a0ae-2b5df8526cc8",
        "cursor": {
          "ref": "607a0ad7-d57c-4d0d-aa13-c6e5dba73530",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "50c1902c-a83e-4721-b388-d7c0f75f1809"
        },
        "item": {
          "id": "0236c5ac-fa85-4492-a0ae-2b5df8526cc8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c2e8e6f4-6277-4360-8e4d-fb47c1e72e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4db1b577-85fc-4246-b25b-c7351435f155",
        "cursor": {
          "ref": "35fce081-3f76-47c0-b2b0-0a3db7836e58",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5f01e9ef-3844-4c8b-8770-c18ba6d2eb27"
        },
        "item": {
          "id": "4db1b577-85fc-4246-b25b-c7351435f155",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "64cbb7cd-fbad-40f4-8d02-828b78bfea61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a155b66-3641-4736-ba58-55faede6e869",
        "cursor": {
          "ref": "5328c213-0317-421e-b0f2-19e75de38517",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d5133e9c-30fe-4b58-8aff-18e40d00962d"
        },
        "item": {
          "id": "9a155b66-3641-4736-ba58-55faede6e869",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d608f998-4cbc-4dd4-9004-a6596f734a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b3532c-98f5-403f-b43e-785af74ef66d",
        "cursor": {
          "ref": "1f867c42-06b3-4dc8-a1ca-3edd7aba3ac1",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e85ead31-0fdd-4096-8a10-172f4dff4b81"
        },
        "item": {
          "id": "c1b3532c-98f5-403f-b43e-785af74ef66d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e597abd9-6110-4ca9-9d5d-9638bebe001f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e948470-e4a0-4b9f-8020-df1a3bcfea6f",
        "cursor": {
          "ref": "5f8f3a7f-5ffb-4fa8-9438-529ec805f8e4",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4f3cca04-a668-414c-b9b9-9bf102d7ae59"
        },
        "item": {
          "id": "1e948470-e4a0-4b9f-8020-df1a3bcfea6f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "08c9e421-c206-44c6-ac0f-3f949a97f415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5648ebcf-7b19-42bd-9a91-c119b7898558",
        "cursor": {
          "ref": "18001102-2f08-44f4-9d82-a194ea411c10",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "78da6c99-6664-4753-bed7-fa09cde8964b"
        },
        "item": {
          "id": "5648ebcf-7b19-42bd-9a91-c119b7898558",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8965feaf-8550-4d34-97ad-24976a8c7bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb8493b-5dc2-4978-a629-5cf6bf1fd8c1",
        "cursor": {
          "ref": "9951eabd-6b0f-46c3-b7db-d8bd48f28fb6",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b92b0a85-1c7a-4c65-9b8b-0e6e1473d82d"
        },
        "item": {
          "id": "3bb8493b-5dc2-4978-a629-5cf6bf1fd8c1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7b514ba8-56d4-439d-ba77-7fd6a8f07259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c50762-abef-4a59-ab0b-44416a5b992e",
        "cursor": {
          "ref": "ec6ab197-f633-4a7c-a1bc-017d05da98bc",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ce6d4d12-1e29-4614-8f69-e04b6da46f29"
        },
        "item": {
          "id": "78c50762-abef-4a59-ab0b-44416a5b992e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "021face2-ace1-4726-8e66-1fccb5dedaa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6cc403-2108-4e6c-8737-59c6797fde79",
        "cursor": {
          "ref": "493acee2-0727-4896-896d-392578dcedf1",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a54f6fae-278c-423b-b51a-db4a966adcb9"
        },
        "item": {
          "id": "2f6cc403-2108-4e6c-8737-59c6797fde79",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c747e123-4855-4621-bbee-fba439a029b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3e505c-f740-4ece-b579-9e37d34c09b1",
        "cursor": {
          "ref": "b669e0f7-9fe3-43bc-8354-af645874e3c0",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9306827c-e2db-4659-964f-43a5d8848ff2"
        },
        "item": {
          "id": "2a3e505c-f740-4ece-b579-9e37d34c09b1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ce4c34cb-de82-4f4c-8729-37cb2fd30e39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2dc2c8b-b118-48ab-9652-8971a86238d5",
        "cursor": {
          "ref": "4fe9bfc8-bfb8-496e-bbd0-4710a5aba57e",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f162e6c3-627d-491e-be89-727b423920a1"
        },
        "item": {
          "id": "e2dc2c8b-b118-48ab-9652-8971a86238d5",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "992a1627-bb9e-4339-9a72-224a39d7eaf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42579970-3ca9-4551-95de-c94ef54e610c",
        "cursor": {
          "ref": "468dd564-c388-4c03-bb31-b62cd39b09c4",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "536dd2ce-7eee-4b60-a17f-18c57d231703"
        },
        "item": {
          "id": "42579970-3ca9-4551-95de-c94ef54e610c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "68e06517-8ced-4ba1-9b9c-75ca927470e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e44959-4ed9-4357-80d7-68982959fd0c",
        "cursor": {
          "ref": "ded4e519-bd71-42cf-b56c-a3db8332ae20",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4e7f7cd8-88ca-4555-bf83-658f5ecc6a74"
        },
        "item": {
          "id": "20e44959-4ed9-4357-80d7-68982959fd0c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c8420313-cbc2-4d80-9cd8-2e816b30c8c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6009897f-e2a2-42f6-be4e-d33d04414355",
        "cursor": {
          "ref": "e3341f07-a4d1-4140-90af-7475b9710813",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "25ae7438-dfb1-4ad3-8eaf-2f823afb4457"
        },
        "item": {
          "id": "6009897f-e2a2-42f6-be4e-d33d04414355",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4a524961-68fc-4330-9025-1709e5e35a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11084e0-26f6-4545-a374-4c9100b4bc11",
        "cursor": {
          "ref": "d0cc49b3-012a-4d2d-bef7-870a6e3449b2",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5d0c831d-4cdf-489f-9e04-ae694e251f4a"
        },
        "item": {
          "id": "d11084e0-26f6-4545-a374-4c9100b4bc11",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "fa43342b-d9f8-488b-8207-bfc64b358d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d413e136-a441-4e0d-bd5f-0d43cd7e60a6",
        "cursor": {
          "ref": "3524b2fe-0f46-474c-8836-cf1e91352e9f",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2a518f37-480a-4f47-a183-62df681ac9ea"
        },
        "item": {
          "id": "d413e136-a441-4e0d-bd5f-0d43cd7e60a6",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "aae801cc-98c2-4405-8f52-ed5097b8962a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0e5a22-9287-4f5a-b1c9-6b66a9572559",
        "cursor": {
          "ref": "317bcba7-113a-475e-bca2-c4abb87d258a",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d094e83f-3b02-4ae9-a60f-fadd3867c59f"
        },
        "item": {
          "id": "5e0e5a22-9287-4f5a-b1c9-6b66a9572559",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5f0704d5-a05c-42a2-9bbf-9114bd36ff9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ea2e35-7374-4444-ad3b-49785f893076",
        "cursor": {
          "ref": "d83cbd79-b741-4121-a021-6645cba61b5c",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "31b12800-273d-43ee-9f55-63da15821d1c"
        },
        "item": {
          "id": "28ea2e35-7374-4444-ad3b-49785f893076",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "71833e93-04a2-4ad7-85cd-916c6ddd74b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6005c18-fa19-4899-ab91-9710597daa52",
        "cursor": {
          "ref": "04455450-678a-4f18-9704-7cd0ba40ed69",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "20bc1e78-b2d2-4b0b-8f56-b58c7be3e989"
        },
        "item": {
          "id": "e6005c18-fa19-4899-ab91-9710597daa52",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "67b96238-dd96-4758-a80c-31212259f5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afce8928-cfd2-4d8c-9f74-726e8dbf5195",
        "cursor": {
          "ref": "c60933ad-875a-4502-8e08-090de42f47f2",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3850b56e-61a4-4873-9a82-54601b9c0d87"
        },
        "item": {
          "id": "afce8928-cfd2-4d8c-9f74-726e8dbf5195",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "72ad4396-6f83-4873-9aa7-ac7a1915e084",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "57174568-b4f9-48a2-994e-89347c025855",
        "cursor": {
          "ref": "bc520acb-8fa1-45a9-afa5-c3189fee8ded",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "45f2724c-a2f4-460e-9cd5-1fe9a03a77b0"
        },
        "item": {
          "id": "57174568-b4f9-48a2-994e-89347c025855",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "09f6ee61-c284-4a5d-b443-3b3fb59ca32d",
          "status": "Created",
          "code": 201,
          "responseTime": 1728,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "80454444-1602-44a5-8cf2-27a7672435eb",
        "cursor": {
          "ref": "0c7df6a2-1970-4324-991e-ac0394621a86",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4c9f7cd4-1be4-47af-89be-04a3b5fc561c"
        },
        "item": {
          "id": "80454444-1602-44a5-8cf2-27a7672435eb",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2af6a0bc-a1c1-4e81-bd21-c9c6aea48d3d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b7396c16-8c4e-44d8-888d-b25b091e0fb6",
        "cursor": {
          "ref": "f9817771-36b8-4114-ad26-9763f8f5fb0c",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "adaee1d2-e402-4cca-a946-2b6d6c750263"
        },
        "item": {
          "id": "b7396c16-8c4e-44d8-888d-b25b091e0fb6",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8312fd0d-b3d4-4b66-919b-a1cabcbddabe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3e510c-790c-442e-895e-08771d3ce5f1",
        "cursor": {
          "ref": "54e5baa9-a0c8-467f-a2a9-961cd666e3af",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6cab4012-a5a0-420a-a8d0-0e127c9efe30"
        },
        "item": {
          "id": "ee3e510c-790c-442e-895e-08771d3ce5f1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "bc88e91c-7ed2-49cf-97e4-684f91a12642",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "837aebed-47a4-4e76-971d-bdfc2858ff23",
        "cursor": {
          "ref": "d0be0a54-efd2-457b-8ae3-6d4998b05ab2",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a5045911-4927-439a-b948-6d91dc6e2dc5"
        },
        "item": {
          "id": "837aebed-47a4-4e76-971d-bdfc2858ff23",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8ea020bf-ebf5-4e0e-b018-7b52ff800948",
          "status": "Created",
          "code": 201,
          "responseTime": 1027,
          "responseSize": 752
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d0bdc23a-c57e-4aab-81f7-2d158511ac98",
        "cursor": {
          "ref": "a01488d2-0e30-4d97-8b09-b222f9b0fa81",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "95960f3f-236d-42e5-976d-b48b7f8b4c62"
        },
        "item": {
          "id": "d0bdc23a-c57e-4aab-81f7-2d158511ac98",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9b020096-25bf-43a3-a529-049f821be9d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4a3c8346-27f6-4084-a8fc-3cbb43fc8a11",
        "cursor": {
          "ref": "513019a0-6413-4f9a-843d-dfb663449f7d",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6cdd6ad4-f98f-4d7d-9c71-7581125f23f4"
        },
        "item": {
          "id": "4a3c8346-27f6-4084-a8fc-3cbb43fc8a11",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "880264a5-4ad0-4899-a95b-00abc485f755",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 599,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "871475aa-25c7-4da3-b6d6-2bd423c57296",
        "cursor": {
          "ref": "4e5ab95b-f154-4fec-864e-479803797e5d",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "9a5bcc16-2ecd-4ad1-95c1-e009e1b0d1f7"
        },
        "item": {
          "id": "871475aa-25c7-4da3-b6d6-2bd423c57296",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "fcc1aa36-10a7-44d6-9040-72c60365d8fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "17abd7be-116d-4727-965a-d16264497350",
        "cursor": {
          "ref": "f93a6cd1-0180-4fab-9fe8-67e118d5f444",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a17ca276-7124-48bf-8ecf-e44cb9ae45d4"
        },
        "item": {
          "id": "17abd7be-116d-4727-965a-d16264497350",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "662fac7a-2af1-4f63-bf8c-4926f7474376",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "576c4009-8e48-4aaf-8876-e29358e25128",
        "cursor": {
          "ref": "6f1ede9c-9c6a-4f8b-95bf-9ce86ec918d7",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7e2f66a3-bf9e-4cb5-9458-0f5682daddc2"
        },
        "item": {
          "id": "576c4009-8e48-4aaf-8876-e29358e25128",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "0a118904-bf77-4e9e-875f-2cee0b953062",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "3a1ca262-389a-450a-abed-fd7bc36e13d9",
        "cursor": {
          "ref": "1656414f-7bf3-467e-9a28-d811414aa2c1",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4fff4f88-0915-42a5-9bb6-2e196e758104"
        },
        "item": {
          "id": "3a1ca262-389a-450a-abed-fd7bc36e13d9",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "06f24fe5-4ee2-4e41-8ff6-55897acdd14a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f137ac95-ef17-4390-8e99-8d452d7d3d17",
        "cursor": {
          "ref": "50ca09df-c10f-40bc-bf8e-9e75ab614d0c",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "dab5c8ae-39d3-401d-a90d-47e975883d69"
        },
        "item": {
          "id": "f137ac95-ef17-4390-8e99-8d452d7d3d17",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c2d160ca-79f0-4b10-a535-1e233ae88c24",
          "status": "Created",
          "code": 201,
          "responseTime": 804,
          "responseSize": 759
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6b6babf4-c905-4fa4-83a8-29228d0d15e4",
        "cursor": {
          "ref": "93412cee-b8cf-4115-96bb-fe5611ee25c5",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "380c034d-1f9d-4e06-9fc0-4fbe99746391"
        },
        "item": {
          "id": "6b6babf4-c905-4fa4-83a8-29228d0d15e4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c7f65609-b158-4b1c-9847-3d7b521c46fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f55d2bbb-a603-48e0-b2a9-51828025d85c",
        "cursor": {
          "ref": "4920895a-57d5-4891-bb30-ba397a3a7a5d",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5144888b-8738-4e59-807c-d0228740fe6b"
        },
        "item": {
          "id": "f55d2bbb-a603-48e0-b2a9-51828025d85c",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3ad31525-e4a4-4127-8636-015838430d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a2c852-5af4-4f95-8f8e-57f37ee7797b",
        "cursor": {
          "ref": "c355c05f-84c1-4053-8e8d-9a46db27f861",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c33c7391-8857-4c61-b8e1-c645a459a4b6"
        },
        "item": {
          "id": "38a2c852-5af4-4f95-8f8e-57f37ee7797b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9b5f4d42-247c-4be1-bd19-dce71b978dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ca92c5-126a-4c1c-b8ec-9781b43f436e",
        "cursor": {
          "ref": "5446cf4f-0c02-4475-b56c-eaca124d6212",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8758fe1b-44f9-44f9-b954-f830ec2808b5"
        },
        "item": {
          "id": "91ca92c5-126a-4c1c-b8ec-9781b43f436e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a8d80bd7-0a9a-4d3d-b3e9-c857e114828b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8cb4336-9469-4fbd-a516-37c8beb40413",
        "cursor": {
          "ref": "6aa08f3c-aa36-4acb-a6e0-706e14144b09",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3594038d-899e-4130-a460-6902bcdf9866"
        },
        "item": {
          "id": "c8cb4336-9469-4fbd-a516-37c8beb40413",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "74bbb6a8-55f3-43aa-be52-1a6dc49c1825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61824104-a493-46ab-bcb9-738fb8f7ee17",
        "cursor": {
          "ref": "8417414e-6fa2-4eb3-8606-9687d5ba8d8a",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3c3aae8b-94c3-4a74-bffe-3e7f925602d5"
        },
        "item": {
          "id": "61824104-a493-46ab-bcb9-738fb8f7ee17",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4a621eaf-3b62-411f-bad3-ab2f5431c88e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8316d9d7-b941-45a0-ab1d-c4e0c19b212c",
        "cursor": {
          "ref": "0430b88d-fc9a-490f-b554-33d16531117d",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9ebcb1b5-3a24-4fd2-b1ae-b7c47b77704a"
        },
        "item": {
          "id": "8316d9d7-b941-45a0-ab1d-c4e0c19b212c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6d6cc0c2-0b8d-4f48-8b31-74def3f972a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f859eee2-5ee6-4d86-9313-0a74334a4e47",
        "cursor": {
          "ref": "a88e306a-941d-4dc4-91dc-b8f430d19510",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "98c179b6-5221-401d-b772-5d578e9e204d"
        },
        "item": {
          "id": "f859eee2-5ee6-4d86-9313-0a74334a4e47",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d4699f15-6318-4f7c-af24-f85802c73985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f984a2-ca74-49fd-9432-b3ef7c6609f0",
        "cursor": {
          "ref": "8f75ff4d-503f-4510-99a5-a240f83e38e1",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "add6af8b-4dc6-4acf-8c7e-6701b123f7c3"
        },
        "item": {
          "id": "e9f984a2-ca74-49fd-9432-b3ef7c6609f0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1efacc95-1570-4179-a399-3e3a9b8a414b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe7d747-e531-4643-8eec-586232c60985",
        "cursor": {
          "ref": "691411ca-f612-4048-bfe1-39415a4fe011",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "38a9434b-4a1d-4191-92bc-bea12d484d23"
        },
        "item": {
          "id": "ebe7d747-e531-4643-8eec-586232c60985",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3c9e3810-13e0-4475-bbff-944cdb17616f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a8d055-c1c4-46bb-9bfa-da980e46df1a",
        "cursor": {
          "ref": "06d70f6e-0863-4bd6-a1cd-03acd649206b",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d656f908-20a6-4975-92df-2b1b42d2e5aa"
        },
        "item": {
          "id": "d7a8d055-c1c4-46bb-9bfa-da980e46df1a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "169cb89f-533f-4c4c-8ab1-ac7f0a2a3f14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a75ef8-6699-41ee-adcf-1c23d79a7951",
        "cursor": {
          "ref": "72a70851-22a1-4c0e-92b2-d92849857b89",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "50dd4cf6-c167-43d4-998a-48c8c143e029"
        },
        "item": {
          "id": "16a75ef8-6699-41ee-adcf-1c23d79a7951",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a742b4be-4175-47dd-991f-8b869856ef42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adac7b31-7df6-4fd0-8435-3fb8a5f82959",
        "cursor": {
          "ref": "4016092a-c8fb-4c25-9e73-0df092cf3d03",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "45c15599-6f4f-44bd-aa60-8a17a62a4a4f"
        },
        "item": {
          "id": "adac7b31-7df6-4fd0-8435-3fb8a5f82959",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e852a5c0-7fce-425b-8610-9e80f8470759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2250f0-0013-4dc2-b1cf-f442ce5f6930",
        "cursor": {
          "ref": "455b261a-2aa6-475b-8db9-c962024d2ba2",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8f415b2e-9d47-4038-9860-6e935fbe3e2a"
        },
        "item": {
          "id": "5e2250f0-0013-4dc2-b1cf-f442ce5f6930",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4c47ac15-a399-4255-956b-a6b7cffd9b99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 597,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "0fbad6d5-7ba4-48b1-8c46-3112c56b0f25",
        "cursor": {
          "ref": "701627d4-52f9-43bc-99c1-7537ee3f41f7",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1470e459-d183-4b6f-bfb7-2bbce02c3eb5"
        },
        "item": {
          "id": "0fbad6d5-7ba4-48b1-8c46-3112c56b0f25",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "91efa808-0d95-4fdc-8aad-ed931c0e48e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 619,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "820ea4d2-68d9-43d4-b23b-7b8b7802c440",
        "cursor": {
          "ref": "0a2bc15f-a3e8-42f2-901e-bcd72c8a5f1c",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a9398df4-2f3d-44ac-b05c-0d178c3aaf0f"
        },
        "item": {
          "id": "820ea4d2-68d9-43d4-b23b-7b8b7802c440",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "318c73ab-7825-41ff-a0ae-b7e7268e78c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "52138817-e315-4112-88cd-fa4ad90c173f",
        "cursor": {
          "ref": "923f23b7-0217-4265-a783-c7975edc090e",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "df143cb7-cd7f-4a0c-a62f-a36cdf676642"
        },
        "item": {
          "id": "52138817-e315-4112-88cd-fa4ad90c173f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "28130eaa-4108-454b-9335-7fa19be0df1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 603,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "618edd2b-0d36-4458-8dc6-5c54f121288a",
        "cursor": {
          "ref": "ba5941db-3c3f-4bb0-9084-dd6d47a541dc",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9a82c640-4b25-43ce-a18e-324607191628"
        },
        "item": {
          "id": "618edd2b-0d36-4458-8dc6-5c54f121288a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b1459a67-bf03-4439-93b0-1fa01e34af5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "0d2bf8ec-6d1b-4e61-8630-4be58985feac",
        "cursor": {
          "ref": "a6cf0f90-2754-4716-83c8-cfe2f7e1de7a",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "caac921c-399a-4896-9eb0-1771fd0bbc0b"
        },
        "item": {
          "id": "0d2bf8ec-6d1b-4e61-8630-4be58985feac",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "19b93f5f-c3ae-47f9-89cd-181cdb2914ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a614de-103c-4b3a-abc1-5ed3d2c6f7d6",
        "cursor": {
          "ref": "8a209fb7-aaad-4b15-b119-26e02932c75a",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f6ee3a55-5557-47f3-a646-46daadab34e7"
        },
        "item": {
          "id": "44a614de-103c-4b3a-abc1-5ed3d2c6f7d6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b9634fec-4286-4365-ac16-1e5fcc1058e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126117ac-a4fa-4d2a-a67f-b6000d6fc4ff",
        "cursor": {
          "ref": "6e702858-2bd6-4e9d-8802-3f5034bb0378",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "975c2caa-af9e-4b87-bcb1-85f1732cf5cf"
        },
        "item": {
          "id": "126117ac-a4fa-4d2a-a67f-b6000d6fc4ff",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d7107bb1-7c23-4359-9863-6fb13743e641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f55df65-a93b-49b3-bc1f-9e612dd90e9b",
        "cursor": {
          "ref": "4656b42b-71ed-4d84-ab88-151b5f306965",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "29b1496c-0969-4dfa-880a-281df9c57abc"
        },
        "item": {
          "id": "2f55df65-a93b-49b3-bc1f-9e612dd90e9b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ebba866a-9a48-4402-ad16-5a67bd05b6d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160c90b1-6ea9-4d88-a5f7-7dccefbb87d4",
        "cursor": {
          "ref": "adb370dd-e96d-4c50-b3e6-4ad4f05d2165",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4eb02c23-a051-498a-bd53-4e693af36b4e"
        },
        "item": {
          "id": "160c90b1-6ea9-4d88-a5f7-7dccefbb87d4",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a0acec75-8b68-4e09-b8de-05ec41e83825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb9b8c3-faff-4936-a142-889cd61cc44d",
        "cursor": {
          "ref": "553940e0-bf43-4ca3-ae69-74dc958861c9",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "520574f5-d699-4fb8-8f5e-79641cc88bdb"
        },
        "item": {
          "id": "aeb9b8c3-faff-4936-a142-889cd61cc44d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e1d7397e-260a-459b-b0dc-66962f6c8d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19b2ce9-fb53-4135-84e5-d0f254d32a4b",
        "cursor": {
          "ref": "1f48b52c-0eb8-454c-adcd-1e139e57a572",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2695c4a7-116e-471f-910f-b7b9e22ced56"
        },
        "item": {
          "id": "b19b2ce9-fb53-4135-84e5-d0f254d32a4b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8ec907cc-5dbf-4977-ab51-39adab493886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a060b5-5bdd-4919-aa6b-da54f28fc4d0",
        "cursor": {
          "ref": "65c696bf-4ad2-439f-9971-4d24183af523",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "066c7bf4-0934-411e-83ee-b4a561f03dd2"
        },
        "item": {
          "id": "92a060b5-5bdd-4919-aa6b-da54f28fc4d0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "efc86587-cca0-447e-9b62-dd873dce89c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c5eba5-57ae-447e-8827-d528052a9be8",
        "cursor": {
          "ref": "82834fe3-1063-472f-885a-75857d40b76e",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0211b050-dfb5-4e14-9412-4eb79e4b6071"
        },
        "item": {
          "id": "c4c5eba5-57ae-447e-8827-d528052a9be8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6bd579d3-32ef-40b0-b247-541b4d2a30e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "198f61c3-0aa0-4efd-b555-b23a57da060a",
        "cursor": {
          "ref": "7e21af76-5201-4c2b-8016-5bb127de16ae",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3ee702ec-f0c0-411f-9de4-dc6836fc2463"
        },
        "item": {
          "id": "198f61c3-0aa0-4efd-b555-b23a57da060a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "162216db-abe7-44c6-bb98-4addde5443b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d45e81e-d5a9-4343-83a3-2c9055ee384f",
        "cursor": {
          "ref": "5a962ab2-0470-4d63-88dc-6aaf3c6ee28d",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1d9f8ccd-bcbd-464a-9cd9-40310d50f27f"
        },
        "item": {
          "id": "3d45e81e-d5a9-4343-83a3-2c9055ee384f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "682226c4-f0b2-4ef7-9eeb-8562422b4bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e76aac4d-cf55-43c1-a8ac-2fb46acb5ee7",
        "cursor": {
          "ref": "76032a9c-45ac-474e-b547-614744cd6aa8",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a8224111-f64d-4f15-97e8-39a3ce170b95"
        },
        "item": {
          "id": "e76aac4d-cf55-43c1-a8ac-2fb46acb5ee7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "01871cb6-2438-4984-9f78-8f72ea184dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1208bd18-6d64-4331-985d-3701b5cba8a3",
        "cursor": {
          "ref": "e0b4f417-c8e2-40c3-9534-d83bfc2130f9",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "eb9e4d72-8a1c-4ded-97d9-c6b618ec4751"
        },
        "item": {
          "id": "1208bd18-6d64-4331-985d-3701b5cba8a3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0fe25fab-efdb-452e-b3b8-f81380629905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6ab52c-7ee4-45e9-ad83-93920863dca6",
        "cursor": {
          "ref": "18149dd8-1bc8-4e62-80b4-c47cc6a70b92",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e95f25b4-b810-4981-8070-f070108a3398"
        },
        "item": {
          "id": "9a6ab52c-7ee4-45e9-ad83-93920863dca6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "51067bc1-b3a8-4e98-ad16-3cb8b58fa5b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918c5216-5e15-4949-bae4-543fd7682115",
        "cursor": {
          "ref": "47701693-b7d2-480a-a89c-2832d7a61335",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "26104b81-dbf5-43f0-92ce-22f781bba7d8"
        },
        "item": {
          "id": "918c5216-5e15-4949-bae4-543fd7682115",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "34d4f6d5-77cf-4107-8bb8-87734547848a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e1aecc-7806-40e3-994d-d7cb14220dde",
        "cursor": {
          "ref": "bf5d777a-e6ff-4e6b-835e-af9ec868885e",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6f2b6ccd-5252-4ee8-a6c6-8b523ff8a9dc"
        },
        "item": {
          "id": "f2e1aecc-7806-40e3-994d-d7cb14220dde",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a8f4b29b-a061-43bd-97eb-87196e3e62ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54564acd-d628-4ece-a6ac-93fc57e363e0",
        "cursor": {
          "ref": "2f86e668-3814-4799-aa78-81ceb9dc1ffd",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4f75dfd9-117c-4533-bd18-af7cadfa7025"
        },
        "item": {
          "id": "54564acd-d628-4ece-a6ac-93fc57e363e0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e15126bb-8dd9-4aee-9c95-a848f5284b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72266f77-6e1b-4168-a1d9-577cba166a7b",
        "cursor": {
          "ref": "ebd7d649-78fd-4c53-b704-5f929bdaa1a2",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a71cc6f1-30fa-46e8-b9d1-9fa0f798859b"
        },
        "item": {
          "id": "72266f77-6e1b-4168-a1d9-577cba166a7b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9e13c288-bf54-4082-affb-0d91fa210669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c4a0f8-b2dc-4448-9828-a8198fe33344",
        "cursor": {
          "ref": "9f80a0d9-915b-47f0-8f32-25204659f7c9",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "be7e9d04-8a2a-444d-aac2-f0c3965a04c9"
        },
        "item": {
          "id": "34c4a0f8-b2dc-4448-9828-a8198fe33344",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e6b04431-91d8-45cd-88b5-4300d6ada072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "282f9487-f6e5-4fcf-9544-480cd1ad6c00",
        "cursor": {
          "ref": "27ccc56d-7cb2-4b04-b77d-032352c0396a",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c4f2bc0d-6f64-41da-9d1e-f2ed5b6bb41d"
        },
        "item": {
          "id": "282f9487-f6e5-4fcf-9544-480cd1ad6c00",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "85bed74b-e25c-4e9c-9b21-a4e82beb5d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702e8c8a-66b6-446b-9d6a-a34edc806f30",
        "cursor": {
          "ref": "07a6806e-64ab-4c2e-a96a-c96be6c2f7fe",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a9538109-c4dc-465c-9551-abc42ee35470"
        },
        "item": {
          "id": "702e8c8a-66b6-446b-9d6a-a34edc806f30",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5d9afa52-fdb2-4fcb-a398-54e2cfcc3d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1713b8-6715-4744-bf7e-16558001b9b6",
        "cursor": {
          "ref": "0f4598e8-12d2-491f-b1eb-c3eb20acd039",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7aed77a1-2235-4aa2-9462-ac0a78381375"
        },
        "item": {
          "id": "1f1713b8-6715-4744-bf7e-16558001b9b6",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ca384a6a-7d5d-46b5-9e4f-b969a1382ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d83be0-e04d-41b4-9226-61ec1470663f",
        "cursor": {
          "ref": "212a5f15-eebd-46cf-8b38-3891d708d242",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5b2c4d9a-cb65-40a2-a834-158a649763d6"
        },
        "item": {
          "id": "63d83be0-e04d-41b4-9226-61ec1470663f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0d6c3a1d-2b76-4fad-924c-9f84a5b89660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228f075c-985f-4e33-b3fb-3c5316934d30",
        "cursor": {
          "ref": "2d188057-bc03-4fb2-96c7-45c76c734df1",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ec973776-33fe-4deb-90e9-38a803167ad0"
        },
        "item": {
          "id": "228f075c-985f-4e33-b3fb-3c5316934d30",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f94c6965-5cd2-481a-bc57-7f09d8e14405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f514d243-10db-4adb-89dc-79dbe71ecbf0",
        "cursor": {
          "ref": "8787475f-f571-4d4d-b7be-95e436ac391b",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ccb3e81d-86f1-424f-820f-d6edf51c4258"
        },
        "item": {
          "id": "f514d243-10db-4adb-89dc-79dbe71ecbf0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c35a7c07-4e88-457d-b26c-100e0e9d617a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f057579-9e13-47e8-8473-aa41fbe6d7bf",
        "cursor": {
          "ref": "9f73d1a2-720f-43cc-823d-bc80f882e97c",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6b03d900-2bcd-4c83-a091-b56e841491e5"
        },
        "item": {
          "id": "9f057579-9e13-47e8-8473-aa41fbe6d7bf",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e97b82dd-3802-4eb0-8a09-4fa86f78128f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc2d46b-d5f2-4c6d-a684-c81ed1e77892",
        "cursor": {
          "ref": "ef2c2851-e552-46a1-92e8-1692d3a2a9d3",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "41e56269-138a-4a6b-ad83-4cb3dd8afaf6"
        },
        "item": {
          "id": "bdc2d46b-d5f2-4c6d-a684-c81ed1e77892",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ca7384d3-4d7a-4ca5-9602-b6d362b6fcaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f4dcc2-c03e-45e8-ad3c-c8222891db1e",
        "cursor": {
          "ref": "575bec36-dd37-417b-8c9f-6bf82b2295ca",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f3fb6851-ae79-4099-a149-f758b92d26b2"
        },
        "item": {
          "id": "d4f4dcc2-c03e-45e8-ad3c-c8222891db1e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "8b2bac1c-3b9c-4356-a18e-6ed3ef03c017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39bac1b-22a9-4c21-9932-338ebc6d7f11",
        "cursor": {
          "ref": "a5da7e0f-10a7-4c80-bc51-eeaccb492b94",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fb1bbd54-2b93-46a7-9c87-e730b0682b3c"
        },
        "item": {
          "id": "a39bac1b-22a9-4c21-9932-338ebc6d7f11",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3f72ab74-9f0c-4426-a00b-e8701fdab79f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45640583-f0b9-43b5-b32b-5bb71194eac0",
        "cursor": {
          "ref": "cc024ac1-8087-47cc-8e51-b4e657b5d517",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "41556052-7a1c-4591-b2af-89205bb309f6"
        },
        "item": {
          "id": "45640583-f0b9-43b5-b32b-5bb71194eac0",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b3e02397-5034-456d-b132-50bd97116df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd7467c-e344-4cfa-b325-5b999d9b7459",
        "cursor": {
          "ref": "900d626b-1210-4b42-b7bc-2fd9974dde47",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "49da5d71-9e57-448e-adc2-b2b530bb86b5"
        },
        "item": {
          "id": "edd7467c-e344-4cfa-b325-5b999d9b7459",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "bdd78ae7-be1d-4f92-bcff-26a250b44853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cdf5b7d-525f-4c52-a215-209b2deb5309",
        "cursor": {
          "ref": "49821b6e-02da-44af-8aaf-91c0f286a701",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "6d5293c0-8f87-4d4b-972e-ebc167a02790"
        },
        "item": {
          "id": "9cdf5b7d-525f-4c52-a215-209b2deb5309",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "2e0cbafd-33d5-46c3-a45e-e886d81cf525",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbe837b-a46c-4f1a-8e45-3f4d8377c1c3",
        "cursor": {
          "ref": "70c4a3e5-e637-43dc-8673-71649e063f85",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "852a5206-24d2-4bb5-a1ab-c3541664c32b"
        },
        "item": {
          "id": "cbbe837b-a46c-4f1a-8e45-3f4d8377c1c3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "dee353bf-0a5a-466e-94b8-7b3c871dda5c",
          "status": "Created",
          "code": 201,
          "responseTime": 859,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "67c3487c-e148-43ed-9705-958e3b7100b5",
        "cursor": {
          "ref": "8aaac54e-100d-4b67-a94d-8b5803bdd3d6",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "92945bdc-dcf3-4f9a-9107-d4b0df004f98"
        },
        "item": {
          "id": "67c3487c-e148-43ed-9705-958e3b7100b5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "fbd3efaa-09ca-4afe-90a8-a30e2c961dc6",
          "status": "Created",
          "code": 201,
          "responseTime": 797,
          "responseSize": 703
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e03dbac-7511-44fb-83e2-66ad981af57d",
        "cursor": {
          "ref": "ceeb5bc2-2c4c-4028-a05d-dacd0c554516",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "26c45086-1ca8-4e96-bf91-f89673b258b3"
        },
        "item": {
          "id": "1e03dbac-7511-44fb-83e2-66ad981af57d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a567de64-311f-4010-94c3-efe060351ab7",
          "status": "Created",
          "code": 201,
          "responseTime": 1164,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d1e082-3387-4bc3-8a19-3ab378ac9b93",
        "cursor": {
          "ref": "2491cdb5-4f6e-42c2-91f4-56942390fecd",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d8a395d8-6075-42ba-89f7-438f58d32a55"
        },
        "item": {
          "id": "b5d1e082-3387-4bc3-8a19-3ab378ac9b93",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c603177c-b1ac-47c4-8940-44c7fedcb011",
          "status": "Created",
          "code": 201,
          "responseTime": 766,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f285023-4a64-40e4-9adc-0df2805b4483",
        "cursor": {
          "ref": "87c98241-ed57-4c3d-9654-7c5c5f1014d2",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "07a0eedd-4375-4efb-a8cd-9d6a244e7e51"
        },
        "item": {
          "id": "5f285023-4a64-40e4-9adc-0df2805b4483",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0d28a1fc-ef4b-4718-ac30-d679a28ed75b",
          "status": "Created",
          "code": 201,
          "responseTime": 811,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "f317219f-dc34-4fee-be78-1d5938a42cf0",
        "cursor": {
          "ref": "53f93a2c-aa10-4cad-9400-a006137332c6",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bcd9ded2-7477-4ce2-a8fe-52642b1d4b9a"
        },
        "item": {
          "id": "f317219f-dc34-4fee-be78-1d5938a42cf0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "004c481e-0fbc-42ab-beaa-a900f921eb8b",
          "status": "Created",
          "code": 201,
          "responseTime": 898,
          "responseSize": 1082
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d58c074f-3c88-41de-a3e9-b45f3c5852da",
        "cursor": {
          "ref": "02698e4e-301f-4d34-bc24-1c5255210e54",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "af7c9460-1241-4872-8542-ea937da1072a"
        },
        "item": {
          "id": "d58c074f-3c88-41de-a3e9-b45f3c5852da",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "54768d64-6502-453b-a30c-aa66ba84e6ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba61527-3d0b-414e-9b31-9504c7d1ea2c",
        "cursor": {
          "ref": "66585909-0a09-414c-a6eb-a21c1bd46c80",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a4d6cb97-2802-4bad-ba83-a4b35178e7d3"
        },
        "item": {
          "id": "4ba61527-3d0b-414e-9b31-9504c7d1ea2c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "03901b1b-e8d8-4375-ba26-a765e78218eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda0ef68-231a-4c92-b122-0aba34ff73e9",
        "cursor": {
          "ref": "787f550f-e055-434f-8520-0a25480cdba5",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "579c883a-4014-4ed2-8afb-7afc4c2ae84c"
        },
        "item": {
          "id": "bda0ef68-231a-4c92-b122-0aba34ff73e9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "dd7d8d50-fdbf-418d-9fad-f989f5528ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b5ccc5a-c5aa-4913-9cff-b29fcc69f35c",
        "cursor": {
          "ref": "46d1855b-e558-472f-99ec-f3aec0ab49cc",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "43c8f3e0-db52-4b96-96c4-a80fa33c6916"
        },
        "item": {
          "id": "5b5ccc5a-c5aa-4913-9cff-b29fcc69f35c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0b27653b-2eaf-4add-b04f-af91aea6d9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a32b562-04f3-435a-aa8e-74d9fdf31d13",
        "cursor": {
          "ref": "0fe83f3f-4e85-4dc0-a357-42cd90527b6e",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "daf31645-7a51-43e2-8478-8ec03f638699"
        },
        "item": {
          "id": "7a32b562-04f3-435a-aa8e-74d9fdf31d13",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0f4286ce-4ed9-488f-9b13-e6d82ac82c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68efc635-5610-4350-b9b0-7b15d605cac1",
        "cursor": {
          "ref": "8cb0d6c1-8d2a-4cd8-b2b6-47946dcbbd43",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "232dc6b8-f8b4-47ba-b740-37c31b0a2157"
        },
        "item": {
          "id": "68efc635-5610-4350-b9b0-7b15d605cac1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9ff3ed7e-a71d-4045-946c-33b8a1b98fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c57372-4140-42af-ab90-ec0b5f1764a2",
        "cursor": {
          "ref": "6ed92138-1511-4a07-ba31-855a5035a06a",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1d51ad28-c432-4f0a-a2f7-509b501bfeb7"
        },
        "item": {
          "id": "f5c57372-4140-42af-ab90-ec0b5f1764a2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "df7d426b-4b44-4472-8c72-f55e5a408677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3344a36-9675-4e5b-874b-6bd326c46089",
        "cursor": {
          "ref": "258a6a62-a5fe-47b0-b4db-b685599d2622",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b5274a7b-1a15-4083-9503-005a5a705dce"
        },
        "item": {
          "id": "d3344a36-9675-4e5b-874b-6bd326c46089",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f148d3a3-3d21-4c83-b620-c5d4ab9836a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f1acc19-2388-46b9-99a7-b9c949465f64",
        "cursor": {
          "ref": "6b2ba6be-2cb5-4a4d-9cca-63cf4f98adfa",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "30969a66-dd96-45e1-8fc6-0be720437d1f"
        },
        "item": {
          "id": "5f1acc19-2388-46b9-99a7-b9c949465f64",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ab8dd331-829d-4321-a4f6-12e0e3bbc107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff50e95-eb54-485c-bdb6-ba962dd513a7",
        "cursor": {
          "ref": "a78b0bb3-640f-496f-9aa9-40cbf6e03939",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2d4543eb-bb34-4be0-bf9f-31c3fc927536"
        },
        "item": {
          "id": "fff50e95-eb54-485c-bdb6-ba962dd513a7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bea347f3-911d-4adc-86c7-c16945eb2554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9caf734c-caa2-4d14-a4a2-3c81a4b791a2",
        "cursor": {
          "ref": "8e6e96f0-7399-4fb2-a525-c1caf7f2f4d3",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0465cb7e-bead-4cc8-a235-2f04ddc0d599"
        },
        "item": {
          "id": "9caf734c-caa2-4d14-a4a2-3c81a4b791a2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "525c31d8-e246-4372-9ee4-34d9e2d3153e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "412830e5-104d-4d4a-b093-d1bb8587e0e3",
        "cursor": {
          "ref": "bfaa446a-7240-4d34-b486-92116d3d6763",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f7c4f0cb-c40f-480f-a07a-b59553143a59"
        },
        "item": {
          "id": "412830e5-104d-4d4a-b093-d1bb8587e0e3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f4c42615-0fad-43ec-8626-031d4477ca97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd26fcfd-209b-4915-93f9-ab091a9973a4",
        "cursor": {
          "ref": "0b9d1e30-9214-4bd2-90c8-ea5cedee3be5",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "510b8faf-8e69-4576-9828-c19f0d58c442"
        },
        "item": {
          "id": "dd26fcfd-209b-4915-93f9-ab091a9973a4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "eb315074-ec2e-4c60-9758-506d1abe4c51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad987a66-ced2-4466-84c9-b5e43684a920",
        "cursor": {
          "ref": "3368c991-de89-4f5f-a827-aa860c3703c5",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6e2072a8-9a10-48c6-aced-7ca74c05553f"
        },
        "item": {
          "id": "ad987a66-ced2-4466-84c9-b5e43684a920",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "af3f7224-8f3b-4e98-b621-ff2626147bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb18eda3-bc07-4377-950f-6c4041e07ce7",
        "cursor": {
          "ref": "e729a5a6-aee1-4d6e-9505-f7ca11fe902e",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b67feecf-c4be-4351-b3e7-c7036b0eb9ae"
        },
        "item": {
          "id": "eb18eda3-bc07-4377-950f-6c4041e07ce7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b326d7b4-02c5-4f73-bdb0-9f9d3e6e1c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef0fe81-b2a8-4a13-ac5c-c28ee5d68462",
        "cursor": {
          "ref": "49cd46ad-4fd7-4eb7-a419-a4209fec0796",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "43dad0fb-5d87-4552-81fd-867ebf59abb5"
        },
        "item": {
          "id": "8ef0fe81-b2a8-4a13-ac5c-c28ee5d68462",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9928f431-49e3-4c8a-8d0c-cfe0aa0df1f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ea0666-ceb9-4e84-920e-de6ccffe76f5",
        "cursor": {
          "ref": "b83d0cce-1527-4edb-b78b-7a1ef08a44e6",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d2594ee0-e40d-4a53-aae8-2072255c17db"
        },
        "item": {
          "id": "d5ea0666-ceb9-4e84-920e-de6ccffe76f5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "91c51c32-bec9-4a71-a42f-5375a5ad5ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae3b07b-c208-46a4-bbf5-f04a0480afe3",
        "cursor": {
          "ref": "01d27d9b-8541-4e7e-8781-2266bdcba0e4",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0e28d66b-a90a-4c2b-bdd4-9ae4d06e01aa"
        },
        "item": {
          "id": "2ae3b07b-c208-46a4-bbf5-f04a0480afe3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "89fbfcb2-b8f1-4159-95c7-83bbd93f7454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0ee669-27d2-4fd9-b949-b574b905287e",
        "cursor": {
          "ref": "950e2fe3-6f74-4ff9-acbe-41f98d68f124",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "bb802287-0f78-405f-b77c-5a1e455927a6"
        },
        "item": {
          "id": "3d0ee669-27d2-4fd9-b949-b574b905287e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9c919c01-932a-4d1b-99f0-165235d57c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6caf32-1941-43df-ad59-8c7bb53c2216",
        "cursor": {
          "ref": "ce1c6d53-4937-4d0e-a40e-70f13ebab44d",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "9d91332a-2bac-483a-9027-77e3bac19a41"
        },
        "item": {
          "id": "6b6caf32-1941-43df-ad59-8c7bb53c2216",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3aa796d1-b597-4a1b-978f-a00a1d1c0fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d492671-507a-43ff-ad7b-f0a034c12200",
        "cursor": {
          "ref": "31d7149b-d136-4c3e-9cf7-5e4efce1599d",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a59e9c13-c0bf-429d-b93d-214ac694af6d"
        },
        "item": {
          "id": "6d492671-507a-43ff-ad7b-f0a034c12200",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d640368c-40c2-41ea-ba66-08fd0eb56963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575c38c5-ecda-4062-b75b-103a117dee49",
        "cursor": {
          "ref": "0ca2eb34-d3ff-4081-8b4c-ba711ccc45da",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8e936e03-563f-41f6-b9ab-0801a52a6ae0"
        },
        "item": {
          "id": "575c38c5-ecda-4062-b75b-103a117dee49",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "68ac5909-33e4-425b-8811-91ddb3ad7556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d25f4ac-cf9c-4510-a394-ea73bd82fca3",
        "cursor": {
          "ref": "1a93a206-6584-4a8a-b777-fa0c6ec5519b",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ca15275b-b872-46e2-817a-a5e55706890a"
        },
        "item": {
          "id": "3d25f4ac-cf9c-4510-a394-ea73bd82fca3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c972075f-303a-49ab-b3f2-42f473405b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eeb2e80-3a73-4254-bf23-0243b44a1dc6",
        "cursor": {
          "ref": "907169e3-6322-4fd7-b042-890a6deee9d7",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6e313b6d-e13e-4dfb-8036-bd7c888c8405"
        },
        "item": {
          "id": "5eeb2e80-3a73-4254-bf23-0243b44a1dc6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3afc55e1-d4a4-43e1-8fba-e1b6baed6545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0a0092-549f-4036-b2c7-23ea6a3ab308",
        "cursor": {
          "ref": "a4cb1515-66e0-4d60-9609-34e140f3a7ea",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "203585b2-8400-4c4b-871c-e94c03ba0d59"
        },
        "item": {
          "id": "3e0a0092-549f-4036-b2c7-23ea6a3ab308",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "eae3e94c-b639-4997-991a-f5a8604db55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf03f4a-90e3-4cf2-93be-69c734376001",
        "cursor": {
          "ref": "4907112f-4d64-4c30-b6dd-b3c67a4b2864",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9a9f9d72-872f-49e7-a910-ff025e510f4f"
        },
        "item": {
          "id": "3bf03f4a-90e3-4cf2-93be-69c734376001",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9bbcfdac-96f2-4cfe-a85d-e372d0b2c066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25f555fc-72a7-480f-9582-fbc0180614c5",
        "cursor": {
          "ref": "dd3cd878-2bad-4e5d-8f0b-17201d4fb944",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "32bd8ba9-817b-40b1-9b3d-719c2064bc5a"
        },
        "item": {
          "id": "25f555fc-72a7-480f-9582-fbc0180614c5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "47cbdbb5-c7fb-4a82-a75d-9e601d8c4808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe141ad-e082-40ae-82cf-2e5ef570bfe0",
        "cursor": {
          "ref": "3da9f4a5-9e88-42bc-a989-fc5a4af5e308",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7621309f-5a38-48c2-ac8a-890eb5fe076e"
        },
        "item": {
          "id": "1fe141ad-e082-40ae-82cf-2e5ef570bfe0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "490320b5-8f43-4a3d-8629-b1a16426d1c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1478736c-7212-418b-b463-a24766074601",
        "cursor": {
          "ref": "98bce931-eec1-47ff-9fe1-6522edb67161",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d12dd69b-9d21-430b-89eb-fcdc8a4172fb"
        },
        "item": {
          "id": "1478736c-7212-418b-b463-a24766074601",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7a4d658c-8d2d-49fd-b4c7-41461609ad79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bed8f27-5f42-4e03-9e0c-abda111ac101",
        "cursor": {
          "ref": "222d365e-d031-4cac-acb4-dfa734dfeb39",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1ff248d0-2ad7-4155-ba31-25cc8310b813"
        },
        "item": {
          "id": "9bed8f27-5f42-4e03-9e0c-abda111ac101",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9ddb17f8-4d06-4729-8958-6432977a2ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1496f20-5861-4a5d-8324-ad6e3454afaf",
        "cursor": {
          "ref": "54d4c9f7-d08f-477e-9d54-db7e1376b6f5",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5a847796-ef78-469d-8835-9a7dbcdedfe3"
        },
        "item": {
          "id": "e1496f20-5861-4a5d-8324-ad6e3454afaf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "29f6d232-a943-4080-8fb9-d2e19b41a602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "050ebbcc-18ba-4357-9b17-371f38bfe738",
        "cursor": {
          "ref": "70ca601b-e09e-4821-9df4-43c15eb1e830",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c37cee0d-c5bd-4a78-9eee-033d5bc78e72"
        },
        "item": {
          "id": "050ebbcc-18ba-4357-9b17-371f38bfe738",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7bba44b9-7395-4c6a-aee9-2d6fdc8e30e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155f93fb-9b3d-46c5-a412-177985c15af5",
        "cursor": {
          "ref": "246d6311-56de-4e31-b5bc-14d2ca3a05a2",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "82549f37-8bab-4317-9309-719553a5a5a9"
        },
        "item": {
          "id": "155f93fb-9b3d-46c5-a412-177985c15af5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e9f01972-df99-407f-b6f1-8c6691344b9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4b405f-c607-4b74-966f-c50b47756a59",
        "cursor": {
          "ref": "b7009d9b-2e09-473d-8d80-a27984bd7503",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "779daa9e-f465-4060-90d5-4f74cd1ee309"
        },
        "item": {
          "id": "fe4b405f-c607-4b74-966f-c50b47756a59",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d1f21ce4-fc1e-4666-b9d1-1464def2319d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4794eed3-2a05-471f-846f-27b03543a46c",
        "cursor": {
          "ref": "46adcbd9-56d7-49fc-894c-ee0df7c13146",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4a58ea4c-0a90-4084-b6a8-6f3ecf491565"
        },
        "item": {
          "id": "4794eed3-2a05-471f-846f-27b03543a46c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d1665cbb-ab20-4c8f-8209-be10bf2bf931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5d68a3-2889-4b65-9c1c-a9779f68eed7",
        "cursor": {
          "ref": "ff067828-fcc8-435d-a703-17d9473bdcd9",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "11223baf-3aa3-4244-8fbd-7405503cbf67"
        },
        "item": {
          "id": "cf5d68a3-2889-4b65-9c1c-a9779f68eed7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "eff25f57-4dcd-452c-8f6a-b7b40da540d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "321d3521-5ef0-46fe-9de8-36c8a47ff548",
        "cursor": {
          "ref": "ea36b286-e213-4064-8699-223216074865",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a644c7f6-755b-4174-8586-271ce1287596"
        },
        "item": {
          "id": "321d3521-5ef0-46fe-9de8-36c8a47ff548",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8d018bd2-b0ed-4c0f-b3b1-731dbf597d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b27abe5-8ccd-4fc3-b84d-e5c5f7d25418",
        "cursor": {
          "ref": "945bc8b6-7150-4440-ab55-94bbc40f7378",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9b3c55b7-7544-4d30-9791-f75ea8a931b2"
        },
        "item": {
          "id": "8b27abe5-8ccd-4fc3-b84d-e5c5f7d25418",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c150b8dd-c9df-46a8-b9d0-2e5b95e13079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba5e8ce-b097-442b-a3c5-963905cf65a3",
        "cursor": {
          "ref": "fe10e56e-6854-4972-82ff-373d8e5e20bc",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5257a5ab-03a6-4af6-b839-257e178dc65e"
        },
        "item": {
          "id": "eba5e8ce-b097-442b-a3c5-963905cf65a3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8afb22d2-c616-4750-a362-5433168cce2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f306ee-5fa7-4aa4-8370-f2397469f1af",
        "cursor": {
          "ref": "a5c5ae3a-78fb-4ebb-8e91-f72cb4510953",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ca90449e-09cb-4078-af5e-c93738ebc16b"
        },
        "item": {
          "id": "69f306ee-5fa7-4aa4-8370-f2397469f1af",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9c09d8ca-76f9-47e0-a81b-4876f092e48e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a8f7b1-a5f1-4e74-8d2a-3c1247cc9aa5",
        "cursor": {
          "ref": "6105a86e-1392-46a9-9578-a21c53112038",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "65428d9b-a84d-4884-b85d-227a1fdeee62"
        },
        "item": {
          "id": "29a8f7b1-a5f1-4e74-8d2a-3c1247cc9aa5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b2df03c1-f266-4159-8970-a0f71bd7fa2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77b539b-e995-448d-9c1d-44b087d7417c",
        "cursor": {
          "ref": "099d651a-6431-462a-801a-d33bcdb5c548",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "de7e4f1a-0644-4a57-a933-7213eb642571"
        },
        "item": {
          "id": "e77b539b-e995-448d-9c1d-44b087d7417c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "496a4c34-914f-46bd-bdcd-75ab920bd735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa5d929-f9b5-449e-977d-1e862646edc3",
        "cursor": {
          "ref": "fa7eec56-62f0-4660-8227-092979dc9427",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f246a93b-5380-41ab-8d2d-6cdd66215d6a"
        },
        "item": {
          "id": "9fa5d929-f9b5-449e-977d-1e862646edc3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cccebd13-afa3-4889-bb77-104b90eb7429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "931afbbd-433b-4e92-8fa6-d5823542ab15",
        "cursor": {
          "ref": "698fd03a-4990-4316-8caf-d433c7fb5780",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9afc906e-868a-419a-bcd2-30684276e9f3"
        },
        "item": {
          "id": "931afbbd-433b-4e92-8fa6-d5823542ab15",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e8160bf1-bb96-4ba7-b538-315470fc2d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec010f4-ed6d-4b7a-bf96-fa468cf5229d",
        "cursor": {
          "ref": "6f2a0562-419e-4f3f-ad6a-cc24011da00f",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "60060d44-df84-4fb1-aafe-a7b45eaf00c8"
        },
        "item": {
          "id": "9ec010f4-ed6d-4b7a-bf96-fa468cf5229d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "901afbf6-39b5-48d3-93b6-8ebd869aaeff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e59f55-66d2-4ee3-a612-d6fd2f6a6e9f",
        "cursor": {
          "ref": "a120db65-90ce-4cbd-b4e7-7834b70cb7ac",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "44a33d9a-108a-4267-bac1-1388e0ce1d9a"
        },
        "item": {
          "id": "c3e59f55-66d2-4ee3-a612-d6fd2f6a6e9f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "db1d2636-06f5-4ff2-96bf-b0c59ca80f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e1e506-d04f-4dc0-a6c1-2c2074a66623",
        "cursor": {
          "ref": "b7e6f51e-4b69-4f69-a356-502405bfed31",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "755a3fac-93dc-4666-b640-843f969549c5"
        },
        "item": {
          "id": "82e1e506-d04f-4dc0-a6c1-2c2074a66623",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "68a94cc1-b970-409c-a0f7-2cbbcd92669a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928c02ec-a3e0-4ebd-8ef9-dcffcc507d13",
        "cursor": {
          "ref": "b84c4339-2bdb-4efa-9a6d-14805102d524",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b4598cf7-06c8-46eb-8efa-239ec2aafabf"
        },
        "item": {
          "id": "928c02ec-a3e0-4ebd-8ef9-dcffcc507d13",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ba5cc609-ab4e-4660-ba91-5bad68da1713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d5d1380-ba37-45bf-a2e8-3935931e0395",
        "cursor": {
          "ref": "cc232a2f-cf5b-4c3b-82f7-a70477f33e9b",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "589dec9c-1171-41c2-a8cf-899ed99802d2"
        },
        "item": {
          "id": "2d5d1380-ba37-45bf-a2e8-3935931e0395",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b0f21a5d-510b-4186-8e52-122b88ff99f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2baf065-68e2-4e9d-8d0f-674ff0e08abf",
        "cursor": {
          "ref": "38b3230c-5bb2-4095-b0e6-c87d6029b35e",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3b7c56b1-e0d0-448a-bf88-ab5a01c98797"
        },
        "item": {
          "id": "d2baf065-68e2-4e9d-8d0f-674ff0e08abf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cd0263b3-11ee-4584-9ca2-f1b0d289f0c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e3a413-16bd-4e4f-af89-ea84dbf96b4c",
        "cursor": {
          "ref": "10162ec9-dd45-4dcf-8e1a-d643e0c73ebd",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d3bf497d-1c8c-441c-a823-b752edd0daed"
        },
        "item": {
          "id": "95e3a413-16bd-4e4f-af89-ea84dbf96b4c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3c92b3bf-a178-44a4-9381-e94dd4896dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f90584-bf33-4d95-8377-56779f509f5a",
        "cursor": {
          "ref": "7ec0a3c9-5016-478d-bd2c-41e02bdcf431",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c8244f36-a14d-4ab8-aea8-fd27c2d84829"
        },
        "item": {
          "id": "15f90584-bf33-4d95-8377-56779f509f5a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0a05e557-c4c3-40df-80bb-3dd9e4416eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609175e2-55a5-4eed-8862-4a3fe888e9c2",
        "cursor": {
          "ref": "5794a3a8-2ab0-45b0-861c-654ba60d96b1",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c4f19705-a794-4dbe-9718-adcadb90c3ce"
        },
        "item": {
          "id": "609175e2-55a5-4eed-8862-4a3fe888e9c2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0c667e84-c846-4bc2-a045-da5b12cff10a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8162be-350d-43eb-91a1-73dd5597d051",
        "cursor": {
          "ref": "c4f70ed7-0eac-4908-945b-f238a1f48822",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d741ddc4-1d28-4715-a053-701da4093115"
        },
        "item": {
          "id": "8a8162be-350d-43eb-91a1-73dd5597d051",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "859ac94a-9996-4bc7-8f03-10ed47ee88c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32830f81-95bb-4135-a864-93a504c1a736",
        "cursor": {
          "ref": "3141ce7a-5d87-4c13-8ce8-244c939dd5e4",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d0e34424-b1dc-4d8b-bb12-5ee1390fb00f"
        },
        "item": {
          "id": "32830f81-95bb-4135-a864-93a504c1a736",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "319fa84b-d003-451e-bb6a-c318621e0a32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe920fc-6785-4901-9ca1-57fbab9daabe",
        "cursor": {
          "ref": "8bbe3f49-c19e-464d-9697-39cf7e25ae77",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e0c5ba81-6e96-4667-9259-6445ad740b2b"
        },
        "item": {
          "id": "2fe920fc-6785-4901-9ca1-57fbab9daabe",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e66fb50c-084d-4d98-98ae-a00fc5363d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0157cc5-cdb0-4626-aa2a-af4f03416a2a",
        "cursor": {
          "ref": "884a8dc6-1f29-41a6-843c-06575c0cc15a",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6b9a54c6-78bb-47a9-ba77-7df244d8aaa9"
        },
        "item": {
          "id": "b0157cc5-cdb0-4626-aa2a-af4f03416a2a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "81fe90e2-0dee-4a8e-8b7a-4807dda52770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f48dfe-3cfa-4675-b51d-f1697dca24ec",
        "cursor": {
          "ref": "ea983899-91fc-4928-9cfa-7b21acda0a8d",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ef57b8c4-2980-46e7-a8b5-7e96bde1e39c"
        },
        "item": {
          "id": "22f48dfe-3cfa-4675-b51d-f1697dca24ec",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "332605d1-def2-43f7-bb4f-5b0ce558a47d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90522959-9ced-48fa-91e2-233be3788d60",
        "cursor": {
          "ref": "74e62ac5-316d-4a52-9b04-7fdcbb4fe085",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "681a46f7-12ad-42a0-8af3-c084e87eaf30"
        },
        "item": {
          "id": "90522959-9ced-48fa-91e2-233be3788d60",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f7d1d10f-4905-4af0-baee-880a3aef0e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d56bc5-e6de-478e-be7f-38ad36280e9a",
        "cursor": {
          "ref": "86aa13f0-2adb-4ce7-9f56-4e3c7e4e9ba6",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "839b0386-60ba-4669-93a2-93ce0d67a5ed"
        },
        "item": {
          "id": "77d56bc5-e6de-478e-be7f-38ad36280e9a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a7d6c58a-c207-4826-b999-7bbaba2a7a01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554c9a59-89bc-4116-8948-38280b37f237",
        "cursor": {
          "ref": "b43e9f94-99a4-4543-b052-c3b55b4e35fc",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0659abbc-3c64-4ff6-a82c-5f6641179de3"
        },
        "item": {
          "id": "554c9a59-89bc-4116-8948-38280b37f237",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7f407308-c95f-4b94-8d5a-0fefd3d42fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9783a4e-9666-4984-a3e0-4bb126ca8903",
        "cursor": {
          "ref": "7a042d64-87d8-43f1-9aa6-7c2bc12d80b0",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "94e85226-8f23-48f5-9f8f-1d4e4122856c"
        },
        "item": {
          "id": "e9783a4e-9666-4984-a3e0-4bb126ca8903",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f5c67f19-1db7-45a3-96e2-666fe5a10314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868dca90-38ea-410a-b681-9b031df44cf4",
        "cursor": {
          "ref": "2db49734-33eb-452a-a9d1-020df4bfc71a",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "75e11012-0386-45a0-9b88-638f40240642"
        },
        "item": {
          "id": "868dca90-38ea-410a-b681-9b031df44cf4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0310a064-6188-4b64-ad3b-24d48b2ad4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4f1125-d4e4-4174-8200-ea6f5686b999",
        "cursor": {
          "ref": "ccc22239-3d36-4257-9d7c-409bca110f55",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3ca61b66-55bd-4e15-9ffc-684eb409103d"
        },
        "item": {
          "id": "1f4f1125-d4e4-4174-8200-ea6f5686b999",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "34b4daa2-d915-4d34-8484-45ebbaaaba08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68789584-806e-4f30-952a-bded530fb0a1",
        "cursor": {
          "ref": "1d5f63cc-1413-497b-8ca3-6d5826819fd8",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "10d5e471-0961-4553-a88e-180ff7f54655"
        },
        "item": {
          "id": "68789584-806e-4f30-952a-bded530fb0a1",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a52498e2-f076-4d82-9cb2-da12a5dcfb63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a080ed-bee0-4e4d-a359-570271d46f99",
        "cursor": {
          "ref": "8f84da98-6b8c-4f3c-ad1b-b6976c981352",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b78ae655-24e2-4b58-8b9f-f0c45a9a7890"
        },
        "item": {
          "id": "f4a080ed-bee0-4e4d-a359-570271d46f99",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "3d706c23-73ff-408b-b926-8e93ffe864f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf7001e-82fb-44a4-8f6b-bdbb9fbfbf25",
        "cursor": {
          "ref": "d0efe882-83fb-4da5-95db-8a0f7e12dab9",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "efc37ebd-61f6-4c1f-9e00-c6ebddff161a"
        },
        "item": {
          "id": "edf7001e-82fb-44a4-8f6b-bdbb9fbfbf25",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "ffb594fb-8169-47ce-9dde-4ed04a606203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de35811-6c47-4c81-8489-13c1e179d0b1",
        "cursor": {
          "ref": "b85183a0-1b1a-4f91-bd81-02cccb198d75",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f2dc311a-c7a8-4364-9ef1-6b6b21b42230"
        },
        "item": {
          "id": "3de35811-6c47-4c81-8489-13c1e179d0b1",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "8d331fb0-3fe8-45fc-93dd-c0245517935c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a325ff-cadb-4b4d-8bf5-60a1a7a82367",
        "cursor": {
          "ref": "9fed01dd-9049-421d-baa5-10cb1347c523",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "237019d0-22fe-4f43-9544-3433acf8ffaf"
        },
        "item": {
          "id": "c2a325ff-cadb-4b4d-8bf5-60a1a7a82367",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "a8e96410-c691-42d2-acbb-3c97918ff92b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52457846-b67f-40f0-9013-a63a08516297",
        "cursor": {
          "ref": "51941019-78d4-46e3-8c7b-e564d2a521c6",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "aba3127c-1c16-4b7c-a467-5828230d4a68"
        },
        "item": {
          "id": "52457846-b67f-40f0-9013-a63a08516297",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "99b7f153-80b3-4aa6-8cfc-b5d9c490d2db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d9bf22-65e5-4f5e-bca1-178a9e3a3562",
        "cursor": {
          "ref": "cd77a315-b7a8-4842-ab92-9e817d5e18df",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "6370a58c-4200-47e6-ac29-924d03298c17"
        },
        "item": {
          "id": "80d9bf22-65e5-4f5e-bca1-178a9e3a3562",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b81cec01-fda6-4cf4-afd2-296815f8be6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "628c2fb3-c694-4dfb-939f-7be89b33351e",
        "cursor": {
          "ref": "33692e9b-fbcb-44da-9d62-54ecf46290bc",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4f53f314-4868-42ce-866c-c2667a51959b"
        },
        "item": {
          "id": "628c2fb3-c694-4dfb-939f-7be89b33351e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "83a568e4-4796-4831-9e3a-acc2aabe4611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58534de2-ce73-45a1-b47c-d152ba92661d",
        "cursor": {
          "ref": "6ba26ff4-139c-4140-808a-1cef70e04bc0",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3c20dbe9-10fd-44d2-a480-18556f2a359b"
        },
        "item": {
          "id": "58534de2-ce73-45a1-b47c-d152ba92661d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "26ec8003-b41b-410b-8589-8e051cbdc916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee37c04-2221-4135-bc57-7605d14f14fe",
        "cursor": {
          "ref": "91a955da-4721-4a76-9da3-b1e5069d49d4",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3d6467d3-ee7c-465f-bfdb-db3505924986"
        },
        "item": {
          "id": "3ee37c04-2221-4135-bc57-7605d14f14fe",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "030c0bc0-5e60-4914-8f4b-e078bfbf27d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b1200ee-f344-485c-9fb6-2f0a237bbae1",
        "cursor": {
          "ref": "b2ab2ebb-389c-4572-a68f-1f6a205a23b9",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "633b2dca-80b4-4db7-a16e-17babe90486c"
        },
        "item": {
          "id": "2b1200ee-f344-485c-9fb6-2f0a237bbae1",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "707b067f-be13-4f5c-b46d-29089027ee1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca784b9-7dce-4c97-9b6a-f0c77a15f1a4",
        "cursor": {
          "ref": "7383d3b4-f8d9-4c1e-ab6e-20299851fdcb",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b477c895-4ef1-46a4-b22b-8fbac5b0ca88"
        },
        "item": {
          "id": "5ca784b9-7dce-4c97-9b6a-f0c77a15f1a4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "dfd400eb-5b0f-46ab-9f68-9e75407568e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c997b044-6e60-4b21-afb1-460cb7c02658",
        "cursor": {
          "ref": "f09acc74-7482-4cb1-bf9a-6c5320fcfc0a",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "78f0c5a3-3660-47ce-9cb0-1e84921afa26"
        },
        "item": {
          "id": "c997b044-6e60-4b21-afb1-460cb7c02658",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "de33c621-88c9-438c-b3d5-a83889f6b5fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "03f93ef7-04d7-4e12-8fc6-4f0c193060c7",
        "cursor": {
          "ref": "f5a00e9b-f42b-4359-9b29-a69b360c93fa",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "be1dcb9d-8f5a-4d88-9996-9f70a00c61a4"
        },
        "item": {
          "id": "03f93ef7-04d7-4e12-8fc6-4f0c193060c7",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "39cb5ea8-49ad-4734-ae4f-640dfaa2234d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "781f3183-d363-4747-ae11-4a3de710ee6c",
        "cursor": {
          "ref": "7066d39e-d475-4020-b501-2ba983af5154",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "78cfcb0f-b3bc-4bda-be3b-4b2c314db21a"
        },
        "item": {
          "id": "781f3183-d363-4747-ae11-4a3de710ee6c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "834e4ea1-896f-46a5-8deb-6ccc86b0f87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97acf4f7-aa49-453a-b15a-38fcf4132a71",
        "cursor": {
          "ref": "8b7c5747-d488-463e-997d-14dd69f729b5",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "42ad8a0a-c6e6-49c3-a689-7a27f5889384"
        },
        "item": {
          "id": "97acf4f7-aa49-453a-b15a-38fcf4132a71",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "84047be7-ca59-478a-aab9-5efb9ef58962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e83b19dc-68f8-469c-85a4-9c88cfe64c87",
        "cursor": {
          "ref": "6ac0df9b-a02a-413b-ba4b-7e0819ce42e4",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "16333b97-2765-44f9-8a18-0a0242c5a943"
        },
        "item": {
          "id": "e83b19dc-68f8-469c-85a4-9c88cfe64c87",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "816a16c6-c506-4843-b6d1-e294f9431104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27bebcca-1c06-4494-90d0-6d0aef020e3b",
        "cursor": {
          "ref": "f5721251-1cff-43d6-af85-1ce080736270",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a5ea55c4-ec59-4f3f-824e-c65c0aaa0092"
        },
        "item": {
          "id": "27bebcca-1c06-4494-90d0-6d0aef020e3b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a96c87cf-ff6d-40ea-babe-b89a10bf5ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f56dc391-b48f-4f44-b362-7e89652d48a7",
        "cursor": {
          "ref": "02ff82e7-905b-4418-86bd-01cc0d20c3a1",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "af69fd5f-b250-4d00-9ea8-35d857c2f50d"
        },
        "item": {
          "id": "f56dc391-b48f-4f44-b362-7e89652d48a7",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a8be59bb-a81d-4787-98d1-5d6ff0385dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9662fe6-54c0-4ad7-8432-86a236032581",
        "cursor": {
          "ref": "a4d6b990-0423-4998-99a3-cd4e7196b740",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "97484201-58a3-470e-b6b6-3e42614c019b"
        },
        "item": {
          "id": "f9662fe6-54c0-4ad7-8432-86a236032581",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cb7e0f67-c1a4-4da1-9dba-f888a1915bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8625d723-45c0-4ec4-b392-9d6fb20cc90c",
        "cursor": {
          "ref": "75a3beca-0eae-4745-958a-185729fed307",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a1d0367b-d94f-4900-8920-2d7b8988d336"
        },
        "item": {
          "id": "8625d723-45c0-4ec4-b392-9d6fb20cc90c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bce75c6f-59aa-45cd-adb6-7c73bd0c9b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6e18e4-92b5-4dd3-a21d-6ba1ac788f53",
        "cursor": {
          "ref": "0dc072c4-5cfb-4771-99e7-93ee92253daf",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7620cddc-6829-431c-9674-d8a1b616e602"
        },
        "item": {
          "id": "ba6e18e4-92b5-4dd3-a21d-6ba1ac788f53",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8708fdf6-8e0d-4b66-ade5-11343bbf71c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c4eccbc-be2c-4899-a401-7de44e6ffba6",
        "cursor": {
          "ref": "42061b66-3ff2-4dca-b2d5-323701372d85",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "59974a33-3da1-44ed-8cbe-f672ef96c42c"
        },
        "item": {
          "id": "0c4eccbc-be2c-4899-a401-7de44e6ffba6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f15fef52-16ba-4d40-88dd-6855024544a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851fa635-b3a8-4703-bc5b-0986b469494e",
        "cursor": {
          "ref": "890f810f-9787-45f5-b614-6f947e2a4e30",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "febb45ed-f41c-4956-9fa2-b50b14a23828"
        },
        "item": {
          "id": "851fa635-b3a8-4703-bc5b-0986b469494e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a67e9855-e9fd-4a71-94e4-5ac1194ca93b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c998147-40ba-482d-85e8-eff89a288a71",
        "cursor": {
          "ref": "b384ec47-2034-4b62-b591-9c52ae4e5626",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d19ffde6-5102-4c4c-9563-b466539115cf"
        },
        "item": {
          "id": "0c998147-40ba-482d-85e8-eff89a288a71",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0ccdb0a7-180e-4bfc-8d0c-43365d89a0b0",
          "status": "OK",
          "code": 200,
          "responseTime": 583,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "390f2346-0a40-4606-ab7f-b9c1e71ba617",
        "cursor": {
          "ref": "c586412d-1a85-4ae8-83be-eecca085bbd9",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e9bb0964-27da-4779-ab18-3b1666212bb1"
        },
        "item": {
          "id": "390f2346-0a40-4606-ab7f-b9c1e71ba617",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "db2b3426-e781-43ab-857e-cfb480f7e0fa",
          "status": "OK",
          "code": 200,
          "responseTime": 832,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "61cba2a3-3dcd-4dfb-8db3-1d55a5b0ee06",
        "cursor": {
          "ref": "5c67f498-113c-4124-bc8e-241dd7b43e5d",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1b576362-368e-4cda-b5ba-1ecae2343ca7"
        },
        "item": {
          "id": "61cba2a3-3dcd-4dfb-8db3-1d55a5b0ee06",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a6966e06-bade-4af6-b5ae-574cdcf06f23",
          "status": "OK",
          "code": 200,
          "responseTime": 783,
          "responseSize": 131
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "178770e8-c612-4cfa-be89-05799cb7ba85",
        "cursor": {
          "ref": "d815c301-cdc0-4b0a-97ae-2291705e277a",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "146e64bb-9e9b-4a87-b433-9bcd45bc811f"
        },
        "item": {
          "id": "178770e8-c612-4cfa-be89-05799cb7ba85",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "21cd77e5-045f-4d4b-884d-bb7b1a279ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "370cc1b0-0557-430e-8035-83780895fb60",
        "cursor": {
          "ref": "0455a168-b7ae-48a7-b59d-6200a1659634",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "169a98f9-37c4-4aaf-9e60-96da2eb2ac3e"
        },
        "item": {
          "id": "370cc1b0-0557-430e-8035-83780895fb60",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4f1e8df2-8068-42f8-b178-fd2ae4252c00",
          "status": "OK",
          "code": 200,
          "responseTime": 600,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "e5659230-c589-430d-955d-8dca7433c1e0",
        "cursor": {
          "ref": "df18c60e-4930-4daa-9335-1c594a84b1b3",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4924ecb7-241c-439d-af43-046f1f32cecb"
        },
        "item": {
          "id": "e5659230-c589-430d-955d-8dca7433c1e0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ded1fd6e-6fd1-46b9-a633-a6f328d281b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd20242a-8ea2-4a5a-947d-65d99d68b49b",
        "cursor": {
          "ref": "46d5813c-6c61-488e-9bf9-0f337444b3f4",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "43dd0738-953c-45af-9369-626ff54d4bba"
        },
        "item": {
          "id": "fd20242a-8ea2-4a5a-947d-65d99d68b49b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "3605a7b2-2789-48a1-a8c4-decdd98e5940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f880d227-0a59-4f20-bb55-a466c122f574",
        "cursor": {
          "ref": "dd9af050-16d1-4d20-a639-3cf0fbe5fae5",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6effd789-697e-4674-881a-db654e0e2462"
        },
        "item": {
          "id": "f880d227-0a59-4f20-bb55-a466c122f574",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fda4c6b1-2d4a-4d07-a77c-d0d448355e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f20c3b9-4076-457e-bfd5-1a4842aca1ea",
        "cursor": {
          "ref": "d2644f9c-64d1-486f-8d5d-101b562873b3",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "08043eeb-ca20-4c0b-90aa-ff2c635e224f"
        },
        "item": {
          "id": "1f20c3b9-4076-457e-bfd5-1a4842aca1ea",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "332c4462-6bc8-4edd-a5e0-eb685c2c9964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae88a90d-3bad-410d-a7cd-7833ae6ea28c",
        "cursor": {
          "ref": "5657ae3e-ea96-46d4-81ae-0a7acceac520",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b3469d4f-d5ec-4e59-9b3f-1a3c190d633a"
        },
        "item": {
          "id": "ae88a90d-3bad-410d-a7cd-7833ae6ea28c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "abdccc61-3da8-48ab-bbbb-5c94c78ccd88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110c75ab-613e-4898-919c-22ace486c100",
        "cursor": {
          "ref": "eb860253-ee5e-4314-a275-dd7c5b96ecf9",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b66ba538-00f0-47f5-878a-8f9353e6e7f4"
        },
        "item": {
          "id": "110c75ab-613e-4898-919c-22ace486c100",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3fd69c80-af8a-4d58-8ce9-3d7bbfd7f918",
          "status": "OK",
          "code": 200,
          "responseTime": 573,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "6d6c4585-aff1-493a-9889-f8fabb02f60a",
        "cursor": {
          "ref": "ff7697dd-3d84-48ae-9db8-2ba0228e1f15",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e7b61059-620a-49ef-9c46-18faa338a34d"
        },
        "item": {
          "id": "6d6c4585-aff1-493a-9889-f8fabb02f60a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e80af4ca-4cd4-48b9-90c9-7797fcf68021",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "3b709fc5-60b0-4aeb-8185-b6324281fac1",
        "cursor": {
          "ref": "65e3ce7e-48bd-41cb-8ab8-8ba78d4df64e",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "beb27130-b19b-4409-8cf9-770fb724f481"
        },
        "item": {
          "id": "3b709fc5-60b0-4aeb-8185-b6324281fac1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "79224141-c157-4b0d-a584-fd75dea248a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0019ce8-4c47-4390-b88e-e846276a6f56",
        "cursor": {
          "ref": "bc0b642f-7058-4ed3-8f27-1d0112acdd53",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "97b32153-dbf2-419c-87a6-e488adbc5417"
        },
        "item": {
          "id": "a0019ce8-4c47-4390-b88e-e846276a6f56",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9fc5c3dd-c343-43c5-96ef-d403ac3584ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba147cb-1ab0-420e-a60c-2096e23113ba",
        "cursor": {
          "ref": "05ccb2c4-0891-4f6a-b285-073b460dac3f",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6549a9e3-34d0-46b9-9df5-a566a4f31963"
        },
        "item": {
          "id": "0ba147cb-1ab0-420e-a60c-2096e23113ba",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "35596c84-f62b-45fb-8629-9054016897fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f88df45d-a40e-47ce-9661-a72f04729e04",
        "cursor": {
          "ref": "b1659494-7167-43e8-8081-3216516968df",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "33670b90-9bfd-412e-bd9d-2d84367d2f83"
        },
        "item": {
          "id": "f88df45d-a40e-47ce-9661-a72f04729e04",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c35fb693-ea99-4c40-8fc7-7b2cae72479e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f939d4-10dd-4d13-b10c-1a8561240715",
        "cursor": {
          "ref": "89d15ea8-8be7-44a5-8a4c-6246fa5a5087",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d7ab5df6-f033-45ab-8870-f7cef47eb611"
        },
        "item": {
          "id": "b2f939d4-10dd-4d13-b10c-1a8561240715",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f5aaf177-5218-4a17-86b7-51e84691f2a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530141dd-6a45-461f-be55-44d2528ee501",
        "cursor": {
          "ref": "ae07001d-8b39-4bfb-89b6-39e20d81b92a",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "98f5c389-d4a9-4b18-9ab8-60b125fda7f0"
        },
        "item": {
          "id": "530141dd-6a45-461f-be55-44d2528ee501",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ad1d80ea-6b7e-4422-b97d-20c2ef731a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504f4243-c39a-487a-bc5c-6ef3a551727d",
        "cursor": {
          "ref": "d7b16dab-90f7-46c0-be68-557c94846ec6",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "acdb4ecc-2e0c-461d-9ddb-61488beced2d"
        },
        "item": {
          "id": "504f4243-c39a-487a-bc5c-6ef3a551727d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "342ba479-5dd8-40ab-8716-8b7743835da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f10f64-3042-4a62-bdcc-df6d683ac7ba",
        "cursor": {
          "ref": "fea98d9b-b527-40ff-abb5-ea2d3031f0d3",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8c893953-5803-4941-bfb7-f88677544111"
        },
        "item": {
          "id": "34f10f64-3042-4a62-bdcc-df6d683ac7ba",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6b5b5471-735a-4246-b30a-d7eaf5971f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37500966-5a45-4598-957d-84b0aff39cb0",
        "cursor": {
          "ref": "7e56e523-8fe1-47b0-a0c0-21dfae289d26",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8a0596bf-a8b3-4c9a-80a1-f9964fb4630b"
        },
        "item": {
          "id": "37500966-5a45-4598-957d-84b0aff39cb0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7799e21b-5637-452b-9b57-e38a5fcd917b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bdeb533-e4a6-473e-9b0e-9c5215971e4c",
        "cursor": {
          "ref": "c8d4fdf0-5082-4ea8-9a8c-e467e30d5b4f",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f54604ac-e356-4ac9-8bce-aa90f8984c2d"
        },
        "item": {
          "id": "3bdeb533-e4a6-473e-9b0e-9c5215971e4c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3a37d5b2-08f9-4a17-827b-d30c137ee00e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e3870c-cf2b-480b-a077-9923d25a2323",
        "cursor": {
          "ref": "b001641e-ce2a-42c7-b32c-87533c246b65",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c175a688-75e1-4000-844a-6686a611733b"
        },
        "item": {
          "id": "04e3870c-cf2b-480b-a077-9923d25a2323",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "096866e6-8a9b-4baa-baa6-0564999e4e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20dec51e-e8ee-45bd-8c8e-7e61f8fcac66",
        "cursor": {
          "ref": "976df394-960c-4b31-9052-cd7e5ef4c89e",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3f073a9a-f8fb-4a97-9a34-2013f45248e8"
        },
        "item": {
          "id": "20dec51e-e8ee-45bd-8c8e-7e61f8fcac66",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "03691553-69b1-427b-a121-77e79f5c742e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d49f0d7-1769-4de7-aad5-a37493ba8983",
        "cursor": {
          "ref": "c29de93c-a7fe-450c-8e9b-085fca6f2f4c",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "093e979c-83c9-417b-8754-99304eeb97a8"
        },
        "item": {
          "id": "1d49f0d7-1769-4de7-aad5-a37493ba8983",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "81265c80-4bdd-44f4-90f8-76c181e14ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30238f9d-64ea-4c5b-baee-e27f2b924bb1",
        "cursor": {
          "ref": "8818c64d-806f-4307-ae9c-04b04db75045",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "80fe5fc5-52b3-4abf-b259-4e2d007961ae"
        },
        "item": {
          "id": "30238f9d-64ea-4c5b-baee-e27f2b924bb1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a6d4118f-1cf3-4799-ad23-6ca044f4d71a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5da8739-ca2d-4259-930b-892f566df8c6",
        "cursor": {
          "ref": "a56775df-a429-40f4-b46d-875c23810e43",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "027468fb-5822-4c13-ae0c-10332ccd0e15"
        },
        "item": {
          "id": "d5da8739-ca2d-4259-930b-892f566df8c6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8d138567-4b27-49ee-8e3e-e3863111b50d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca681bd3-6561-4458-b8e9-4317dc9ab222",
        "cursor": {
          "ref": "afec28da-a579-4952-92ac-8eb0e8865aa9",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "023fb6b0-c8ed-483e-82b0-9e097ed376cd"
        },
        "item": {
          "id": "ca681bd3-6561-4458-b8e9-4317dc9ab222",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3cf5ebc8-9c2e-488d-8057-cbbe095c113a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c519e5fd-ed0d-49b7-8da9-24e0291c7960",
        "cursor": {
          "ref": "0392fc79-c703-40ea-86a3-6a716f4c3f84",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5c718eeb-1ade-4e49-a56e-fa32e1642340"
        },
        "item": {
          "id": "c519e5fd-ed0d-49b7-8da9-24e0291c7960",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9672b8b2-ff14-4f73-8ddd-5ce7d2d81e45",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "9ac1ad83-e6ec-4fb5-8e9d-17e321e51a93",
        "cursor": {
          "ref": "50c5833b-329b-4bbe-89a8-2c33fc25f381",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c93b94fc-969a-45bf-bd2b-313340247e43"
        },
        "item": {
          "id": "9ac1ad83-e6ec-4fb5-8e9d-17e321e51a93",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1fafdc66-3df2-46dd-b0b5-628f201dd124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d1e1c3-159e-418f-92e2-5b4dde5ba5e5",
        "cursor": {
          "ref": "9d7dde2e-b091-4a5b-810f-649dc0157890",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "73f47074-4fb8-45bb-ab0e-8975e1bbbfad"
        },
        "item": {
          "id": "39d1e1c3-159e-418f-92e2-5b4dde5ba5e5",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "84729f5c-dc97-46a1-bae7-8b0e878118f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1f9260-a0e2-4e01-9d04-6f5ffbc0d2a2",
        "cursor": {
          "ref": "e3c4fed6-ca98-421f-b8a4-22be2b119e0e",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c0ad374c-afb1-4ff2-9069-f200a1912d55"
        },
        "item": {
          "id": "ad1f9260-a0e2-4e01-9d04-6f5ffbc0d2a2",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "926c7275-225a-455b-9209-3740fa416c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c94b9f-7dc0-416f-b3c8-401a7233a1d9",
        "cursor": {
          "ref": "a7a889d1-19a7-4c4a-969f-a5481f4955c2",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ed9199ee-453a-4c57-bda1-b4309e108ecc"
        },
        "item": {
          "id": "c3c94b9f-7dc0-416f-b3c8-401a7233a1d9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "cab3c36c-6251-4b4a-b9f1-c00c86d45d69",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "8e3a1578-c74a-4c20-9f83-38e7589e02ca",
        "cursor": {
          "ref": "17d06199-b91d-4838-b411-428c9eedca37",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1d33d915-ed3d-4358-b4f3-e8f448c5d946"
        },
        "item": {
          "id": "8e3a1578-c74a-4c20-9f83-38e7589e02ca",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "81b04909-e783-4471-a0f8-597a07ea3875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c571a0-1780-427e-8dac-7b4907bc2453",
        "cursor": {
          "ref": "3ffdbe5a-8f10-43ca-be28-a4762a51a9c1",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "84858122-1dd2-4372-879c-2bf6e8709eb1"
        },
        "item": {
          "id": "f9c571a0-1780-427e-8dac-7b4907bc2453",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2fcd7bae-5caf-4103-ba73-1260dbce1ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17cb1da-6a5e-43a5-bbb6-95f8fc37c6a7",
        "cursor": {
          "ref": "8393cc3c-9304-47cc-8e0f-78d072188d4e",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "30f27ccc-ea67-4b8a-aabb-6b4fa63eefec"
        },
        "item": {
          "id": "b17cb1da-6a5e-43a5-bbb6-95f8fc37c6a7",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f6e00891-e9c1-4b3c-b82a-1af1835800cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0d0a21-6bd2-4990-b299-2001f1162a77",
        "cursor": {
          "ref": "e691bb5b-5abc-4c53-a95f-92d1ef5c4e01",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3c240dcd-9e9f-4143-954b-553c8ec4dab4"
        },
        "item": {
          "id": "6d0d0a21-6bd2-4990-b299-2001f1162a77",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "22a739bb-0298-4a8f-97db-9de191cba8de",
          "status": "OK",
          "code": 200,
          "responseTime": 593,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "7e1a8af7-f10a-492b-a0b7-18d4f35b5867",
        "cursor": {
          "ref": "c42caa65-6766-426c-bd8f-041d4aedf082",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "20fa62df-15a9-409a-b2b3-30c659486a2c"
        },
        "item": {
          "id": "7e1a8af7-f10a-492b-a0b7-18d4f35b5867",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0e37a413-b4a7-433d-adf8-993ec970a7e4",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "de5035f0-2a3f-4ff3-9358-89c28ef1031e",
        "cursor": {
          "ref": "d8cc78e2-b00b-4073-93ab-ad776a0e3bb9",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6c8a8840-9618-4ce5-80e5-95855d034e65"
        },
        "item": {
          "id": "de5035f0-2a3f-4ff3-9358-89c28ef1031e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ccffa256-a3e1-4f2e-befa-72b5334d5f5e",
          "status": "OK",
          "code": 200,
          "responseTime": 583,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "f98d9f42-0aa1-4e9d-a3ad-42b7e3715c57",
        "cursor": {
          "ref": "6dcd57be-c607-4ca8-8297-4b6955fd59ea",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c1abb311-2247-435f-b737-6cf239116e71"
        },
        "item": {
          "id": "f98d9f42-0aa1-4e9d-a3ad-42b7e3715c57",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "36986be2-3b65-4ac9-9507-aee6c3d742ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a255ea46-41b1-4221-9bb1-d9b6c7252d8e",
        "cursor": {
          "ref": "767a2ec5-42c4-4cfa-bec3-778d35c2e923",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f0ca0864-1b21-46d1-8713-b0711c091871"
        },
        "item": {
          "id": "a255ea46-41b1-4221-9bb1-d9b6c7252d8e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fb5e660f-4f08-404f-921b-6006f725a96d",
          "status": "OK",
          "code": 200,
          "responseTime": 588,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "e58d5e13-99a2-49ff-996b-61a2b4a31374",
        "cursor": {
          "ref": "03af2b46-9e96-4b4c-a455-0a5bcee7db0e",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9e0d5ec7-d062-414a-b24d-1d804dd20b30"
        },
        "item": {
          "id": "e58d5e13-99a2-49ff-996b-61a2b4a31374",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "02f3321c-5cab-4756-9002-d46310c64245",
          "status": "OK",
          "code": 200,
          "responseTime": 584,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "012882db-7363-4613-b903-1211da2bebdf",
        "cursor": {
          "ref": "82a4984a-ff3e-4675-9dee-a2fc95635600",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2a203412-71c6-4013-8410-4df689fb122f"
        },
        "item": {
          "id": "012882db-7363-4613-b903-1211da2bebdf",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7773b2da-c961-4a22-a24c-47938409c86f",
          "status": "OK",
          "code": 200,
          "responseTime": 950,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "754a445c-5ed7-4d0e-9285-f2a54b6167b9",
        "cursor": {
          "ref": "780d2b56-32d7-482b-9a41-44dddf805981",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e6b873fe-8ee2-4fae-b9c9-0cfa1ecbf7d8"
        },
        "item": {
          "id": "754a445c-5ed7-4d0e-9285-f2a54b6167b9",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c17a1ddb-29d1-48f0-a5cc-24fbba6931b3",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "0222012d-0d53-4077-b9a1-05a609aea807",
        "cursor": {
          "ref": "72a4f16d-d80c-417d-ad5f-e672f48adcb0",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "67cd828e-f368-4e4d-9e0d-bbe7dbd2fca2"
        },
        "item": {
          "id": "0222012d-0d53-4077-b9a1-05a609aea807",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "abcda20e-acd1-49ca-8ce2-ef9bd6a1cc17",
          "status": "OK",
          "code": 200,
          "responseTime": 596,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f4a67882-e5af-4c57-aa8b-14bfb2fb71cc",
        "cursor": {
          "ref": "68c18d0d-2245-41c7-87de-fa129801527d",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ba6f0984-859f-405e-b319-02192d80cd23"
        },
        "item": {
          "id": "f4a67882-e5af-4c57-aa8b-14bfb2fb71cc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d96acf92-d25c-4b6d-b614-d23d001338ec",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "37664b13-8689-419c-8edd-443aaf2e6882",
        "cursor": {
          "ref": "e5518b1b-6c06-4eda-b82f-b28eabbcbfa8",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d62b5c67-3a8f-4541-88f7-84c6f6facc47"
        },
        "item": {
          "id": "37664b13-8689-419c-8edd-443aaf2e6882",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "89a51c07-f124-4ad2-bc9b-7ad9693eea8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d38dc8-6bb1-4323-b053-cddbaf694bf6",
        "cursor": {
          "ref": "45049ffe-bf5a-42ab-9234-b2a5e248937a",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "dc9862bf-2909-453e-9047-62524ed41e0d"
        },
        "item": {
          "id": "27d38dc8-6bb1-4323-b053-cddbaf694bf6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d3ee353b-3e74-4b18-b2e8-0fe71b5490e0",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "89df10d9-ef03-4966-9b3d-528abdcb64f6",
        "cursor": {
          "ref": "de65202e-ec8a-425e-a362-e8b67ba8bb84",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "81e3fbe7-8b4c-4e54-96ed-598e3b0105e9"
        },
        "item": {
          "id": "89df10d9-ef03-4966-9b3d-528abdcb64f6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e58edc4a-13b5-4688-8df5-fc765394bf61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeff0580-0fdf-4e6f-9613-adc2fff4b90a",
        "cursor": {
          "ref": "3cc269d3-5097-4018-b823-30bfce3dbe6e",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8ba596b3-162c-47bb-b00b-0038c0c27fd0"
        },
        "item": {
          "id": "eeff0580-0fdf-4e6f-9613-adc2fff4b90a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3ac9892e-bfd4-4125-978a-11cf62ead86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a5df3e-a686-41d8-98a2-2366cfd75280",
        "cursor": {
          "ref": "89a9cc89-7643-4a96-bd8c-5b4fb4ff7a26",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a4b4523b-2081-4c39-ae58-9722270871c5"
        },
        "item": {
          "id": "49a5df3e-a686-41d8-98a2-2366cfd75280",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "70e4b2ab-68fa-420a-841f-6b4b7e4f1579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e16970-eacd-40ce-b12c-4e318e52ff03",
        "cursor": {
          "ref": "1d403289-e62a-4507-8e5a-9ecb1bc9a499",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c5bf3ab6-cff8-4907-b056-f8ac0427477a"
        },
        "item": {
          "id": "b0e16970-eacd-40ce-b12c-4e318e52ff03",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7efe79ff-3368-4fdb-bae5-ef037086946a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c2c596-1494-40fc-abd5-7e22bf0d298c",
        "cursor": {
          "ref": "ee9902b1-f7a3-4e63-8f30-e61857475cec",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1c295ea6-a037-4513-b1e3-e2b4a0458f5f"
        },
        "item": {
          "id": "b5c2c596-1494-40fc-abd5-7e22bf0d298c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2e6d840e-e782-47db-805b-93bffe8511df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f3553d-cbe0-4c5e-97c3-6977ea28cfc0",
        "cursor": {
          "ref": "7d47253b-4075-41c0-9b75-2effa7b741d9",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ec9973f3-045c-43c2-b911-6ef5f97949de"
        },
        "item": {
          "id": "94f3553d-cbe0-4c5e-97c3-6977ea28cfc0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d836da80-a4c8-4076-9944-3390524a5006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9736e84b-b1d7-4db5-9272-a76b5e93d95b",
        "cursor": {
          "ref": "a421b582-28bf-4fe6-b25b-0871c87d9246",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f734a5d6-5bf9-4ed7-8d6e-8fb0a8c35de8"
        },
        "item": {
          "id": "9736e84b-b1d7-4db5-9272-a76b5e93d95b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "87865857-d337-4d32-a476-2fba4f629f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22076fdf-cb5d-4230-afb3-2b11cd72d367",
        "cursor": {
          "ref": "88efa4a8-6b14-4bdc-a01d-02d2c31d1f95",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ed76f554-74f7-4e68-af6f-bc64a08b3725"
        },
        "item": {
          "id": "22076fdf-cb5d-4230-afb3-2b11cd72d367",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a0658860-a73c-4c0f-9ef1-2f5fabb9245e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b014a7-e9fb-45fa-8bb2-0fabbc7e5f38",
        "cursor": {
          "ref": "0b108a8e-fa04-49a3-8772-27d1da604859",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "fd635f71-2ead-412e-98fe-be446eb4b3a6"
        },
        "item": {
          "id": "04b014a7-e9fb-45fa-8bb2-0fabbc7e5f38",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f86e82aa-2741-495d-89a6-2d27fbc90621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c4c8ce-2e63-4511-b8c3-429fa79c86fc",
        "cursor": {
          "ref": "788577ab-ae48-461e-ae3b-2b4a685ab120",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "41099534-9374-46fa-bbaa-abe4a9a6ddec"
        },
        "item": {
          "id": "37c4c8ce-2e63-4511-b8c3-429fa79c86fc",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f10c2456-2b9c-42be-8069-ee73452b4000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34832b4d-44ef-4270-91e7-72cd95abef25",
        "cursor": {
          "ref": "5e96e078-ba07-4f96-bb5b-1a2e73d32f3a",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "5c3493d0-c3ae-4c8e-8411-944cb19d8973"
        },
        "item": {
          "id": "34832b4d-44ef-4270-91e7-72cd95abef25",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "94a8a198-73d2-4dab-b12a-2ac490d990bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1098a540-a751-48e8-ae49-715db7d49cd3",
        "cursor": {
          "ref": "dcbdc9d5-f9d8-499a-8e79-c60b9116e15d",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "6fd3e5c0-88c2-485f-83d5-416c92beca5d"
        },
        "item": {
          "id": "1098a540-a751-48e8-ae49-715db7d49cd3",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "dbb9e17d-35e7-40e1-9985-1265c5886bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8781ef89-6c6b-4c2e-8144-1c3cc67c8dd9",
        "cursor": {
          "ref": "8de6286b-9282-4316-8415-c30443e0b007",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "b02b747f-3d99-4e30-b168-0c7da7e955c2"
        },
        "item": {
          "id": "8781ef89-6c6b-4c2e-8144-1c3cc67c8dd9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "aca7c833-6a60-43c5-982b-3379ef7f9b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "357d06ca-a457-4b4e-a54f-1e48b7b238d5",
        "cursor": {
          "ref": "2e66216d-08d2-45a5-a9e6-d83099133157",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "a67dd394-c3b5-40e8-b152-77735a355659"
        },
        "item": {
          "id": "357d06ca-a457-4b4e-a54f-1e48b7b238d5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ea3e2602-4d89-4707-8764-bc6ab7357618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24019a81-87a8-467c-880b-9c31580e1cfc",
        "cursor": {
          "ref": "001738e4-7dfa-4220-9375-26f39574efb9",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "8f9074c6-88e0-47a7-9baa-b91beaf1a8af"
        },
        "item": {
          "id": "24019a81-87a8-467c-880b-9c31580e1cfc",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3aa12a13-4829-4c9b-9fe3-31d8518766de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b78c40-33da-42b0-a294-d304189d9db6",
        "cursor": {
          "ref": "c1eac498-98f8-412c-b7b3-11b63af07a3a",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "1959ad11-02ab-4c97-98d6-c81e038acfbb"
        },
        "item": {
          "id": "75b78c40-33da-42b0-a294-d304189d9db6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ec05c611-f856-4134-82ba-13ba43de6ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba81edba-13c3-4c43-b505-695eb17719a5",
        "cursor": {
          "ref": "f645f425-3c4e-4273-9b00-f0e2f6f9890c",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "6f5cf2f6-cabb-40d0-bf12-651471188627"
        },
        "item": {
          "id": "ba81edba-13c3-4c43-b505-695eb17719a5",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d4e1d5f4-3973-4e44-95e4-2d63de58fc64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6999f1-fe5a-47d6-8075-48d4b09a73b9",
        "cursor": {
          "ref": "333c4853-67cf-4ade-93f7-956fabdea65a",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "fab5a138-9402-4f6c-84b1-4b6923e592ce"
        },
        "item": {
          "id": "df6999f1-fe5a-47d6-8075-48d4b09a73b9",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "71052f45-a2c4-4b35-afa3-9f57caf239d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38eb85c3-fd03-4f84-b5dc-0b5bed10cbc4",
        "cursor": {
          "ref": "5095411b-c06a-482b-858a-5a3259356acb",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "e47064d9-3a97-4ad9-963c-1f3c2e2152f9"
        },
        "item": {
          "id": "38eb85c3-fd03-4f84-b5dc-0b5bed10cbc4",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "35062f93-fb63-46e2-8c46-adeb58ece490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81560557-5497-4dcd-9457-488923be796b",
        "cursor": {
          "ref": "13caf2b9-a26e-4e40-9daa-7cd544f26a27",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "fa372c4b-5803-4c9e-84b6-69ab46bfbe4f"
        },
        "item": {
          "id": "81560557-5497-4dcd-9457-488923be796b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "708023bb-c2c7-4573-b2a8-b9e334b29755",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "9bb3e301-2ef5-4599-a94d-bb9650903cc5",
        "cursor": {
          "ref": "3e0289b5-d5f1-4401-a213-fa5f37d21036",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "0f5a7c34-99d5-4feb-8e07-36f0f35f02b8"
        },
        "item": {
          "id": "9bb3e301-2ef5-4599-a94d-bb9650903cc5",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "977b70ad-ad2d-4236-bc54-ef2fa571bf21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c15240b-2065-4443-9042-734df8be4c3f",
        "cursor": {
          "ref": "292e56d0-7b09-4394-b243-028ceedd5e25",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "3ccf8340-4461-49d0-aeb6-62d3c3f81f9f"
        },
        "item": {
          "id": "3c15240b-2065-4443-9042-734df8be4c3f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e0944397-511b-49d8-b278-d0f86206e9c5",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "0166c69d-644e-4edf-851b-87d89e9f8423",
        "cursor": {
          "ref": "bdd7a37a-3b1d-4045-8399-b90f750a6429",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "a8a428ac-b471-490c-9d16-e7c11905c03a"
        },
        "item": {
          "id": "0166c69d-644e-4edf-851b-87d89e9f8423",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7af86de1-0129-42df-a346-1f50638b74c9",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "affa5246-6a37-4ef1-a246-18fcef0aa2ff",
        "cursor": {
          "ref": "bed108b4-4636-402b-945a-7aa1ab76036a",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "e0125709-26b6-4ae6-9d55-a07d96f7703b"
        },
        "item": {
          "id": "affa5246-6a37-4ef1-a246-18fcef0aa2ff",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "09b8ac18-99c1-414e-b5a9-d94b32d19139",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "915fdbbb-b4c4-4491-a6c8-c85cd5767457",
        "cursor": {
          "ref": "417bba7c-9f5b-4261-914a-62efd5770c2a",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "4bc2e748-0bce-4aa2-87b2-8944bcae5635"
        },
        "item": {
          "id": "915fdbbb-b4c4-4491-a6c8-c85cd5767457",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d9444f48-ce24-49e7-ac7f-a133b5d9aca1",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "07557605-f09b-4197-b7bd-273d558ca32f",
        "cursor": {
          "ref": "da5be593-cb39-4349-9a77-a0c78054b7e9",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a1ecf664-a652-443a-8438-ce4d1e4edba2"
        },
        "item": {
          "id": "07557605-f09b-4197-b7bd-273d558ca32f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "533b790c-86a0-4c95-a620-2c02532d5092",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "8588009a-2fdb-4c54-a8e3-9f3a8a48728c",
        "cursor": {
          "ref": "b9aa6e0c-513e-4775-ac0e-4095d966a377",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "9c458e6a-b7a6-4014-82e6-fe3c76ca1728"
        },
        "item": {
          "id": "8588009a-2fdb-4c54-a8e3-9f3a8a48728c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1cc4a180-1a51-4612-8269-66260f3d39d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7072508d-1069-4b01-8246-39d0aa61cb4d",
        "cursor": {
          "ref": "1e6d4deb-c29d-4126-a4d9-9aac270abec8",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "b231323d-ba10-43dc-9106-eb4fa3b7cf5e"
        },
        "item": {
          "id": "7072508d-1069-4b01-8246-39d0aa61cb4d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "617a3276-7ab6-4b4f-bcb6-5b9d60239ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bec4336-f4b8-4744-aad5-985013d8e183",
        "cursor": {
          "ref": "b4861035-dbae-4989-824c-d7c786d3061e",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "6f97c643-153f-4a06-ba6a-3c6cd83582b4"
        },
        "item": {
          "id": "0bec4336-f4b8-4744-aad5-985013d8e183",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "032caa34-61e2-4b61-b229-7e0a7a587ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336546a8-ebaa-4ff5-a722-ffb4b4a86094",
        "cursor": {
          "ref": "b20fea7e-bf49-47eb-a107-f9e602692257",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "2ffacd98-ca6b-4200-b70a-aab8ccd2e4bd"
        },
        "item": {
          "id": "336546a8-ebaa-4ff5-a722-ffb4b4a86094",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "72274129-f90f-4768-b737-8225e652ed59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d89dba8-74bb-4419-a926-16b2b0cfdfb7",
        "cursor": {
          "ref": "ba23aae4-38c7-4275-aa51-5793bf48a67a",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "0518567a-08b4-4557-bc90-562d8b43c287"
        },
        "item": {
          "id": "7d89dba8-74bb-4419-a926-16b2b0cfdfb7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f10740fb-48cc-4b32-a85a-54cb5bebafa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e65208-325d-48f1-b1ca-99f02a41f21f",
        "cursor": {
          "ref": "5f946ed5-0613-4052-816a-044c24acdf00",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "25a2142f-ace4-4a64-9b70-0c4e58635117"
        },
        "item": {
          "id": "57e65208-325d-48f1-b1ca-99f02a41f21f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0b1a5c9d-6944-4c4d-8283-3604598cc697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76031d2e-5c91-4cb7-9e52-4b717a0fc537",
        "cursor": {
          "ref": "a44c5f62-22c5-4723-9213-5adcbc4bbd34",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "b71b993a-bc3a-499f-93c7-9e67ac443303"
        },
        "item": {
          "id": "76031d2e-5c91-4cb7-9e52-4b717a0fc537",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ab39026d-5865-495e-8855-80f6c6f9b337",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10369827-f60f-4703-9d4c-5f0524f298d3",
        "cursor": {
          "ref": "4ebb64fa-d524-4131-a819-f8106f3b6ed1",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "cee89067-c9e9-4123-b1bb-5e77f255bcd3"
        },
        "item": {
          "id": "10369827-f60f-4703-9d4c-5f0524f298d3",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "22fed6be-f7a4-41f3-bc07-415df8f208a2",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "610c22c8-bdf2-427a-a14d-51017aee5804",
        "cursor": {
          "ref": "840daa6d-eb0a-4b22-ab8d-499eefc0282b",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "25b8f07c-3187-465f-abdf-64a1f781c033"
        },
        "item": {
          "id": "610c22c8-bdf2-427a-a14d-51017aee5804",
          "name": "credentials_verify"
        },
        "response": {
          "id": "859f43bc-7d7e-4799-a531-5c51f765ca15",
          "status": "OK",
          "code": 200,
          "responseTime": 575,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1957f3b6-d30d-4df8-a203-391c7f3a9da0",
        "cursor": {
          "ref": "000cec63-9a4d-4b50-82aa-56b664445591",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "8fd457c3-85a1-4a09-ae7a-a0bbabd45139"
        },
        "item": {
          "id": "1957f3b6-d30d-4df8-a203-391c7f3a9da0",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "37c23f46-4594-45e4-96b5-3910e0ca219b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "173a9336-51f4-44a5-9c91-bd4709c742aa",
        "cursor": {
          "ref": "08ab8e32-bf39-408d-91f1-2dbec5493686",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "2fe39c3d-4631-4f25-8f4e-8df7e3f2a47c"
        },
        "item": {
          "id": "173a9336-51f4-44a5-9c91-bd4709c742aa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6e89e79f-1235-4231-a785-832facba0bdd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "173a9336-51f4-44a5-9c91-bd4709c742aa",
        "cursor": {
          "ref": "08ab8e32-bf39-408d-91f1-2dbec5493686",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "2fe39c3d-4631-4f25-8f4e-8df7e3f2a47c"
        },
        "item": {
          "id": "173a9336-51f4-44a5-9c91-bd4709c742aa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6e89e79f-1235-4231-a785-832facba0bdd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85cec02-380a-4a52-bfbe-29db5f09b320",
        "cursor": {
          "ref": "3e6ff43f-2f54-4285-8f3b-6353be7d8469",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f1c2658e-6a29-4317-b4d9-d05cb6f2f334"
        },
        "item": {
          "id": "e85cec02-380a-4a52-bfbe-29db5f09b320",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "82dc4262-1947-48fe-be16-0fba3d51c7f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d3ea47-cdc7-48b8-999e-69287bf96aaa",
        "cursor": {
          "ref": "4d26f6d0-7de8-42dc-8862-95946c04e617",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "ba63c657-ffa7-4fbf-b8d7-7fbea4f135de"
        },
        "item": {
          "id": "e4d3ea47-cdc7-48b8-999e-69287bf96aaa",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "24fa79b5-8ebe-4888-a7b7-8afdcb36cb6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}