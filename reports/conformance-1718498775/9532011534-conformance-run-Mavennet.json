{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "987ff5b9-9b68-4ad2-bc94-bfbc715e13c3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fc46c17e-9b74-45ad-acc7-cbe5eb373486",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e1c84785-e4dc-41dc-b81d-06f74c3428bc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0295af49-b41b-44b3-a972-d4ec523099e2"
                }
              }
            ]
          },
          {
            "id": "2e91b3bb-fe35-478f-9694-15066f60df5a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e17bd959-f728-4c0c-9efe-8dae40cd347c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "73dbb044-4212-4f7c-b3fa-8c873a2a7320"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6c5ee934-beba-42f0-9020-4096e3d1647c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5bc3a6ce-6e06-452c-8a05-f9a119d10f82",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c55d1a95-fbe2-458f-a99b-b1242d626b6c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7aebf14a-1194-4e97-983a-7099e51da4c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f76d004-ff71-47f2-8fed-429b1289f757"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "114984d4-10e8-4f74-9772-7430baf45f3d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d474c0ef-4d02-4235-bf56-08f8e7bf83ac"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2cd87314-7ce5-43c2-b47c-e4b47959a88d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eee6598c-3099-4f52-bdd9-79fdfc996d88"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0615f8bb-2a2e-43e1-9ea9-1f89e3773fd9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7ed0ae6e-850b-491b-ad70-030ec7801cab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6a2a0ac-73ba-4d58-a07e-ab020ac50036",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4419fe5d-d474-45e9-816f-522fb69a6db9"
            }
          }
        ]
      },
      {
        "id": "ae8e1e86-9cc3-401a-ac51-4d19f20c02e0",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "513cf758-4f14-4c68-9ca5-bc4b9244c9aa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d78aab39-33d0-49ae-89b2-6e3b935d34bc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f19959c3-1e43-46f7-9af6-712fe266fd87",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07480f4f-4892-4e8f-a36a-3474bfa0a930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e723e967-dfce-4400-b6ab-4de28f6b6a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae514e0-273d-48d6-b10e-69be62247ce2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0082a4-b8a1-4b1e-ad74-2b51981374b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef9b870d-7543-4f2a-b80c-326045cd58e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3decc39c-a834-4236-a101-ba3e30878157",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d049a5-9954-4a87-9de6-4fdc52394fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "062b3155-f58a-42b1-8217-3b86b268a457"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6acab052-1b1f-4d0f-82cb-9fc290bae830",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7fbf6299-9465-423f-91d5-fb33920b4613",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d77514c-1e8b-441e-a36c-474f98db2c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc1fb2b4-1a98-4b3b-843d-0c0474d622b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ecaf51-ecb4-4ae9-8da7-93d1991b0c95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ca7841d-55a0-449d-987a-ebcd1d7fb08b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cf178c8a-0759-4893-a055-37400063aa8c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f07c37c0-4213-4ece-b9d5-5af1912d5af9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e968cb62-1654-478f-946a-a3290e1695e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6fb0d9aa-f1bd-4d09-a96c-0fd08ec9046d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "04ca2959-e5cb-476f-9261-260b405307c3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "52644bb1-2e8e-475e-8f55-6bf5f3d218ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1b128ee-9313-4981-b38f-dc733080dc77",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b241a6f-d42b-4b62-b178-2fdebc2c8f99"
            }
          }
        ]
      },
      {
        "id": "28f6198b-b38e-4047-bbc9-c6bdcfd63f71",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8e3550a2-b0cb-4bd6-8b54-87ff0934a995",
            "name": "Negative Testing",
            "item": [
              {
                "id": "21390468-f975-46f1-8a15-ae43fd1deac4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "38c1fc8f-fc4d-4106-8fca-29b552a2377b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e45e02c-5df1-4da7-b7f8-836411b61ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afbab98a-dc79-47e5-8ed5-d87326e9bb2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e3fd3a-ac6d-41f8-9f6a-1a9bb8afeb0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c39e4616-e9cb-4a97-938b-50e6358bb4ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3694cb7f-97c7-40d4-804f-50379b23fc95",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4196a2c7-196a-4936-954c-d713258222ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47861b9c-f3ea-4726-b45b-ac44ad5f37cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8878cf15-536f-4bbe-bf24-4fc29d712718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c71e0c1c-836e-4a47-a718-39dd45a5d4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29522bc-3e3d-4699-99a1-2241f4d40176",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced8f9a8-9cdd-4970-9572-c4cbcdb3954c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "066a3517-dc82-4b76-a66e-1bdaef0327e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e91b38a-335a-453e-a34a-d92f6931f56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "955c7cea-bc17-41bb-a369-095225a75083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71248b1-5fcb-46d2-8131-bf1395011e7e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a95ec6-f80a-4859-9f62-951fbe769a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ffb862-7901-4709-86e6-694410db5227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1acd9bd6-750a-4c4b-a39e-290330e155dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a782247d-b102-4be0-abad-05cf0941e525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ecdefc-2925-4ab0-8b41-d570e54a2a5e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8de2d78-4ac6-4837-bc54-e5f2f06ca9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d38446ee-22e1-4f32-88f0-24d3cc78a46c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd9fae9-f021-4d9c-acc4-d36c24121da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68076508-fffc-4a09-8ac3-62aa09a51792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4c92b2-559a-482c-80f1-a65a46b84249",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4bc2f19-8dbb-4778-b706-0221103d7012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "379c61bc-8b30-4525-b80c-f9b172f76ef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2495e5-363b-4e00-8ed8-e13e64726c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7412af49-e544-490e-909a-46a6660dfecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5748f93c-1809-4ecd-90a3-744642bda6a0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d09ea5-f40c-4978-9440-2249c7ea1af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd3af93f-a63c-40dc-b645-939b2227fa1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9b9a0f-425b-4866-a3ce-224bd068042f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3cce5798-6f90-4c35-9991-e71b38b4347f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2b2840-ac5d-4b25-890f-9f0515db8da2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "933f5a28-f2f1-4730-b162-36042a0125ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c93c2e28-1ca5-424e-b48b-194c07f78a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be39d54-c108-4c82-8351-1359093d9dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85e53921-dfa5-4c3b-90a0-40fe74eb158c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2203ede1-6240-4ed1-aecf-8a5ac6cd623d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77712cb1-74d9-4721-8fe0-667f823cc554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e85ca14c-c000-4b8b-a6cc-92e92e8cb040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1d095e-a965-48c6-9bce-3f78de467fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e4ab059-daa6-44b3-802d-04a06f948e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f439a89-faeb-4cc4-987e-5fdbad428c71",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "551803a9-6f8d-433c-a3b5-805e4463bc45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c862d8e-63f0-415a-96da-6ed2488325c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9824c3f4-2482-4244-9183-d1e929da74f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "117dc89e-dad6-4d69-a280-ba0cb98004ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0df677-f677-466a-8055-e13ae8c5c901",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a89d2cc-f7c8-49a6-ab7d-8e9f38a5db1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7419ac3c-87d9-410e-8411-d7240ecf32b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9c8120-b05c-412b-b6d6-a78a742fa31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffbfd5f9-160a-40ed-976e-e79776ff9098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925e27e5-7f67-4633-8e6a-e5cd8f9b3ffc",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "716287c1-92c4-42d3-aafa-55aeb32d9728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1301e16e-753d-44e3-85a4-d85e2880953b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4d51f3-9cdc-443c-9c02-3febb1682e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f535aafa-cd35-41aa-948d-e23c021f21f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3986055-2d86-478f-8be6-eb4c57fe3a31",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4a42dc-bba6-4589-b1a7-b4d6300a2b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ac6fad7-8655-423b-819e-c5086a849eb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb653c3a-f0cf-4bde-be5e-627adb8267a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c2c5dac-8f85-4e82-a32d-bdf72078538b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "302196f5-86e9-4365-9e7f-a5c21011667c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5395ed1-8293-44b6-be88-9b6bf32db475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "569e81e7-f0bd-486c-97e4-f82738cf2361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b25ca63-f42b-49ff-8e81-48f4eef5e316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd0e75b3-ab3f-4298-8f50-8f23abd80b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "093e0bb4-8279-44c0-af2f-5ac48a63ff10",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e2c30e-5f14-4520-bb88-ba038fe8600e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e0acc9-3ead-414e-8c3c-4526b8c5cd3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed98ff0-581e-42a1-adca-886961043a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0febd230-20bc-4f5b-a613-5c6c99cefb34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4068391c-0f54-41fe-932f-c58abdec55c3",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e1cc5c-83fa-4e9b-929b-a08e37b49af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88b2cf9a-61a2-4be6-8bae-e70233bbc78d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146b731b-fe03-4488-b9c8-e37cec498008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c1b3d93-4f03-4f72-b212-81d588fea6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86db9bb2-be68-4218-82e8-8df1cfeb5a79",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efed719e-1dfb-40f4-827a-6e4501395138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88e8faea-5b00-4e5a-896c-2c60365eb9ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f01cd6b-7f2d-406d-9fe8-16e2ce0b315a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26c79902-d35b-48f2-9cb1-4ae38196b21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0211125a-2c17-4d6b-ac59-48dec1ce78cf",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf81c640-d4ee-4703-9da7-095a0a58b76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "533d3811-2b17-4bea-bcf6-b84289491ce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd69d7cf-0e4c-4dce-aae8-cdc2824c4935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a34fc3cf-923d-4274-bc90-16c6d700dfab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7238d3fe-6abe-4817-adfb-1881f4db5773",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d8ade4-0921-4eb2-b6e2-ac8cdef7e6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a8106c0-3992-4cab-a3ef-2356ae2cd25b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7e1570-b86e-4d19-a988-406ff44ca4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "acddf39c-8a95-44d4-b2df-0be329417c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8041e5f-8d8a-4dea-a725-4681462d6994",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6b26d1-3270-4d07-a3a0-8e785a4e9c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b131707-39e3-44e8-8bb2-a684433319ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2d403e-81ba-4218-8a19-7811b233ba38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "21b5ac4b-45c4-4f37-9f92-eaaa5ff4ed21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1e89a1-8730-46b0-8f29-6c5fd894d1b6",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c6f782-8f1e-4cdd-8d09-c3ee1297085e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf4d2e7-208b-4bc7-b889-5ab589f37899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4deb2b0b-57c5-4345-8731-87c0f643ed66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0dddd83-8b86-4408-90aa-c446e3351c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc5b880-893c-4ffa-b99b-f1fd885dd85a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62a1fd9-6748-4b60-958c-e7048344633b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe688bc7-55cd-45ad-aafc-2ac79e61dd30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e8b221-40f5-410f-8c0f-c4f451c8eb2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "efb30cc4-1f07-40a8-b9f2-43dddd900e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c636d98e-af4a-4b49-b4b9-67c7887b615c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7cc069-5f7b-4236-9286-3b3f52c5f7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32aade0d-4932-49d0-9682-26046f850abf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4562bc03-109a-469a-9f90-a2f7e3dbbf60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb5f04e2-4a81-421e-86b7-a394aaad393c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5499b90d-cd3c-475b-ab24-73a245150c3f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef47dbe-e557-4803-b2bd-3b22f0ca3458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45b8743f-006b-4823-bc70-09a83ae91027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4404a829-10c7-4230-8e85-cd6223166955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "916c146a-24bf-44e4-bb3d-11ce8b4d344c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71803998-1bb9-4059-9529-8b0ff76f3980",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f68a9ad-c61b-45c4-bf54-b91bfb0d5b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6141b6-de9b-4b58-a3ab-a2e768ebc9d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5259d56-2a2a-4102-8ecc-006d8af56ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9996326-8f5a-4ea9-98c2-c2de9babca53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3aba68-da93-45f0-aaae-34d1d37c42e0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b072e9a3-f25b-47eb-9a4d-951a4614d612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b3c6d12-1e5c-47f4-9a9e-32ad36be6fd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329675af-feed-4746-9888-17fc32eef34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd200228-204c-4f33-8299-54927df12311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0dc398c-847f-4494-a942-85a3017332b0",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f1155a-8520-4317-902a-45db7879c15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7acbad28-d9b5-4b52-963c-262e4e223cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7cd89c7-750c-4c9d-925f-22fd7ee29fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "64867cc7-4ae2-471e-9dbc-199146b7aeb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d96839d3-3ae5-408e-9295-12c67f37e210",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5688f130-75e7-4146-8f0e-791496b4cb5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f378ebe2-d50d-47d6-a540-ca8714791867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d2a31a-fd75-471c-b61d-3106e6d5c6dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d9940b3-fcee-4d94-82a1-93a14416e6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096982d5-8dd9-4332-a11d-70038788c5ad",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85120fad-2a73-4426-8985-511eb9fd085e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b149fa73-7d31-4f48-86f9-5293563ec78f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869c5848-4a75-484c-91ac-acfe11e94a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b871a54-7692-4cd1-b221-1581982a826e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5150fc7-957d-401b-8409-8f7fa9e57411",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1795b5-619d-4d96-adcf-d7ef22a46a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bccbe780-3310-4654-b2f5-4d76927254f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d467fdda-3ee7-43cf-a646-19b258274e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "232e46d2-58b3-4d80-9b58-167bb94975e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59db27da-6110-494c-a640-8c2b3353fe07",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3af2ed-fc52-4592-91a4-3515767aebe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69bbf96a-51a9-43da-8247-a073cd0ddbc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445501f6-4f90-4336-8a4c-b7c07f282567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "59efbac5-c10b-4b78-bc58-541cadbb45d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e03c1c87-a451-46f7-9313-242887a6a53e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "049b82b4-bcbb-4b93-bf85-187d94db7256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "078b98f8-6c89-42fd-a6f9-a7d862a28087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8be0624-403a-410f-8981-61b83e5e3910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d54994c-4959-4335-8cb3-e61cf4468060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0797eb3b-b51b-4a75-9149-a1ced53d2f74",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1933b7-c6a7-47a8-b5aa-152e63ba3461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d34074-650a-4b8c-9bb9-80e263fdb742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84e8747-cee2-4ffa-a505-54280c15082a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "794f5240-b498-4006-90ed-fa795926167d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e132869-9f1f-4fff-b2ab-7110033df860",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c619f95-0732-49eb-ae6e-3834d0b80a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d445b6ce-1eb3-4afe-89d5-48e3c778deb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2e2fe3-1e3e-4143-a418-65c269355f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9814442a-a70d-4250-bd16-ee442324a824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e417d3-d438-4fbd-a451-e0f782e2fc33",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf023dae-8bfe-4a99-9f6a-9696f5e23d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a2c4822-64b5-452c-9ca2-ae01a9c00b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b001029-a555-474d-8b84-6b8af9248ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "138cf69c-885d-416b-8faa-3606857022dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c436c83d-f253-43ba-8728-a9bb260221c7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60319417-fe1e-44b6-87ff-f171f9fc2bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3a8adf4-cb57-4264-87d7-92fa75eea471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e43614a-e845-47fc-843a-e8dc293c1355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "529ea759-bba5-4518-a72f-bdf39c535c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02031dd3-2f68-40c3-a931-75de6f471025",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5892104b-e359-4995-8b7f-7aee72925a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4920a03-dcb7-4d4c-8fdb-f69e7ac6e4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf18d1d-f55e-4257-b935-37bda2d745dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd46d33b-8acf-4f3c-8e29-6b4f26620d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3723772-7131-4f3d-8d78-8ea328d47ae7",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb15963-cb94-4805-b53a-9061072a8595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3db3152a-b55d-4ffe-b959-73d738ad5356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c857cb1-12d9-406c-b971-20d806db63ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0264a4f4-54c9-4f1f-a781-0a80758946af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a9352c-49fa-44d9-9613-27cb00fcbc94",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fbba17e-960c-49ad-962f-f431563af779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb488b3d-f8f0-48c4-b8ad-6fb2802f1599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095bd268-8e48-4168-88d7-f26bd6f7f392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "759d46df-dce3-4637-a394-8237d317c455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b879c4-aed9-40e0-bf22-870f3d7039a7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f0ea78-d847-4cdc-8b12-377bbd19c508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "739d472f-4dbe-41fc-bb71-4e6fbf4d33c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2198bf9-e7ee-40b1-9ecf-3a6a97bd51c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "271f8f6c-3066-4183-9b6a-acedc748b08b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7374f6c9-0ee5-44ff-817e-4a652a4054eb",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee78cbba-611a-45a6-bdfd-ac3bcba50e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b952bbfe-9a82-498f-b68d-c3f7170bb947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f023c84-b3dd-4261-ae26-f1c2754d07dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "99965976-b343-44f4-badd-29e46c419d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e059a711-3c70-4029-911e-e1c1bef818cd",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e0ac4e-c4a7-40a8-a65a-c332be815498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f39b68bd-f506-48c6-9ada-6734ba62e5eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf47552-3d08-41d1-b13f-c8fddaa61f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c703756d-73c6-4614-a22c-79c803f85920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f00d90bd-6c30-4ef7-907f-913c00af2575",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97fe17bb-e288-42e3-9452-27258f3060cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672b35b5-a4d9-432e-a94f-a6dacab2f6f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2518ccc7-21f8-450b-b924-8d5afc307c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c5ab4ab-7880-4430-a4cc-c363a2c9b404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a20494-b719-4478-8e70-e269a27a570e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "370e286d-f93e-41bf-9ad6-438a4937b5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c0013a-1d4f-4b67-ad96-88ebd1d5fd89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98130420-a362-44df-a543-86fee85e96ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f53cdb5e-4d2a-42fe-a8e7-3e916d06396f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea236fdd-1b5d-4f3d-a858-90863b10f43d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddeb0a7-f157-4fbc-85e7-b82c657c9b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d6ec01b-5e06-4e87-8213-571f144a92bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d08783-aa0d-4d6d-ba14-7316eceddad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0aaec18b-900e-4d07-a439-df78d80104ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4e0061-6847-416d-8414-0835edb6ce26",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de67d58-9784-483a-9851-ce09366c509c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d5ea703-6143-477a-b745-ad39044bb3d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d1a058-6c18-4583-99b2-1536796f20c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d4b934c-f795-49f8-b31a-9fc405e9f3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a35f338-4ac6-49df-ab87-cecdb815bb7e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3958b6b1-6625-4a4d-bc37-3954477cb4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4a8b6fe-296f-4ec3-b629-6f12b6bdae0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767587a3-9c08-4580-8659-2687147848e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a50add6-a710-46f5-b1f5-2bc28c4472ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d27e543-386f-499b-879c-1b55e58c50b8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f633ab3e-e922-4d05-aed6-2e5db9676df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be1508a-e314-4587-8559-ad8d92be46ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c271571-4516-4934-a433-e693d44a3460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f9dabf1-d0b7-4011-86af-862e3baa4da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ca531a-ff2f-4974-b607-44f3440cce76",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a2d3c4-158b-41c7-a6e5-9f295d52c552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d5a0691-6b55-488c-b155-f2cfa4dd55a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09fca3be-8850-4b66-8b4b-7c35ccaf4222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee53be33-e325-484a-9188-5ccc2a3a9b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e7ee81a-12c4-4d09-baaf-bf722e70904f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad7b7e3-79a1-4368-96c1-7f47af0ee89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6118b667-5085-4648-a26d-14a09b2d02ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1c6ac2-b309-4fde-99c6-8a700f19d6ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4c837e03-7ae2-49d6-87fe-26c376abf3eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef13ba98-6529-4756-9e4c-435eda326920",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b442d2-f303-4c0b-bcbc-4efb75aee333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c98fa8df-5948-47d9-a643-f72892494598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723cbe21-a398-427f-9b05-0112cbc9f237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e6adac-0b55-45dd-9982-7afa471f9d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0da3c8f-a9ea-4c0c-81ee-04d6a49e87da",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70656030-28a7-464a-8088-78c93af8183d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed8035c3-92a3-4676-af8b-a91dbb8d60c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f27ac945-8c5f-4a1c-8e6a-774707d70035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "41ed84e8-26eb-4452-a9c6-5580622ff59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf53dc1-0690-48be-85dc-6f94793b7aa0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b81384-4a27-4ccf-b3f5-244cf3e53dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80765069-8187-4f2e-bbf9-02e97c683b73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbcddee-fed3-43ef-90ee-9f8e6dd424a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5d762ba-0cb4-4791-bcdc-edb254245935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74631263-03f9-4792-bde2-89ea1051a9ba",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596c95ab-fe66-460f-8201-d58c1451a16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c584206-c01c-4861-8eb5-a0e1acafdc78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9984c28-6972-44fd-a4f6-109f63c81125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9003a6bb-8da5-460f-8c29-6fb43611c089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f51118-11a5-4d1f-9d02-c53a111461b9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a01790-f095-4dde-b26c-2200382d80cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bda2e55f-6ca1-4777-8cb5-7d2f204c542b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53199d8-fb77-4418-99ac-e073b2650a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "408856bd-1082-4606-a548-71f1bf513419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b08e2bf-ff1a-41e5-9c26-ce0f69352902",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7750e59-1f04-4e4d-8c0f-1817f471ebbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c96e0a2d-fc97-4220-835f-c2f38984c365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3e5383-95db-49f5-a295-762ffc03ff41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "12f240c2-3c29-46c3-bebe-2d3ebb79b032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6fa9d38-b52c-4e20-9675-ac32cbc7e39b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4c7c04-d24b-4013-9a8f-08fc9b78f841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e85ac14-edc8-4c73-8dba-e68374c46c76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db932a8-18ab-4938-a0f0-9d28cd36ac7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a11cd4a6-fad0-4154-80c4-b2b67c7792e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad64444-4975-4834-af50-f5f787947180",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa1a0ee-1d22-44aa-a606-c2377a5fb9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081846f8-8927-470e-a7e3-e976908c162c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6847e050-6821-4e3e-9410-d163f7686841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1947be3f-8efa-42cc-9a51-38ee4f950644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6eda3e-d0a4-4a8b-b696-97c6d73227a4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e5e167-ad01-41e9-a4d9-b58f50995979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15998c0b-befe-437a-a81a-b1c01f7fcc75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe6178b5-96a9-4531-ad6d-3bff2409919a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1206dfc-de60-432f-9ac4-357603fe3162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a83ea04-4b9d-4e9f-ba6f-1047fdcdaaad",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0828c3ac-eb81-4bef-8e60-ca98fba49302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43bcddff-c442-4ece-8119-09c13f18be20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233f0a28-61f0-4eab-9060-f445940ef0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "838ae0d3-faf4-4beb-9b14-d254cec4fbc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60736ba6-cd19-4fb2-aeb3-03d7404d2cfb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31660779-6e60-4dd9-b0c1-fc42c6d8268e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40b18bd3-a859-40c2-a240-1a4e3415b5b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7844f769-ecc0-4f48-b26e-3a6497820e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "003554f8-80ab-4fcf-9da4-b3a9b5537b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c142f0-ea9c-43ef-993b-3d2631bbc9e3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8a4096-78b6-419c-9821-a2473d6cc82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2441635f-4fd0-48e3-9372-9550220dd45c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74caf0c5-9e3d-4473-91b7-cf24423bf426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d24b7e2-7d03-4f4f-bbe0-80c9dcbddfd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb03527d-f045-4601-8107-51d40431d8ac",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ba6d9c-4f70-4763-953a-7b88c7a60031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4e82724-dc46-4aea-b89c-d5fac9f3c4af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593ada0d-3187-4b86-81e3-7c558349c737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e37b18fd-e8bb-4c18-96e8-b297031fd219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d73ef7d6-fd85-445b-9665-2cf2b769e01c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe302be-3ba4-4e9b-b9a5-d391c5df4ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31b1687f-e023-4821-b09d-b2139b0e315e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60ca1ef-c7e2-42cb-80f2-aba0b5245d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61e953e3-a29a-46d0-9e70-6147437e71b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a12f459-55a5-4458-a17d-9bfb840cd12e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f40cd4-978e-46b7-bcb8-2d3376ab136b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cf0359e-8b16-49e4-9ed8-e11b399c22a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9881b5c-051a-403f-b89f-c2e7b00d2b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88c0c33b-a12e-4ed2-b1b9-6d2f9040c199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b85493f5-3889-4431-b460-67ac7cc225b4",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f56ecf-2edf-4571-a74f-4b7d15c1d9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba2efc16-465a-427a-aded-39a0984a57a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474c29ab-bdad-4215-bb47-4eb10df07516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "43230e9e-eb86-4326-8f0f-da78b6c78ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6a56cc-0c8f-418c-8418-56cbb4d12590",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270a7567-78f1-4c72-b24a-333a4b022bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3c504c-a1ac-4215-bf39-8bdc42571a11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33fb16a4-6069-4088-8cbf-8a2a2f701ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f62aaef1-054b-4116-b138-155a870fed36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9538d8ba-24ab-40c8-938c-95b640c31a58",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecae194-90b3-4068-a56e-df0016aca516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bef0e36-cb39-4e41-b415-361dfe3d6b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba70a181-b75d-49dc-a0b0-ad83b0ffecd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6735411d-ed0a-464d-b8bd-55f5f87135d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7987ef-17da-45a0-a672-2a4e05a20a07",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18acbcc0-cfe9-4b50-a46c-61ea3b519cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "980e0d7f-82b7-4557-980f-980f02cb5ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ea536c-05d9-4d6c-b884-5b3cf561e4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "08705a39-f0cf-41a2-a3e4-07ea17c013db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29cacf2e-9578-4bf6-8164-27dc790ad8c9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb44662b-9a1e-4ae7-9ba2-3fa6c8bb30bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61846f1a-fe8d-48c9-b92f-643ba4fff314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546025b2-04de-47ef-bba8-e4ba5614c4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b57d165a-7451-48d2-883a-3205e641717c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "debd679e-674c-40b8-95f6-408c8c23acef",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18fca204-64aa-448d-acd9-b3fb7c3e0bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c398bcb3-663c-4bfa-af04-fae038bd02b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324a588f-2376-4c3f-ab49-8152f3a9a522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42efaf8d-05f8-4f44-8021-ea3b59225061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b45704-7360-4112-94f6-844f740056fc",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7dbff1a-d83d-4c75-8ab3-c25cab78e9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c096e9-f7c9-4832-bc49-fbdab6cc9649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d4055a-1c36-4aca-8389-d041ca42d76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "527266f0-8f2b-4b7c-a711-cda0e7ad51e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176c3e84-9d18-4940-8830-5df2dc043b6f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c533809c-e660-4b7a-823a-5d368f52440d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271076f4-5b11-4106-beec-1e5532360922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1abbcc0c-bc49-498b-ae27-f5527d58145f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa887b2b-5dd1-4c40-844a-ba32b562f7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33027f80-941c-4319-a63d-f30eaab30fc2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81cfb21-27eb-41e2-a050-b83f2583866d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "742871a7-2829-466a-be80-438203eb1338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3fcbc6-4be3-44fa-a0ca-c39791d12822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ebc8c47d-aad1-43a7-a0bc-09fdfb4396c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5a7a0f-5a12-482f-b48c-dcee37885a72",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6e959c-018a-47c4-81ec-cfae9d55f638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "048b2512-8a90-4357-980b-f2c2c71969a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3163795a-bc4c-4487-a329-a8321f21c9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "22e288b8-7b76-4e4a-b26f-b9847039b464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa842e4b-cdb3-4164-a4f6-0ccd4b3e2e9e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86fc1c24-6182-47a1-ac0a-fd267a6de158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c73f09-9dc3-4e3b-962b-3b5264c4af71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477d06a1-a3ef-43a2-b123-9325579faf4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e9bdb7d-b5cf-4b01-82af-a8a49c8aaf80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c42beb-30c9-49bc-8340-8624005edda6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "348d7ab2-5190-47e8-8415-638d35b9a85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfbfdc34-29bb-4c31-9b9d-a3b7ea45d650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf3ee50-03e4-46dc-9e20-478db40fa894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08041eb1-6040-4ebe-abdd-8acad8ee7b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d50dd1-2092-48a6-806c-9398b5d7f9a9",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06f65b9-8f54-47f9-be41-041e9b3dc745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a3f3a8f-481a-455a-aeba-5386beff1f49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a788a2e6-1506-484b-87b4-04bf53d1b63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6264b0b0-f8da-4b3e-a072-53e6b62fc925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0bef97-e94b-41a2-8cf9-dc9a9b4cc473",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53eea2e-acc9-42f4-ae10-1d237a1d8829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b573527-e104-40b3-be6d-33bd86b86c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0b515d-912a-4674-9030-899a30d464d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "254a2e55-420e-4f2f-a8dd-c9006dcab885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "915a7e3b-5fc1-4007-b35f-35ec12602f1a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe52b9fd-a455-4fab-9830-d46881b3db04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e98bccfa-f13d-4f7e-9fe9-ba6691215d63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "760e4bb6-247a-44df-9553-24bf74134c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d2e2101-8b3e-4691-aae1-9b669858bc96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf2ff9c-8f61-4af3-b9af-fe82404b4d58",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66082bce-4868-4686-bfa3-301236d4109e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aceeafa-2b90-4d50-b518-11b878fe8d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea489b42-d458-4d94-bdb7-d5cab66ec4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d32774f-a27a-4544-892d-cc7271520b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db01bdf8-0994-4685-b564-ffa4a9622bc0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39416fb-4c83-4f83-8e42-c8dd12670334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2b2aecc-7a64-40ab-b0df-66b30c86343f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748f60f6-77d1-4610-be67-39ca9ed7738d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "233f1bf8-5a73-4644-ab9b-a021b8a76c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c352405-68fc-4f48-89e7-62b150da756f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d0994e-8a07-45fa-ae91-2c6dbad35b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1331037c-b5a8-4e19-b745-10f6178f1cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bfe9553-1044-4b60-b076-9457ea3b23b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7177a91-305f-4ca3-a624-8658f197cb88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b61921-2b34-4b47-beba-2e354ecfbd48",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f82b45c-f560-4cb6-9164-1fafc8e0441a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b0e9f7f-fd75-4eb8-b815-cae6f65c920b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82cd18a0-ec4b-4fb5-b205-a4b6b85b77b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a312c6af-9b7d-4d4c-8a98-e05273d6d9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a4d890-c6e9-49fa-9947-4197c7ba3902",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13287524-58b3-4b81-8dbc-7c1795090c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0268aec-5951-4e05-b4b4-314851b637db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452cf6bf-07c3-4fde-b7da-7b2216273ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f016545-5269-4d4f-9478-51e472189af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7876814a-42a1-4d78-99a7-42f100c72031",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "826a8b84-aace-409a-a90c-b015b9f026d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d05942ec-546b-470f-8bbb-23c612d579b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eacd08e2-ebc8-42af-80f5-948cc6ae96cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5dfe958-1978-43ea-8a01-8c5aaea1ab52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83b5ca5-10e3-44c3-8502-c77bd12df523",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9ce519-53ff-4d99-bbf2-49faf94e7ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a88ef7a-34f8-4d34-a0da-f5c201f2b3d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4043a2-efc1-4aeb-8166-7de0460e4e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "82c95b18-b1f7-4951-a561-eebe7422ddca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c209e9a6-a228-4a68-bbb3-bd042bb6b72b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6b070f-25d5-42e0-a2d4-ee2d6783e164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35000457-d691-43c2-a3d5-9ebde9140ebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95483d5-bd11-4a55-9460-4651014010d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6532fdd-272c-4f15-857e-6735256526a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3b6b70-134f-4c03-a49f-ec7a0dce1d66",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f11c8a-2469-4e11-ac9c-519c0940c00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30a41724-9f47-407f-9d1d-1c65501da96f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575a74e8-0af1-4144-9736-542b8822d468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "13c71fd2-586d-4e4f-bae5-28d350a503e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d01b8f9-9874-43b3-9151-b0bbfde0f205",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff914e0b-05da-4276-a84f-8838f01cf299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4016aab-a364-42ae-9246-f54d42635580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a8fdd8-aa6f-4e13-b236-79d1a9052f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "53c6c125-f069-4068-bab4-cc7505a2b0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "419b739f-56fc-4f37-8f32-8feabe449ad4",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c032f1-ac84-4c1a-9904-4a3cb48fe06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9475fced-e7e9-46c3-afab-06cc2051edc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3155fa5-9bd5-4857-97cf-c809bb553164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f5fc6bb-18d7-4d67-b996-abc1a6e0837f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d24427-a5a8-4ad4-8e28-556c9b81d5b5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31e0325-c9a5-4f4d-a085-2a7141a078bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e76f78a5-45de-4536-be21-9b2c654eacd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f94e5f9-10e2-4caf-b41a-2b29b6251cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6724eaa1-c944-4ffc-9f6e-f380268695e3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6035d16d-6de2-4117-8638-ed680d205df4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9961d682-3b41-4207-8392-1243cc94ce8b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b720db39-405e-4bb5-a590-695fbc002282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bcf81ccf-553b-4cda-9a33-c4a809308906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fba9735-a122-4fff-9307-84e36fbc57e2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14e37f00-0424-4e7a-bb48-cdfc3f4d9228"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39c16aad-7acc-4228-9d3c-1ae718141128",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed36ddba-ae03-4904-a3ff-68e49742dc1e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c240f819-c47f-4ea9-9344-f8d5527d0e28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad68160b-463f-4118-8d51-2febaff3e7c8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a43eca5d-7834-47b0-b049-e2aca8dd93b8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e9be8b01-81ab-4ca4-9182-e40d68b2daca"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1c07d4c9-04bf-4f10-8d43-52afdcb5d5bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2361ea0a-f457-456f-91e5-4861fc360ed7"
                }
              }
            ]
          },
          {
            "id": "26623f25-49a6-4c95-b93b-4dd46eca9377",
            "name": "Positive Testing",
            "item": [
              {
                "id": "43dacdb7-1d68-4ecb-a6ed-0c83aa7edea1",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "f5484298-f496-42b4-bc64-4f7f70ee5bfa",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "237dfeed-8773-4807-85b5-32857830a3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "15191f8e-9324-4d27-bb71-4939e9d14bbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de58c41f-a73a-4a45-8f72-c757fbf4815d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0353fab-47a5-41a6-9ad9-d4c3ed3e5867"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "36074a9d-6411-44ff-9476-54102508ed1e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ea39a47-6b32-4147-99cf-8a5da9b26d22",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cba85631-eefa-4c73-9ace-073aaf91ca83"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06124f1e-3f51-40de-a978-bfda4c73a396",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9f32e15f-30da-48cd-b85c-3c16903d8a1a"
                    }
                  }
                ]
              },
              {
                "id": "324f44ea-2d85-412d-8d46-f9bbd8d084d7",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ebf1f07e-328d-4903-87ab-f6ec20cc6e8f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2bd50162-268a-4f4a-8389-d85f2f752511"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2cfc286-8488-424f-be68-24813ff1ec28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4ada3035-c2b9-448d-b770-739dcb914975"
                    }
                  }
                ]
              },
              {
                "id": "86afc8df-b6bc-4f7c-bcdc-98ca93ab9e52",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0e202e5-2b0f-4cfa-af47-d6df312d684b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40441272-5522-48be-bcb7-992e755961dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbdb5f77-ea8e-44d0-91fa-ded1deebf4ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2eac5e9c-9510-4478-b0e0-95731bb73888"
                    }
                  }
                ]
              },
              {
                "id": "c4418592-2d79-4bac-a382-3cc6637deeeb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "90be2538-b732-4d29-8bf0-2b80be081c0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c8d3db8-8a60-49a3-84ec-4907d749fe79"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b096b22b-ddab-4cc2-a690-1c9f5addf84b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e7d057ae-2f9b-454c-baa0-6e564c699a63"
                    }
                  }
                ]
              },
              {
                "id": "2a044ee1-0e46-4c13-9de1-e5572151a7de",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9947c2d-6d4b-4187-a39b-b19bb1b1fd37",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f8a315a5-25e4-475b-83bb-147c23becfe9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c1d17b6-86a4-483d-803f-8e8703a5d289",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8b4b4ae6-48f6-45bb-94d3-b9b5a1841143"
                    }
                  }
                ]
              },
              {
                "id": "f4a459a4-bd1b-4461-9bc6-ca2ef79c476c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8db5145e-ea37-4d9e-9fe6-8b4fed09fbc6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "13e65d17-6475-4f1f-ab19-5c52c5844765"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aec6cfef-bb34-43d4-b84e-50bf4ffc9685",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ccc0835e-4f63-4d21-aa9d-f440e8228656"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "106a9224-a2d2-4f42-8f09-ea2feb3a6c7d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "37684825-1907-44d0-b517-f6980d728a95"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b5dc5201-8a70-49d8-bcd3-2ee8f1544d98",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c29a7f30-e90f-485a-a3e9-53a957268541"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7bec6741-800c-4b55-bbf7-1d464acebd0f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "081352ab-0404-4ebe-b348-0231caa1d878"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dfa7cc20-3abc-4f7a-8bb8-3518fac60256",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6061e119-d24e-4489-8fdb-1223ff63934d"
            }
          }
        ]
      },
      {
        "id": "2acc3cbb-86d7-4f96-9d46-d8aea69cfee3",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "893115cc-3e0d-4f31-af15-debaed15008d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9215a09a-ec27-4dc8-b790-e75857930ce4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c518deda-3b52-4634-add1-4cf2126bf57b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "662baec9-0b0e-43ec-b601-17536131ba6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7bbef80-6afa-4e8d-889a-e5b08cb2e099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97b0377-8b88-4c7d-8a71-79eb90ee42d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "923eac82-213c-4be3-afda-eb2520c3a15b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33be12b-330a-44e9-b8d7-ae07019becfb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f737630d-3d24-4453-af12-fcc313164b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e487f42f-65c0-438a-94d0-0db450873662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff8a080-1511-4257-97fa-f9280b95175e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f7d07ea-f5bc-4b2f-abf1-a02be8ab90dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f71511e9-1f71-42b9-a32e-0806c343bc62",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a08153e-1eb3-427c-9c58-c2b9726815c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47189e83-a8e3-45c1-ac76-e180f72a71fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96262b75-4638-4067-a3ad-c92e20d3ee72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec0dc613-2cb5-42c9-9685-56796b796de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8ad1cd-57a3-4e7c-9fde-3aeaa848d151",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6c9c05-585a-4dbc-8734-5156b9ff336e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7e33682-98fd-4a01-a030-9fb6242f0b8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c3ee11-99e0-4a71-be1d-bd1e22c2ef47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "80c57b9f-dbd4-49d3-bc0b-01431e7b730a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f413ade2-7394-4dc9-9c29-73d0fd5a46e8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0589bb-30f2-4737-be2e-5d44fa61f788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "102dbb39-8a01-4105-bde2-22486545a28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf988edf-8711-4eac-b3a7-c7a19f494133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bb35c82-878f-4d6b-8976-1617b9f17061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013e5c2b-8d74-4081-a05e-eb8f566e6c40",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c19233-9453-4a9e-90cb-f33e3aab5256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55360ff8-4484-4ae8-b560-37b76a87b7bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3667aed7-fe9b-4cd0-bfd0-346a0c605225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca5b0cbb-820e-4cd6-8582-6bf9ceed9730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dafbdd96-6b92-4f08-ac3a-286f70c69da8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b5041bb-e556-4590-b579-4a58a6e2ba1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6b411ce-4d74-44c7-a784-9a66a83c374d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e01854-f05f-4808-9267-0090e33d585e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7764491f-b00f-435c-bf93-e16ded4c2dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08978d15-2f64-48d3-b3da-9926542f7052",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8862ff-a58b-462c-9cba-db5d5abb436b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b110e13-ef8b-42ab-8496-76c74449ce3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31caf0d-8ca8-47fb-8d76-80812a77cc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23c91cac-84c2-4d26-b303-ace872fb3ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee621524-700d-4f18-96e8-062e99d4f901",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28f4183-376a-4499-b260-e63204db579a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9065888b-4301-4aaf-8f95-4877c2337588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1675f2-1288-4cf9-9792-9cf0f9769c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b1c815c-ef03-45a1-89d1-d691ddbbc956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2f2ed3-9683-488f-80e5-9bdd5e1c3aa1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6299d631-e0b5-45d0-94db-f19adb380f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11cea80-2bb4-40f9-a912-f75b0580fb05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8433278-9d96-4786-97ec-72e50777017d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "066d8be2-c558-49e7-8c08-7e66dadf42d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8a4591-6b82-4d24-83ed-48d0f6b84ca1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f21fbfeb-7333-49b7-a7b5-6339e89f0cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "395e17a1-9598-4a3c-908e-aae452ae557c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e4921a-d5cb-4033-97a9-9a53376f7cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "58338290-3860-4fec-a0cd-f7fe2f7a3953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e45238-0ea9-42e1-8912-9501e260a697",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60a5072-0f48-495f-a729-1dd0aacaad7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f0e90a9-1283-4396-879c-019bde5b3ff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156784a7-b6cf-4b86-a25f-f1afc23135bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b110b8c4-5e05-4850-bc67-b1033e3ffc5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6becf449-d809-491a-b535-6933146876a9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4ef170-6882-4bc8-92ce-ad8d63523f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4b9da10-a545-4de1-8b0f-07831c495f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa13469-76de-4a7e-873b-e03c71f44fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f80a17d-53d3-43b5-bddb-fa032b94c186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9560536a-e651-4a02-989c-d03c5356b739",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf155dd-636f-4716-af81-1794095beec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e6c5992-6b33-4ef4-aaa5-5ff179e061cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e57edfd-9387-42c8-a91c-8392fb39bc8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8acaabbb-ce9d-4b41-a0e2-7bc76f73d802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b39e2b5-0f5f-4163-bc14-52ddc1ade0f1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9a6cef-0b54-47cb-bced-a6a89480f59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f5d33e1-e825-401e-bff7-e1a06c19c584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99593b0-c553-40d6-80b1-e8f7a53eddbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe9e52d8-07f6-48fa-897f-a1a37f90cc3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de47016-ba98-429b-87b2-3c8cb2326948",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae23755d-4ec9-44c4-8d73-1fa0bd2082c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b409885-3d28-4817-ab05-ef0971e60653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6096bee2-7cd2-49cc-8185-06b3280c1189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ae2529-9b0a-4454-bab3-a17602539f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba57ca5-b131-46ed-bfcc-cdcfd3e1e980",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14368c28-2869-4645-8266-b8942da7d01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ea8b3c-8b35-4be1-88e5-7bbe77d399a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b21f68-94cb-420a-960d-db73376124a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "80147c1b-9ae4-4831-9153-f43161f3a211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731d7f26-ffd9-4cbb-912c-c13dd226677b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbbe7193-03ce-40e4-ac2b-c868058d9047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0961a21-6589-4a99-b03b-6888a5f9c318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ea744a-c2a0-4d49-a396-5fd3f26892ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcdf7e8a-ad57-428a-b7e5-2706d28982ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1151359a-a4f7-4a38-b639-6ee5cdd52643",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4633c49f-30c4-4034-8c52-17637229b6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "619622e8-a9de-4ea4-83ea-a165735ab59d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2165d369-2840-4523-a334-3a81c9870125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "659ef638-3934-43bb-81c0-0f1beb817368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d048477a-26f6-4e23-8bf0-0290d3cc28ba",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3fa3014-410e-4c8f-9164-eb5beab5f2c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ab925c4-e4dc-4e3b-8e51-ed5d4290cfc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9868ae-4630-4d04-89eb-5f7bbdd2dd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46e42820-a1d3-4294-9cda-9556214a92a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94bbec8-9b52-41de-b85e-6d0531868242",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe09d9e-6465-4a90-85d1-4a753e1ef4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f67df3a-8c53-4684-93c7-c2f8970dbaab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd82917-8997-487c-b44e-28e039e2feaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9650f6d7-d629-462b-8b5e-973ff9ff6ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391b8d82-6c80-4a35-adcf-bce04df7b89e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6376de52-ed70-4137-b502-78dc0e2caa7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a39546-b1c3-4241-9620-14d3fd9cc843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6006f2f8-218e-42d8-aa14-64bffce76d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f592a19-a7ba-45f6-b34b-a48c2506d46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a9d05e-7129-4ccc-808b-4e4f4ae932fb",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f613391-42ba-4861-9ab1-bf9eda9d9004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "495cf52c-24c6-4960-88b2-cd3296aae735"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de61b6df-6dea-4573-ba88-6cdfc165f29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8fee50a-2a45-47ef-a0c6-e912bb155df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28538715-2145-41b2-a770-620142c3e0ba",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "158544b7-5c8b-40a0-9b40-6c9d3da66453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "863cbd8c-e49b-4c43-947a-29cc82f57f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f08bcef-d214-4af7-900c-6aea3706c191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af5810c6-f6b6-4f29-a161-d0ac84b6bdb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf7f02e-d092-45eb-b2e3-74700cbdb68a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fab162a-973e-4e51-a841-29250fa5eaf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00f444ce-7ed4-4cf3-8f1a-d9064446a2c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbd9c89-fb15-4056-a743-2576b81238ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6301b09-fc57-4614-8cf1-9f0363aa417f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6c78b6-7890-40bb-9659-d7c0f55644fa",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4f736f-c0e8-4c38-85c3-397dc7773f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19792c84-fd95-41fe-ac44-acd965eb2099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751a2aee-be60-41c2-90a4-6fcdccafa58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e768bab3-081b-4554-8d04-78cdb6b9e398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21193c1b-8927-47ee-b021-a54b4c7f507d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1220371a-0815-48e6-8ea5-fdb29e10e059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1014f736-76f7-43fd-aa83-9b35c56c21b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d16cd5-d101-4d18-b689-1d85b01fdb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1144c9cd-47ed-4a7d-bce7-5007642215ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e638bcbf-b6e6-4a67-a759-8017c04117b7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13a0a93-2d0e-45e5-84b7-d772ecd9d831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3198738-4b15-40ac-95b7-c3619ec519e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac00109-4b64-46a2-8db5-8aeab6549281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc0197d3-315a-413d-a036-8ec8fc1f5231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7202a25c-2214-404f-bd01-c72783b53104",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2b61da-3088-4164-9fc1-0f188400b139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28b0cb34-7a53-4c23-a0dc-f565a29cf94d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67583572-d28d-4729-aa81-75efb6b19985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82005bc2-926f-48a0-bbe8-9062e3090a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d39e3c-c856-444e-8963-b7dd9d3fa602",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bb61e7-ab2c-40c7-ac4a-79bf5fdd229b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abecd621-ceef-4f1b-90f1-8e0a51dde683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c75b3811-eb31-4222-8359-aab40ed0bec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db8a56a5-6062-494a-a7ae-63704af55b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6176dfca-b09e-4056-9344-7a2a0dec1593",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b40642-65e6-4bd7-b734-73a05a7604e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc83babd-6a50-4cc5-9f88-12345d565532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa36723-0477-4152-9a3f-b3e768889e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "172ae837-353c-46c9-93a6-a82b30e88d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6775bd57-f860-47f7-b571-4f29304f33ad",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656c7888-1a7c-4c3b-9da5-f92b1f18509f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cdd004c-8e01-4005-bb15-bfe5fcd2a041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f7f542-7115-40a7-8994-075d967c8cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97b8d182-6442-4cc2-b85d-c4c0d588b753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7e724e-fcbd-4e4b-abfc-b124346880a2",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d5e228-fb28-4223-a5fb-868ca4ad133f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41ac3af0-04b6-47d3-8cbb-4f0def5c6b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a57eae-fbcb-4fef-9b85-9cf35dee584d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1578d547-ab7c-4289-9329-08743e4f96a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca557e14-ae86-460f-b966-8eacf58659a4",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7211758-0929-45b8-ab6c-a9e6aced38b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d48b40-dead-41b7-bc80-4e4052110017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ddc860d-94df-4924-b61d-2d6e4aaa98ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b23365-c790-490e-9f5f-3c5ac8d4c007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb52c150-c81d-4980-a31e-eb3a811b5926",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b16b15a-b475-4243-9bd9-fbb9ce9eef17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a4d952e-333b-4dc7-afb1-176ed500095a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c380a1bb-e01c-4215-b947-7640dcab5fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f0486ee-0596-4e8a-807f-dfbcb5d8d33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385c927f-04f4-4b98-9a71-21c67ebe4c06",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6d68f4-2cac-4820-b7a6-a9461e40bfc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c7e0057-a2d8-468d-9c8e-eae1b8d80fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a973631-9171-4929-badd-5be7ea2bc6ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "373f3024-d447-4a4f-a349-eacc868a79c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89b59ed-d0ff-4bb2-b405-cca42bf08ca5",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e79ef95-d333-423b-92cc-b43cd4bcc18b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5fcd089-0b91-4cf4-9b84-bb8ced7bc703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c7896e-2a3f-4a31-bba0-930e0dc72d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "047578dc-4b16-4edd-984c-ec677e99427c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "62cd7511-8388-4ede-a198-afbcce4b08a4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "26d5ba1e-b9eb-45c4-b84e-5e8a1e828dbf",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc3452c-6322-46ec-9147-8b8987faa535",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c719369d-155c-4ca8-9192-9487d6b02684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50c8d9a-4a1d-4b37-acbc-be7b5e50b1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3b3fd49-bfa4-4803-90f5-e5d6b961693c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8a09735-da12-4640-a048-628986048046",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7476a37-3896-4a25-91f2-caa03869c75f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "06bc560a-22ba-4bf1-b68e-59bc823c293c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9802ac74-5d59-445d-936a-7c8198916099"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0e99aa9-4381-4225-be47-fa50e2926766",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9bb23de5-33d0-44d4-a063-579f781b3710"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e935e346-8b59-4176-bb8e-726aba57a74d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc52a1ca-a941-428d-ae2e-2f5a729240b2"
            }
          }
        ]
      },
      {
        "id": "ce6b0273-0667-4454-a02a-4f5fb6b8d99d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "45636f91-5c62-49a3-bc1b-9a9252dbf5d2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c108534c-28ed-4560-9b5d-fecbcb7168bc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9d9e74ee-2dcf-423e-be13-4104c7106b46",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87265610-8d10-459a-a42c-51aed3faa4cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "764e83b8-fb5c-4036-bc53-0ffa55ce82e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d76a239-6777-4ea5-b4a4-8a1984bdfeee",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2f8809-7bfc-4fff-9ef8-9475a265cb01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a9827ae-33f1-4791-a54c-4eff167e1366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd27abc7-e2e1-4eae-876e-3ed10e429e24",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c076ed-c2d0-4f68-bbd2-07ba117e251e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9390cfd-2e9c-491c-8118-e5f05f6b306c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e48c21b-a895-4027-a5e4-87b940db2942",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c920aa1-c105-4fa8-b1a3-89b49c64ded2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acbad42f-6923-4f2b-b267-70591741a12b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404a2d0a-df60-4f9c-8392-b5352dcf9e5d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ff9e19-37a5-4b82-a1fd-377ac1544321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30fc803-f92b-4429-8ef6-fec317273091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d427409-fd01-4f72-bbc9-481710be7833",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b372952-1175-4020-aa3b-6a99d75f2651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d65ddc3c-66ae-4749-8f03-f0e93e4ff16a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09839b8-0812-49a0-aa44-5e092efc8ede",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134b9cdb-9e39-4ff4-8ecc-c68e57bcf7be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed08b013-572c-4851-bcb8-54465a247a19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4977f1-e369-4450-9f36-ded783c98f3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6df3a7a-3704-44a8-a064-1bca2004847f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579747b5-d748-4ec1-a707-ca558f51dd04",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ce7cee-ef08-42ba-a165-dfdd48d9031b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "464a478d-6418-496a-8e29-913394b0fb84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a462d8e8-8f86-48a8-8775-634b6c8353f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df85757-f884-41ef-960a-40e0cc106ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a63d291-b060-4b12-9bd4-a1d8cf209baa",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3518e24-6bd8-4ab5-9461-d5c3266983c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c87d6d5-ae02-40ac-a3bc-91720c02d488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad01421e-b990-4c68-8789-ce92bd0727cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc24b42a-febf-4fac-8b2b-b1c95a4531be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b902e7-9f51-466f-8561-1a2b8a29b00e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4fdda7f-5c6c-4373-a41c-79a3e3539577",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "167a9d12-aae0-4bdf-9b34-51f358f130f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1215c704-2b4a-48e9-9e5b-746a34f56ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11c99f4c-5c4a-4864-9806-bea1732382eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8cea29b-5f7a-4887-b681-dffbb7447905",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bdb80ee-94db-4b3f-b32c-e8112b51e582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad935852-16f1-4915-8bb5-20e6bf2d8870"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1c2ab8-511a-4212-901f-ca5f445aa05b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad971754-fc3f-4c2a-ac93-f85e5533f3d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe7c827-31b0-472f-9e4d-115f0645c31a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f0a84d-8b7e-4bd6-86ad-6383d6cde584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "270c17a5-27f7-4225-a44d-0f29535271da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c25cd85-e898-4d87-8cf4-78cc4480a8cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "298c3281-9772-4f77-8ba1-53f79d220034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e71e723d-e62d-4c45-99ed-ebbb5d88a798",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c900164b-8370-4509-b226-99a44ba0b699",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "489264db-1c53-43eb-8f27-79235928fbb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d871df5-0ef0-4d73-97d8-b3f003b4a01b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e3e3f7-15a8-4c6e-aa3c-f39f958c0dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072d99d0-a5a6-4ace-8bf9-cae7b8997523",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f28ab0f-495e-4337-b6e3-f04b601d7bea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bda4659-d229-4568-8f8e-41046789b88b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d280f8-da55-49c0-9175-19fff1b7f2ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55786c73-62d7-469c-b8f5-22414d9d283f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b65c4ce4-1fbc-46b7-bdd3-7a5bb0eac17a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc20fe3-557f-4eef-bf1d-922688b90132",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54af4128-29cc-4f45-bdef-530ea8837c8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d50d36-81f7-47ef-a5c5-405d5bc19d98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59a13ce6-5182-4466-bae0-30b854f1c91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97900ce3-e430-4ec6-80fa-0f8ee8d0e29e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0fb3fb-cd6f-4695-847d-7a08629dd85c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4e2bec2-f348-4e4f-98b9-a09c51041a75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0798343a-0337-46af-8965-29ef46a72ea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "771fb7a1-8b78-49a7-9894-80066c67f682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5598362a-5eb2-44b2-a563-e355159169fd",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ce6ea1-792f-4d2d-be3d-d272b593861f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8c9aba8-e137-4ce8-afaf-ebcaf436df05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6508eb3c-0eb9-4e0b-b088-72e1169e963e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c180742e-74e2-4757-97e9-ea69535e6faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce176509-e185-4c5a-b53c-588892d5c709",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79d8eca-339a-4f59-b16b-7d13f67973d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b13625-cb5c-4de3-84af-653bb70a5441"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d64805-3af4-4937-b5b2-c1b70fb51f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0c6950-bd98-47c2-8005-ba243f5c8a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecfc47e4-24de-4e5e-9a99-5bf07446d1d3",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e119f3-c866-429c-8a48-27f6ecf61cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d37041bd-cb29-4c07-9964-a7a236bf56ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9e7836-16e7-4d62-b77d-de5091ac5ad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9275c7cf-7fef-4506-bef6-be47cd2797b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c9a332-d718-4889-801e-82d6d0749faa",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b654a79-f4f3-4ce7-9108-b72b98eb586f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37df1d38-825d-47f5-86b7-b49a091ee500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "194bb08d-0127-46f0-84ef-8061a1dec936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa54b4ce-ca70-43a3-956a-64511ca9450c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210857a3-806d-46c1-bd7d-9b77b961e7d8",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb5a867-3186-4a02-9a20-4363abf741e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7e02a22-4dfc-42ab-916e-59881d9b8d8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4d0e45-0823-4562-84bc-8f0733a90c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c196cad0-ae86-4bc9-b539-b0d89122e452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4189812e-199c-4da1-ae4b-b1ce4c911f86",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6ad814-777e-4d89-8868-c3a52216236f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b9970ee-f05e-4ba8-8607-01d778c759ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad9140d-dcd2-4e88-8c6e-f1f4f9030717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ed41c5-988d-4543-866e-cb73e45ea8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d7e9f8-c7c7-4c9d-9883-c9f0105d77db",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78aa547-cc79-4128-8dbb-1ba5f0caed4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5976df70-a7ab-407d-9700-b2f34243eab7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f426e9-99f2-4493-94b6-7978ea31a5f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97f7fe25-317a-4b19-a3be-d5b153e95c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e3c546-b44e-4b1f-8dab-4ef5bd988ed5",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb882148-4c50-46f8-a38d-ad3d53799329",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe274e58-49e8-48f5-a0e2-e183c3923fb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3721e69f-c0a3-4e94-add2-3bf9398338d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f66f9db4-7a53-44d0-8dfb-a11f4a08cd56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe3ef3a-7c4d-40dd-abc4-b01939267630",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3042becb-32b3-4ea7-aa8a-5137418cfd97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b422570a-0a49-4970-b955-98cd0254b8ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "973fef21-d411-47bc-8441-774d9a8bf97e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cb76f78-2778-4d18-b92b-73d853af0bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b491dee7-8ae6-4170-9f2b-a08571892e93",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59d7485-2b48-4781-8ec9-d1f421a1d8ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8453515-27c3-499f-928d-664b7af82312"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "398e5979-11b3-4708-ab28-e23b2c4edd81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8628483-1b80-4ecf-a697-5f4b91e63e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b5b0fc0-8960-4a91-9dc0-3d1e6722d7a8",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895fbaf9-a632-4391-acb4-0b9141c0cefe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44e48e8c-946a-47fe-a6de-ccf680d239cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4be0147-4f5d-4994-82f5-6af22a4858b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d61150fd-74a1-4362-b024-a8a497871ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7584e2db-2dcd-4a25-bc68-76b888376d7b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bcdb111-fc2e-4f69-9754-1b0738c07a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "721a9721-cc68-4a06-8cd8-5c08131773a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "399fbe51-ed92-4ff4-9076-cf18e199147a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d5e9fce-ea38-4831-a853-e97e3bbdaf64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ceeb096-8823-43c0-ac4e-a6eb1842816d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fecf275-7240-4180-99b5-7cef1c2668f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf37064d-f4fe-470e-a5fd-84d0510dcac9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee23614-464e-4bad-9d70-ceec420c4f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa135d6-c145-456e-8f70-97a826a10794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b29373b-ce29-4ea8-a9e4-3ae2af663d7d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c40b7b-ed03-437e-9332-9f31118d03d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a51f57db-23a2-4a53-a2fc-1626a4e5ab50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4210c3-0ac4-49a9-afa7-e3613029aba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6857516-110f-4d7a-9a78-5648d50e2198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ade3d9a-fa05-4e7e-bb66-1a564b322525",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e1f2eb-f1a9-4d20-b7e5-3f434953c07a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2726b028-0c85-484e-8b20-db22256312d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "759239e0-e587-4b45-8783-4268dee11f8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f88b9518-d282-47c5-b297-4bf85305a009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a38a0f-dbd6-49df-8bfb-ddb782eb39f7",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b8c235-131a-40c2-8e3f-0f8903032d86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc216cd1-3069-4b1a-8350-8a1444545781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2192623f-5944-4d2b-94d6-06f145ced4d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29b2aa82-1347-4110-995e-d4f0b7e99de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c726ab-caa2-4cce-b94f-13202bd8c1b0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c441bb-b9f4-4487-b1bd-16a23612e3c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10de866d-ea65-4920-83fe-d04d9401653c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61f0bd3-e338-47fe-9058-6cb46c59f72c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7e7958c-9111-459b-acfb-8046be529a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78741bef-40d8-49cb-a0b7-fd7decaa0a77",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1704fce-017d-4bd6-921d-97edd9479a6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a40acbab-5f1c-475c-b36c-1274fa103385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fbfef00-7697-45c9-9ee2-ef8cc3264519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce4f3744-2b74-4067-abc1-2a612ad1fbd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c6af18-6887-452a-bbb6-74d40fd9ca55",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82fef539-6059-4c52-a627-ea51fd7bbacc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3862b41a-92f9-41d7-b2c0-c8b1c9057b9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e064b1-e0ea-48f0-a823-8a5fe8944317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fdb7742-4b38-4f5a-8c86-bc326dafb9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2daf2626-22c7-48ee-a674-ffe1eb059d7b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9200009-cd18-488e-9c25-a452fa23306f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a70d164-c76c-4d80-a9aa-f01d648ad082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d848edcb-11b4-4295-a292-e48da92fbe12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe36040-9212-4f5e-81d7-01619f919f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea39ef3b-534f-490a-98d2-4802bfc83b33",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422d97bc-5552-47e8-8243-92a4b210addb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e48fd3-e817-4651-82ce-b75147de1fa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af091471-f14a-4e02-a920-8762d0e16b32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78962878-f961-4d77-8f49-db94cf0e0ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e4688a-2e74-446a-9b2a-2606207537c0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202b8c0c-3418-4d36-bb0e-50dd418bb0e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f7f6a6-234f-4e21-b019-af0583e5fd72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "567d7f36-1410-4d6e-acaa-13a11f404a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cce63060-d722-4d4c-9353-30ccc612bf07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618518f0-62ad-4d31-a59d-39965bb0b30e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d32a30-4f08-43d1-9150-8cabfa456d11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a07c0dc-0024-46d9-9528-5622f64e35e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d39e914-1c64-490d-af3b-ff92d8d2b91c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6934bc06-b27e-442f-985e-50e35b692e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afdbeb7d-6a63-43b2-bdf0-8ddcf06cf0e0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f428bc-b871-428e-b51f-4bf4a68a9475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d7b1be6-4555-44a2-9df7-e33f58365e64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "070a2aa4-9468-4167-948f-b4e30fa47211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efa59041-8643-4551-af96-e0d265a3f783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6089441-a78f-407c-acc5-4288bfc0858c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd590150-dfa5-40c8-b7d8-0b9228dc72f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f80e1e5b-e971-4f42-9e5e-0ea89f87f98b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "003e0f2c-d7a0-4519-9640-8c2c510e3ad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b626b9fb-01fd-4f21-8db7-0ddadd8c6bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994b76b6-d9e0-45f7-bf42-38eebf9408b0",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900c0cdb-abbd-409b-a453-54427c9589db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b0d391-6826-4bbf-ad22-d403af8a4a00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35548672-d19b-428e-9803-c070014d3bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fba4bc89-a136-4060-aea0-5083ee111eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea153f54-4337-4d36-85bf-2bda00f96bbd",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78081b85-c219-4d01-b7a2-7fd460ef5b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae685f7-2fb9-4964-934d-d74022ed557c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a42f506-3c8d-4c38-b9fa-01095666d9f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "637434cf-4af7-4d59-a6ed-2614ed9fd34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e75875-e6dc-4548-bdc9-87a9c9f30e4c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e2d3d9-c82f-4717-80ea-261584fbc129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30a510a5-0866-442a-acf3-5e9a86eccc78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41d186c-3cb7-45e1-95ee-750408234301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c18ba5-79c8-4808-a5fd-de45acaaa87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20198597-ee95-4fde-af8b-05dbe61452a6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8eec27e-02ae-4813-b14d-ca80a26dad67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7db8357f-c404-4cd0-b302-69265a59da0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a3c1b8-9ce1-43c2-9612-1d5948b3d35c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bfb38d8-6f1f-4bba-a718-4bfabccb35c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d637a64f-244b-4c9e-8e17-e6cf12521f26",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d999d8-6c7c-441f-ac00-6cd6b7f60f41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1adce64b-e51a-4914-80ca-8e28d5d38b84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41bac0f-82af-464f-b25c-41d048495223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a43b27be-7576-420e-936b-54c5c4c1a169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc3304f-8235-4006-b862-b1e2602187d0",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ed9606-e4e3-49c2-ad55-a936022c9126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac3396c-ecfc-47b1-920d-97398d012213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "071c6d01-a8bb-4946-bdcc-af8cf371f410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e93cf42-6d62-46d3-9fd6-60449c35d9ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07735958-319d-4796-ba72-9650fd69850c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6ab719-ef42-42e3-b37c-eca4454968b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b60c6568-cf74-482f-b8f6-f648bcd7b7f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3988b7d-6dba-4687-992c-ca83faa29f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "767afaa6-1bca-488a-9328-cbb0fae3080f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf94d92f-7e2b-47f6-9aab-5e19d486dc9b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597735fd-26b1-458e-af60-32e07bbebfe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4575a6df-a4fc-449c-9ff2-9ba99dcd8503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "546956fd-991e-4ae3-a46a-c6a5b098a0c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b05f5b5-cf09-4652-8d68-cdb5567c983e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b25a05a-0b07-48d4-af0d-9a5bf8494bae",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d804fda3-c87f-4ac7-a9b9-05a03283a726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac7a030a-f9bb-4355-b00f-a532f7c186f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "007da4ce-fb49-4819-88fe-21322538ecd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da730e23-040b-41c1-990d-07cd62e07459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8536eee-05f0-43bd-b306-0df8f48c5801",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5172dff0-4e88-493a-b563-7b1401f48105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bc530ac-5530-419b-ae8e-fd2401471116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66e8d61-ddab-422d-a59a-08cd4a70144b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f062ba-5370-4c3f-b59f-e3eb160f1bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fdc1a76-569b-4a72-8708-7c1aa737de66",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6281f73d-89db-4bba-bf61-8a78a61b23e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3432c7ec-883f-49b7-b04f-652c8dfea5c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52100ab6-1810-498d-9f5d-d6c2decd83a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a5dd31f-b0d5-4750-8a21-c448135c3c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6a98c3-1f59-4de7-ab4d-a433506391a8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69553fcb-8f9c-4b8a-9dcb-a1510d71a2c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d8597b-be87-40cd-a418-465a9f50d4aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61dc89d-db38-4c22-a66f-6aef30ed49c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3c8b7c3-c35b-49a0-97dd-a63ac7ade84e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8020d7-e788-4c6f-95d0-e9fe0deefc3a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6cec920-f6a6-4b9b-bb87-8bdb36067eae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63ac2974-cdcf-477e-8d70-fdfd4288c8ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "879f196e-5d5c-4950-8c3e-348436a2608c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34244c8d-1ce6-459a-949f-3e6d295f46b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26d74da-98d8-44ca-8213-704e5b70bca9",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00756fff-eaa9-4cef-8d9b-04d23ce61a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5164fd05-5cd6-4f38-b1d9-0197a2ef2b72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a93e50-d745-4541-868d-001ea77a18f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ed88e2-b3ce-4b8c-872b-d72dfc310846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1935b45-7cda-4e1a-b31a-65a639c76ff3",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889ba268-9464-4c46-9148-0b02321cfaff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4430da2d-414e-4d39-b6b6-4cec9509416c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6945f57-e4b2-45f7-8be3-bed47b3291a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58bd5104-784a-4a63-87ea-d1d27a0b1654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b8b329-cd87-418f-a0a5-90e5db9b4585",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45019c20-db10-4794-b53a-c17d89bb2953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3a2e23c-e54b-4996-82cf-189dc79ce753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48035a4-8d44-43c1-8b8d-a7fabf2a9c41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d79a6b-8e6c-45b5-a717-5323dae80277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8af099-52c8-450d-a2aa-e0a84d2753be",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72df0aff-7152-49e8-972a-8bdeed2b12d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd64df7e-5179-498a-bcaf-87c533e1bee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e973da7-8d3b-4275-9742-a127be917cb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb71273-44df-4ecf-ac1e-cc335757577f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84aac1e1-0940-4f18-bd86-644cc6aefcaa",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707f0464-db7d-46de-9d96-9d6f8ff869e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f5c2de-2774-46e9-9dc3-442966de5ff6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "835f5de5-445a-406f-b670-6a2411c49228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ef3df1b-1c68-4c89-8bb7-733b740b7219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c353db-6180-418b-b82a-d20b2ee028e1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "699fe30c-638e-4a79-b523-96d4d3aa9e94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b15c5ac2-22f8-47da-8551-40a4a55d8bf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "767ff5a2-b641-4c91-8bc5-577f5ac88a7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb68f4f9-187b-4599-a3fe-1fcf5d903336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d339d5c3-4a3b-42b7-a33b-0fe5d3485c53",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192c8b05-b48d-4e27-ab5e-6f586fd2ee6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "911247e8-d2ee-49cb-b433-bc6e2f9a06c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40cbe6b-86db-4ff3-bb0f-3363f939983b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7227c99a-4b9e-4727-a10f-1cd6f89d7e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56bf838c-edb5-44f3-b07c-016e9b87ed1f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631b9955-451e-4de8-8748-93a430679097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6482955d-4189-45a0-800e-2e0b4038317d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56215cdd-57f3-48c3-b7cc-66dc5534dac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6dfc560-becd-423c-8a9f-9736e22ffa99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a9f4f7-2f14-4ea5-bb95-ece5134f0533",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b987ab81-d561-4e4d-828e-8aa60be503f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0707a799-6fe1-428f-82b1-fe123de4dee2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e996c620-de88-4773-8a3a-00b40f9d2f10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98f4b0da-9a15-4cd9-82fb-cfffcd6a7dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae3c39b-5767-44e1-b76b-2d9b05930f8c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f718dbff-261b-4ba8-b942-7966ff6eae1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "415e0df7-e78a-4949-9e01-d2fdd9db046c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b326437-3deb-409f-be71-bd6d5f312290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaae31b8-08e4-4138-901a-bb1ad67f099e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7835bf-8bd1-493d-a060-bb07abb423f5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5517d526-5289-471e-9f1c-c605f65409c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c145826c-d53c-48b9-b68e-6e81d8f983a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f4e004-bd4f-4a12-bc67-029b63ea865a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "872c687c-134a-44e4-a504-f891f7046b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f603b72d-01c5-4575-abb5-7f68e67516bf",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "726279fd-f66f-4a2b-bee1-59d9b2cf15d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc099772-af9b-4cdc-83e7-705f8fa39e5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "335f08b1-c64f-4785-9dae-bbaf0ea76c25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0b95a86-4d00-4c35-b9a5-511893e822c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3378ab5-e8e6-423c-93c4-9b46ed56a061",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2712ca94-17f7-45c6-addc-2e5e2b394bc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95a416e2-6784-4e71-9894-9f7bf0c938ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9762c1cb-54a8-4ec5-aac2-ed59e3555581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e49864-062c-4633-9457-f77c05627352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965382e5-af11-40f7-a2e5-1b5b731f9f07",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1dd4e8f-d84a-4ea9-af19-97eaffa22998",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbba7218-ffdb-4a04-91cb-e3a661fe8352"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b2f366-089c-4f88-b2e6-7dd0702139bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc5aee13-c910-41cc-bbaa-8bce8883f0e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9132b72c-a5ea-46e9-aa62-5f6aea1aa7e7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1e3af6-1e5c-4d88-843f-6abfae0c32ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26a7346e-9555-43a7-b345-0651d460026b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4bf8372-3bb2-46f6-a138-dc4dab1ef385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2bd25e3-753c-426a-9cf5-515aa611e6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ee5f70-a69f-4049-a5f8-2325a41032b8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51fd6cd-90a4-4db4-bdd8-88dfd9ea23c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "024a20e1-7e7b-4491-83f8-0f18a977e12f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12971f8e-319b-49bc-9a62-2585cac94ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f77d01-73b4-4a43-969d-af43de25315a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92104239-e930-494e-ac79-c94e46f99e2c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486eda9c-1438-4208-b435-7cbde41b7707",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64323bee-1a5f-4f86-937f-0826a15d8cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a41a44ed-4197-4326-aa0b-39c96cc04bc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93f1e939-033f-449f-ab99-e4e109a08467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be16e600-0edf-4a58-8b56-f8d4c8124f62",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a435f73e-8bca-46f7-a1cc-4ed87d30bf4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baec2c75-07e1-44ff-9543-ce7512001452"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e89155-0ab3-4eca-981f-342a49929b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e245b5f-f3b0-42a6-8a36-0ce10293ecbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ffcc29-d7f9-46c3-8fba-6df1c6cd5d06",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8bc7dae-852f-4197-a036-63f2438a224f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73295959-f6bc-4f8d-9677-8cec083d9c46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c397f70a-70a9-434a-9351-f5cce8b53cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f59f05e-8b31-4503-b8de-603a08649ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd144ef9-338c-400f-8a9f-843e5858f19e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e878da-6ae3-44f6-a018-6ebaac856ea2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34286bf9-a110-4514-a700-200863a0eb28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40bd7d1a-d157-480b-93e5-3213fe5eb327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4264a622-f1a6-47a0-beb2-129fa7a7eb90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2fcd99-a661-4867-9f00-3a359ecd91ce",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84896344-c54c-4891-a14f-b7b1e776352a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9e9a1b1-04d7-4c39-9d97-01e06b59352c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65dbc7c4-763c-4ae6-8a97-7d7a14c87ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded7b89e-150a-46ae-9085-89f7ff45df30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f2f25b-1459-4457-9179-645b5b252a88",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3590d0-f174-4220-a7e4-050274b1a2f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37b8903b-b42a-484f-8610-79a853611ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8586e05d-bab4-47f8-9467-02167ee73e50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b1bfa16-22dd-42b0-994c-c4cd9a120365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08ab1f2-df96-4daf-ad5d-e3d57f7bfe91",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b27788e-19f6-4340-b044-b49efebc81c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a408e307-963e-4684-bc1c-e0347f648ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "252abba2-add4-49cc-afdb-3c951c9a6ad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed61422-eecd-4371-a47d-5ef576da784d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62b0178-8723-4464-b076-9afcf62fc2d4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce6997a1-0392-4f34-ba83-9ae3c221e399",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87cd8e51-fe21-44a7-bae6-d81044f9342e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88167dc4-e4a6-40a2-aa5b-20a5381de2f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0147a742-9c98-4ebc-b04e-ee77b06521c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6501a45-f40e-45cd-bd91-2f00636d1e9c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69634c91-a561-4803-9de4-f5f37982f0b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c59aeef2-3f61-4f11-a314-2f83903ae66e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e249a78-07bc-44fc-8a4e-f69736aba3b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95e67ad7-041e-450a-b4f5-a0cf4cb36b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbfdb89-1fbc-4db9-b504-65840879ee0f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d72f5b-d4c9-4394-9e07-29f464795027",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38adde1e-778d-4d7b-b5a2-e7fa1b0e8b4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44dc22a5-b9d7-4ab8-a971-36533bfc5860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b58859b5-5a7c-4205-a21e-e1ebdc34715b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc181a2-167f-4b0e-bcbe-01c2894f78be",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abebc57e-5c7b-4226-bae4-9434c7b3e4cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2380c0b7-2908-4762-ad35-5f9de84cfc52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e13baa-d31d-451b-88ed-3d66ab167b76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "673c93ba-928d-434b-b594-9f11aaa63712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c8c10c-813d-47e8-9d09-3257cfcbaf1b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25feef52-4e3e-4f9c-a27c-0588608817b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "753b6611-932c-4380-a94f-368d081690b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b109b86-69d7-490b-858b-fb6b5d2a3a95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bcc90a3-b126-4be4-be21-ae0e6ddb94de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837e90b3-154e-4049-9ab3-47e19af19e07",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2af7e4e-f3a5-4f2b-ba5e-a06d88086271",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed788eae-e520-477c-8315-3a2f25f489cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9475845-9011-4136-a2f9-c522b4a7af08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "088e04cf-7bbe-4b18-b4c1-b263507890fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9942a7-a0ea-4f34-abad-a97fe9020197",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c3dd3c-6a10-492a-a082-1f35554e1af6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c7c3438-1a7d-424a-94aa-881d5673788d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aac1af0-5818-4cb0-b874-e6a6e444df8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fcff94f-5b0e-4a19-b592-8e42a118a98c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50bca1f0-f5f9-4771-b4af-a995a0d594ff",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "790d83b4-a535-4f36-af49-154e8cf03f2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e0e7170-9a64-45d5-85ec-2516f747f12f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f507534a-72c4-49e8-9c53-3f69827ddb18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4efe3ace-c633-436e-8a2f-999b53633034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba6c030-a447-4708-8543-00af5ecc2956",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf25522e-fa72-4db4-a00d-14ad30e563ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f7ab240-d306-4ff0-8cca-529ff271c844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "120df5e2-22f0-4dea-8217-0433bda85a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef43cf9-2134-42fb-b7e9-524db56d8ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce68618-c32b-4c8c-a63d-88ce7218508d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a052f0-cacc-42bf-bed2-c998238b9f3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ad1871b-8631-47c6-bfd5-ec723c1248c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "def57a67-26f7-48e8-96f8-abc3ff823584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d66dac9-90fd-42f2-8028-9975a5832115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86004ba-3255-4775-9a13-8bde08704938",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51b3a18-2848-42b8-9a82-3d5e5a8c7d31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1537cbb8-8ca0-4cde-ba6c-bdf84316d037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4b9d04-895c-43ec-adaa-6095a1d463b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92df1f66-056b-48d2-98cf-25a04a4aa996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02efa56c-2c6f-462e-bce4-696c96334c4a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55512d65-961e-452b-9d12-aa29ea5707fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02704bbf-750f-4700-a435-beaba1534277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab478853-9f1b-43aa-a645-44d1a1ed04cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae156bd-944d-4556-86fe-13f7e8c46bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7468ffc-b474-4433-8d3c-54209d875756",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d569115-ede7-4587-a7b5-c8be663caddc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a3fcf45-aae9-47e4-81d4-7444717efb78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9666889-434e-45b5-b0c6-74d0bad5d6c1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f65f23c-1d74-4075-add5-5a2388096a80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8fbb8c-338f-4be2-b703-332ad3107f8c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497ed003-6d14-40d9-84e6-aee6fc5184a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e92314e-f1ce-418e-9d16-b36dda836f45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44bf2627-b7a6-446e-be06-92da08db33ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a34ea8b-d868-4453-9348-a9ae1992eba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b0d140-a93a-4bd8-8964-cc880d1f3391",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc303278-41ae-4120-8f2d-7be6b9e975d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e33ccb88-7495-4498-9cc1-7fba9decb7b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8c1cb3-919f-4434-aa4e-357772f017c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3842b081-f938-4aca-aa18-4b51332022e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c616584-ba43-406e-9e77-86dd0eee6d92",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830f0293-fcdc-4f75-93ba-33daca01b9c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4f552c6-4a03-4a0b-a30a-cc763b9c8c63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc35865e-90d8-4ab1-b2e2-2509fe0968bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aa2265b-153b-4cc2-bc87-550ca02ac7d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "447f7704-0c8c-4cd8-adb1-8c6131d1bb04",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4276bce5-e40f-4730-94b9-d452c238fa47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62c511d3-04ed-48f9-a2fc-66c0f9d9b189"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf4f6a0-9738-4adc-979f-c9bc11b6ee2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "872a4764-94b5-45a6-86cc-a8959a928a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e4c54bf-f487-4df8-b7fe-eb7a84c35e3b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317c10de-b312-4893-9a0b-61cf51a7ffce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8156b8d3-84c1-4dab-bbc8-287f3da9ea4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f801df-2b5b-4e23-9936-ebadca87dff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7cd38cd-782e-42b0-8f9c-c54fa48a4258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b55f293-f5d0-4fbe-9088-da73c9bc5c6a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968aead0-db5f-401e-bec4-784f2110ac59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d905982c-4442-42ce-b7ee-c14297ce7ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0502ab-1f95-46a3-87ad-f43486d69c46",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0beedf20-0b8b-41ff-aa07-6e1a4b96f15a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f3a021-ed1c-40eb-a9ff-a8863df17a70",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46f0136-0036-4ee7-b58e-99e8bfcd448e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a24a9637-a4e4-4688-8a12-f504bd84325d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c120c8e5-847a-4ec2-9bca-6eab1ead41be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9d5a2e6-a68f-4df7-85fa-915f85b54484"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf224192-8746-4ec4-b17e-24b2c10722a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b681036-5443-42e0-8123-56d6b7ddbc51"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5daf9c2-cfc1-4572-b658-d153c3bb6f31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "363345ea-9f00-4502-a2dd-c75d188c6d79"
                    }
                  }
                ]
              },
              {
                "id": "191070d6-eb57-4843-b6d4-327f6da13874",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "119be98a-195f-49da-8320-44cefce3d802",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a056ea99-4903-4826-b05c-9b3c4cd87d81",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4c0bf8be-1b62-4834-8d76-af11e4431deb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e08faa-ace4-47f1-bfd8-de4ca98276eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42201379-0840-49db-8e17-c7a2ae6ffa48"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e74700ee-22c3-4444-a999-fef71f318f9c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "328da1da-7e1c-403e-a1e0-def4a06debaf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "68763549-a04c-4052-aaa5-00fdf1629025",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3998501-12b5-4a7f-b6a0-4b6d9ad22428"
                    }
                  }
                ]
              },
              {
                "id": "71779067-6b48-4b3f-b753-b3e95b019c62",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "dc426d61-6844-48e8-835d-7f3014ae3b48",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "207c1d09-5429-413b-a862-9af35c8223aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e6c4f047-afb1-452b-bf5e-695e440868c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b547a1d-937f-4760-a5ae-c5de25adcf22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfcbeaad-213f-46b1-bca0-85a1a640f42a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "25449e7c-429e-459a-a571-bcd48601484c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b5b58449-7886-4f38-8951-fac6cfe7dcff",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "43468c9b-07aa-47bc-8ead-761592dbb9d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "42d80211-425b-4cea-bf6f-7be9e70baf8b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10b5a42a-94a0-4630-9056-10ce12759d51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0570c896-e79e-4079-aaed-ba2af21b041f"
                    }
                  }
                ]
              },
              {
                "id": "bfe4a2db-b268-4886-ab48-59872af2b8d8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3e5dcca-fe5b-4b4d-a6e9-cfe4a05e8f51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b68147f5-0178-4549-8735-14d00798c526"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7aed9ad3-a7da-4034-ae6a-b7dccb892d07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "886b9b80-59ec-4ace-a1a2-97f0a74202ba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a902126-a852-49e9-af61-de3205875246",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "115be1ae-1c3a-4696-b6cd-3b4d564a167f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7a78e18-f423-4414-9dac-ad2397123de1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f8fc094-aafb-4646-aab2-7b9eec591d2b"
            }
          }
        ]
      },
      {
        "id": "62c764ce-73d9-40c5-8120-5202a36cc751",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "44f76617-1051-4888-81bd-8f72b36b44e6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "55a637e3-ef8b-49e8-bc74-2408ce78895c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "62abd348-be3d-4e48-bb28-3064e4d9bbf1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5fea13-92b3-4289-a358-1db45b14ac48",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "de7bd89a-4180-4070-b4f5-2b905f10ac18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1de6b3-6bf2-4611-8697-6421a3ab9ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ad2ff94-32cf-4783-950d-8f6855095cff"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "016b7ae9-32d6-4d98-8137-32777774b268",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6cf6ae57-2829-41c2-8ecb-4e4b89690755"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f53610e7-da48-4175-9320-a5217b9dd6d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45b1683b-bd83-45fa-bd74-201b4ee5660d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "29f1f632-ff07-45a5-a1ad-4d2ad3a36366",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9a2f4962-86ae-4182-adca-eaf69957c0fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df223980-6765-4073-8541-d3902ef9b19d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7a6b5b2e-f5a1-412f-98b1-315a18c76193"
            }
          }
        ]
      },
      {
        "id": "4032f1a2-e9d9-4447-8f8d-d31de8c448d5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "083dc124-f8cf-4696-a624-4c4ecb6083d7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a03b20ba-e496-4925-b1d8-54e8ba98310d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e678da8-6976-4d8a-9fd3-e115d5e56da7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e9f463-8764-406b-a362-33bfeb31ddec",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa569e70-d03b-4e5c-9228-f90bebe71924"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7975de7-bbda-4c74-842e-a958aa66879d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35374d15-47a7-4247-9229-ba36d8500421"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06491e40-ca0f-473d-b518-86be20907ab2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1748b8e-24ec-4793-9d75-76b09278f4f2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6155f0da-00c5-4546-899c-24131bd587cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "478a62d8-f3b0-4bf7-81ef-61b99e570369"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f6728acc-3a07-4fcf-9773-3164c27c19c6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "83d23bcb-52c3-4233-9cee-4a2d6e58e1f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0423de37-2cd1-4823-b8ef-9136b7ddd934",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2faa9327-dd26-4d99-8598-fb4971d7b769"
            }
          }
        ]
      },
      {
        "id": "fe79d4fe-c049-4c5b-b2d4-1cf2a50a9ec7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "290762ae-168c-40bf-b3f9-514f268ace8d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f54d1436-5cab-4341-9c32-a23b8f486684",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cadb821f-a7e9-46ec-9283-a696ea2ecbec",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72439d49-5069-4808-85e1-ab553f1dcd01",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "219da364-d301-4b11-b2c3-401effe932ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7cd86f-5877-44b2-9b14-97cd1f79ad7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c0a8929-2b54-4e32-8511-41c96b1da41a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "451bc7dd-57e5-4f6c-b6e8-09767bd944fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ae7e5a5-00c0-45cc-83ae-13533f342ca8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c796403-1954-4eb2-94bd-4281932da05b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f58fad80-9b2d-4024-b894-71b08e78c780"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0d942e4-73be-44d1-938a-fd3889b9b158",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ad08bbed-8a36-48ea-8cea-f17373236e8a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a1bb0af-9ece-46ee-a898-cb5c6f17bea3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c155cbd2-2744-4321-8f6f-93d112a3327b"
            }
          }
        ]
      },
      {
        "id": "d831b6f4-685e-4515-8c9f-4c4c904d6e2d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4ce6e67e-c997-41b1-8b9e-515395aed0f8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6597b84b-631b-4972-9c2a-8eae5fcede71",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "bf9f62d4-d730-471b-8915-f818fddb3339",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8a89df18-559b-46c7-a3e0-bd2872d2b4cb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73d99813-4080-4b81-8e88-6a51104af1c3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 67.95238095238093,
      "responseMin": 7,
      "responseMax": 627,
      "responseSd": 76.61637658489035,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1718498510481,
      "completed": 1718498535820
    },
    "executions": [
      {
        "id": "fc46c17e-9b74-45ad-acc7-cbe5eb373486",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "da8bf06f-66f3-47b6-8989-3b24c7da147b",
          "httpRequestId": "27c206f7-d191-4429-9340-efc596c8e755"
        },
        "item": {
          "id": "fc46c17e-9b74-45ad-acc7-cbe5eb373486",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "43e6f622-c7ff-4ccf-accf-8176bac93d7a",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "2e91b3bb-fe35-478f-9694-15066f60df5a",
        "cursor": {
          "ref": "478cc8f9-2c74-4870-a3ab-bf55c6e4d195",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4000b86c-aaa8-4b28-bd4d-a782bfc72b3b"
        },
        "item": {
          "id": "2e91b3bb-fe35-478f-9694-15066f60df5a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1323e505-a0bc-46b5-8329-2f2a97b9bd48",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "c55d1a95-fbe2-458f-a99b-b1242d626b6c",
        "cursor": {
          "ref": "867602e9-9e34-4e8c-8bd3-3bbe46527b0c",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c5fc1281-32c8-4d19-94fb-e6495727ca7d"
        },
        "item": {
          "id": "c55d1a95-fbe2-458f-a99b-b1242d626b6c",
          "name": "did_json"
        },
        "response": {
          "id": "5db8cc0a-f8b1-4b9a-beb1-747afa09cc01",
          "status": "OK",
          "code": 200,
          "responseTime": 169,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19959c3-1e43-46f7-9af6-712fe266fd87",
        "cursor": {
          "ref": "a038f12f-df74-49b6-b3b4-2c5a6255e73c",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "30232217-b1c5-4ec5-9313-9ba7d2dda36f"
        },
        "item": {
          "id": "f19959c3-1e43-46f7-9af6-712fe266fd87",
          "name": "did:invalid"
        },
        "response": {
          "id": "ddf348c8-665d-4bf6-953b-7e9f5635ad36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19959c3-1e43-46f7-9af6-712fe266fd87",
        "cursor": {
          "ref": "a038f12f-df74-49b6-b3b4-2c5a6255e73c",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "30232217-b1c5-4ec5-9313-9ba7d2dda36f"
        },
        "item": {
          "id": "f19959c3-1e43-46f7-9af6-712fe266fd87",
          "name": "did:invalid"
        },
        "response": {
          "id": "ddf348c8-665d-4bf6-953b-7e9f5635ad36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae514e0-273d-48d6-b10e-69be62247ce2",
        "cursor": {
          "ref": "9c71c691-95fe-47e1-902d-3476da5a4357",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d3c604d0-e3bf-46ec-96e5-56b816b0d120"
        },
        "item": {
          "id": "7ae514e0-273d-48d6-b10e-69be62247ce2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "55e26192-edf5-468c-a522-522095b6297a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 310,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3decc39c-a834-4236-a101-ba3e30878157",
        "cursor": {
          "ref": "4e0e36bf-e757-4b41-b4d2-eecac714ba8e",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "12988d3e-428c-43c9-9387-c2f0145b879f"
        },
        "item": {
          "id": "3decc39c-a834-4236-a101-ba3e30878157",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "db7cfbdb-3721-4cdc-ab0b-cc61d1265e93",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fbf6299-9465-423f-91d5-fb33920b4613",
        "cursor": {
          "ref": "67cae8c9-7f26-41f8-a3f6-fd2b55097614",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9cb73323-96e9-4741-96ab-29078ae683ba"
        },
        "item": {
          "id": "7fbf6299-9465-423f-91d5-fb33920b4613",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "807917c4-3e47-4012-9f2b-3a370f5b3aea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07c37c0-4213-4ece-b9d5-5af1912d5af9",
        "cursor": {
          "ref": "f473ba35-b31f-4d0b-bff5-eb78bd69df2d",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bf13110e-9731-42b6-bcc6-f0570ebac4d4"
        },
        "item": {
          "id": "f07c37c0-4213-4ece-b9d5-5af1912d5af9",
          "name": "identifiers"
        },
        "response": {
          "id": "c6a7f4e7-fd0c-49ba-84f1-da8f41f3aafe",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38c1fc8f-fc4d-4106-8fca-29b552a2377b",
        "cursor": {
          "ref": "ec31150c-050f-4308-a5ca-8ae385525d0e",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9b4ee221-1496-4e78-a7c5-6d506f054fd3"
        },
        "item": {
          "id": "38c1fc8f-fc4d-4106-8fca-29b552a2377b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9bda44d4-8e21-4a1e-b1bc-a5d0f25b7ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3694cb7f-97c7-40d4-804f-50379b23fc95",
        "cursor": {
          "ref": "c937fd7d-95cc-43cb-98d6-28694be91ee0",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d0135cbf-a127-4c9d-be76-abcaaec169b6"
        },
        "item": {
          "id": "3694cb7f-97c7-40d4-804f-50379b23fc95",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "886574c8-7950-49f5-bbd4-ab6e9e1e001b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29522bc-3e3d-4699-99a1-2241f4d40176",
        "cursor": {
          "ref": "ee13e6e6-53cc-4aba-b2da-0e4df6f50235",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "36318feb-1a96-4f51-8f0f-389f30677c3f"
        },
        "item": {
          "id": "c29522bc-3e3d-4699-99a1-2241f4d40176",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "011d779e-cfbb-43b2-b450-245809809737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d71248b1-5fcb-46d2-8131-bf1395011e7e",
        "cursor": {
          "ref": "94564176-c6eb-4d78-a50c-e6587a153d61",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3ff0ae1a-0a45-4a20-b037-d5c717b12b73"
        },
        "item": {
          "id": "d71248b1-5fcb-46d2-8131-bf1395011e7e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e5446430-0342-4ec2-a801-345a94bcd957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ecdefc-2925-4ab0-8b41-d570e54a2a5e",
        "cursor": {
          "ref": "3add25ff-8532-4099-894f-89a9c413a49a",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5ccb4beb-ef17-4d02-a44d-6a7f8aee8e63"
        },
        "item": {
          "id": "f4ecdefc-2925-4ab0-8b41-d570e54a2a5e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "44eff231-2f44-4175-80ba-c9bcf0ab76ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4c92b2-559a-482c-80f1-a65a46b84249",
        "cursor": {
          "ref": "a561266a-479d-4e3c-9661-b59a08d0f769",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b02b3e2c-deea-44dd-8124-d31178d21ad0"
        },
        "item": {
          "id": "5e4c92b2-559a-482c-80f1-a65a46b84249",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a6bda714-2300-48b4-a2c9-b65330039bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5748f93c-1809-4ecd-90a3-744642bda6a0",
        "cursor": {
          "ref": "fc253c62-9500-41b8-ac29-2ca6c12fcf75",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c7d23032-4323-4048-abcf-c33032eb2efc"
        },
        "item": {
          "id": "5748f93c-1809-4ecd-90a3-744642bda6a0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6a01b3de-599c-4f18-b23e-21a177452e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2b2840-ac5d-4b25-890f-9f0515db8da2",
        "cursor": {
          "ref": "ee9cc711-c934-4ced-883b-9b4651133623",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e2283ad9-c949-46d6-8237-7ebe2b281644"
        },
        "item": {
          "id": "cc2b2840-ac5d-4b25-890f-9f0515db8da2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "67c712f3-dfed-4e6b-8bfc-f77ad5c039d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2203ede1-6240-4ed1-aecf-8a5ac6cd623d",
        "cursor": {
          "ref": "ee5abbc8-4032-4eae-9075-e3c634a060c1",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bd4ca8cb-8664-47a9-b996-3390914372e6"
        },
        "item": {
          "id": "2203ede1-6240-4ed1-aecf-8a5ac6cd623d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "66d0c5bf-0594-4081-948c-ecaaf9f9673c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f439a89-faeb-4cc4-987e-5fdbad428c71",
        "cursor": {
          "ref": "76c38e38-2e1c-427e-9123-22fefc44ba8f",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "62f0175d-7e31-43dd-9775-bae027b9a3b0"
        },
        "item": {
          "id": "9f439a89-faeb-4cc4-987e-5fdbad428c71",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c42b61c0-5771-4daa-b5cd-1e9f10ac7ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0df677-f677-466a-8055-e13ae8c5c901",
        "cursor": {
          "ref": "555d2f26-1c0a-4cef-b6b2-b1113e8a046f",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a209cd26-9adf-49a8-a00a-8b6f86cf79aa"
        },
        "item": {
          "id": "4f0df677-f677-466a-8055-e13ae8c5c901",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ef85a57b-c8a6-4d6c-acdc-dc6186120866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925e27e5-7f67-4633-8e6a-e5cd8f9b3ffc",
        "cursor": {
          "ref": "425ad724-bbba-4e9f-88a4-d8952abed206",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d0664f1a-5eac-48cb-abc4-e1ecdffd4643"
        },
        "item": {
          "id": "925e27e5-7f67-4633-8e6a-e5cd8f9b3ffc",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "40053bb9-0148-445e-aa5f-c1a79dbdae5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3986055-2d86-478f-8be6-eb4c57fe3a31",
        "cursor": {
          "ref": "14677887-d33c-4ba0-9767-a9ca8af0eade",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4a32a452-c64c-4513-aadd-e4342974f75f"
        },
        "item": {
          "id": "d3986055-2d86-478f-8be6-eb4c57fe3a31",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f8d35998-9ecb-427c-b01b-751a6840c6d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "302196f5-86e9-4365-9e7f-a5c21011667c",
        "cursor": {
          "ref": "0f28ce18-d2d7-4abb-b727-abb58b351b65",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "dac50e56-4e2a-47f4-950c-0f00c747a491"
        },
        "item": {
          "id": "302196f5-86e9-4365-9e7f-a5c21011667c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "51a7fb14-65be-4705-bad7-51c2099cff54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "093e0bb4-8279-44c0-af2f-5ac48a63ff10",
        "cursor": {
          "ref": "74cb8a4e-e6d5-4b68-8620-5ae0d2afdb91",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1869582b-c00e-49d3-81d3-ac2cf7761c95"
        },
        "item": {
          "id": "093e0bb4-8279-44c0-af2f-5ac48a63ff10",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c34a813a-1c70-4057-9932-8d8bd23def79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4068391c-0f54-41fe-932f-c58abdec55c3",
        "cursor": {
          "ref": "8e968050-18f9-4317-9973-3c3af9122a13",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1772852d-c945-4e42-9cb0-9b09aa42bd97"
        },
        "item": {
          "id": "4068391c-0f54-41fe-932f-c58abdec55c3",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "da2f5d94-87c3-48a6-bc59-b08d60773e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86db9bb2-be68-4218-82e8-8df1cfeb5a79",
        "cursor": {
          "ref": "b30a6b87-e86c-4024-a1cb-d7d0fa69c65c",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "95b9cfa2-dbdf-4d42-8341-eff6aa964761"
        },
        "item": {
          "id": "86db9bb2-be68-4218-82e8-8df1cfeb5a79",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "865ee41e-0266-40aa-831c-50099aea2251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0211125a-2c17-4d6b-ac59-48dec1ce78cf",
        "cursor": {
          "ref": "45dfb1b9-fac7-49a7-b2b0-15838c8a90bd",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a7efe0fd-ecf0-44ca-bd58-b02958e03e8b"
        },
        "item": {
          "id": "0211125a-2c17-4d6b-ac59-48dec1ce78cf",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f037a830-36d3-4593-82f8-cfe7a5b4569c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7238d3fe-6abe-4817-adfb-1881f4db5773",
        "cursor": {
          "ref": "7ff23694-e481-490a-bad5-c59b81b74389",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f43578da-53a8-4ec2-b7c9-a1855b80a365"
        },
        "item": {
          "id": "7238d3fe-6abe-4817-adfb-1881f4db5773",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ff0f119e-adbd-4b77-a55e-8a58d1d9d3c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8041e5f-8d8a-4dea-a725-4681462d6994",
        "cursor": {
          "ref": "cd3544c3-38db-4c02-8d55-0a856bb6c24d",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a1804d7e-f6ea-49f4-a037-aea6d73666b3"
        },
        "item": {
          "id": "b8041e5f-8d8a-4dea-a725-4681462d6994",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8e52210f-c076-4aaa-ae66-1ea4a0622085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1e89a1-8730-46b0-8f29-6c5fd894d1b6",
        "cursor": {
          "ref": "3f09f830-637f-4249-b498-38e9b097d537",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b688da87-fada-4025-a892-ca116bd92420"
        },
        "item": {
          "id": "ce1e89a1-8730-46b0-8f29-6c5fd894d1b6",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "92002355-57a7-4736-87a1-0faf291cf7a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc5b880-893c-4ffa-b99b-f1fd885dd85a",
        "cursor": {
          "ref": "a0330a7e-fd6b-4637-814f-634b10bbe02b",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5fd69935-c03e-4712-bf33-a14b34d0c3ff"
        },
        "item": {
          "id": "9cc5b880-893c-4ffa-b99b-f1fd885dd85a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e9fc9c9c-5862-4c8a-a3a6-a4b07af76c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c636d98e-af4a-4b49-b4b9-67c7887b615c",
        "cursor": {
          "ref": "811e1964-101e-4e9c-afff-f51f1e78fde6",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "04be7d16-e6fa-4c90-949b-04cc92703e06"
        },
        "item": {
          "id": "c636d98e-af4a-4b49-b4b9-67c7887b615c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a82abadb-d5f5-4f3d-9320-0029846ad26f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5499b90d-cd3c-475b-ab24-73a245150c3f",
        "cursor": {
          "ref": "2073beb6-9c6e-4072-83e8-4732a2eb16b4",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4a52789f-2e0e-463a-9908-20ae57b74444"
        },
        "item": {
          "id": "5499b90d-cd3c-475b-ab24-73a245150c3f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7e67c325-4118-4240-b0b1-3817f5354410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71803998-1bb9-4059-9529-8b0ff76f3980",
        "cursor": {
          "ref": "70a18018-b0f6-45eb-b356-4a3e850a4b29",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "8cd8f9ee-1a6b-4c59-91aa-23cd22de11c5"
        },
        "item": {
          "id": "71803998-1bb9-4059-9529-8b0ff76f3980",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a88a8cd1-ee5b-42b8-af5d-5617467e5af9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3aba68-da93-45f0-aaae-34d1d37c42e0",
        "cursor": {
          "ref": "de6f6de0-fecf-4d79-b59b-599afb688bd8",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "729c825e-c31e-4eed-af7c-f6fce9f60a7f"
        },
        "item": {
          "id": "aa3aba68-da93-45f0-aaae-34d1d37c42e0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "19028004-62b0-4d2c-963c-058c0bee6fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0dc398c-847f-4494-a942-85a3017332b0",
        "cursor": {
          "ref": "bcdc7c01-137c-4be4-bb0e-e6cded767ae9",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e350d90a-8f7a-48dc-8cfb-c0872cc8d69b"
        },
        "item": {
          "id": "d0dc398c-847f-4494-a942-85a3017332b0",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "dc353cbd-347e-4f35-80fd-f608682cb4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96839d3-3ae5-408e-9295-12c67f37e210",
        "cursor": {
          "ref": "40e7dcd2-07c5-4ea1-b174-4b74989af64c",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "493ba380-9965-462b-ad2f-a88628127dfe"
        },
        "item": {
          "id": "d96839d3-3ae5-408e-9295-12c67f37e210",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2c44808f-7a1b-4793-baed-b1755efcdb6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096982d5-8dd9-4332-a11d-70038788c5ad",
        "cursor": {
          "ref": "c5671342-16ce-410a-80c5-7f605f559913",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6f74d08a-bc1e-4f6e-a565-142a077b23c9"
        },
        "item": {
          "id": "096982d5-8dd9-4332-a11d-70038788c5ad",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b19b2c67-3b3a-4cd8-a610-05d0fe7c0845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5150fc7-957d-401b-8409-8f7fa9e57411",
        "cursor": {
          "ref": "dc91b7da-afa4-4db4-b502-d3b8f57afa03",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "fb232076-0b73-465d-a6bd-ceda04f0c78d"
        },
        "item": {
          "id": "b5150fc7-957d-401b-8409-8f7fa9e57411",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d163611b-8dd0-4dad-89ba-8a36d7658a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59db27da-6110-494c-a640-8c2b3353fe07",
        "cursor": {
          "ref": "92868337-71cc-4240-8158-b253efbb4f75",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "422a6fbb-4526-46ac-8d7d-45475d17ed95"
        },
        "item": {
          "id": "59db27da-6110-494c-a640-8c2b3353fe07",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ec6b83cd-3d66-4db7-9cfb-55e1ee191f2c",
          "status": "Created",
          "code": 201,
          "responseTime": 627,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e03c1c87-a451-46f7-9313-242887a6a53e",
        "cursor": {
          "ref": "bb4b3921-aa35-4177-911c-53601f6270af",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "95f6b331-1576-4a7a-8ef1-7494c3645702"
        },
        "item": {
          "id": "e03c1c87-a451-46f7-9313-242887a6a53e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "bbff29ed-b2af-43eb-bf81-7433e3f7cc04",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "0797eb3b-b51b-4a75-9149-a1ced53d2f74",
        "cursor": {
          "ref": "5c9e1875-a295-4197-855d-293cc5501e93",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "941e1999-482c-4ac6-a539-20a6ff85eb2c"
        },
        "item": {
          "id": "0797eb3b-b51b-4a75-9149-a1ced53d2f74",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0f8f2304-d0f9-483a-8994-89ca8c4c1070",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "4e132869-9f1f-4fff-b2ab-7110033df860",
        "cursor": {
          "ref": "1b753bd8-11b0-4c59-a757-85604aaced41",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "07746422-639e-4649-8cb9-1b63899dce66"
        },
        "item": {
          "id": "4e132869-9f1f-4fff-b2ab-7110033df860",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "3eb0b600-9865-459e-bcc9-3407e1d05498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e417d3-d438-4fbd-a451-e0f782e2fc33",
        "cursor": {
          "ref": "5579486e-95ee-4d29-963b-69c06f3ec2e6",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a4a2331a-1727-40aa-9e44-4ba7d540ca53"
        },
        "item": {
          "id": "f9e417d3-d438-4fbd-a451-e0f782e2fc33",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "245c8424-4a63-41ab-a1dc-202850016ae6",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c436c83d-f253-43ba-8728-a9bb260221c7",
        "cursor": {
          "ref": "5f72cba1-8e76-4e21-9b0c-854807ed12d3",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "72330647-a601-484e-a972-9cce52c3727f"
        },
        "item": {
          "id": "c436c83d-f253-43ba-8728-a9bb260221c7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "495c5402-b9dd-474e-927b-66a07ae6e9cd",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "02031dd3-2f68-40c3-a931-75de6f471025",
        "cursor": {
          "ref": "b828e831-14f8-4422-a9e8-14978a7c2f67",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "0de1c4d6-0964-41b5-bb22-b2cdd9653907"
        },
        "item": {
          "id": "02031dd3-2f68-40c3-a931-75de6f471025",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5b3666de-0437-4ee9-8ceb-a51e2e8579d5",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d3723772-7131-4f3d-8d78-8ea328d47ae7",
        "cursor": {
          "ref": "eb54690c-db1f-409f-bb6c-686bbfb41e08",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "bac26f06-b206-4d38-a5ce-973cf1d7a755"
        },
        "item": {
          "id": "d3723772-7131-4f3d-8d78-8ea328d47ae7",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "694fb8ac-8a6a-48fd-83e8-8447b395c2c3",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b7a9352c-49fa-44d9-9613-27cb00fcbc94",
        "cursor": {
          "ref": "06cb38fe-1899-4b31-8f8a-d82ddea02349",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "213129cf-eb68-416b-8d2f-2725950d0fa2"
        },
        "item": {
          "id": "b7a9352c-49fa-44d9-9613-27cb00fcbc94",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7bd17362-713f-40b2-a684-21c9da76cdcd",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "03b879c4-aed9-40e0-bf22-870f3d7039a7",
        "cursor": {
          "ref": "ae39afb4-6690-43c0-a5b0-9e91fb0517b6",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a44c1138-f8ca-481e-bbe1-958b436915e0"
        },
        "item": {
          "id": "03b879c4-aed9-40e0-bf22-870f3d7039a7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b7802390-075b-4434-8b2d-7b55c64fe53a",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7374f6c9-0ee5-44ff-817e-4a652a4054eb",
        "cursor": {
          "ref": "56abd230-7f2d-4d58-a0ca-0c3ce635a39d",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5e124c26-9bfe-473a-b0de-a461f62943ca"
        },
        "item": {
          "id": "7374f6c9-0ee5-44ff-817e-4a652a4054eb",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "588d28f8-04af-416e-a04a-5cd65fb97f4d",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e059a711-3c70-4029-911e-e1c1bef818cd",
        "cursor": {
          "ref": "4952cd7c-b650-4ed8-9bf6-755d2e9e50cc",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8af7d4a3-46d8-4ba3-8b7b-69daeda1f768"
        },
        "item": {
          "id": "e059a711-3c70-4029-911e-e1c1bef818cd",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "cc1d3c30-2c6a-4489-a1d2-b25f6393ce41",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f00d90bd-6c30-4ef7-907f-913c00af2575",
        "cursor": {
          "ref": "4758a8c3-d2cc-4009-83b1-a34c24209b8d",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c678de78-0ee8-4696-a4a6-b36f988cf4be"
        },
        "item": {
          "id": "f00d90bd-6c30-4ef7-907f-913c00af2575",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "dcc2f8bc-cd5a-4bb4-9f3e-6a84b0cfecae",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "64a20494-b719-4478-8e70-e269a27a570e",
        "cursor": {
          "ref": "47939d98-ca38-4bae-93f9-88f40d2a0fd9",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3583a3d6-4ee4-4c09-9fa9-898d6a5297ef"
        },
        "item": {
          "id": "64a20494-b719-4478-8e70-e269a27a570e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "70bb67dd-d157-45e3-b75d-741b47347446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea236fdd-1b5d-4f3d-a858-90863b10f43d",
        "cursor": {
          "ref": "c03bf5d5-e688-4bb6-8632-8570abf8b656",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2e42a54c-22ff-4cff-8b46-f9ff35d1845c"
        },
        "item": {
          "id": "ea236fdd-1b5d-4f3d-a858-90863b10f43d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "024f0631-09a6-4f18-9418-c9b8e63a9313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4e0061-6847-416d-8414-0835edb6ce26",
        "cursor": {
          "ref": "cefabf9e-0bca-485f-b4a5-23669eb148e9",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5c259c2e-4785-4906-bfa1-035db6a224d0"
        },
        "item": {
          "id": "bb4e0061-6847-416d-8414-0835edb6ce26",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "889d1c31-ddcb-4fc3-bd81-54ad322af9a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a35f338-4ac6-49df-ab87-cecdb815bb7e",
        "cursor": {
          "ref": "0c68658e-e6ba-498c-8e20-76169e4847f8",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d9ca1257-f123-45da-9094-96d47e65ec72"
        },
        "item": {
          "id": "3a35f338-4ac6-49df-ab87-cecdb815bb7e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "85ef6403-dd71-433a-ad2b-e078dc35d59f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d27e543-386f-499b-879c-1b55e58c50b8",
        "cursor": {
          "ref": "6e55ebed-4d64-4eb3-be76-75784dcecfb3",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e2686337-1490-44b9-a4aa-6f1ff84ad177"
        },
        "item": {
          "id": "5d27e543-386f-499b-879c-1b55e58c50b8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e7cc8a46-cc2e-4074-a24e-ffdfc08b4b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ca531a-ff2f-4974-b607-44f3440cce76",
        "cursor": {
          "ref": "729ec9d5-f958-41a3-979d-56770abf4021",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ea0db68c-d664-42d4-beb7-fc44ace99d45"
        },
        "item": {
          "id": "d7ca531a-ff2f-4974-b607-44f3440cce76",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "71855cc6-e305-4832-bcd2-603fb608bee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e7ee81a-12c4-4d09-baaf-bf722e70904f",
        "cursor": {
          "ref": "bedac502-474a-4848-bc4e-815df771fc9b",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "73fba183-98ea-4952-9da6-b6a00855c0c8"
        },
        "item": {
          "id": "7e7ee81a-12c4-4d09-baaf-bf722e70904f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "36996924-304a-466a-bf85-d5558b0a8a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef13ba98-6529-4756-9e4c-435eda326920",
        "cursor": {
          "ref": "67a5bbf8-8252-45b6-9845-6ef79f127e17",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3aa62ae1-7d90-422d-8608-10f18cd9b555"
        },
        "item": {
          "id": "ef13ba98-6529-4756-9e4c-435eda326920",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "452fa3d7-acec-43e5-9980-70d71c9ba216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0da3c8f-a9ea-4c0c-81ee-04d6a49e87da",
        "cursor": {
          "ref": "14ba5f34-fb17-4f7b-9948-fc6ddbd859c5",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "83082c39-2f77-4016-b597-9411b15ad50d"
        },
        "item": {
          "id": "c0da3c8f-a9ea-4c0c-81ee-04d6a49e87da",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7b6b461c-4ac4-4fea-a1ef-d3d1ac417fb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf53dc1-0690-48be-85dc-6f94793b7aa0",
        "cursor": {
          "ref": "344533d0-219f-4e23-8391-d2e43a6e6168",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "36ae40de-71b1-4a33-ba60-c9f4e834b5ac"
        },
        "item": {
          "id": "2cf53dc1-0690-48be-85dc-6f94793b7aa0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "fe8e819a-f398-4532-a0a4-5909ed853100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74631263-03f9-4792-bde2-89ea1051a9ba",
        "cursor": {
          "ref": "ebbd960f-4d45-43eb-93cc-827ffdd8ea3c",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8937936d-5be1-425b-965f-eb83df4a87fa"
        },
        "item": {
          "id": "74631263-03f9-4792-bde2-89ea1051a9ba",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6892acb9-f09c-4555-ae05-1e88ce010f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f51118-11a5-4d1f-9d02-c53a111461b9",
        "cursor": {
          "ref": "90965a36-3202-4d14-ade7-64c19cdf6db9",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ce638227-a84a-4428-b5bd-ea34b132d30f"
        },
        "item": {
          "id": "83f51118-11a5-4d1f-9d02-c53a111461b9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "22814c91-5f41-47aa-adfc-5d4dbe3a3017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b08e2bf-ff1a-41e5-9c26-ce0f69352902",
        "cursor": {
          "ref": "a3b2caf6-8233-4cb7-b6ef-e505170c3b14",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "24ff1e0b-93c9-4d0d-9a5e-018339188d2f"
        },
        "item": {
          "id": "2b08e2bf-ff1a-41e5-9c26-ce0f69352902",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e8c0b10b-e2f3-46aa-b854-947547e7a0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6fa9d38-b52c-4e20-9675-ac32cbc7e39b",
        "cursor": {
          "ref": "4815aba2-8dc2-413c-877f-5dbc5181ab43",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "414f6da5-a6cd-478b-8b06-bdfc4597c425"
        },
        "item": {
          "id": "c6fa9d38-b52c-4e20-9675-ac32cbc7e39b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "45943fea-4aca-42c5-aa08-0b97cd233439",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "5ad64444-4975-4834-af50-f5f787947180",
        "cursor": {
          "ref": "4b9863a2-9277-4cec-89c5-716956c48189",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2dbd9b48-033a-4b07-8496-0e0bf2bc8509"
        },
        "item": {
          "id": "5ad64444-4975-4834-af50-f5f787947180",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "516c6fce-688e-49e5-971f-fec9fdf8620b",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "eb6eda3e-d0a4-4a8b-b696-97c6d73227a4",
        "cursor": {
          "ref": "f36084ac-bf69-4830-91bd-e0883f395fba",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "153d01f0-de42-4a64-9d7b-bfeb4c12c2d8"
        },
        "item": {
          "id": "eb6eda3e-d0a4-4a8b-b696-97c6d73227a4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "34e35d39-a099-45a6-8333-8622a32ee5f0",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1a83ea04-4b9d-4e9f-ba6f-1047fdcdaaad",
        "cursor": {
          "ref": "4a2f57e1-7734-4cef-b66f-440ae2bbbbbb",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "aefbb305-dd21-42de-9d00-c8a2b2496179"
        },
        "item": {
          "id": "1a83ea04-4b9d-4e9f-ba6f-1047fdcdaaad",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ca97dbf5-46d4-49b4-b157-9c2db2f17ebc",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "60736ba6-cd19-4fb2-aeb3-03d7404d2cfb",
        "cursor": {
          "ref": "1631d078-3282-4cb1-9633-e10e9e13fe83",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "aa10d9a0-a852-4297-9f1e-4b2d90d4d93a"
        },
        "item": {
          "id": "60736ba6-cd19-4fb2-aeb3-03d7404d2cfb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "dda232d3-50a4-42fa-9dc0-b64fcc1a64d0",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "42c142f0-ea9c-43ef-993b-3d2631bbc9e3",
        "cursor": {
          "ref": "345397da-d7c6-4dbc-9a28-fb9b911a3011",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ccbf63e6-fa50-4678-b34b-f38d0539e8e6"
        },
        "item": {
          "id": "42c142f0-ea9c-43ef-993b-3d2631bbc9e3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "170c92f0-179d-4a36-a8c6-2ed4737170b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb03527d-f045-4601-8107-51d40431d8ac",
        "cursor": {
          "ref": "8265fde9-56e9-4a58-bf48-b6809d9da1b3",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5e92f845-3af3-418f-a298-ac1f8728bdaa"
        },
        "item": {
          "id": "eb03527d-f045-4601-8107-51d40431d8ac",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3be448f9-bde2-42e1-bf67-9193c1b6c9d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d73ef7d6-fd85-445b-9665-2cf2b769e01c",
        "cursor": {
          "ref": "f6e37925-be96-4829-9a18-cf4debd7d7b8",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4f4ff1c6-80e9-4e24-80d8-1cc082cbb474"
        },
        "item": {
          "id": "d73ef7d6-fd85-445b-9665-2cf2b769e01c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "191a663e-1f8d-4fed-be79-80307e3f7f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a12f459-55a5-4458-a17d-9bfb840cd12e",
        "cursor": {
          "ref": "6f6a0e7c-2cfe-4879-a57b-1ec72a1cba69",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9d6d3fb9-ff21-4ca1-bb3a-796b5108f773"
        },
        "item": {
          "id": "2a12f459-55a5-4458-a17d-9bfb840cd12e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1e0de95c-9461-47a4-a078-fcafd7769cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b85493f5-3889-4431-b460-67ac7cc225b4",
        "cursor": {
          "ref": "6cca87b7-c380-4e17-8515-a850f9551753",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a343b3a0-f78d-48e6-a8ef-74d68534f3ea"
        },
        "item": {
          "id": "b85493f5-3889-4431-b460-67ac7cc225b4",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "49dc15d9-96e1-46b0-859e-4c31d9f729db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6a56cc-0c8f-418c-8418-56cbb4d12590",
        "cursor": {
          "ref": "a7f9dd11-84c9-4003-9f1c-c41fd44465a2",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "93b7a6f8-a4b0-472b-9de9-aba170c8d24b"
        },
        "item": {
          "id": "af6a56cc-0c8f-418c-8418-56cbb4d12590",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "5e482b32-3380-42cb-afce-c1643e0a6fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9538d8ba-24ab-40c8-938c-95b640c31a58",
        "cursor": {
          "ref": "87e14f09-6955-4774-8362-e452913171ce",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c70056d7-ede3-4a75-86dd-f16cea7cacdc"
        },
        "item": {
          "id": "9538d8ba-24ab-40c8-938c-95b640c31a58",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "33ded4ae-9056-4a9e-a388-b85ef2c56958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a7987ef-17da-45a0-a672-2a4e05a20a07",
        "cursor": {
          "ref": "72cece47-d52b-448b-8858-438975351ec9",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4b96109b-6bf5-44d8-8202-cb5c66d7bd77"
        },
        "item": {
          "id": "0a7987ef-17da-45a0-a672-2a4e05a20a07",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0d8412d0-b0a4-48c9-847e-c224942d6e97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29cacf2e-9578-4bf6-8164-27dc790ad8c9",
        "cursor": {
          "ref": "5d33ec48-2f09-46da-87e3-2ba1a745f498",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7e07a03a-c04f-4687-bb6d-f08d6e8af76f"
        },
        "item": {
          "id": "29cacf2e-9578-4bf6-8164-27dc790ad8c9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0b91ca1c-4107-466f-8249-25d210097552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "debd679e-674c-40b8-95f6-408c8c23acef",
        "cursor": {
          "ref": "ea1b12ad-c448-45d4-9564-fcdc585f7e9f",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "13b10f17-ca3c-4e0d-9c76-a39a383ea474"
        },
        "item": {
          "id": "debd679e-674c-40b8-95f6-408c8c23acef",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b41a134a-733f-4c2d-aef1-0a3db6ee578e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b45704-7360-4112-94f6-844f740056fc",
        "cursor": {
          "ref": "a59f454b-ea5f-458c-9af3-69b669cc0858",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3152ef49-6ee3-4f5e-b1dc-9f8b38c6f02f"
        },
        "item": {
          "id": "b8b45704-7360-4112-94f6-844f740056fc",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c055a2a3-b9b0-4567-aa22-4588e47114ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176c3e84-9d18-4940-8830-5df2dc043b6f",
        "cursor": {
          "ref": "d0347dd4-92a9-4118-bf34-298972a7ada8",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c94a0f78-6c5c-4056-bb61-f323c15a4a85"
        },
        "item": {
          "id": "176c3e84-9d18-4940-8830-5df2dc043b6f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f0ad058f-65e8-4230-aba3-aba5d11e1fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33027f80-941c-4319-a63d-f30eaab30fc2",
        "cursor": {
          "ref": "3af1a83e-e3de-461a-aa29-fd259bce0436",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "999cbf56-b6ee-4ca4-9424-16803374dfeb"
        },
        "item": {
          "id": "33027f80-941c-4319-a63d-f30eaab30fc2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1ccf7949-dfd3-4c4b-aa26-af778ee02062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca5a7a0f-5a12-482f-b48c-dcee37885a72",
        "cursor": {
          "ref": "cb94bbcb-31aa-4679-9e8d-6d4564bf1e4b",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "86f68d7c-f5d9-4bf4-b698-d0367dce9761"
        },
        "item": {
          "id": "ca5a7a0f-5a12-482f-b48c-dcee37885a72",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6c82f92f-5dd4-46ca-9491-33b78573283a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa842e4b-cdb3-4164-a4f6-0ccd4b3e2e9e",
        "cursor": {
          "ref": "5e75b2c6-4cdc-467b-9af9-ccf1060489fe",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b6d78c36-4589-445f-a911-aa49b29a10e5"
        },
        "item": {
          "id": "aa842e4b-cdb3-4164-a4f6-0ccd4b3e2e9e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "eb5d23ea-a3ce-4073-b04f-788dd186d7ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c42beb-30c9-49bc-8340-8624005edda6",
        "cursor": {
          "ref": "494a4e0e-b752-44a9-a47e-8be0d875c3ed",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4efd5fe8-f4f0-42b5-947c-e3636bd77bdb"
        },
        "item": {
          "id": "04c42beb-30c9-49bc-8340-8624005edda6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c0480bfa-956c-43a2-96e8-5f5de0a7042f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d50dd1-2092-48a6-806c-9398b5d7f9a9",
        "cursor": {
          "ref": "8cddb98a-04e3-4fba-8749-adb792624c64",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e025dbe7-1ac2-4f62-89d3-75203cf6ed08"
        },
        "item": {
          "id": "f6d50dd1-2092-48a6-806c-9398b5d7f9a9",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8b6cb554-9eec-4d21-8393-c2580a8f5e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0bef97-e94b-41a2-8cf9-dc9a9b4cc473",
        "cursor": {
          "ref": "581b8ad3-4dd9-42c2-9ef0-ee883bb20c61",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2bde2535-0956-4229-9319-7d5cb6a2a807"
        },
        "item": {
          "id": "1a0bef97-e94b-41a2-8cf9-dc9a9b4cc473",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "182aeeaa-a975-4376-b3bb-f8e87e659262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "915a7e3b-5fc1-4007-b35f-35ec12602f1a",
        "cursor": {
          "ref": "14de093f-54a2-4202-a2a5-f812ef4f5f47",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "326e4c42-8cb6-494e-9ca4-20cc41d33f88"
        },
        "item": {
          "id": "915a7e3b-5fc1-4007-b35f-35ec12602f1a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4b7fcb2d-d910-4e4c-8d1b-4d690f22e686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf2ff9c-8f61-4af3-b9af-fe82404b4d58",
        "cursor": {
          "ref": "04c9b363-3a5d-4a44-9548-d18602c399ec",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a8c51423-52ce-4619-9ecb-c4157e914877"
        },
        "item": {
          "id": "2bf2ff9c-8f61-4af3-b9af-fe82404b4d58",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6b3aab8d-b3b1-4ef8-8186-7d04cccea49c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db01bdf8-0994-4685-b564-ffa4a9622bc0",
        "cursor": {
          "ref": "f4c8757b-2c00-4244-8e31-e18f121c1221",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0b75e584-5473-45f8-abf0-9d628af9e71a"
        },
        "item": {
          "id": "db01bdf8-0994-4685-b564-ffa4a9622bc0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b56fed08-8b48-458d-a97f-ac2f48b3e729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c352405-68fc-4f48-89e7-62b150da756f",
        "cursor": {
          "ref": "2a79115d-5753-4421-821d-41381339e13d",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "702c7a8d-be83-4d6d-86e7-2e5f70b30e41"
        },
        "item": {
          "id": "8c352405-68fc-4f48-89e7-62b150da756f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "00a59c03-5f38-4ef0-a39c-fededba18a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b61921-2b34-4b47-beba-2e354ecfbd48",
        "cursor": {
          "ref": "2de8fbec-e763-4b07-bcbe-9a638dd77a29",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7a7962d7-523e-4fd3-93d3-1778fde720ea"
        },
        "item": {
          "id": "e6b61921-2b34-4b47-beba-2e354ecfbd48",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9d35cefb-ee9e-4cb4-b17c-2dc683f5b0e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a4d890-c6e9-49fa-9947-4197c7ba3902",
        "cursor": {
          "ref": "5f091412-4196-4d9c-a9af-7d4764a908ed",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d149e271-b23c-4dc6-bf4b-32c9bb2cc1c1"
        },
        "item": {
          "id": "92a4d890-c6e9-49fa-9947-4197c7ba3902",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "2c027e62-9df2-4582-95e9-c508edebc131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7876814a-42a1-4d78-99a7-42f100c72031",
        "cursor": {
          "ref": "371c1980-0ca1-478a-b92b-78812aaee89a",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "023358ae-6427-440b-b4c8-c593e8680715"
        },
        "item": {
          "id": "7876814a-42a1-4d78-99a7-42f100c72031",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "96f14462-02cc-4ed0-b6fe-9db91727783b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83b5ca5-10e3-44c3-8502-c77bd12df523",
        "cursor": {
          "ref": "5b8d199f-d5b4-48ab-b965-e6e82f2d8c02",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6dfc4690-872f-4a7a-96c0-9e0ca17048da"
        },
        "item": {
          "id": "d83b5ca5-10e3-44c3-8502-c77bd12df523",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ff2d8be7-5a7c-40cb-95b8-984dfddb5119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c209e9a6-a228-4a68-bbb3-bd042bb6b72b",
        "cursor": {
          "ref": "149805a5-8895-43df-995d-4cd30f74979e",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "dca0dd06-2351-4472-9135-d526c8293a94"
        },
        "item": {
          "id": "c209e9a6-a228-4a68-bbb3-bd042bb6b72b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f89f144b-268a-453a-ac36-053956b0a0a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3b6b70-134f-4c03-a49f-ec7a0dce1d66",
        "cursor": {
          "ref": "b631a879-3950-4040-b32b-0d7e3d618fea",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d51ee3b6-d8c9-43b8-a926-f252e2cc9ab3"
        },
        "item": {
          "id": "5d3b6b70-134f-4c03-a49f-ec7a0dce1d66",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "082728a3-b551-4db7-9714-8c1627d6cd11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d01b8f9-9874-43b3-9151-b0bbfde0f205",
        "cursor": {
          "ref": "de1678b9-2826-4df1-b47c-6135de66f994",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c1c228b3-d142-4eed-8490-d04479da93e4"
        },
        "item": {
          "id": "0d01b8f9-9874-43b3-9151-b0bbfde0f205",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bc985241-7fa1-4fbc-bd36-fb1cc2db325a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "419b739f-56fc-4f37-8f32-8feabe449ad4",
        "cursor": {
          "ref": "34064655-ecad-41fc-9b27-1930156dcbad",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "57659487-6173-4071-8d0d-228e967c5e3d"
        },
        "item": {
          "id": "419b739f-56fc-4f37-8f32-8feabe449ad4",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "65489abe-b273-4727-8518-4235554cc167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d24427-a5a8-4ad4-8e28-556c9b81d5b5",
        "cursor": {
          "ref": "b794fd32-656f-48aa-8a8c-000db160601b",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6381f79e-3291-4289-9a6b-597b59659478"
        },
        "item": {
          "id": "18d24427-a5a8-4ad4-8e28-556c9b81d5b5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b1444950-3257-4cb6-9de0-8869ecf4154d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9961d682-3b41-4207-8392-1243cc94ce8b",
        "cursor": {
          "ref": "aa21a2b1-3031-4940-af07-9fb97baabd83",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a8e580d0-46e8-45cb-92cf-835fec1b03a7"
        },
        "item": {
          "id": "9961d682-3b41-4207-8392-1243cc94ce8b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7bdcf980-95bc-4cd4-865a-b22c1a55bbcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5484298-f496-42b4-bc64-4f7f70ee5bfa",
        "cursor": {
          "ref": "b9e97632-d7d6-490d-a2b5-edc02562b2eb",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "560beabe-712b-4e6c-b5e2-7b3ff0a2148e"
        },
        "item": {
          "id": "f5484298-f496-42b4-bc64-4f7f70ee5bfa",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "2b11cea4-8181-4d86-9cab-f1cc8f9fe412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "36074a9d-6411-44ff-9476-54102508ed1e",
        "cursor": {
          "ref": "8dc730c1-ec64-4d8e-945a-f655c7db91bf",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c42671d8-05ac-44df-ac55-37eea3eeb437"
        },
        "item": {
          "id": "36074a9d-6411-44ff-9476-54102508ed1e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "11e7deca-ba3b-445e-aa29-1160a576906c",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "324f44ea-2d85-412d-8d46-f9bbd8d084d7",
        "cursor": {
          "ref": "646dc4b5-a710-4acc-bb35-80f0f3bf1fae",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6d7b85e8-0abe-4061-9a3a-65203a5e8857"
        },
        "item": {
          "id": "324f44ea-2d85-412d-8d46-f9bbd8d084d7",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "21e02766-05bd-441e-a891-9a51b29e0993",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "86afc8df-b6bc-4f7c-bcdc-98ca93ab9e52",
        "cursor": {
          "ref": "58602614-1782-42d3-8051-f957b12dbab8",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f0bd002b-4416-492b-b877-0b8adaca2cff"
        },
        "item": {
          "id": "86afc8df-b6bc-4f7c-bcdc-98ca93ab9e52",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "71766473-7b57-4fe9-b6c6-1e598b23470f",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4418592-2d79-4bac-a382-3cc6637deeeb",
        "cursor": {
          "ref": "ffa41855-7659-4aef-bc03-9aad73d6324e",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e708b859-ffff-4956-9136-8a9d59621341"
        },
        "item": {
          "id": "c4418592-2d79-4bac-a382-3cc6637deeeb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5670e7a5-d92d-4ca1-8ef8-1e8cc945ec26",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a044ee1-0e46-4c13-9de1-e5572151a7de",
        "cursor": {
          "ref": "e4d6f1f8-66fd-47fc-a0bb-4530e55601dc",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e9e908e1-c265-4c6f-95e7-4193e1bc2c61"
        },
        "item": {
          "id": "2a044ee1-0e46-4c13-9de1-e5572151a7de",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "013a524f-ec8d-4ebe-b2c4-16370ebe1544",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-16T00:42:04.615Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-16T00:42:04.615Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "f4a459a4-bd1b-4461-9bc6-ca2ef79c476c",
        "cursor": {
          "ref": "d927354d-af0b-4c38-986c-90f46b9b2c6a",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b1d53b5c-24f6-4f59-b896-3d4271a7907e"
        },
        "item": {
          "id": "f4a459a4-bd1b-4461-9bc6-ca2ef79c476c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "59514759-72d6-4f8f-8f2c-e7194d5fee5b",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c518deda-3b52-4634-add1-4cf2126bf57b",
        "cursor": {
          "ref": "c4b974fd-e2f2-46df-a691-8e2d15f16205",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "76eacdd0-e1d0-4ba0-b4d1-2374c26df258"
        },
        "item": {
          "id": "c518deda-3b52-4634-add1-4cf2126bf57b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ab2d921e-0c3a-4ad7-894e-ec655ceca82e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33be12b-330a-44e9-b8d7-ae07019becfb",
        "cursor": {
          "ref": "df3b794f-455e-4fd5-8ec2-f321769fe328",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "61e1bc35-59e9-4b41-b669-f84bb7d638c5"
        },
        "item": {
          "id": "d33be12b-330a-44e9-b8d7-ae07019becfb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7e899111-d642-42c8-ad24-6538f396fab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f71511e9-1f71-42b9-a32e-0806c343bc62",
        "cursor": {
          "ref": "74b71375-44b1-4fc9-9890-92eb7c6e00b4",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "84b392f3-0789-4937-990a-064c37b6cbc3"
        },
        "item": {
          "id": "f71511e9-1f71-42b9-a32e-0806c343bc62",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "70c3da54-07f3-48cd-8391-3b1c5035a2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8ad1cd-57a3-4e7c-9fde-3aeaa848d151",
        "cursor": {
          "ref": "3e55694b-3cd5-425b-b3ea-6e6bf969115d",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e510e867-c80e-43c1-9b1f-6e60df313ed3"
        },
        "item": {
          "id": "de8ad1cd-57a3-4e7c-9fde-3aeaa848d151",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "460efbcc-6e97-48dc-9b1a-c6ba42835750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f413ade2-7394-4dc9-9c29-73d0fd5a46e8",
        "cursor": {
          "ref": "cb9ea96e-553c-4d15-b7f1-9a73a463d441",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5a7ed37b-daa3-403c-ba11-68b246521b80"
        },
        "item": {
          "id": "f413ade2-7394-4dc9-9c29-73d0fd5a46e8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d17b92f7-bbd5-4b60-9e0b-4068dcc0d0f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013e5c2b-8d74-4081-a05e-eb8f566e6c40",
        "cursor": {
          "ref": "6ccea4df-52ff-44f0-b58f-2252da55381c",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e16d6f06-5663-4200-9d7f-069730164c11"
        },
        "item": {
          "id": "013e5c2b-8d74-4081-a05e-eb8f566e6c40",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "dc0d7d75-1d4c-4c4c-94d0-17ae94ca75a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dafbdd96-6b92-4f08-ac3a-286f70c69da8",
        "cursor": {
          "ref": "58c53a20-48a5-495f-a9f9-13bfcadfe8b3",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e73b0f44-0906-4bf8-9e4d-91becaf481d2"
        },
        "item": {
          "id": "dafbdd96-6b92-4f08-ac3a-286f70c69da8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b1692254-0328-43d3-bc46-24681ac66dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08978d15-2f64-48d3-b3da-9926542f7052",
        "cursor": {
          "ref": "4986a05c-1250-4221-883a-c780b010b7d3",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "469eaac2-75be-4bc2-aa64-d13f27d2c54e"
        },
        "item": {
          "id": "08978d15-2f64-48d3-b3da-9926542f7052",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "14844a64-5849-49d2-a904-48ec103bff8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee621524-700d-4f18-96e8-062e99d4f901",
        "cursor": {
          "ref": "0fa29db7-bd45-4862-9390-444907c3ce21",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c85784fe-ab74-4a3a-a426-61d7b595f466"
        },
        "item": {
          "id": "ee621524-700d-4f18-96e8-062e99d4f901",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0c39d132-5726-4c57-9e00-3ca8a8d24058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2f2ed3-9683-488f-80e5-9bdd5e1c3aa1",
        "cursor": {
          "ref": "4cff3aae-68b2-4fe9-87a8-45fc45610846",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2019a0d2-a7a1-4bd4-a1a6-614d99e175f5"
        },
        "item": {
          "id": "6c2f2ed3-9683-488f-80e5-9bdd5e1c3aa1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "38f207f9-c761-431a-b38d-dcece8eda3fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8a4591-6b82-4d24-83ed-48d0f6b84ca1",
        "cursor": {
          "ref": "bf8120da-2a11-4e14-a375-c34f3a8c1c98",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6189428e-b30b-4892-82ee-76376c650f12"
        },
        "item": {
          "id": "6a8a4591-6b82-4d24-83ed-48d0f6b84ca1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7fa594d3-7875-411e-a43b-0bb2725b798f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e45238-0ea9-42e1-8912-9501e260a697",
        "cursor": {
          "ref": "c130ee70-20f0-4623-bb6d-f13545e9840c",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6f126231-f20b-4849-95f8-760321c65fcc"
        },
        "item": {
          "id": "58e45238-0ea9-42e1-8912-9501e260a697",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b42ee6a8-70be-43cc-9470-f7b203cfaf45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6becf449-d809-491a-b535-6933146876a9",
        "cursor": {
          "ref": "3355d70b-3210-437b-9f47-c44b4be2167d",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8b46f7fa-1275-470c-a1ea-3504adbdcd9f"
        },
        "item": {
          "id": "6becf449-d809-491a-b535-6933146876a9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0fdd1d2a-e88e-495c-aa8c-97cd21ac2309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9560536a-e651-4a02-989c-d03c5356b739",
        "cursor": {
          "ref": "5a0d77f8-5dda-4a70-a413-798d1112d2ad",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "eb2d4ca4-451d-403d-bced-68bc19fab66a"
        },
        "item": {
          "id": "9560536a-e651-4a02-989c-d03c5356b739",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7e4370b8-1655-4be3-902c-3b3765120c49",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "0b39e2b5-0f5f-4163-bc14-52ddc1ade0f1",
        "cursor": {
          "ref": "47aa000b-a193-45ff-acd1-7a119aa0e966",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7a9a9390-e80e-4623-8d38-c798a61de6a9"
        },
        "item": {
          "id": "0b39e2b5-0f5f-4163-bc14-52ddc1ade0f1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e69b9b27-7ddd-45f3-ab83-16f9c6428f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de47016-ba98-429b-87b2-3c8cb2326948",
        "cursor": {
          "ref": "a127f2d3-562d-440d-82bc-14bea4cf44b9",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3c691e63-90cf-4736-9b81-14a57a8b85b8"
        },
        "item": {
          "id": "9de47016-ba98-429b-87b2-3c8cb2326948",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f44513df-0fac-4c98-893b-17d4305868bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba57ca5-b131-46ed-bfcc-cdcfd3e1e980",
        "cursor": {
          "ref": "bd05df0d-7aed-4004-bd5a-e720ca706d4d",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "8776c1b7-96d9-45a5-8aa1-2d9991d3febd"
        },
        "item": {
          "id": "fba57ca5-b131-46ed-bfcc-cdcfd3e1e980",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "47f6b0eb-f841-41d7-8d5e-a511606d19a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731d7f26-ffd9-4cbb-912c-c13dd226677b",
        "cursor": {
          "ref": "7acca85e-d604-4ce0-92ad-39e71a247773",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b4e6e830-6040-4dd8-9327-62bc94fe9c75"
        },
        "item": {
          "id": "731d7f26-ffd9-4cbb-912c-c13dd226677b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "92a51f2b-c155-4275-9b03-ef16099d3c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1151359a-a4f7-4a38-b639-6ee5cdd52643",
        "cursor": {
          "ref": "d9be53da-8e1a-4702-94a0-74177850b3d6",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a24ad173-600a-4cc1-82d1-e74baedc9b5f"
        },
        "item": {
          "id": "1151359a-a4f7-4a38-b639-6ee5cdd52643",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ea98de71-01c1-4518-ae1a-1171280c5705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d048477a-26f6-4e23-8bf0-0290d3cc28ba",
        "cursor": {
          "ref": "69e0da4e-7c68-4d3a-b033-6d5397ecb782",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0420d33e-0210-436e-8484-e98e2f918f10"
        },
        "item": {
          "id": "d048477a-26f6-4e23-8bf0-0290d3cc28ba",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "62653e59-46cb-4b71-acf1-7fb410e66bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94bbec8-9b52-41de-b85e-6d0531868242",
        "cursor": {
          "ref": "a9c39c42-c4d1-4285-803d-798d17d97cde",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8b14d11e-24f5-4c0b-83bc-a1af521c0faa"
        },
        "item": {
          "id": "f94bbec8-9b52-41de-b85e-6d0531868242",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9a1a6d47-d3a5-4a5f-bffe-3e2dfd81df7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391b8d82-6c80-4a35-adcf-bce04df7b89e",
        "cursor": {
          "ref": "681f0c32-2d62-48ac-9cc6-4980a437e852",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1019a80f-9de3-41b9-96bb-2ca6b54d536b"
        },
        "item": {
          "id": "391b8d82-6c80-4a35-adcf-bce04df7b89e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "619106a2-c1d7-4c9b-bcdb-7df0184b60ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a9d05e-7129-4ccc-808b-4e4f4ae932fb",
        "cursor": {
          "ref": "1c2572cd-1f74-4c87-a24c-76e29c6ce37f",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e38a0ba2-c3f3-4717-bba9-204403477337"
        },
        "item": {
          "id": "e8a9d05e-7129-4ccc-808b-4e4f4ae932fb",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2a789df7-963c-4e42-a8ec-2e01cb2b11c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28538715-2145-41b2-a770-620142c3e0ba",
        "cursor": {
          "ref": "0044e62d-de6b-4226-9f7f-6c7b56a53403",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "42e183cb-749b-4f94-acf7-736b5fc059d7"
        },
        "item": {
          "id": "28538715-2145-41b2-a770-620142c3e0ba",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a66d1348-b00a-4fff-896d-67451ba2274e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf7f02e-d092-45eb-b2e3-74700cbdb68a",
        "cursor": {
          "ref": "5c242964-1c5e-4bf9-93ed-e806e7536f69",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3ed80eb9-ce73-4313-a6ed-fd4f6b8f7d00"
        },
        "item": {
          "id": "0bf7f02e-d092-45eb-b2e3-74700cbdb68a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "38382b6c-7754-477e-bdd0-7326096cee9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6c78b6-7890-40bb-9659-d7c0f55644fa",
        "cursor": {
          "ref": "b06a420e-0a4a-48b4-8ad4-c970e44bded9",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "48781e28-10e6-4fd3-8930-b743d2b14352"
        },
        "item": {
          "id": "8c6c78b6-7890-40bb-9659-d7c0f55644fa",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b240b6f0-4147-49dd-aa4c-c0fae1ca07f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21193c1b-8927-47ee-b021-a54b4c7f507d",
        "cursor": {
          "ref": "70c2e542-db3e-456c-a596-4976f4e91d52",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "cab74df3-4cc2-4aee-9ab3-f80930e409dc"
        },
        "item": {
          "id": "21193c1b-8927-47ee-b021-a54b4c7f507d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "de63b15c-29b2-4ad1-b8a6-fa5e5c52b1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e638bcbf-b6e6-4a67-a759-8017c04117b7",
        "cursor": {
          "ref": "887a2173-2577-4c2d-a5d3-3211f86558fe",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8ae50022-1aab-4915-9b2b-fce2fc3d17be"
        },
        "item": {
          "id": "e638bcbf-b6e6-4a67-a759-8017c04117b7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d19d2251-1002-42a9-8ed5-f3c19008252c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7202a25c-2214-404f-bd01-c72783b53104",
        "cursor": {
          "ref": "d8133d2b-e1e9-4c3c-84ae-bc7ae9a883e0",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2dd907ef-478f-46d4-a57b-23dbc0a255cf"
        },
        "item": {
          "id": "7202a25c-2214-404f-bd01-c72783b53104",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "51e5177c-aac8-418a-8ff8-a484de4cdbb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d39e3c-c856-444e-8963-b7dd9d3fa602",
        "cursor": {
          "ref": "739a1479-8f53-45a3-957b-45aaf18f1d00",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "cc73a8fa-91a1-47b5-bf91-f9d555bf20cd"
        },
        "item": {
          "id": "b1d39e3c-c856-444e-8963-b7dd9d3fa602",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7b944499-2c05-4bba-90f7-9459ca89a3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6176dfca-b09e-4056-9344-7a2a0dec1593",
        "cursor": {
          "ref": "394a669a-9a94-4688-9c82-f1ee5fe71be1",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "121ed5a0-8f22-4e20-8127-eefe4d73bb6a"
        },
        "item": {
          "id": "6176dfca-b09e-4056-9344-7a2a0dec1593",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a390d068-34fa-426e-962d-9c5cfcf8d7c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6775bd57-f860-47f7-b571-4f29304f33ad",
        "cursor": {
          "ref": "5d195bb5-f8cb-4b19-90d5-37b99d7bd677",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "60d7e20a-3767-4b8c-b848-c8b3b306dd19"
        },
        "item": {
          "id": "6775bd57-f860-47f7-b571-4f29304f33ad",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "8d6fa2b6-ee46-4239-a15e-c5238bc35a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7e724e-fcbd-4e4b-abfc-b124346880a2",
        "cursor": {
          "ref": "e97a8fe6-ade2-496b-9994-da4aaabdb6e4",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b9ddf45d-3eee-41fa-9b35-0cf73069bb4c"
        },
        "item": {
          "id": "5a7e724e-fcbd-4e4b-abfc-b124346880a2",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "69a07246-e914-43e4-9fff-77c69124aec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca557e14-ae86-460f-b966-8eacf58659a4",
        "cursor": {
          "ref": "8f2b5fb0-95ac-481e-9781-5eac5d4f023c",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "341b17f0-c4ee-4453-b934-b9e2d9e3ab9c"
        },
        "item": {
          "id": "ca557e14-ae86-460f-b966-8eacf58659a4",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "98369711-11ea-44e9-997e-dcd03e4206e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb52c150-c81d-4980-a31e-eb3a811b5926",
        "cursor": {
          "ref": "94799bc9-65ad-4120-ac85-f17f85e5c220",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "41909b34-9e98-4337-993e-530f539b6417"
        },
        "item": {
          "id": "cb52c150-c81d-4980-a31e-eb3a811b5926",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7db3907f-ee54-443e-a96a-a35b978cadbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385c927f-04f4-4b98-9a71-21c67ebe4c06",
        "cursor": {
          "ref": "bd1c48b0-6067-4148-88c1-59390848723b",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "878bc2db-66e3-45b9-94c6-c5a530712e30"
        },
        "item": {
          "id": "385c927f-04f4-4b98-9a71-21c67ebe4c06",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "e2dd2934-967e-4c59-9fae-fd069714d32d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d89b59ed-d0ff-4bb2-b405-cca42bf08ca5",
        "cursor": {
          "ref": "964ca65b-f76d-45b1-ae08-fe06bfb77f38",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d7c5aa77-d3ea-4971-ad43-b2c32a1d7546"
        },
        "item": {
          "id": "d89b59ed-d0ff-4bb2-b405-cca42bf08ca5",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "fd0e2ea4-8d4e-4303-a632-ad05db09fb57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d5ba1e-b9eb-45c4-b84e-5e8a1e828dbf",
        "cursor": {
          "ref": "677f8b78-522e-43db-9da5-dd9ab1ff914d",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7db6a4d3-4345-46c4-957a-6f7236c4fa3c"
        },
        "item": {
          "id": "26d5ba1e-b9eb-45c4-b84e-5e8a1e828dbf",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "90fd2adb-5d1f-433f-91b4-1f65d624b642",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d9e74ee-2dcf-423e-be13-4104c7106b46",
        "cursor": {
          "ref": "d74ab419-aa8c-4c60-89cc-241014a06616",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d4011421-b15c-4cb8-9de0-0aeba7cda54f"
        },
        "item": {
          "id": "9d9e74ee-2dcf-423e-be13-4104c7106b46",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "80a61798-4bbf-49d1-9be8-8792e024839d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d76a239-6777-4ea5-b4a4-8a1984bdfeee",
        "cursor": {
          "ref": "bd5425fd-d5cf-4f38-925b-664c00d2b064",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d9115795-57fa-459a-949e-fa9827a1f52c"
        },
        "item": {
          "id": "8d76a239-6777-4ea5-b4a4-8a1984bdfeee",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a0e74f0c-77dc-4fa6-b952-617fb86b44b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd27abc7-e2e1-4eae-876e-3ed10e429e24",
        "cursor": {
          "ref": "2313b17e-788a-42a0-9aaa-47c7afa030db",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e833534b-0c11-4e6b-ad92-0e73ddaea0f4"
        },
        "item": {
          "id": "bd27abc7-e2e1-4eae-876e-3ed10e429e24",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "139782f2-fe79-477b-9f26-d5e293de1c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e48c21b-a895-4027-a5e4-87b940db2942",
        "cursor": {
          "ref": "541a1515-f729-4604-bfb4-fb5784129d85",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7fceb7bf-5b33-47b8-848f-37cf1221e6ee"
        },
        "item": {
          "id": "7e48c21b-a895-4027-a5e4-87b940db2942",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a31a5015-b2b9-4151-af8c-5745b8a5ae9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404a2d0a-df60-4f9c-8392-b5352dcf9e5d",
        "cursor": {
          "ref": "e7898cfe-2c16-4f53-928d-12a8cd23daf2",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "132a1bc4-847a-443d-bd7b-52cf506e4f86"
        },
        "item": {
          "id": "404a2d0a-df60-4f9c-8392-b5352dcf9e5d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "583aeaf9-d39b-460a-a09f-5b20fa07b3a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d427409-fd01-4f72-bbc9-481710be7833",
        "cursor": {
          "ref": "a4672c33-e120-4a13-82a6-5a2c79921d6e",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3838bb49-2f9d-4c93-bed7-d7c598b9cbcf"
        },
        "item": {
          "id": "7d427409-fd01-4f72-bbc9-481710be7833",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "be935e49-2041-48f4-a1d3-e2dce0ca8171",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "a09839b8-0812-49a0-aa44-5e092efc8ede",
        "cursor": {
          "ref": "4dd2d68b-3055-4daa-be76-5f9f13f21d39",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "80b37863-f1ff-4284-8481-516a7fe419d2"
        },
        "item": {
          "id": "a09839b8-0812-49a0-aa44-5e092efc8ede",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f4f754ce-1ec0-4912-9b6b-c5e91516205f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579747b5-d748-4ec1-a707-ca558f51dd04",
        "cursor": {
          "ref": "14625207-e26b-4320-86ed-ffd69cf71ab7",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c3d1cb91-5c75-48fd-8d56-df59f17b96c1"
        },
        "item": {
          "id": "579747b5-d748-4ec1-a707-ca558f51dd04",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "759304d7-1205-468c-b4fd-db8c9c73c984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a63d291-b060-4b12-9bd4-a1d8cf209baa",
        "cursor": {
          "ref": "79b51289-a9ce-43ca-ab71-d60364cf21e9",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c238540c-d2ee-4a9b-88bf-3be31d499c8a"
        },
        "item": {
          "id": "6a63d291-b060-4b12-9bd4-a1d8cf209baa",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "24e7d33b-bb5f-4590-9501-fe5b942e946e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b902e7-9f51-466f-8561-1a2b8a29b00e",
        "cursor": {
          "ref": "09be54eb-c7e0-475d-ac33-4d37ea2f793b",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7cd041a1-fa64-4732-9fd9-199be5b4c252"
        },
        "item": {
          "id": "95b902e7-9f51-466f-8561-1a2b8a29b00e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c00780c5-5af4-4e00-acad-b5858fd4c91e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8cea29b-5f7a-4887-b681-dffbb7447905",
        "cursor": {
          "ref": "a49ceca3-6489-4017-89ec-7a60e762d2f5",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "25736173-d905-4112-80f4-bb836040302a"
        },
        "item": {
          "id": "d8cea29b-5f7a-4887-b681-dffbb7447905",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "85aee62d-8151-4cd7-b8b5-cc8158080f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe7c827-31b0-472f-9e4d-115f0645c31a",
        "cursor": {
          "ref": "81592d0c-8c15-46a5-abfa-dd9f66b12714",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b3bae231-85dd-4bf4-ae22-dea3049efe0a"
        },
        "item": {
          "id": "efe7c827-31b0-472f-9e4d-115f0645c31a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5d77e525-d44f-4b08-8ade-adff7190df78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e71e723d-e62d-4c45-99ed-ebbb5d88a798",
        "cursor": {
          "ref": "df64bfec-9038-4ebb-888a-65d8584e1d39",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "34cb3599-15e1-4617-91b6-4ddac52ad71b"
        },
        "item": {
          "id": "e71e723d-e62d-4c45-99ed-ebbb5d88a798",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "806c8729-7c22-4f14-8aad-9ca0792fcbcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072d99d0-a5a6-4ace-8bf9-cae7b8997523",
        "cursor": {
          "ref": "73ed1da8-980f-4222-82ea-2388492abb91",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ff9460f4-1534-4d42-ac3d-d9e596224477"
        },
        "item": {
          "id": "072d99d0-a5a6-4ace-8bf9-cae7b8997523",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ac8d4a44-dbd1-4f76-abd7-71d6615cf56e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b65c4ce4-1fbc-46b7-bdd3-7a5bb0eac17a",
        "cursor": {
          "ref": "c90830ae-1064-4f1f-b564-fa2e50fc7bf2",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "dd7c14d2-f567-4139-bc30-e796086bdebd"
        },
        "item": {
          "id": "b65c4ce4-1fbc-46b7-bdd3-7a5bb0eac17a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "86bcb177-500c-43ee-b275-9aa08535a552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97900ce3-e430-4ec6-80fa-0f8ee8d0e29e",
        "cursor": {
          "ref": "6cdff337-f5f3-47d2-8059-ccfce40e5c4c",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4ba2c2cf-86ce-449f-8a45-5e2deaa270bd"
        },
        "item": {
          "id": "97900ce3-e430-4ec6-80fa-0f8ee8d0e29e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "bd7b3498-0c8b-488b-a235-f857384b07a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5598362a-5eb2-44b2-a563-e355159169fd",
        "cursor": {
          "ref": "8f5e4a8f-816d-48e4-a588-0bd5da43ea6f",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4d2eceba-8ac8-4ce4-8c0d-ad2651e8e808"
        },
        "item": {
          "id": "5598362a-5eb2-44b2-a563-e355159169fd",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3b1a7372-f8a8-4690-adca-791699ef8c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce176509-e185-4c5a-b53c-588892d5c709",
        "cursor": {
          "ref": "c2759f13-6725-467c-a937-c24c16314145",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6c257f01-65b4-42f2-b151-0985a934f1c3"
        },
        "item": {
          "id": "ce176509-e185-4c5a-b53c-588892d5c709",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8f9f983a-a886-4b1b-9068-93e5e8764650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecfc47e4-24de-4e5e-9a99-5bf07446d1d3",
        "cursor": {
          "ref": "08e16730-dafd-4abb-ae43-6c23800d747c",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "aea93782-7056-42ad-b234-c18ca31f8b7f"
        },
        "item": {
          "id": "ecfc47e4-24de-4e5e-9a99-5bf07446d1d3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f0b977db-af5e-42f6-a809-f6f93280516c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c9a332-d718-4889-801e-82d6d0749faa",
        "cursor": {
          "ref": "a9b54bfd-aee3-49b9-88ad-b23059cfb39b",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "26c9b5c9-b546-4965-a003-125824ddf1d9"
        },
        "item": {
          "id": "12c9a332-d718-4889-801e-82d6d0749faa",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b442bd09-a9fa-44d1-82ee-28594dab604f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "210857a3-806d-46c1-bd7d-9b77b961e7d8",
        "cursor": {
          "ref": "f24f8e37-ff02-420f-8572-2cba11104c05",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "3e22ce95-23f2-4ab0-9966-13143e1e126c"
        },
        "item": {
          "id": "210857a3-806d-46c1-bd7d-9b77b961e7d8",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c5b921dc-b505-4500-a095-37f5ecbe1964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4189812e-199c-4da1-ae4b-b1ce4c911f86",
        "cursor": {
          "ref": "1b0fcd92-ca8c-4075-bb89-0a1ff27f4124",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "101d9491-52a9-41ee-8b01-cd883c4288b5"
        },
        "item": {
          "id": "4189812e-199c-4da1-ae4b-b1ce4c911f86",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2d7d5389-6de0-4732-87c3-8ee54b9ad2f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84d7e9f8-c7c7-4c9d-9883-c9f0105d77db",
        "cursor": {
          "ref": "a7053ad6-ebb6-43f1-a21e-ce38012eda94",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e88e91b3-de37-4d7e-b06f-1d200b2c2e50"
        },
        "item": {
          "id": "84d7e9f8-c7c7-4c9d-9883-c9f0105d77db",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "11774516-3750-49f8-8f44-f149b99fa05d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e3c546-b44e-4b1f-8dab-4ef5bd988ed5",
        "cursor": {
          "ref": "92f5cbf0-55fb-41f2-b484-1b3b9d7f7d0e",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "578b8355-30e4-4b13-a08f-e996b81df437"
        },
        "item": {
          "id": "13e3c546-b44e-4b1f-8dab-4ef5bd988ed5",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8368f5b5-70af-4ec4-8846-ea3e911a986d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe3ef3a-7c4d-40dd-abc4-b01939267630",
        "cursor": {
          "ref": "06d275f2-e649-4faa-ae54-d566a94d3edc",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "16a49e4f-8424-45ba-b9ba-aa1f5f092319"
        },
        "item": {
          "id": "fbe3ef3a-7c4d-40dd-abc4-b01939267630",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "075d96e2-b627-489e-8ed4-d8ab9791ea45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b491dee7-8ae6-4170-9f2b-a08571892e93",
        "cursor": {
          "ref": "91d1adf2-2350-4f4b-b1ca-ccdb18b629f6",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c0619bfc-c12a-43bc-974a-e0ca45902522"
        },
        "item": {
          "id": "b491dee7-8ae6-4170-9f2b-a08571892e93",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7d4dfd50-1b7d-444b-a0d4-ba9770f34b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b5b0fc0-8960-4a91-9dc0-3d1e6722d7a8",
        "cursor": {
          "ref": "9ccfd651-d89f-45f7-8eab-e4be9e321e80",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "603fe8d7-ca2a-4c2a-b8ab-2ecf789bf13b"
        },
        "item": {
          "id": "7b5b0fc0-8960-4a91-9dc0-3d1e6722d7a8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e9404911-31e1-42f4-91bf-f4b9c3176014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7584e2db-2dcd-4a25-bc68-76b888376d7b",
        "cursor": {
          "ref": "587fa2b0-ec57-499e-b1b6-f5f8bb759589",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9a3b75ff-feb2-4e05-8b3f-f37dc6cf9737"
        },
        "item": {
          "id": "7584e2db-2dcd-4a25-bc68-76b888376d7b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "32dcb8e0-637e-4dc9-a1a7-44fd20c10876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ceeb096-8823-43c0-ac4e-a6eb1842816d",
        "cursor": {
          "ref": "5c95ec43-d7ac-4f5a-a55c-49c3e198c881",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1824cee9-6c53-4525-b360-56994eeba115"
        },
        "item": {
          "id": "3ceeb096-8823-43c0-ac4e-a6eb1842816d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "49b84212-c3de-4e10-b004-5fc8cf10f659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b29373b-ce29-4ea8-a9e4-3ae2af663d7d",
        "cursor": {
          "ref": "59e21a5c-bff2-4050-aa58-a98938b52159",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9b9badee-9513-42ac-a3fc-9ecc6e192b30"
        },
        "item": {
          "id": "4b29373b-ce29-4ea8-a9e4-3ae2af663d7d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "554d0b76-ccad-417a-a95f-7a6c8cd725b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ade3d9a-fa05-4e7e-bb66-1a564b322525",
        "cursor": {
          "ref": "928e405c-49c0-41c7-b237-49c934678b35",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e4b7098b-ab5f-45f7-8604-e43825e9e297"
        },
        "item": {
          "id": "4ade3d9a-fa05-4e7e-bb66-1a564b322525",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9bebf8ea-38b1-4111-a6cd-a36c55d3f5de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a38a0f-dbd6-49df-8bfb-ddb782eb39f7",
        "cursor": {
          "ref": "31ae8dd6-eb0b-40ee-b131-bced2c0a258b",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "8e5daf60-3e04-42a7-aaa8-0034b5d23432"
        },
        "item": {
          "id": "15a38a0f-dbd6-49df-8bfb-ddb782eb39f7",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "19cf94d4-eee3-4407-a70d-b32be2766cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c726ab-caa2-4cce-b94f-13202bd8c1b0",
        "cursor": {
          "ref": "fef3e3c5-844d-401a-9477-8a86bc973863",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8aa0416a-ee05-49fe-bc74-ea24330ac6d5"
        },
        "item": {
          "id": "23c726ab-caa2-4cce-b94f-13202bd8c1b0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "956b5494-e7f2-40d5-b2ad-14047f13ae32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78741bef-40d8-49cb-a0b7-fd7decaa0a77",
        "cursor": {
          "ref": "d5b9fca7-5eb7-4281-992b-41eed18acbf3",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ac3cc552-afa9-4278-a526-a3a9697c86de"
        },
        "item": {
          "id": "78741bef-40d8-49cb-a0b7-fd7decaa0a77",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "fde5bc43-37b8-4756-865a-690062144461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c6af18-6887-452a-bbb6-74d40fd9ca55",
        "cursor": {
          "ref": "a7a57e9a-f220-449a-be20-2add81f55143",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6f4e42e3-ca98-4b65-b3e0-027f02d35847"
        },
        "item": {
          "id": "c8c6af18-6887-452a-bbb6-74d40fd9ca55",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2db46de9-6efe-4dc6-b2ff-6a7ca2e44a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2daf2626-22c7-48ee-a674-ffe1eb059d7b",
        "cursor": {
          "ref": "c8872312-cd52-40a8-9ae3-00d8498c37c0",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b77eb7e2-61f3-4010-b3ba-b7956ee8cb3a"
        },
        "item": {
          "id": "2daf2626-22c7-48ee-a674-ffe1eb059d7b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7db3f0c9-efe8-422f-9624-e88d169cca64",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "ea39ef3b-534f-490a-98d2-4802bfc83b33",
        "cursor": {
          "ref": "d9b36ac8-4ff7-4299-a032-0d065fca77e8",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "989b0611-2b19-4bb7-9a29-fb879831cd38"
        },
        "item": {
          "id": "ea39ef3b-534f-490a-98d2-4802bfc83b33",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "38467f37-91a3-4d25-90d1-45a538deafaf",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "e6e4688a-2e74-446a-9b2a-2606207537c0",
        "cursor": {
          "ref": "fbbc20e0-6244-4156-80e4-894de0d5a23e",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "38055618-6c25-47dd-883f-a6be27734e75"
        },
        "item": {
          "id": "e6e4688a-2e74-446a-9b2a-2606207537c0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "2bf623b9-29a2-4ae7-ad01-23d1b12e9366",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "618518f0-62ad-4d31-a59d-39965bb0b30e",
        "cursor": {
          "ref": "9f59f9fc-1ce7-4fac-b043-4502afdbd3e7",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "18b6f79c-c9f7-4325-800d-f165b2a3faeb"
        },
        "item": {
          "id": "618518f0-62ad-4d31-a59d-39965bb0b30e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9d6e6cd8-a14d-4e70-8e77-f25ba36d9576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afdbeb7d-6a63-43b2-bdf0-8ddcf06cf0e0",
        "cursor": {
          "ref": "30115cc4-ec4a-477b-8443-07109ea3e151",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e5d0f914-1066-4eee-8aca-3a69750d9980"
        },
        "item": {
          "id": "afdbeb7d-6a63-43b2-bdf0-8ddcf06cf0e0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e58f0cd4-c4e5-4199-99ef-94f12d25cdd2",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "b6089441-a78f-407c-acc5-4288bfc0858c",
        "cursor": {
          "ref": "3398492f-dbe4-4172-b1b1-9336c10bbe4b",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a55b2a21-c5d9-4341-b369-c7dae12011dd"
        },
        "item": {
          "id": "b6089441-a78f-407c-acc5-4288bfc0858c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e231106a-74b6-4bad-a705-b350d543a4e2",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "994b76b6-d9e0-45f7-bf42-38eebf9408b0",
        "cursor": {
          "ref": "0fba5c26-8c96-4278-b507-cb1387b32fda",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b4708284-bb49-4e79-b07c-1e12d4bd4587"
        },
        "item": {
          "id": "994b76b6-d9e0-45f7-bf42-38eebf9408b0",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "209eab4a-bc76-410d-9419-285b5e88445c",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "ea153f54-4337-4d36-85bf-2bda00f96bbd",
        "cursor": {
          "ref": "cfba89c7-bcf8-496a-a305-f640768f6807",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8d063495-f43c-4e72-ae20-722382c8b009"
        },
        "item": {
          "id": "ea153f54-4337-4d36-85bf-2bda00f96bbd",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a8231158-a8be-42e9-bd3f-5e2998d4c748",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "34e75875-e6dc-4548-bdc9-87a9c9f30e4c",
        "cursor": {
          "ref": "c5a03655-1c83-495e-8633-bd8c2b981dba",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "922db7b8-7956-4afd-9261-05f50d15ae43"
        },
        "item": {
          "id": "34e75875-e6dc-4548-bdc9-87a9c9f30e4c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a90ff93b-3a57-4538-bcf8-2b4b76a4e105",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "20198597-ee95-4fde-af8b-05dbe61452a6",
        "cursor": {
          "ref": "13b36708-fc8e-453f-8e6c-8ed41299ea93",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "dd7e2aa3-4d97-4b88-93ce-2d15c24cf896"
        },
        "item": {
          "id": "20198597-ee95-4fde-af8b-05dbe61452a6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "334c3f7c-f993-4820-807d-d9250eaeb0c9",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "d637a64f-244b-4c9e-8e17-e6cf12521f26",
        "cursor": {
          "ref": "1fe1cd4a-fbba-40b9-b520-722ba06ed331",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0b3fd527-0145-4d1e-ae58-ea254678761b"
        },
        "item": {
          "id": "d637a64f-244b-4c9e-8e17-e6cf12521f26",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2e2847ee-4b8e-4eb4-a7a6-540a203b48ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc3304f-8235-4006-b862-b1e2602187d0",
        "cursor": {
          "ref": "2bd56324-3ae0-4c21-9c7a-06f733fe14ec",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "dd1f1662-751c-4f59-af4f-85a717ca9349"
        },
        "item": {
          "id": "bbc3304f-8235-4006-b862-b1e2602187d0",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "22c28c63-a6bd-4ed2-a22b-26e430b5bd61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07735958-319d-4796-ba72-9650fd69850c",
        "cursor": {
          "ref": "07338c24-2e62-4ef6-bb8d-759396306c5d",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f7bce24b-cc12-42f5-bd9a-b1458d9dfc34"
        },
        "item": {
          "id": "07735958-319d-4796-ba72-9650fd69850c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "62075bfa-62f8-4c54-bc04-af76e72f92a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf94d92f-7e2b-47f6-9aab-5e19d486dc9b",
        "cursor": {
          "ref": "09afa68f-5a3f-4d71-8863-2bddc5b9bbfa",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9a97007e-834c-4795-b7e1-5de19277cf78"
        },
        "item": {
          "id": "cf94d92f-7e2b-47f6-9aab-5e19d486dc9b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "573d45fa-3bb5-4ab7-9530-c92d8c878d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b25a05a-0b07-48d4-af0d-9a5bf8494bae",
        "cursor": {
          "ref": "412171c6-419e-424d-ac20-e98839f38caa",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "bbd14ae2-82ca-46ff-88cd-d8b6427065a9"
        },
        "item": {
          "id": "5b25a05a-0b07-48d4-af0d-9a5bf8494bae",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "49afafd5-d534-426b-b2fc-2f5f7e54ac3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8536eee-05f0-43bd-b306-0df8f48c5801",
        "cursor": {
          "ref": "5faa52ea-63d8-4b77-9bcc-aa41b4d85b0f",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "aa10de35-402e-4793-955e-aa04af9073fd"
        },
        "item": {
          "id": "e8536eee-05f0-43bd-b306-0df8f48c5801",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d63c9d82-6950-4297-a9d6-7024f55bbbca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fdc1a76-569b-4a72-8708-7c1aa737de66",
        "cursor": {
          "ref": "21d5e83f-6553-4203-80aa-b32150d8e2f4",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "653dbd21-5d70-4643-99c4-7c58cef18efa"
        },
        "item": {
          "id": "4fdc1a76-569b-4a72-8708-7c1aa737de66",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "84a2c1f9-64dc-437d-9f38-e6f3067ea3fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6a98c3-1f59-4de7-ab4d-a433506391a8",
        "cursor": {
          "ref": "ebbad2ee-6694-4e54-9a2c-49353ab97e90",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e08ec8c5-16c6-4205-a136-f3efb692ead0"
        },
        "item": {
          "id": "aa6a98c3-1f59-4de7-ab4d-a433506391a8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "74c49296-d33a-4dfe-a20b-d4762697aa24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8020d7-e788-4c6f-95d0-e9fe0deefc3a",
        "cursor": {
          "ref": "70fe5c97-16ef-484b-8135-eb4884fe0e41",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3e9d4369-d80f-469d-b6a0-878b20f6881f"
        },
        "item": {
          "id": "0e8020d7-e788-4c6f-95d0-e9fe0deefc3a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7376b38e-281d-45b0-95f2-c7987ff6aa6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26d74da-98d8-44ca-8213-704e5b70bca9",
        "cursor": {
          "ref": "ca626733-cc10-4287-92c7-b9138a929deb",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2f7bf123-e605-4785-832a-4386f199fb66"
        },
        "item": {
          "id": "b26d74da-98d8-44ca-8213-704e5b70bca9",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1f12d1e1-e585-4165-8690-5cc53ce3c198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1935b45-7cda-4e1a-b31a-65a639c76ff3",
        "cursor": {
          "ref": "fef2974e-6956-45d0-a7fd-77ff50246258",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2a8e9a91-520b-4a00-8b5f-be477fcd698e"
        },
        "item": {
          "id": "c1935b45-7cda-4e1a-b31a-65a639c76ff3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "43e24aac-e63e-445d-b99e-e98358e217bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b8b329-cd87-418f-a0a5-90e5db9b4585",
        "cursor": {
          "ref": "dd3c0326-9536-4c46-a0df-1ac1ddbd1cf7",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4374ef6e-1ae3-4c62-bd88-aa3105bdb92e"
        },
        "item": {
          "id": "21b8b329-cd87-418f-a0a5-90e5db9b4585",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "cd92031f-ff1e-4bca-ae5d-9fc69a302674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c8af099-52c8-450d-a2aa-e0a84d2753be",
        "cursor": {
          "ref": "8e71a125-054e-4f6a-bfa9-0e4707181e69",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "05ceb49b-80c7-46e9-ab47-9c049c427c66"
        },
        "item": {
          "id": "2c8af099-52c8-450d-a2aa-e0a84d2753be",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9d2a67df-c960-4d74-b087-f7f7c2398ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84aac1e1-0940-4f18-bd86-644cc6aefcaa",
        "cursor": {
          "ref": "26f49e6c-6ba2-4c7e-bc0a-7d45a7d372de",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "96ff4273-0edf-4b94-ad65-576d56526aae"
        },
        "item": {
          "id": "84aac1e1-0940-4f18-bd86-644cc6aefcaa",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "397f7ec8-f821-46af-ba64-8cd43f2a07d2",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "a7c353db-6180-418b-b82a-d20b2ee028e1",
        "cursor": {
          "ref": "af90bc5a-9a14-4ff8-9562-44bca2c1bce6",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f6521c12-1e0f-491a-8521-2a7bbb66a175"
        },
        "item": {
          "id": "a7c353db-6180-418b-b82a-d20b2ee028e1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9cb1cf7b-60a1-47f4-87ed-5a9450198bbb",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "d339d5c3-4a3b-42b7-a33b-0fe5d3485c53",
        "cursor": {
          "ref": "fe850c09-4066-4714-b85c-e161f4371828",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "046dc655-1d77-48ee-9c5e-7b0d8b2ba26c"
        },
        "item": {
          "id": "d339d5c3-4a3b-42b7-a33b-0fe5d3485c53",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5012ede0-3f6a-4256-9d51-3d3fd98060c4",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "56bf838c-edb5-44f3-b07c-016e9b87ed1f",
        "cursor": {
          "ref": "7c0e4740-4615-4e2f-999d-ddfd2dda8e3b",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "cc604f99-c874-4048-b6ea-1c4928426794"
        },
        "item": {
          "id": "56bf838c-edb5-44f3-b07c-016e9b87ed1f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "73ab2808-1b89-476a-8409-2291176896da",
          "status": "OK",
          "code": 200,
          "responseTime": 167,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "e4a9f4f7-2f14-4ea5-bb95-ece5134f0533",
        "cursor": {
          "ref": "084d6618-0d1d-41b8-84ea-8d279662dd45",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "cac0473a-be48-4695-a907-732ac6459269"
        },
        "item": {
          "id": "e4a9f4f7-2f14-4ea5-bb95-ece5134f0533",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7a83f0ca-724c-4ddc-b38d-7b471e6ddf9d",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "2ae3c39b-5767-44e1-b76b-2d9b05930f8c",
        "cursor": {
          "ref": "6bf45c31-eda0-4859-9fe3-651b02242eb3",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "315fb3ff-d298-4859-b032-4a18c3fc2273"
        },
        "item": {
          "id": "2ae3c39b-5767-44e1-b76b-2d9b05930f8c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d4ba79c7-3981-45f0-b423-564e42865f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7835bf-8bd1-493d-a060-bb07abb423f5",
        "cursor": {
          "ref": "ed885835-a63c-4669-a662-accbc28339ba",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "90fd89fa-6de8-4d08-ae4c-fe5bda0d3bdd"
        },
        "item": {
          "id": "6a7835bf-8bd1-493d-a060-bb07abb423f5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e30de490-9655-45eb-ac2d-9fde2d8e9015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f603b72d-01c5-4575-abb5-7f68e67516bf",
        "cursor": {
          "ref": "1190d930-d38f-4a05-b40d-c721c4edec32",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "933a0961-9a6f-440c-8cbb-be825cf6cb90"
        },
        "item": {
          "id": "f603b72d-01c5-4575-abb5-7f68e67516bf",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6177f63f-882a-4edc-b986-5159d7cbeaab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3378ab5-e8e6-423c-93c4-9b46ed56a061",
        "cursor": {
          "ref": "3d9eb437-5a2d-42e2-aac1-c0f9d5ba5bfc",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "3c63a0f1-783c-4542-8dcf-51f5291386e2"
        },
        "item": {
          "id": "b3378ab5-e8e6-423c-93c4-9b46ed56a061",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ecf2e8ee-b7d4-4b04-9205-9ab577759bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965382e5-af11-40f7-a2e5-1b5b731f9f07",
        "cursor": {
          "ref": "a49401d0-b5cc-44a8-b6c7-07539ab5caf6",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3c1047ba-902d-4bc7-a07f-3ddb8d195e6b"
        },
        "item": {
          "id": "965382e5-af11-40f7-a2e5-1b5b731f9f07",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "23efae76-0d78-4f86-b927-fe7aee859916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9132b72c-a5ea-46e9-aa62-5f6aea1aa7e7",
        "cursor": {
          "ref": "2a6f1dfc-783c-4f08-88b2-9bfb5fec7058",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ad287992-6ffd-474a-b578-38acad5371f3"
        },
        "item": {
          "id": "9132b72c-a5ea-46e9-aa62-5f6aea1aa7e7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "274304bf-ba81-4ed2-a49b-fc529905e3f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ee5f70-a69f-4049-a5f8-2325a41032b8",
        "cursor": {
          "ref": "131d56d0-0002-4603-aa38-b6e201b81148",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "eb24731d-384c-4f1b-980e-c6520fbdb9a7"
        },
        "item": {
          "id": "99ee5f70-a69f-4049-a5f8-2325a41032b8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d2b04f2a-3805-4684-9e08-c3a5d9877e46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92104239-e930-494e-ac79-c94e46f99e2c",
        "cursor": {
          "ref": "089a3ff8-7c14-48f5-8310-b27e6eed8bc7",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "eb6a95d7-e0e5-4999-bd5b-f59beb3b7a64"
        },
        "item": {
          "id": "92104239-e930-494e-ac79-c94e46f99e2c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6343d7b7-c190-45dd-bf85-9dc78394e64a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be16e600-0edf-4a58-8b56-f8d4c8124f62",
        "cursor": {
          "ref": "06c3709b-65cb-4c48-bc26-6189e703526e",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "89b81a01-0512-4e3a-9041-f1d706ab22da"
        },
        "item": {
          "id": "be16e600-0edf-4a58-8b56-f8d4c8124f62",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "dbd538e0-711c-4106-98a4-298e3300a507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ffcc29-d7f9-46c3-8fba-6df1c6cd5d06",
        "cursor": {
          "ref": "9341980e-9da2-4a1f-bedb-4eb2690ff3e6",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0f7641b6-c933-4a87-a379-f417c3647bd9"
        },
        "item": {
          "id": "35ffcc29-d7f9-46c3-8fba-6df1c6cd5d06",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7935815b-5c26-4cf2-a003-9d69132d3e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd144ef9-338c-400f-8a9f-843e5858f19e",
        "cursor": {
          "ref": "294356d9-37c4-4cd6-8985-a140cb02da50",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "53cb0415-1367-4847-b7bc-362ce65c7036"
        },
        "item": {
          "id": "dd144ef9-338c-400f-8a9f-843e5858f19e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c4fb1100-6caf-49a4-b8c7-668c8fa6cf6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2fcd99-a661-4867-9f00-3a359ecd91ce",
        "cursor": {
          "ref": "22143de4-76ea-461e-9e94-f4d36f107b1b",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "76023f67-cea7-4dbb-bb02-f5d698f55a08"
        },
        "item": {
          "id": "3a2fcd99-a661-4867-9f00-3a359ecd91ce",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f86770a5-e18a-4635-8069-f50f2e9bad8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f2f25b-1459-4457-9179-645b5b252a88",
        "cursor": {
          "ref": "9b3f293f-1cac-4fa0-9f7f-3d5667f23519",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4963c1e9-6a0d-417b-9e26-700876e0d0c5"
        },
        "item": {
          "id": "b0f2f25b-1459-4457-9179-645b5b252a88",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "51be9d39-ba50-47ce-b57b-17aefbe8d1f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08ab1f2-df96-4daf-ad5d-e3d57f7bfe91",
        "cursor": {
          "ref": "c6169b05-d6d2-4ebc-92d4-d0a7c4fc002f",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2f62f399-54b7-4422-ab68-7dad6a117603"
        },
        "item": {
          "id": "a08ab1f2-df96-4daf-ad5d-e3d57f7bfe91",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e4cbe87e-7c60-4be1-8f29-66cdb62621f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62b0178-8723-4464-b076-9afcf62fc2d4",
        "cursor": {
          "ref": "dd809f98-d403-42d4-aca7-4a2257874354",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "198d10cd-4b42-434f-8a92-079cac973b01"
        },
        "item": {
          "id": "b62b0178-8723-4464-b076-9afcf62fc2d4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "69db7afc-a86b-480f-b51d-c997a52bb380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6501a45-f40e-45cd-bd91-2f00636d1e9c",
        "cursor": {
          "ref": "29926ec5-cc76-462e-9a2e-40e3c52175a5",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c7a850ae-700d-421c-9236-dcdee946ff67"
        },
        "item": {
          "id": "f6501a45-f40e-45cd-bd91-2f00636d1e9c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "704b3c25-04b4-4296-9616-ce65fb255a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dbfdb89-1fbc-4db9-b504-65840879ee0f",
        "cursor": {
          "ref": "344a488e-efe8-49cd-95e1-64fb8e62933f",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a1ac052d-ae01-4da2-a152-71fe3b2bbf58"
        },
        "item": {
          "id": "5dbfdb89-1fbc-4db9-b504-65840879ee0f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "01e6bfa8-6600-45bc-b904-f0a49da3f994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc181a2-167f-4b0e-bcbe-01c2894f78be",
        "cursor": {
          "ref": "d51c1893-78bd-4bc2-b561-984210c7ba09",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6fe82ab8-ec1b-4cb1-946b-48f1f4f6d73e"
        },
        "item": {
          "id": "ccc181a2-167f-4b0e-bcbe-01c2894f78be",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "690dec63-5f33-4c07-a1c7-1e8ac7b58afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c8c10c-813d-47e8-9d09-3257cfcbaf1b",
        "cursor": {
          "ref": "b1f1a84e-a53a-449a-b792-66fa91e16ffc",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "169c646e-9b0a-4033-b980-3c9c28c987df"
        },
        "item": {
          "id": "c2c8c10c-813d-47e8-9d09-3257cfcbaf1b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6243ceed-f9d4-4716-99af-da30e783cb64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837e90b3-154e-4049-9ab3-47e19af19e07",
        "cursor": {
          "ref": "39a15cb0-711e-4a4e-9f14-ed4bc2922b6d",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b51ed115-1fe5-4d5a-99f7-8fa5c3718ea2"
        },
        "item": {
          "id": "837e90b3-154e-4049-9ab3-47e19af19e07",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "83507ff7-6b9f-40ab-8ffb-eb0b8df09814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b9942a7-a0ea-4f34-abad-a97fe9020197",
        "cursor": {
          "ref": "1d24aeab-d2ac-4176-a9f9-90c91b859014",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8f1726ff-d146-420d-a7d1-a431762aa8f2"
        },
        "item": {
          "id": "5b9942a7-a0ea-4f34-abad-a97fe9020197",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "badaf952-475d-4fbf-b14a-80165633ecd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50bca1f0-f5f9-4771-b4af-a995a0d594ff",
        "cursor": {
          "ref": "b78ad0c2-969b-430d-bb2c-472f75e56206",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1b85d7ee-0ffe-4f17-a30e-9c58e5a77a21"
        },
        "item": {
          "id": "50bca1f0-f5f9-4771-b4af-a995a0d594ff",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c189d19e-ea95-417b-a973-d3f6e339b30e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba6c030-a447-4708-8543-00af5ecc2956",
        "cursor": {
          "ref": "a5a44a1b-7a10-4051-9df6-68af822fe5ca",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cbb0e13e-8f33-4a2e-9767-f6dacc256eef"
        },
        "item": {
          "id": "4ba6c030-a447-4708-8543-00af5ecc2956",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "640bd029-d188-4434-b6d0-150a3bea7c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce68618-c32b-4c8c-a63d-88ce7218508d",
        "cursor": {
          "ref": "3270d2c7-61e2-4d9c-a1ed-160e5e826004",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9d84fb3f-3b2e-4b40-afa8-9904c464c7ba"
        },
        "item": {
          "id": "1ce68618-c32b-4c8c-a63d-88ce7218508d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "99bfe6e8-c342-4362-b1b8-71e1ef072562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86004ba-3255-4775-9a13-8bde08704938",
        "cursor": {
          "ref": "db19e9df-1325-4f74-a12e-c1bbdee25dfd",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9d77a50b-c03c-4f2a-a233-45747896e861"
        },
        "item": {
          "id": "a86004ba-3255-4775-9a13-8bde08704938",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "65012fb7-c34f-40f9-a62f-aead3a8405a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02efa56c-2c6f-462e-bce4-696c96334c4a",
        "cursor": {
          "ref": "1a6fc24a-d9ff-4dde-aba7-98b0b36b3e3a",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2dd79a3b-6565-4579-9f78-b518d6a0cc22"
        },
        "item": {
          "id": "02efa56c-2c6f-462e-bce4-696c96334c4a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2209b243-c52b-4d0f-9a0d-3b8b304c6fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7468ffc-b474-4433-8d3c-54209d875756",
        "cursor": {
          "ref": "3f1e387c-0c23-4115-a06d-52beb0d644a4",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f677baad-1962-4fa9-924e-f39f3815b9c6"
        },
        "item": {
          "id": "a7468ffc-b474-4433-8d3c-54209d875756",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ff57a667-59a5-4be0-a345-a89032153113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8fbb8c-338f-4be2-b703-332ad3107f8c",
        "cursor": {
          "ref": "1d1448e9-46be-442f-bde9-5b142e0f0f8e",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c8eeb8fd-8d2d-4cd3-b1a5-60b3c2bf18c1"
        },
        "item": {
          "id": "0c8fbb8c-338f-4be2-b703-332ad3107f8c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "af45fd9a-dc97-4892-ab0c-5bba8d9ac7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b0d140-a93a-4bd8-8964-cc880d1f3391",
        "cursor": {
          "ref": "3e169f49-bd22-4f39-9935-06bf04892937",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ee7d3aa2-266f-485b-bd7e-6147b5e51d9a"
        },
        "item": {
          "id": "58b0d140-a93a-4bd8-8964-cc880d1f3391",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "763bbe13-bb12-4aca-a554-7c6cd4042444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c616584-ba43-406e-9e77-86dd0eee6d92",
        "cursor": {
          "ref": "10cda7d0-2c8a-49b9-8dc6-9770c053644a",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "691ab2c9-eabd-423c-b16c-44ab5fbe1333"
        },
        "item": {
          "id": "3c616584-ba43-406e-9e77-86dd0eee6d92",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d6f646eb-45df-4752-adfd-661c50ce1c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "447f7704-0c8c-4cd8-adb1-8c6131d1bb04",
        "cursor": {
          "ref": "6ac3ea22-845b-4c5d-a66f-c2bc33768478",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2a8a8bda-b486-4e19-b62d-00af588c3743"
        },
        "item": {
          "id": "447f7704-0c8c-4cd8-adb1-8c6131d1bb04",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6b46d6a3-05d8-4489-9696-4a1e70542fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e4c54bf-f487-4df8-b7fe-eb7a84c35e3b",
        "cursor": {
          "ref": "bec8ed4e-410a-4c79-bf15-4620d15132c4",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2b7e7d6c-c174-4006-8a4f-4baefd536102"
        },
        "item": {
          "id": "4e4c54bf-f487-4df8-b7fe-eb7a84c35e3b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "fc95f12c-2718-4cd1-9292-81fa77031e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b55f293-f5d0-4fbe-9088-da73c9bc5c6a",
        "cursor": {
          "ref": "cb270f70-ea40-4dff-b452-08f21cfab546",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "37d72db8-20b9-4c71-8a65-720682c800a5"
        },
        "item": {
          "id": "8b55f293-f5d0-4fbe-9088-da73c9bc5c6a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "32678377-ee68-41ca-9238-89b431e0ffcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f3a021-ed1c-40eb-a9ff-a8863df17a70",
        "cursor": {
          "ref": "e67c904f-67e9-4d0b-873c-89931a1e912e",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ac327ece-5372-4839-8bd2-7db5dbbc11d2"
        },
        "item": {
          "id": "68f3a021-ed1c-40eb-a9ff-a8863df17a70",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1578c358-fd25-471d-912f-7036bc42b18f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119be98a-195f-49da-8320-44cefce3d802",
        "cursor": {
          "ref": "8e89141d-3eaa-44d1-9183-163ff5b39141",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a5135180-4410-4065-9ba6-121bf9c0446b"
        },
        "item": {
          "id": "119be98a-195f-49da-8320-44cefce3d802",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "778de024-c5d6-4fde-86b4-a340e8fdbe3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc426d61-6844-48e8-835d-7f3014ae3b48",
        "cursor": {
          "ref": "7fd888c6-8a15-4a06-b77b-2d0085a4b2ba",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ffe993c9-aa2d-420f-ba0a-51859f5efa3e"
        },
        "item": {
          "id": "dc426d61-6844-48e8-835d-7f3014ae3b48",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "294092ff-0e72-48df-8e95-3dfd083f57f5",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "b5b58449-7886-4f38-8951-fac6cfe7dcff",
        "cursor": {
          "ref": "e837b58f-9114-4a53-84f3-89ef7ea8f0ad",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "580e31d9-91f0-43f8-8ed1-c70425c0677b"
        },
        "item": {
          "id": "b5b58449-7886-4f38-8951-fac6cfe7dcff",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8cc7b63c-02c2-4521-a59d-1fcd40eb75e0",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe4a2db-b268-4886-ab48-59872af2b8d8",
        "cursor": {
          "ref": "19aef73b-364e-4657-9155-bf1b26283882",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e581587a-d8b9-470f-ade3-4d0e06396584"
        },
        "item": {
          "id": "bfe4a2db-b268-4886-ab48-59872af2b8d8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c3809bc6-b4bc-4aa6-8073-3f8af28a9c25",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "62abd348-be3d-4e48-bb28-3064e4d9bbf1",
        "cursor": {
          "ref": "b6372b52-f18b-4574-984b-e9524d9bd306",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dfdac842-155f-4e88-b675-a2fef8141d4a"
        },
        "item": {
          "id": "62abd348-be3d-4e48-bb28-3064e4d9bbf1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fa586a70-5baa-47bf-912b-a6c426d9daa8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62abd348-be3d-4e48-bb28-3064e4d9bbf1",
        "cursor": {
          "ref": "b6372b52-f18b-4574-984b-e9524d9bd306",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dfdac842-155f-4e88-b675-a2fef8141d4a"
        },
        "item": {
          "id": "62abd348-be3d-4e48-bb28-3064e4d9bbf1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fa586a70-5baa-47bf-912b-a6c426d9daa8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e678da8-6976-4d8a-9fd3-e115d5e56da7",
        "cursor": {
          "ref": "7a7b3db3-e95b-4573-88ea-c77b76ebc50e",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c9f885e8-81d4-48ee-bd3d-b452b888c44e"
        },
        "item": {
          "id": "1e678da8-6976-4d8a-9fd3-e115d5e56da7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bf444d6c-f2ae-4803-b0ea-b15fb58c742d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cadb821f-a7e9-46ec-9283-a696ea2ecbec",
        "cursor": {
          "ref": "8c03591f-4e91-4dd1-abca-d859c856570a",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "63f3b47a-2758-4ff9-a4a9-3d6a4d4f7f4d"
        },
        "item": {
          "id": "cadb821f-a7e9-46ec-9283-a696ea2ecbec",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "104d0156-6b89-401e-9646-3f9faaccd6c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}