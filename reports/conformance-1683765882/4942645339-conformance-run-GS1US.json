{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "599ee11a-6f72-4e85-b6fa-45e39176a9d1",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8f769592-d4a3-4395-877b-487ff253b3e1",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e858eece-46f1-46cc-83c1-0c53ca71b513",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0b66b81f-f720-42dc-b297-88addea66170"
                }
              }
            ]
          },
          {
            "id": "48bfd106-2b56-43cd-ad1e-f67ec8c19be2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b0546dce-156b-44be-8bcb-e42b30de19af",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2d1edb09-281f-4c6f-ab66-c4b4ee09549f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "03d569bf-0205-4ca7-93d8-1e467f35294d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1029f69a-d13a-4f61-9109-28dbbb3da8ec",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1df724ef-4272-4b97-812b-b74e205442fc",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc20d12f-7fe9-4f61-a24c-25962bc77fdc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb78c8d6-57fa-4904-bcb5-bf011d605da6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "73dbd86a-c1a4-4815-8e1a-ddef2e2daaf0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "38a37c0f-323c-4bc8-b1ce-6678033a1939"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0db49030-b09a-4ebe-8df4-746d913c33b1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0a76bea0-0d2c-4a2d-93f3-363583972df2"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ac39c7f-c959-4d13-abe2-2b7b8c0d608e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "fa2c8fd8-dc9e-4134-b401-005f14f02f20"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3a12c0a9-c014-4f99-8c31-08d951ccb607",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eff5bc29-0aba-4736-865f-82d36176c9db"
            }
          }
        ]
      },
      {
        "id": "aeb46882-1adc-4297-b9a4-d03b11f2504d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "fc62988a-a426-4b81-ae4e-6aa551021c12",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b25adbe5-1b7a-4a04-9434-2a5062a52980",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d4327f63-fccf-4fc0-973b-f6389431420d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7111b131-372a-4ae9-b49c-0f7d0ddc9e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ebe96646-e4fb-45da-bea6-bd778163513f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4fc5d5-8312-453d-84b1-0350280a30e2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb0b524-d86a-4ab0-8e6f-f9d7ba4dd240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b950485f-ab0b-42ec-93f3-4c3a28ec2cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df64109b-552b-4620-8c10-940eec00d742",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a956561-2fca-4d57-aa7c-0313308586a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf5b5404-da47-43cf-82d1-e384cb9fcf9b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b7c62c41-4702-43d1-8e9b-088ae3a34bbd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3f4f013c-7b76-47d8-85fb-009797d3ebff",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "468272a0-2fca-4900-9cf7-7ea8696e583b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7636bae9-a9f4-4837-baf0-d8337c945f83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673b2842-3fbc-4a98-9c48-ebda8752991b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47a86368-e1b1-4cea-8d1c-7e099817b924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000dd705-047f-4905-8b36-88538f66ae26",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd96cc92-dfb2-4ee2-9f75-31c8851e7541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88d7fd93-3601-4879-b7b3-52fdbd2f6f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e680858-f572-4328-82f3-f84496ea289c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "15b086c8-bac9-4d2a-854a-16b4a2916fe5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "47aae6cc-2116-4084-aaa2-f7157e95705a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "58b2ac37-b718-46fb-96bd-fd8cb7d764a7",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71fc1062-ee01-4d3b-8ae7-d66c83f7eb83",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9441207a-abf5-418f-a72f-b6d80b4df159"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8ddbea20-7405-4b2e-8e06-3b2d84ff004e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "0e8afd88-6944-48a8-81fd-2c07de88230c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c85cbcf-8542-4514-a130-38c1f07133aa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "884d80a1-8557-4574-a47d-7cbcb1d53618"
            }
          }
        ]
      },
      {
        "id": "503bd07c-f0dd-4aa6-aa27-5c54139f51f4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "79115eee-042d-4884-96c5-57c0fdf255a7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0683d7e-dca4-4e7f-897d-fdc035fd3da4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b3fb88ef-4c37-491e-95b5-755be78d2ccd",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "715b6980-7d27-48f4-a61f-6f9702a3771b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b66e847-fb9e-4efa-9f81-d76fdd3eed80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78936b21-39b5-43b0-9f30-60844feca096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68eace4c-dc3a-4bc7-9d1c-03584e281040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac87bd8f-c05b-48c3-9ed4-3e82369e52c6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0159e7f6-858c-4720-890d-8d703e0a3ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b904d69e-285f-4e60-a22a-3324e80fed6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe11d834-ae4c-407e-9808-b7c42b0a541e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "04df892e-29f7-4ab7-a992-56f77e696dd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720ff085-fb82-44ca-9e09-07218e9beb7e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32f6a02-7c82-4a36-b329-ff6930f5582e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78c1ea99-7e3a-44a6-b574-cf85935ce950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac625b10-0102-4583-b50f-1d39a092dd6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aeb6a3d8-5e48-4f45-ab5d-041344087323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c047e2ec-138f-4db9-8dfc-e369d4130b6c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bc3681-7d5c-4be1-b6d1-cebaae8c4fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55ad6273-9238-4749-ba85-4d950c969675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657fcc07-6b85-47db-99e8-95ef8664e1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec59bdab-ecc4-400b-889f-50f276e05df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24509f8-98c4-4454-b780-e4bd65c25b2f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16aab0fe-de34-492d-ad8b-a0f318756fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35f60ed6-f111-4bfe-82b8-f52e351b7f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f1b702-1300-4a4a-a376-9c03b044476a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c6f28e1-b7a9-4727-a5cf-eb091bbfb025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65aa81f2-e002-4c43-a1e8-d13c50cfaa54",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331b176c-efb1-4ea4-8e62-6da8fa380289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ecdddcc-42a1-4efd-a607-0cf432a90809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4914301a-fa48-4f8c-bfa7-84e747834c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e52df66-22b8-49a8-a06b-cc89526113a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d8ebd0-886c-4781-b7da-745a4cdde1b9",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67bd2b6d-51b3-4594-8fdd-c49a3464379e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2e0ea07-ed82-48b8-9574-ff72dbaf0806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6062695-c585-4fba-aa2e-5d1976d2e61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff35e1b3-771f-4ddd-aa8a-687ceb28a177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d918153d-4cc7-4fe0-9c84-05f65ebbf33c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9bdb80-f35d-4fb7-9516-d8ff6e5f32e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a34bc28-3436-4540-a1d2-b2f951e1524e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb246682-8392-41ee-b893-65feda2fb2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7be7e31-9ca3-4f78-bc9e-64b577d06fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72f1298-6b0b-49ab-aea8-64cf487fc86f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8164a8-a798-44e0-9d71-cc2d8c9b015f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6f7f74d-acfa-4355-a7b5-c7a9f50cfddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9845e61-9318-41fa-a455-afcd20a2864b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2264d8a0-626e-416a-9ce3-2729badd5d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7d8c6d-37f6-447b-ba55-2b7b41f64a7e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e1e92b-b0e8-4e00-beeb-d441a66e3e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de447943-55fc-4e0b-a63c-2cc169c411e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "835c9876-c74d-45e7-8959-ae9a50161e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "586407db-347b-48b5-8864-d0b912d8348f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75eadb2-592a-4b3b-b468-9238894f3b42",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb4c3b1e-753b-47d2-82b6-93893ebb1f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15e6ccad-fc6d-4aa1-9dc4-85b4adaf3b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51993061-7cb2-442e-b075-e40e094e0607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23da2022-abbc-4e19-a76a-85bb971aae51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575886b7-f97a-4917-9e0b-f5a0c21c4888",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f184e4e7-a3e7-4b55-b4f2-d6e6900453fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c36f0f64-1814-40ee-bd03-ea8e9f45dd7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc436bd3-7c20-48c7-933d-8211edd5df30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f72a2fef-5b1a-45a4-8ecc-38cc00c567e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f04ad2ed-13de-4f6c-86b0-9ef26acbd60e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e26aefb-1cc6-4d86-844a-16bdc7f472b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f34839c0-7806-420b-b369-1826507dfd99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c41b2e2-6324-472d-81a5-6f1afa650154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4f42aea-b695-43dd-94cd-59969c25a1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c881cd97-ab6f-4a73-8918-736546d3982f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe17e8df-3669-4a78-bb9d-d8e27c3e51d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ead80c60-9e83-450a-ae8e-41b9ba00400b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0af8333-98f6-4d77-aa56-1a4a31342b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4d24a05-7c05-4479-84da-71541acfa612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2049bbf0-ddd2-40a4-a68f-daac0c5cf1c5",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba873a7-5a89-4e92-aed3-1bc2c11117fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1307ddb1-189b-45a5-b071-8f48e519698b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5bd0d8-b521-4980-8ba4-332ce6f42557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cfa5b8f6-997e-4166-ad15-34347ee181a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461a2903-f70a-487b-8326-04fba26edb89",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0680e1e0-a6f3-442a-8739-3100b21cb0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60dc7dfd-7f5b-45c1-8d08-ef3267be6337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1268964b-7072-40d2-933f-42bc31fc87fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25ff5928-882c-40b9-9b5f-05ed6eb731a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d74b44b-efb7-42d2-8734-6e2b1b09285e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "437b7692-9422-4b95-b269-ec7e38809129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea92e18-6edf-43a5-8fde-0f265615facc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a7cf75-867e-436b-aeb7-163fc1001b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa6c8d1a-df13-4f2c-8960-83df88d5f656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1641a344-604c-47c6-97eb-9a0d0e40260e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c79452-4a3c-4861-9265-00994677b49b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c6554fa-bef8-4d51-96bd-310b6eb6ddc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5960c38d-95c7-4d9c-89ff-4b0a223a41d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "adaf0a01-74de-44d8-b43d-cb14f75163c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0df499-d9b1-4b54-a603-fcc08fcab702",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "580a31da-115a-40c5-969b-f1e10574e2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044672fa-394b-408a-b787-2710e75d47a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff13b4b-7098-41e7-8bb4-eb81e4701076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d1169df-7f40-448c-9b55-5033cdb1660a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d2b42b-ebe0-4946-aac7-344972c8e5b1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb28ed9e-a5f8-4f1a-8c32-47c25b59832d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9787f38-b0da-4214-9929-c36c6be10c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5304f1e-1054-4321-b13d-039ff6af73fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "738dcbeb-1549-4200-921f-03513482ed80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6217845e-caa2-4ea1-accc-453e62df1877",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d2b4b1-84fd-4a06-b36f-e5f3b38b7183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb497f5-ff5a-4684-a86b-7d83d1ebe813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87925c67-c810-46f4-a197-62e37cc5b5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "023f3354-772e-4432-b2c6-9afdad2f80e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afce18b3-d7d8-456a-ace3-a183de5de33e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146cbfc4-3b40-45d1-9189-2ee5aa3f8dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0b4fd0d-6cc1-4056-be02-ffc45656881d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bcc3461-0f44-42fd-a63f-0f4ad404ff0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4a817b-d620-455c-8709-283411008d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f736723-e0fc-4526-ad10-375ce18f2369",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0ab76e-246e-42a2-9f2c-be8388bb7acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddcb086b-9706-41a1-ab64-65fbaa0058ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78735dfd-3a07-4ced-b8b6-d2686c2a2372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fa7d2ee7-6d0d-48e8-a6ce-423db0338d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efe1c48-44b8-420e-a992-4bd4ac41484f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c802e902-e9c9-4759-8ab2-cd2dc5d2d337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ed9be26-802c-46a0-b1ed-c9ff9367dc44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b304c6-ba73-4a08-ad93-d737820675ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "08856d43-9f89-46a9-8519-60968c72f6aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ddb8fdf-b2b4-4de7-8a52-16dbdae71421",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87db089-7bfa-4165-b7e4-88a18c05fc3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34882e30-0dd6-40f1-9752-a2ca08aaf7a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1686722e-2939-43a5-8248-d56bf96347a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea21e81c-7e4d-46c7-b212-fa1e99219e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d849fd72-6f9f-4d27-a96a-fd3e53f3d314",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05a712c-fdb6-4099-a513-59fe049f8320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "023235b6-ed97-4a7e-8b7c-5bbd35fc49a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272d0b0a-5efc-4f46-b390-acedb3b43e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba0765d2-9c24-481b-a32a-d7ae5fe84830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cceb7429-4e91-411f-a203-218494e5c377",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c433ddd-fae1-4ef3-8eb4-666cd57add41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713ec98c-ccaf-4887-b253-491526d3404b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f15ef6-6d77-45f3-9420-06c586a0c8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ccac612-d433-482e-846f-417741c885dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc526b6a-6a4d-47a7-89f9-3bf8fbe42395",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fada6f36-df76-440d-ab73-1e5d6fcb11d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc72a704-38fa-4513-be24-d0b6d4d7aad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ffa1a11-4e1e-4368-ab54-d52a38538dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5da1b206-6086-4f0b-9057-45c8c3e9a93e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978935e3-5fa4-48fa-aa19-b9c75f797147",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6651592-80b2-4392-abbd-2f0112779710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f51c9ee4-ce14-4fc3-a125-2f04b73ebc62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64fe0c7-9054-4206-8ef9-b063d208cae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8101bd8c-9185-4ba8-a00b-6ebe5d7fb502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101a2674-0fea-4400-99a9-00357e0adf9e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ff7b24-7082-4875-ad67-3907e7424ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e80a541a-23b7-45ac-b012-0a2ea5a57c10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154b0642-e7e2-4bb8-81fd-45c7c76f8dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "66ee9927-d24b-4804-ae2c-3ce3c9842c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d6972ec-b72f-4a6f-b04d-3eb1517fec74",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c59394d-1474-4e93-8ae9-67c949216920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d4b5b11-93f5-440f-814f-6578606fcc6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90364027-8db7-4423-84e3-c5c7be1591dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fb2fd4a-e61c-4869-906f-759d15df4db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4259fa-b35c-40b6-b0b7-580a9ec6248f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0e0203-5d43-4501-8213-82493383dacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11eb55fe-bb1a-4932-8acd-b455014df52b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9dfb640-ba9c-4711-b405-b8de105863b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e90b638-3a0e-462f-a6a8-9ec478ec6205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b54bba5d-0bfa-4638-b00c-8f588981e7ed",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d2e536-b796-43da-8ad3-fd8b4310fdf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96f5ce77-108d-46ae-a449-e182c6c9744f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f13b34d-fda7-43be-bebe-2690cc947426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "044aded0-6d4b-4adc-9351-fad4d2dabdcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32629a2-8e1c-438b-8bdd-2b3a61c9fde3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49fedd5d-1077-414e-9a24-2f1b1f411e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a7c085-91ce-4d4e-ade8-6b7668f24c05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20507a6-ae4f-4e98-9cde-f9c6cb49e619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18839945-1a58-44ab-80cc-a17617684084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe40602-8667-4fcf-bd58-5aa948b151f0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee83f097-d3fa-4099-b6db-c60392ed0e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8525f97a-5489-4406-92aa-8ec95f04e24d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4699177-2aba-4855-8f76-0f798d03b121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8b50347f-0a59-46ec-98b0-a58c3ac43f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f974e7-f4d5-4596-afc4-79fa30a54e18",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "241f6a8c-3d50-4cc0-8812-2930990a92bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e95a0604-8836-43db-ad4a-44a2c84af140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be07553-1294-42c2-8d27-ef133b74f409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "772e0484-453e-4d77-9574-1dd86cb29660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d647b75-3ab7-4337-b565-92b4dffc7717",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e92b05-f837-4117-a59c-674ec506ab44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2068df4b-8be6-4d5e-ad7e-3c4d8b2de27a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1157178d-f653-45e5-afff-4757e91297a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8fb4e16-41f4-4185-ba7f-a21bd9967028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c75376-5474-4b43-a1ba-0d9d581a046a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3fad6bb-180d-4d82-a73a-7c9332cd1568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a54409-2372-4c4e-83c4-ad3e7d43de4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "353a1997-8fd8-4790-8244-3dc51984c17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "40254743-83d1-47f2-aee2-ed209e704363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af934168-c54d-4ba4-90a5-752bd5ae6c59",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03632042-00ed-4792-b265-8757d428c660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d88ef37b-3159-4369-95ae-4a0d4e986c56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1fef92c-f934-4677-8a38-76be2f527243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "648f9496-ad08-4852-afa0-faed5c5f9152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13311a66-f082-47c7-84d7-72c7e9e2d85b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a774c6f3-0343-477b-a763-d65b0e8b47f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb9c393b-a41b-41c1-baa6-750953337423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c81366-0c48-4d6c-8835-e02e95f58ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "49cd70bf-04f8-43d0-8d99-65387f1ed3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b0a472-2ef4-4215-8258-cabc33957ee6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb53b84-adad-409f-81b4-e838432ba0d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b19699-41d9-4e48-a313-7c4f2b5f7ef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d011674-b0a1-4410-b01f-498f77812e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ed5c698-eb53-439e-ae9a-187f8bb524e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94606da-39a9-4cb0-9242-9dd831d36fe1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "652ec933-d9a3-4ce1-8bf6-6b62deb2e937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05253da3-8a00-4173-a0f1-842b9b79e8a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2feb39b-4638-4409-bf59-baa6890c7d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "67732d13-4d2c-46e9-a4f5-5304095cd951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe52e501-06e0-47c8-97e6-67afc96ee21e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4ce1a8-1112-42ce-b5e6-5c3f9339ad27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e4a8ec-a4fd-4e47-85a2-3626f186d0a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c115e2c6-fd9c-48f1-ab11-0c80587c85b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b227cebf-e14a-4e8f-8c98-c83f21ee1f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a5c260d-69fa-4f5e-a1d3-bc42a5bfc6da",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2457acc3-8c88-4c25-aa30-fae89528363f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c22d0f-2ff6-4323-8bca-c4aaba00324a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec78cf6-b03d-4980-b337-e29fa4b04b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "88d6c2ea-07c7-4f18-9b6b-7e2c9cdd9bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22890d8-40dd-4a10-ad8f-3a6425a84fa9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc0fe155-f0b8-48db-925a-47868aa99d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e97f35-39dc-48ff-a5f5-a629104b7ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3cf3f76-20b4-4b08-a663-58351dfc5d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ced28a73-84cd-4cea-949c-aee4058da462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f88f39-3676-4689-8b3f-4f67d063b6c4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d633903-9e14-462c-8e87-947e2e7249ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33036c22-7550-4a40-b506-77ea7b4bd8a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b3cd4b-996e-4c0e-83b1-9e54600458b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9afe67a1-d2dd-4e03-be35-3a5880309657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0666fc96-6646-4e70-b8c3-ca16336ca5fd",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b53c63-97b3-4758-9792-a469ec9740f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b19c977-569d-4935-8daf-bdf87b6e5911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0b29e4-644c-45ee-8e8f-ae520cad3caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b2cc934-d5f6-4524-b3af-a4cd515db5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c77d3b0-b08b-4505-9c1b-d2b354f94c63",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edcaa9b4-4f47-435f-b0c2-96ad9e15f187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d901b7-dc37-47ff-a1c2-c0c503c12694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "513331b6-38d6-4e67-a8f3-4593a6a7fc28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2ec8224-ae11-47bc-8a47-04bda9a76a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083254f1-2597-4179-b4bf-0ef6baf6bcb2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c7d79f-f6d3-46e5-9395-c36338c779d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c59dddde-104a-4f97-902e-fc01add8f1ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f892be4-a8c3-4409-a9c3-dc26d9bbe4bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7aeb28c9-5fc7-4906-bc2a-72c990c029e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a298c3d9-fd5b-48e5-bd9a-74a6deab0d0c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "526794e2-98ce-44fc-a029-2d64bb75a2e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06437559-ff07-46d6-b039-6eaab32d34fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94669c28-dd3e-47d3-875c-4f245a2078a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "faa7728c-06f7-4681-ac9a-d827de1959aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402c03d5-8048-4f96-9479-c20c85def5f1",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba89adf-8bcf-445c-8dd8-3ab134127d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "819a5c02-240b-4f2b-baa8-b334270ba891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec1d8a34-73b4-431a-a499-674cedcdcaf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f6a9f4a-1b17-4eef-907e-9757bfd01cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c740bb8-b3eb-4158-b4c2-3ddeb312ab40",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192330b4-a64b-467f-830b-540457f878ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a496e963-9030-4ed9-a30c-8a39ada641bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e250c72-d041-4b1e-9ad1-85d4d3561c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1197364d-c6b3-47de-ba8b-97349fb3f3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b0dba6-7875-4ca6-bfa3-c4bcf86db7a8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4833704b-5a17-4f74-974f-9857c97d3f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd511013-d149-4488-b037-df3f8172cb1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db286b4-f0ce-41b6-8605-f388f685380f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc48c30-3365-4247-8422-5eb6cba3ce68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10dc086d-d29c-4f54-8b3e-fdef36baf750",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3e6b54-c113-4d1b-8fff-affe63240d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7058e1a3-17c5-4bfb-ac51-91f68070e7f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b013cd-e9b7-48a7-90cf-5edbee241606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af2ee23b-8732-465c-b0ad-d6c538c60c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4994df-19dd-4aba-947a-5c469f6a4596",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da8365bb-eb0a-48f1-8c0d-0cc2b9e10224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abb29382-5332-4930-8b23-1ba01e8c0c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352d3a09-76d4-4dfa-8b7e-b6d7d91760ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf679c77-4824-4a35-a91e-30f913931671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff2c37a6-ac46-4754-93ee-19418696aa33",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd6259f-ff64-4a63-b039-e45e7d1709c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a944c2-0d20-4535-9b62-d17577cdbd07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac336e4d-4017-41b7-b8ba-d50adc73ccb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "202c0fc1-2d5f-4e97-81c7-b802e28db674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a73045-5c17-4473-8580-c1d86c208489",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35371f5d-a72d-497e-95f4-62972574be7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29924071-63b0-4573-a4a3-2bb6ae286169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff647aad-da5f-415d-91cf-66ff7788c4fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d300236-e63a-4d67-8b79-d7ec06da2858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb5bf7e-9164-4bd0-800c-92a4e75adcf9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8563f59b-ad85-4acf-bdc6-13359be6efd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac18c36-5abb-4ff6-a342-9510dccf50c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70102058-1109-4ef9-8238-c11682c3a701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "03b0d0ce-81df-44ee-9380-5a21be8b752c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3470c770-bca8-4ab4-9edb-1e1f9b24ba46",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d0c451-07a2-44ad-b52c-7ab3d7e684a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e86e1591-a8cb-4ac5-a0ce-173e1b41532f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183f7671-3854-4c2b-b6a1-a68673890f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "deb45b68-2b1f-4797-a7ef-a5aafe6eeb52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75afe5d0-055f-49ab-8b25-7d119d898827",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a3fd3c-74a6-48e6-bd3d-332acb191196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c1cb85b-4e98-4dc7-abe1-4bb57bf50e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77271f62-c538-4070-9aad-bcd715daae4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a9236b3-5758-40b8-8040-bdf669062237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33577a80-b19b-4b53-85bf-7173f8c4a767",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "700af224-532e-4c65-9037-a71e32d96b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf3e7ddf-1ae5-4127-8118-4eb81c5107b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada0222d-1f98-4950-a8b0-1ca22b916f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f24ff2c1-d940-4c4c-93d1-5ccdfab1dc51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747b60c7-1ed7-46d1-ad53-7e5995f5d432",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937f3a96-751a-40b5-9774-a4a8e6505f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0f3a4b-dfdc-405a-bd1d-3576c0fbc3d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f1fd0f-5885-430c-b3be-77a153885afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "057fa640-7508-4132-8fe2-cf72244370cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5eab70e-1137-490f-8c01-c71868039c88",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12dfb5fc-56e9-4d2a-a492-d75a686cdeeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d92099-7e4c-4ff4-aeae-da2740743085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360bab9c-604d-44aa-86c9-ee6df649bcb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b785d11-da5f-4772-8a0f-7bbf2e98b07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc24d213-f815-43e3-a6ae-8b9f65e7c0a1",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87eee6c-8194-4ee7-9674-061ba1689a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24eb0e21-9398-4e95-aa56-be335c0a50b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c575f2-f0fe-4673-993d-09d8e82910cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "491f6d31-6dfd-44f5-b9ad-b61f2ff4d0e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e794eb96-08bf-4c82-8fb9-ec13948eaa16",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd310781-01dd-45bd-8f9d-9f9d59874e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c130a1b2-fe9f-433a-b601-4d529e884fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e3dad17-99de-4bba-a9f7-528eb5cc5e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c40c76a-f857-4055-b272-b6338e464f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de8a81d-1e50-4237-8c79-667b1a13a771",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65bf6e3-458a-4c5c-b2dd-02fa5fe756f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c822fa9-8227-4255-9d46-6b214d320ed2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e001b4-0169-4bae-abcd-2cdf66463e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "870ea6b1-0220-43e8-99cd-09d3319eb469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ec044b-51ea-4839-b45b-257c5e79b939",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43def80c-0016-40bb-b394-c6c148789783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3f24a7-dccb-4eb9-a9ff-ed7efcbaa196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3580185d-165c-4e01-ae78-a06926ce065a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "810039e2-08cb-4b2f-baf9-e0d856e69d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04be246a-d42e-4bbb-a101-42f01c028fd9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ba345f-e0a1-44fb-847a-b2eb49ad4892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76326c31-471f-41fa-8deb-c89a96f94471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d4e5ca-28a8-4a40-9c2f-c7feebd30ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "021421ef-433d-48e8-8802-e1a426b05673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b67b63b-0db9-4e4c-9762-1243969028e6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da68d2be-0f29-41d6-8bdb-162764484255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0899a0aa-dd27-49d1-9462-f6303f6b673e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc6eb89-901b-4abd-ae34-92b9b2668b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a8f9dbe-1767-434f-83a3-2327896cd6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747595f0-6e68-4496-bfcf-28cd252bc1fd",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bcba0a0-4e7d-417d-a43e-b153ba2021fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f87d1a51-3393-4fdc-9ecb-e6e380372e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79c1cb5-f438-4289-a982-9937dbeb6c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa1c0573-a943-410c-bd97-7cac66f341e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30039ee8-34d1-4e33-89e5-f7a87bd09a5e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270ffddb-790f-4236-b7dd-31ddd61ea697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f10bd0c-a2a2-4d1f-b3dd-2b77b3388fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b987a723-5519-45a9-a35b-e884b392e419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b14eb056-6736-40cb-bf9f-6e3b158b5ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539c2314-3f46-4d4a-8da5-f64f9df1e4d2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "558d7f51-8a12-4a11-a291-7387a8297273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a69606-c42f-486d-ab23-0970f13857ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110e5844-0a88-4e95-b789-cd4a75555295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de311c4a-a1d9-4d32-8113-1e1bbffd05e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232cbf6f-3397-4c07-ba1e-5c1772e53468",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd00966-0d75-4d68-a129-cb806acc9e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b966771c-3be5-4554-960c-288ac34dd878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c853da5-f494-4be9-b220-7be653e656a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ed5052b-79c2-495b-9167-af36ab15f524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d993fbcc-8965-4ead-afad-eacc61e547b5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b82c7e5-62d0-45fb-80b6-49329c628eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc1e4ce-7095-492c-91ae-3efef088611a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95a2adb-4527-465d-a19c-f934614ee247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "39372514-b8bd-466d-b79f-cc86f62e6304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f8b087-ab93-4623-9fb2-e6a46147ed7f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc6118f-55cd-4389-ae48-712357929892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b98f10-5fe2-4fa6-95da-8d05f7a7da90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3190fa-024d-45d2-b338-f249494928c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb9b3f96-4c21-44d6-8e56-8e519fc14900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeadeaed-a029-4b53-a873-0e4aa216b79a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca334504-78fb-4bff-b930-304c283ecd90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78664688-7c97-4d71-b1f6-213caeb056bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587f82b4-08d1-4c62-bb2a-8a65de346127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bd6c847-9b22-4d44-a2d3-2e4297bd5b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5413112-7738-4b94-8f45-55589b846eb2",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5d4163-9772-4db4-bce9-e7da410c5d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06529bf7-a7fa-4d6e-aae8-ccc1a9047465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0a0363-5276-40e2-8b4f-2f091b258baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7261482f-b363-4e27-945f-5fe72ec481aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a94bb72-a8b2-44cf-88f9-545630e193df",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03af7158-316c-42c9-9e8f-86591b611d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afacf7d5-710c-4c18-a57a-68fdf56d367d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc13b681-f384-4c6a-a265-b201a91c7e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5aef345-50c3-48ac-a3da-2e0b1eb64655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70034422-707b-40c1-a35a-0a65c147e062",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3723b851-5f33-4808-899b-e0081ff440c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b818c26c-96ed-4a82-9881-c24373b386f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab411f21-b02e-4b6e-866d-b2d03a63c23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "79226ca4-b285-4d57-8262-157e2cc93a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf3e524-d3a4-47ab-b9f4-026a5fa117e1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95168853-2f86-4ddb-8f81-2ca4e8ea560f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "230362a3-1314-487b-9ec8-4a4efe76a2f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4ff36d-b6c6-4fd4-b1a8-f671d68740ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "84c65bb4-6f62-40e6-8bae-f6f22e9e5594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5fbe25-7c4f-4c3f-b637-d19b98f72d92",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "910b1a1a-ff7f-4c33-81fc-e18597e529e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7375281-4afd-4660-90e1-866f44c637a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e215a34-69e5-4b8a-8fdf-311bcff7de7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8dd100a-1240-4d29-9516-8c394d1ca56b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe53c623-fee0-44da-825f-8fa259c431f1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59e19446-72d1-40d2-b6eb-e05ccce0fe65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc8a0cb-0edd-4d59-b9d1-f104397881f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "333ce4fa-0585-42a8-a766-d1dd2840e7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa95a2af-c1ec-4e9e-85de-36300bffd732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fbc299-0d90-4658-be37-71daa7e08cf8",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53f3f66-207a-43e6-bdfc-20d13d4ac5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e5ce1db-1c27-4df1-97ad-ec6b18850fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db36dc7-d690-4235-9951-aa2d8005d5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f606d4-af04-4b1f-bcb3-51d21d97553c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f82f44-4f14-4867-a8e7-a00a5efbe064",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a99751-df95-49d7-bddc-45816aa50ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c51ba7e6-54fb-4fe7-876d-75d53b4e0e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f32d6981-f0e0-4109-ac95-28647d4013e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d42bc2c5-167b-4414-9b3c-b7d8ebfc1028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7520e0ac-a538-4cf0-bb7a-23d47cf380c0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed987b30-e1a3-49b7-b5ba-8275670da1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b45ffcc1-59c4-4c45-8551-7ab2e6e0fb9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6f02e6-6f13-4e79-b1b5-392ac8f0e260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9079d1da-76a4-4055-bb5c-5a121d603deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df94d2b6-23b9-49d6-b670-0fbcb115ce40",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0210ef81-09de-4f09-8824-7d0748a5491a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b87865a5-a375-42bb-bbc4-e1fb60115c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f473bd4-090a-40ab-8d40-95a45faad69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "707674bd-3795-487b-9717-17b76f0d0218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbd5ac6-c19c-48b8-91d8-37ac257e2954",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff8e26b-98b8-4dbe-bd71-c89b26f6acfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49468616-5490-415e-8fc4-823152d86f9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d23387-35f1-41ab-8dab-9271d9ce6607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "51b60d5d-6be6-4a6b-b4bb-a20b3f998e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a5a8be-c0b9-4b51-ae07-a70e2abad760",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d123add2-1b00-44e3-a37a-7284d308b3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d265acbb-df48-4a77-801c-33ea0cd876a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b9a604-77d1-49c2-a2ee-dd6beaa0dbe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "67ebac66-bfa2-473c-8095-617cdbcc7e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b563a0-8644-4092-82f7-2321fbacde28",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f1b2d8-383f-4060-93bd-daa3203eff88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "115f234b-63c2-43c3-8c97-30251ba9a173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b4bc20-199c-4393-9b21-90a1a0538048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc977e07-d2ab-4333-99d9-5f1931245996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11407d6e-071c-46d5-a28f-826a32895790",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dbcd890-8f07-43c5-977c-5ee987384b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34946ef9-ce6e-4976-88fa-3a04423b67e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5700b4a0-8339-4030-9bd6-cc507a837e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "14324fc7-d0a8-4ed5-b397-93696d5aed9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b356dc-d90d-45c0-874c-31feed4e33f1",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24ea9dd-a82a-4ece-8ed4-0f1d110b8a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87edd390-8cc2-40c6-b853-0f4644415d39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ad678a-c872-4d94-9b65-58c79e77c62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "06e3fc32-47a0-49a2-b4ab-d5465e5b28ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b27e909-983c-4958-941a-3a4ee87c9e6a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58c0d12-18b9-4f21-a494-2ceb94838e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "86c8a20a-96d9-449f-940a-4034d273adde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857c02ff-9502-4722-b571-1149d24220ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e74b9384-66af-402f-b3a6-bfb14420eff4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "72595616-42c8-40c2-bb68-8be142b8a078",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dad88abd-0346-481f-b386-228d76fbca7d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71407494-a1dd-4f7a-97fe-8e0e9b51e54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40b6e727-9177-4ddb-b5fe-a10c668f7a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f97af85-14ee-4d57-b838-96c61c46d5ad",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "288f89db-b84a-4c68-bdc1-365eabba2547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db814f57-f43e-4f2b-839c-07bc48929d9b",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "189f7bc4-6d25-45fc-9220-19022922feef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "566a6c0e-ea29-4f32-8ef0-51f4efffbcdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75a954af-4824-435d-a443-d4d84f814ac4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74490293-45a7-4353-9c91-b49e319278be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93db1dd1-ee37-44b7-891f-0a513babb871",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d37b5416-bc07-4531-8df8-ebab469396ad"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e693a2be-d0f7-461a-a8c5-27c9c47bd9a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35a41c4c-c28c-4b14-b931-ca609fd93b2f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "aa5ff77a-efc1-40fe-bf1a-7c1c0d1a56f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "98e5476b-ad39-4273-b340-c2c902144a2b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "630b52c8-44ab-4cc1-bdb8-3d3982af665a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c2b8c696-d65a-42d9-8fcd-b8073e108a10"
                }
              }
            ]
          },
          {
            "id": "18413765-f85f-4d2b-84c2-11e998766578",
            "name": "Positive Testing",
            "item": [
              {
                "id": "acd938b6-ecf4-4fa9-a319-7b40f903e218",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5104ecd0-e23f-402a-8913-662d11ece00d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce743312-aa1b-4eb6-ab84-6c6f9739dc3c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f0a92d9-5b54-463a-acaf-506fa593ee72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0b39e3dd-42ff-45f1-bc77-f27059d0d675"
                    }
                  }
                ]
              },
              {
                "id": "fd1ef934-c822-4c0b-8d69-fda52d7a0f51",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7c4ea1b-9c85-4769-9c6d-b559ce738c9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "588f272a-3a5d-4568-8d92-0d6cc8e5304c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c1e54f9-9a99-4364-9122-d437e12f2f93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3c9975d6-1dc5-4b35-8bb1-60768e748240"
                    }
                  }
                ]
              },
              {
                "id": "2f407dd5-ebc8-42b2-b23c-498ec357346a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f98539f7-4714-4e08-b133-ee50951fa692",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fdeab0fa-6c3c-43be-9f9c-e09c9a13adc3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7915909e-8c44-4d65-8240-60bed7f6a168",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3427f6af-bc57-4842-a9c0-a4f84b024769"
                    }
                  }
                ]
              },
              {
                "id": "90d7f19b-8435-4080-aa82-a60df50ab7ad",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "007f3508-e9bc-457c-837d-7026c2952622",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d1be0b08-8161-4887-9fe9-23f2d8b88987"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "532189c1-97c3-4b7b-ae45-b8df619e7596",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "232237b1-0b7f-4827-8704-bd74a804a4f7"
                    }
                  }
                ]
              },
              {
                "id": "3ab11f31-2aea-4b6f-9467-a452aa1040c3",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ec776ac-7c0f-45be-9291-33e498d36cd4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e69c6f49-9eae-4a1f-94ca-8d24626698a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4abb558f-e224-40e8-b33d-c21ea58b17da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7e356258-6db8-4d7b-acb2-5b9545d01077"
                    }
                  }
                ]
              },
              {
                "id": "35a311d4-e96b-48e8-9926-5bc3ab308ba3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "286b1e23-fa2b-4893-896f-99d962174e36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b7a7858a-1e00-4fb9-97f0-63120fd611b1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af4a10e5-c882-4fea-87ec-931aa996ea26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d600eb66-7720-441d-9edb-e7df3bea1aaf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4848f8b5-196f-4ff9-8f8f-812ad5ca6087",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "37b9ad29-1396-4780-a369-8fa98e8400e6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6db9193b-bf03-4488-aec7-6540bd6ebbd6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0f783be5-02dc-43a7-a912-a342fcfaf568"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af142b4e-8520-4e4d-8863-665f10afb8ef",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f036dea7-4cd4-41cd-831d-826ffd33efc9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1a5aa10-7d01-433b-8daa-65aa2ffa4d4c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b6cee75a-13a3-4227-8d86-770630f227ba"
            }
          }
        ]
      },
      {
        "id": "6a825c06-a9c2-46bd-92a7-fe1704334cfd",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1374983c-35d7-48f5-bdf8-bef860a819b5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5fcae5f2-e832-4ede-af45-395450fe0d6b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "28494ce4-0735-47c7-ab4a-4870fb5298e3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42eca24f-db52-4ffb-a1d1-0a2b6b6fdede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac136112-bdfe-4ea7-8984-99f947cf46a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1658e36-1007-4473-959e-7138fbc4039f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e82a8238-b261-4acf-bd7c-f8ac5a856028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ac97a8-452a-403b-b5ff-e4a0423f2f34",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623d7eac-7258-4994-89e7-f39b5b137f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a8f0bb6-a6e1-487a-bc82-242ce9ef2124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26372b34-8750-4847-8839-d9f2799eaf9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfd8f60b-6080-427a-869a-659a4e8f5e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cefe0a04-f93f-431c-a056-169036636369",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eba5bb9-1465-4d50-805f-acf1c6e1ae8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49153038-c9f5-46c4-ac39-73dd2520c604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243861f9-80c3-4f53-baa3-3af9a21e5902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ca6a3c-4b86-47e3-a7d6-1ad6f645a25e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3d2718-81ea-43ed-b15d-97c77718664b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14a40eb-656f-4d2b-9281-4b2b5029890a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46332ee3-7c46-46e4-8bc2-db578b79d22c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e300420-9ab3-48c8-91bd-ffc9dea76821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d571af79-37bb-45f0-8be9-8dd6218b1d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c94de35-f992-41ee-8592-63b517e24758",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78015710-f4a7-472c-882e-206a0c46de49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5327e515-079e-4892-8640-d672a84432e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54baf49-9a47-466c-ad73-9174e06394cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cf161a9-fe5a-4abf-bee2-22154b27d8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74d63c7-0e09-4c62-8dfc-39f5f858cf7d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b415579-c183-41bf-86b3-f7811164c68b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0af8d23-fa2d-4cc0-b90e-d2e5fa342cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687984b4-bc48-4f6e-8a59-6c099ee4210e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "940d9e17-cf9e-445b-b055-eec8384cc9cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f4a810-a38c-4ca7-a73b-0613e346c130",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af57fa05-4cc3-4a01-aa5b-33f8c5d08056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dee214d-ab0b-4c61-b3a2-99adc96f69d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68cb4562-5093-4eb7-a799-29fe9c890aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b127eec-b2c1-47d4-8be2-68861c4e6178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc1d8cb-6a7a-4d3d-97ff-de5b16f705aa",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e8d60b-6eef-4018-9481-a0112fa2fd34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cc31504-536b-4e68-a1be-d11182e4ce7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b66bbf0e-0c79-407f-9fbb-46159869df5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b76d84-d89c-4d48-b84d-159ca67091c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3194c693-1928-4ca9-b7be-a059f69192c8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb12c05-9719-496b-981e-982e910d4c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a57a82-5153-4eba-b788-be0c364f954a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ae3ebb-db05-4f56-a73b-6641df7080eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4802ee0e-390f-4d23-b4ac-c0add4f52a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58557aeb-ab20-4be5-b795-4ce33efd5801",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c5de7d-3cf2-4a56-b62f-77c4743f8dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "681f0404-185e-4d0e-9268-3ef6a5de50b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d85fb70-a818-4046-8ab0-6fbd119f9c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98c9f4f0-f762-44f4-ace7-c22433885f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614e5cec-6b20-4146-8304-c9f46edea00a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da0317e-5f0f-41fb-9eea-8a3dadba6845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52efcd08-c16f-4b1a-8dc9-a83d3810a72e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2cd194-c5d8-4a5a-bbbc-ad7bd7a3a5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "448f1c31-cbec-44aa-a4f8-e38112a1b50a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0184b434-473c-4e7e-b574-8794c159bfbd",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "891da85c-85bf-461a-9129-7b0f309af0a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b68afa-7a01-49ca-8c11-2c479acfc070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3bc4974-4690-4143-a686-8ca0aea1a3ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e54bc711-184f-44c6-bca9-4e43ffda11b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9326a234-821b-446f-986d-82607028b3eb",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684d09b6-96d4-449a-b0bb-50f56641a554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fff196b8-5a97-4b05-b73c-806e8cf44844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c290e0f-866c-4342-b299-80a88fb71036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "47a7fc4d-b6e3-4d08-bfc0-4140fcdca5aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741868df-b68a-4a66-b850-97663faafec2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f58eaaa-5ab1-4240-8040-395070cbac07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85faa646-147c-4857-b4bd-daa6caa7a786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65d239b-0516-4664-a54e-b56036bebe44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "13f66353-e2c3-4a8a-87ec-ae6eb283e221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31fdae3b-ef59-40eb-9db5-68cf336e1994",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d66fee-7c8e-471b-8ef7-6e42c66df3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "decedbe8-57cd-4791-9c81-4b1cccb97593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbd5867-2dc9-4d56-8309-c91885f9ad4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "77543f31-1deb-4833-a190-3237fd3e101b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf2e356-c3dc-48b8-8843-6be9ba830fe5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b6f56d-1abf-4f1a-98d6-6e7905eafb64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d8ccf2f-1cdf-4cd5-8bf1-48edbc1d80f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97c9034-e21d-435a-b4f7-768525f99131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c63bc6e-e2be-4525-ba6e-eb7f01d17cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae5e4e3f-8f1b-48c5-8d97-450913128c5e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f1e905-9892-4ba2-bfae-7ba82c062dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "221c1213-9ae6-4b0a-8773-aa5199bb6007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf56c012-c9a3-4172-b759-08289aa76b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "77122b30-4abb-4dae-bbea-70ca09af91ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87023e3-6da7-49f0-8d1e-6b0807afcf34",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e3d4a6-804b-41cd-bb1d-671743f18fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6af01631-7428-4dfc-9bc7-382b20ab85e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca54168-1bb9-4bda-a131-cbc3ca127996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e83c2bae-acb7-49eb-a6fb-4353c2618240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0631f2e-c9d8-44cd-9d43-e4e9d9931e76",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0f42d5-9a92-46d2-9168-e58965dce224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4baeac6-fbbf-4d91-8f6e-545677757304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89937c30-a048-48a3-9eca-4bae63f9a231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f7aae42-524b-4bb1-885b-cb7b96963a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60846295-de22-4bb2-a66e-9058cdc0eef9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc76f714-d1b1-432d-a5fd-082afcd86d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b4803ad-ff8d-446d-974f-6914d397b63a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8deafaa1-4d90-4114-9a41-24244bf8732d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13186c56-76db-4990-b133-164fddaba6cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d155c151-ffbb-4f93-9508-ebaebb935427",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "180a1a67-2077-4a2d-85ef-46e0ad4e9edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82e766fd-daf3-4616-a1ca-2df68f02cac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc40833-e471-4762-bd71-1c090a46ebc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5216009a-b5e3-4487-a975-0f8811cb3b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a8fdca-70a9-4940-8598-e8ca95b768ac",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8662d540-09f6-4216-a1f9-164ee4c9e686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19630ad1-ba01-412a-ad86-896c32c6ace1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3306c1a1-32c0-4854-9239-3838a8b671d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a50b30cf-1fe2-4f73-b2a1-2b2829b1e900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f99e9b-37ac-441f-96ef-66e6645d1b76",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b19c2d5-fb58-4bec-85c2-1e09161a9efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8310348f-0240-4d29-a842-df13fb3d7919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228e615f-fc2c-4fc9-9038-f3fa580a4e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1995689b-3549-400b-a4c9-40bfbf13cc09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05e9eaa-4409-447d-8059-2b0743367e9a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e7f9dd-548e-4629-9cc0-a523f3634b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cd95620-257b-42e9-a3b7-0205556c5d53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b39d715f-df80-4960-a1c2-e1874cf05776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08bbd24d-c236-44fa-88b5-2e47ac0d1ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94e9b37-6595-452d-b3ec-0ab65c2e010a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb0779d-2419-4c34-b362-c815c751009f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea4e07a2-4f14-4648-ae59-ea5c1295652b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830c897a-d44e-4900-858f-eb8377be0330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a606cf31-1d4f-4962-9aae-213175ac0e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "accf3f3d-3edd-4d5a-80eb-2a0204561418",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3555cdda-ebd0-41c0-84e8-d572c6da1bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e238ae-4580-4f3f-afce-5def179d0e42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be24f208-4849-4c21-87cb-ebe0da143ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81b2e81a-08ec-417f-aedb-6236f07ae570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f26924-25f0-4335-bd14-82302808bbdf",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16806a2c-1d24-43ed-bb94-15c5d7ff1ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a793b2c9-4597-4b0f-a654-d6fe70a238c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336a8970-8760-4309-9c6d-854ff7b29d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8e8882b-7efe-4ce7-aee4-bb3363bcad81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841de8cd-c0b0-43c6-a501-0effcdec9e0d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe37d81-5b0d-44fc-8859-8e0e7daefb34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb23a04d-1219-43db-9f6c-3382bb866f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0aa076-21b2-4b21-9d18-50def753603b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c270924f-e285-4c84-b851-d77ecd2ced31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a751d6-6c6d-4e81-9229-05dc5c0ae064",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3cca01-5f5a-4dd5-9344-1ef7ff595a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f34541-5390-4192-a746-2179a20beae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a248ca-136a-4667-a12a-8747f52059b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a31c169-c34e-4407-8ae2-77827e625a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744f3988-99ac-4164-89b4-69958927586d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87641766-17c1-4be3-8d02-4b82ef93c761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "546826da-2fdc-4ed7-8af7-ee3740422538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4acdaa-d3c9-43cc-a64e-eab774fa4d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51efc1fb-e52d-47b3-b655-3d38ae19511c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cfeb486-52fd-4f66-9d6a-7996f311d854",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23550216-e610-449c-a58f-3a0f87fff847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ef93d2f-39c8-4a43-9060-9d03c6c2ce27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf99dcf-eb34-4e4c-a232-aa6960350af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "503d16b8-4433-4d98-a965-22f809782563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ffb5f7-8685-4146-8423-ce34275b93cf",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59517694-9452-44fe-842c-29033704980d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f58a2c9-d42e-4dd1-8acc-c47c6d8791a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37d11b6-bce3-40f0-9a80-5f8fd86bf552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8877aa4c-df3e-488e-9482-56fa7c971712"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f39acd6e-e53f-48f2-a039-b217dd0227a1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2aee7bea-a0d7-41b4-a991-e83333fc64f2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9826f2f4-34d3-4c24-980b-a8936ee923ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "41dceaf3-ebb1-4fb0-a4eb-02236a3ae982"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "978b7513-75c6-43b4-853e-393c1f83c5ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0de0b1de-0231-41cf-8a73-02330927112c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e741c40-c127-4387-bcae-38d396984e18",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78402fc4-0ee7-48f5-a5fd-aa77a7ac036f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c9a0799f-a010-4105-93a5-97b5ae8afa37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97cfc34-8505-470b-8e2e-b75066535ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1dff2fe1-2497-4181-8852-9cde4255c8f6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d99a4b20-c07f-4f98-89cf-9ea970ed4c0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c32eb23d-5cea-424c-b657-e03f3028a349"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2af63a80-5476-46b3-983d-96a8beb217e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c16e8f8-8d91-4968-aa3a-92747d69dc84"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5c8a165-0f05-457e-af06-b73cb5bb3bf3",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "05fc7508-845d-465b-981f-45a7db6b8f72"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c6ef6cb2-cecc-41fa-8e12-29db961c59b1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b7745ef2-73e3-4dbe-8a84-01d6c1e5da71"
            }
          }
        ]
      },
      {
        "id": "8fa436df-dc29-426f-81a9-2980a7c52b4d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8d9d5fca-59b6-40e0-82cc-06f88350cc15",
            "name": "Negative Testing",
            "item": [
              {
                "id": "49d339a4-5510-45b3-b90f-828ecbfa775c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "76703310-6e3a-491a-97a7-9cfb28b3f2ca",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34f5012-869d-41a3-aa8e-209288d4eb7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a9f3eb-4968-4d89-a3ee-35cc6e91c9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292018ee-a14c-4d2f-9932-b08c59b4657c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e756ee8e-184f-47d9-86a3-225249725108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "055747af-7fb1-48ff-82a3-b9727015d515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5df6c7-bfbb-449a-a020-164f8bfb0598",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c548ca19-2d93-481a-bd4c-7e7bfa2518dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8a55049-2d98-4c00-bfcf-3707f51684cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15aa325-14ac-4fd8-aef5-86ce18c2c1d2",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72554341-476b-48fc-92d1-f4a552bce0ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74f5a912-b8d2-4b77-862e-b863c9db87c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5740fd8a-f263-4982-9d4e-d379e7bba5c2",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beec3050-8614-4018-946c-7a0a0ae014a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d79d80a2-bccc-48e3-9628-d83c45354d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31fe23e-07bd-4f1e-8a56-b7ff13fcbb55",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fcb2858-6b3e-4de7-9523-3f3bfd2b87d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2c93b4b-ca86-4eee-935b-1a456e26be24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0c45ca-7caf-44d2-8419-975879cd9c4c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a32bc0-ae83-4ad9-8cfc-3ee15669f179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18a0562a-a62d-49a4-94a7-5c6226c437f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5eea61c-b869-4c2e-b016-fde3aedbe89c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5336c7b-b668-4b9c-a386-54e6272e58ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c164d7-16df-4808-9ac0-1b8bd69473c0",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369d1037-b3b4-440e-8b29-e5b986abcf94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8c68c8a-45d6-4001-a58b-839c73aa62f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31e2373-0590-4513-bbdf-29c48fca2133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05707dd3-529a-4f09-8937-a82811ced4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb326ba-eb63-4cea-a020-57707818ab19",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5e2fab-990b-438c-b327-e4a648e5e12a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc43e64d-481d-4fb5-b816-1c3b77c8dfb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5ffb94-a264-432a-b2cc-f109b45b4fbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d11855e3-b123-46f8-9a11-d759fb8425d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4c93e4-fc1b-4121-9ed4-befebc97399c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da3a85d-5519-490e-b0df-cbe8c81f6ec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b2146d3-9af8-4ca9-be22-54130ada977d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b7cede-f93e-434a-9a5b-dc73008b5e60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba320f37-af19-44b6-bdd2-7d8578a2fc75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1904a005-450d-4f76-b7b6-5b626258bf54",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e0f34c-01ad-4e9b-9aae-2a7ace24c688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc198300-1c97-4eb0-b12e-eeb43ac93fd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86dc2c30-90d4-4503-81e5-8fcf4229816b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1a5a2e5-30ba-413c-a7d5-73a2ef6f2594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ce96c6-cc6f-4302-a0c1-52ca7e4c5532",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb8810f-757a-4135-87e0-d22c2d62da4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47d25d3-e7a3-49b7-b891-b720d224406e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "707aa821-cb8c-41ec-baf4-d0e07841b579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "850535c1-f7c1-4ee1-8fa5-06847774a036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf2646e-2aaa-4ec0-96d3-a3cb06c4de30",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620f6df2-ef88-4be4-9074-91833f2c2a05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f67c9d08-9fcd-4c31-a1d3-c9935bf9cf88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "566cb6b4-7335-418e-9910-be8bb1edede7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24bd5846-b161-446e-9bb1-554d68adcbb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cea6143-6e62-4348-8334-c0fa9baae31b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4d3372-af4f-42e3-9ed8-8c7079a3c496",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbbc0cec-cd35-49d2-9061-32f74a176890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e533d8-82a6-41e1-b53d-4e7f56bf1453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ba3d8c-c838-4d79-830f-1439c1c38218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a40a39-9a7a-4ec6-9502-10e944097566",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42934d9d-faa8-4acd-be8a-86674c4c0f26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a007a78-0de0-4565-a675-085cec64bc1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad8aa4a-2c93-4e44-a32b-40d7ad931732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "320f1c71-ba85-499a-9fa6-d8ac0a240f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57e0d41-8f37-4967-bb56-9d85ea6f914f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae3d9e6-0acd-4e0e-8872-2cabcc368bfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84e6d9cf-475d-47c7-b67e-fe5e8d597c27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f18a489-5054-45ec-a134-96f57df5c345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff71d577-fe97-4510-92b2-4f72c562df25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34174d82-b26e-40ae-b30a-3f1a15bfd7ac",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cafdf7b5-3cd7-4838-a0e0-79c0e0feee45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "749f4bf9-5374-45b4-ab18-3a5fafe702b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea7b2fb-2715-4d93-8ec3-a71aee251ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a95fc72c-d3e1-436d-b545-bc930a933352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b75582-3276-4163-b1c7-277948f7e469",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb93df48-4544-4007-be04-3b11cac0e1ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19fd36ca-4c08-464b-9e2a-5c912bfa156f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d03b7c3-8fb2-4e60-9074-3940e2264d96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2714e1b6-6a66-4fd3-ae09-1edd1050a02c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca307c8-dcde-43d7-9acc-9ef9ff6d8109",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8da212-5571-4efa-8c35-ab86e26ea41a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d159f356-c7b0-4566-8291-acc42819d763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6c3f6a-6bd9-4d29-9f4c-08bb8697c2a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbd19240-b836-4a86-a208-f2d4f13cd72e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47aee430-c352-4c72-9ca6-707d5f8f130f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc041efb-0a22-47f1-8f26-96f346ea4e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e9e09d2-35cb-4d8b-bb18-827aa1f40e3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99bc792-3c83-4baa-9b64-62e1e098c809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b77d008-60b1-45ad-928c-b0cabdc1eb8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d1bdaa-f787-4e72-b0f3-87fb37ce582e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e28dc1-4e51-4f7a-93f4-a697f158a159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0524687-a0a6-419f-9a52-4bf63d70519d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b332f7f-763a-4971-885b-a03cd5aae5d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7519488-b3d2-456f-b7a6-e7681cf96973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d699b658-9b23-4a80-90e4-d104737413f5",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7646b56c-eebf-40dd-aadb-cd81e1387533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b36ef014-661c-4e4e-8019-52c4f7c0e610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80509a6-f4c7-4148-9b51-957c18be3db2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0af2769d-fa7b-43c0-8c8e-a1a4cd51c78f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b60cdd-8d1a-4f18-ba07-5881ef0c1b4a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2e5e2e-4c5a-47f8-be9e-1649ea0eff85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cce2c86-6c4d-4fd5-b2ea-1cc8b0b08aa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce5d3e0-d98f-4877-bc0d-f0474a1a73e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d818e5-d038-48ca-8e1e-33a8dec0a5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fafe376-7bde-43de-9181-45b8ef1b4f1a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9bd126-c0f1-4f28-a522-8e4e6eec3585",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e70e8753-2480-463a-aed1-48fd1b867587"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a47dfd-b9b8-4e5a-b6d7-8cff3bd87a8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4649b9f-65dc-4320-9ed7-3bf2e6fbc133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7883c300-cba4-4376-902b-e08f58600d12",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "059a4e5c-7037-4e9b-81ae-b0f48fa7a913",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8834862e-63c2-49e9-8924-788db35465da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66218a7-4602-4fea-846e-b3e9413cca7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f638d9-ad79-42eb-a501-e30a2b5d0013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab6b18d-c65f-460b-8b0b-103c9d2fb3a7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a7b318-4bf3-4eea-a4b5-66d34ff6ab80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52ef14f6-68e1-4050-8d61-13a314d3ca2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30bf22e-fd02-4919-8cb4-f8ca72872f45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f47970-5922-4d3f-8648-5acc614e7a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5be61b-6d84-4e32-82e8-c57f0481e80d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062e03f6-fbd0-4941-ad1d-8da0c791af0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b948a400-d27e-4287-95d3-ef8ba3b17202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b321d2f8-d65b-41eb-ba63-c3ee766a9d42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbb15602-44d8-4aaa-a40c-f0664b349a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c4dbdc-b635-4a3f-8b50-12be5109d8a1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413c41cf-a36c-4b70-92c4-6e18906ed076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ffb768a-f69c-4977-9bd8-ff15e1eb09d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a6ef373-1e44-4983-b1c2-ea739fb5d292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c116567-c3b3-4839-9ce1-29c3057a21c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76d8b64-28da-4db0-9e7f-22de9ad52cdf",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cebac86-1c5b-4af3-bbd5-815da52ea759",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8197f8d-0ca9-47a0-810f-23d4902b2614"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed83f97-e968-4c83-9352-bb7664b80295",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40022cbf-98b6-449c-ba1f-9fb0b892669a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f1dc36-117d-4308-9aa5-ff028ddf4205",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66cac5b3-5b62-4626-8d05-ddd81854a54f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5278c99e-e386-4e63-a14b-a5f93face214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12581ce6-7694-43a5-aa6b-b6bfb052bdd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc14ffbf-d93b-4b6e-af96-5b165445e621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad82fe67-0ee4-415f-88c3-dcd7cf0f5c6e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07242784-956b-4721-91f4-5630cc24953e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a8bded9-be9c-44f8-9adb-e16541ce3426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93c73cf-aeb3-49d5-be96-df6b01b9e05e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04ea12ef-b81b-4227-adf6-8bb29d594d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba797ccc-1514-461f-b227-b9ed912b7c46",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336003ef-ee21-4835-975e-c9ea0f721c28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3946fd61-a21d-4bb8-b756-bffd23af7d43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d9d2b4-6431-4dc0-a030-a509636bbf85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4033d652-df99-4d77-b3d1-16a754b19690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2af06a-9e73-4d2b-bdae-c86ea3032994",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac5f138-af37-4061-ad38-806c36339490",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aeb6564e-f6eb-4cf4-b063-b79c0058d528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4011099a-64b3-4e7b-a495-bc3b986b0d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf34fb8-9e57-487f-ad8e-d3e05dc305da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046306bc-7432-48cd-9bc9-18b899abc752",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fa7475-3ae1-46af-b9b7-328b7df3db8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d6a316d-0bea-4590-aeef-ea48080a8b55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd90bc79-9688-4c47-90cb-e0c4fbd24d63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ecb204-51d8-4c66-97ee-52c74f7f9e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d597899-3f1d-4501-8d2b-90b1a47b8a2c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c9b7d8-935e-49cd-a7d1-122f1e36b027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56f41aa8-ce53-479d-b331-bcab92f061b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "355acb25-1782-4f72-9a7b-857c2b237d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf2cedc-14c9-45f6-a7a6-dd30d0321e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fc26f9-ebb6-49b0-aaa1-bd2490f2e7f3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de5d772-2ca0-440b-906e-534ddfaa08ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca587600-a486-42c6-b42a-551fc8f8ec42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee8ba12-eac2-4a20-94ce-1276f65bc6fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef54a7a-84a2-4c32-bd15-015832e1c9d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b5ed4f-c119-414e-aaa3-ef15ba4aaae7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8272f7c7-412f-476c-8949-1bdd60104e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00f3bd0e-ec5e-466c-9bb8-b70c7916d185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82ea5f8-98ab-4ed5-926b-68d363c9922e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "105428ce-380f-4554-ade3-59bbc254c522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289e982a-20d1-4992-b73f-dacf8497b75f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da14f814-b4a8-4270-a7eb-5e079a9374e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "818e37e8-3b08-4b98-854a-11488c099896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3fcd07-982e-496f-958d-09c5e2a326d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a06f51ef-c02c-4ed8-98f2-95c6ee54e08d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55923e7c-8cfa-4065-9db6-cf1fe78fe8d3",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803f82c0-75ae-4b0e-bf77-d273a2fcfca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c99870f8-9336-4608-93da-05a8a6957307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ead714-ea8e-41b1-9a36-6a633343a7e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1690521c-4b85-4df7-99fe-2b560503c7a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81cc1490-f8ea-4388-b30e-ef225077344d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e885afe1-5037-4e97-8084-be149efe0a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7128999f-6bb7-415f-9577-d75f143e695b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad83e67-d55b-44ab-921e-8abb075821c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dccb497-d440-49f5-9330-c477f96c5a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443308e3-b31a-4aba-93b7-5681bdd70d35",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b1e6574-4990-4417-be23-0332dfbb13f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40d939bb-fa3f-43fa-b95f-e9022ec40704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e38315-1694-4dc1-a551-c253dc20a2d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efdfd6fb-1de0-4f5f-8deb-94d29fdd9a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f352504-646f-4746-82b3-00a3700169a5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d3d061-bb5c-4836-98e5-a1aac3fc2709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb6c3293-5a35-40ba-be73-8a3cb73e7676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23adcf92-485d-45bd-ba1e-615ef605d5dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1405efc6-ab56-4826-98f2-8edc589ed845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5dbe22-ecaf-473c-92b7-9031cab71249",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302922a5-0ff6-4a65-be82-d7131b3031ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db1b0bcd-e173-4c9e-b505-dcfd4bac97d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ffdd25-b42a-4604-81c9-f624454b6b36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87731cb1-c867-43f2-aaec-3280c2f84018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a764a33e-a3c6-4186-ac70-cc32d6d63390",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9571e3-072d-49e2-83a9-44be17ff3fb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca7b0ad-de0a-409b-9c6f-8fffa5393b6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62b11c0-fa9e-4375-9239-f0df6155c3b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6982654c-e808-40c4-81c3-d451a213f4d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e868f6c7-c9d5-4e2d-ba89-63f6568f988e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0843ae69-2a19-4bfe-8d8e-c3f4c650723e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d924cd90-73cb-479c-b3d8-877fe3a43faf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aabce97e-ae1f-498d-b6e6-3d78b34ee17c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3255d69-2c0f-4ea9-bd6f-52a1a6dc3c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ffdec3-6a96-4304-9b5b-bbe573cf381e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5218987-c4ab-49b3-856a-28fe79302f13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f7237f-167e-45bb-9f66-69077e1dbccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba90d53-31a1-4f85-9f5c-783f14d007f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "018e9a48-232a-4d97-816c-6793a8b5ee89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e80a889-e110-47a5-9423-f5734cfbced9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95b1343-f7b4-4e9f-9170-d08428100786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beb72675-091d-4e45-82dc-6599401ed81a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1347976-214f-4138-af31-a8f88bef5c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7787822-58c8-4e1b-a457-e2a74ea03dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b0a1a0-1185-4c06-aea8-4fb98e409e37",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1e53a8-f284-4735-9cfc-fabf78183d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42b6f6ef-43a7-4342-95b6-6feee690cc12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e372272-0f64-4451-a745-c066fe12e2c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eaedb31-e8b2-4a90-bd4f-177eb6dd385c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155f0e57-8891-420b-9cc7-36c9c3b37a34",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa50938-7845-450c-ba28-bf089723ab89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f7def5-c36f-4dcf-a519-cf8285c4f31f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5dd177-cb2c-4d25-90b5-d86fc61c2d1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75b551fe-c7fe-4d60-b947-55a5831c301f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e4da4f-8c0e-49b1-a5c0-21ee2a62807d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9dcab2a-e0b3-4e19-a527-266bfcfba73f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ccf98cd-241d-4096-b5c4-986bb8cfb8bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a953f178-4f8a-46c5-a251-e0d4705a84e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c36be91-8450-4123-9629-5dd0fe21869f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772a58e5-459c-4a5e-882c-ba2379ec0124",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1176f512-12e4-48ec-a407-acc1b8b5e5ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "831606ea-a5a2-461f-8458-851f5b5c8792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4949cf18-31b4-4133-97d2-f59d480f139f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8667b84-d218-47fd-a594-9a59a0cccaf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872c1e86-830f-4b02-9fc5-1ce61869e5b1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8988638-3564-4eaf-ac2b-c39cb5e48be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b994aa2e-73f9-46fa-9278-346f7a261788"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8eec32-5430-433a-acb0-4d7f56d2c8c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acd6ff4c-8cfb-41ce-ab66-fe2ced99d58d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a959701b-c61b-4ce5-a530-9104015fb266",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e01408-54df-4e0e-add3-2eca97a68400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c335bc5-3f92-424d-980f-b70ad1918ccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b808e6-eaed-404a-b76e-58537a5d564d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccecff27-a57f-4059-bed1-f2b66ea5aebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8281d234-cf61-4f4f-a859-f27c304b7899",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d5b6cc-f052-4c56-9cba-3907a8a3d051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5390dce4-06f3-4cfc-8a6c-94574daaaf1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5d617d-6a80-43ee-a749-9d35ef6a05fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff378b93-25a5-469a-8a03-51908eb23885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43f7c38-789f-487a-8fcb-eaba75f7cd39",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f84bc7-bbd3-4a4c-97ce-08b1326ecf9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4232eab-b82c-4a8c-a280-cf40e3e07231"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4e5506-4136-46d3-b500-ce75b17d321c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73f9c08e-db19-40b1-b981-cb8ba6833420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f5a4655-82b1-4fd0-a2a9-1223b3941653",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3db2d7e-fd6e-4b0e-93ad-7ed186d03a00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6931f2a-402c-4385-9fb2-8c97db913c89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76a05a0-2d53-41bd-a9e3-3545887fedcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a503c01c-aa9f-4e23-9bfb-4f8ef3796992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db72ea16-4751-4fef-8cab-f5fbad7d6fc7",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79fdf037-4a85-482a-8eb6-271cfafe7ceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "285f46de-ea4a-495b-9298-594d3c2b2d08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac2a548-93fb-499c-87b1-899ecd6b217b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60a1eb14-7ca2-4cf5-998a-684058295d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa29bc40-0832-4053-a549-1b2c50590f43",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc18b4cb-ee03-4d41-a8e3-0b5efa3b7f50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6196e2b3-9718-4d4f-ae4f-af30c42a3a9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab5a29b-fbb1-4b44-b95e-5c3631fdca4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be67c784-0ad1-4815-a2c7-e08ba2fbf0cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db097df0-8d39-4576-98a8-037d846e6d8a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3dc0f0b-9366-43d0-bd82-97d925bc52db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c8294a-4b57-4964-b3e8-2540b051408d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b2e8de4-a3f2-479f-afba-20ed11b93ca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "225e23a3-62d9-460e-885c-c1243cb59f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f328b3c3-7343-4a61-a11c-beb739bf20ce",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5707f91-fe5b-4e91-b197-c816c9ebfe45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cf67bde-badd-437f-9043-0cef997b86dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4226c2-000a-4135-921b-75d23e1384d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87bc0e26-4fa2-481a-ac18-6ba46d41b5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5315e975-aa77-4382-85b7-25647e395e9a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd26473-ac52-44cb-a886-aec46bdaeea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39d1aef3-8749-4821-886d-05395cc8e13a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec3c9f2-db49-4daa-98c0-32437260acc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64aa2f79-fde9-4d83-9436-5c094259f3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4b9fa4-501b-4e40-bc5b-f99b474e6f0d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6698123-d961-46a3-9b39-7b91f0aeaeb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a3bf0e0-0112-4d4d-897d-0b1f7b5ff5de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc10371-784a-468b-9693-8af26ffcf882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4407aed5-5726-4e3c-8406-68637d9ab079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ffb199-6e50-4e88-b975-a2123ac6f184",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d656d47-9943-474a-b84d-ca9143a5102b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d6ffdd-0396-472a-891a-abd180316d4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c71aa02-8900-4a2d-a577-daa69d507dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26392c4e-ce82-4771-8483-38d92d2b313a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a99a71-1e13-4b5f-9a41-10780f95f6fe",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d38915-5415-4d1d-8426-0da5ce6ed04e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bf13c47-d9bb-4678-a34d-208077735782"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a4d334-1631-4dae-a38b-4419f7636dd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d01faca-a840-4898-8489-2efa0efdf63a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7345813-d08b-484f-aaee-d736b058c5bd",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa61ccb-71fe-4b01-b578-e9f3ddb4aadf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c14b63b3-84c7-4e00-be70-a28ea9de635d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e192fa-af2f-45bf-8736-c03c2ca9eae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa291ee7-46f4-43f0-b35a-668ac7a39599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e31e8b-ecee-43f8-be6c-482abaf5663f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08b62c0-62d6-4905-aa16-c58629306d4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09d4eac4-bc08-450c-97d8-1989c8a8b318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ecd8ac6-3c12-4605-845f-6bb503d210a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30fcbda-476c-4eb4-b9f6-982c106785fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f686d534-aa58-4025-ba33-19f8eb922a48",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189fd5e9-f8d9-47d9-a6dd-6b38e5d79bd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f47fac0d-16ff-447a-a490-9c088972b1ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6518e66e-92db-441c-9d85-c772e473db1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6e2d672-c343-4c37-a331-679ac2b30b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f7aa8a-1b1f-4b0d-bb74-a0de7d58f075",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2cd27c-4c45-49d4-beb5-48593d58e74d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f162d754-c75b-4708-9a90-355e7f9a545d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e78ef4-dc8d-4b16-8810-d3325109f612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "815394e4-39c7-496c-b373-14aa465d5287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58eb3efd-24a4-4d8b-a2e1-2b6e9150d591",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41cb695-617d-429c-9fca-547d1d322bb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ff00e25-ed37-4aea-9f1a-3306a4bc7468"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63237668-ed90-444a-98c5-42456663b900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d433019a-a47c-4c5b-abf3-7c0911d1b78f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7acfc0-85eb-42da-be64-2574114545df",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e627a9e-9fb3-4db3-baa9-55ceb445aa50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be1b2ea0-774a-494b-9413-9e7e5507912e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1bbc549-70c6-44cd-9250-bec641cdc878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5b7a21f-dca9-4c82-b7f9-820da58de957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193eae7f-b7de-412a-9bef-573f25624f06",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93bf04a-3531-4b39-b00a-5c00654980cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b096c6e0-ddae-44a4-bf33-5eba60992fb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "394bc9d8-1369-4222-944d-7e869cea1ee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2411c28b-1567-49fb-9e91-dfe5f2d51775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0fa1845-6d6e-4b73-a674-514a9af2166b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45795660-4821-4890-b723-6351861199e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b1b5cdd-626d-4d9e-9267-dbb788148561"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b6b532-1cc7-4eae-a2e5-dbe7ae94d182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d05ec2-2bab-4258-9504-7df362bf5bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426a4abd-87db-4892-87d3-d21051196022",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12669587-59d8-4128-9654-7debf5663b64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3289ed68-f8fc-4796-ba32-3fb04d5086e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6827629-8f01-4f32-99c3-100886af725f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fad3451-3a38-4fb1-a214-315b8e2e4972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0cbace0-2eb4-4d7d-a7b5-543e61b3b017",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5931c0d7-3f30-4763-96ee-cb822becc354",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d02cbdb-0571-49ee-ac21-bb9f44533fca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d468014-e610-49e9-acc8-c2e8815567bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81c513e-c961-4f0c-ab94-d24c46c53d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35bed908-ed79-46cc-9b67-2b2ff1054756",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64ce13d-8e66-48f2-b756-4c3a9accb271",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba888de3-6a40-4ef6-b2f5-41bede958654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c42d96f-71fe-4f4b-a312-de8f015562af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823f0181-1c4e-4fa8-96c9-00c6155315ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb300874-db4d-4570-bc65-f8c29feda789",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc99b518-32c7-45c7-aab3-796dea33aefa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86723bd3-4f55-4e40-9a31-0c5ace446dd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7505ead9-e5e9-427a-94d7-d249c7a31b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0074b9d-788b-48c4-a514-37fc50a9e46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc29706e-7a59-4969-8068-2171968091c9",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f953e34-c398-49c1-8d1e-534ad5cde6bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96258e37-0668-4e03-bc4b-c8f382675ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3050b3cc-f190-469b-be5f-30f2e94db9b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c55409-21af-4bd7-954a-9680d66c37b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db48f6b-04d0-4ea3-9417-f5609de10a66",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc44c4c6-04b0-489b-b0de-e3bee49b6363",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3bdbb89-c0d7-464a-becf-0db140ddd5d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d503814-c24a-4d1c-8af7-24fe33c4e9db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54033dbc-751e-43b2-99e4-eacd8c81d652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e3f9f7-b145-4cfc-9426-3f50fe3e7278",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3748ec64-a8dd-4149-9190-2dffb8f47aea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6d2efdc-376a-4f58-8fa1-bd1ad35e1b44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd1189d-5e80-4236-b87e-d454b6f514fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41faf853-1f87-4ebe-bd15-e66b41eb1409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ec673a-b7a2-419c-a887-611b8e8c86bc",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d4eb2e-6cfa-42ea-bb11-21e0759e2379",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b929516c-0128-411b-ad97-6c0fab12e151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7d29f3-8886-4f72-90c2-7f58e962094f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42518f0c-5c20-4554-9ef3-ea237750fa7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98233e5f-8501-4875-a370-b2cf2e3019aa",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f1a9fbb-78f4-4271-b1ad-042e3139eb88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17092ee5-9d5c-4ce7-a698-462835c6694b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3e966e-f3c0-415b-9b9c-d547458ab44c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a87bbb3e-a324-4508-b334-890c338e0f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8cff189-e322-41a5-88c1-e56bb92ec709",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "428bb09c-c199-46e6-b2d6-0ccef306debf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71c36b49-af32-4387-9dfc-ff86bf3c9a57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6502f91c-306b-48c8-bdef-abc8ed83c471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf099bb9-d0bd-4cf1-84f0-77d182980d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bba966c-eef6-4045-a25d-d08d7ae058d2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f11fd8a-c413-41f4-aa5c-ffb7513c11b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1b734d7-b44b-4168-82bb-0e284309bbb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "288a3921-8e56-4876-96f0-817170a0b3e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "743232dd-4929-43a4-ba1b-395d92ab7648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc5af8b-2da7-48df-92f9-955f6029b1a1",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2acc91b4-7d65-4af9-859e-d449032ad2bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa1ed1ea-dc79-41e1-b57a-d154498a57b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "963c1395-830d-4645-bca9-b62db6d39faf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "326b0792-b236-4cff-9a62-e1a675c454bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "515c7f92-248d-48bb-9b63-57013f99064b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe9e7ce-53d3-49b9-ac98-537ebd8ff42a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a75eeb6-227f-4fef-8e51-af9b764d19a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d03fea-d610-48cb-bd11-bb5d1f7550ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4bd75c-0648-409d-83ef-bf036010ac4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b488bd7e-bb6d-431b-b223-bf97bf0d7b74",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7695736f-0635-4596-b655-79b958ae7aae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef466b46-0a7b-4403-971a-0dcfdf0b6f94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae811aaf-6d00-4530-ad0d-5d6ff7114b59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6fa5e0-f639-4fb3-826e-49104ed5536c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be618332-3467-4695-acbf-7c3dd1e2d8ad",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c116d50e-f2d3-45d1-aa52-8499117c29a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04d953aa-ebe0-4c50-8ad8-caf51edc8e7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d66f57ca-b034-4789-9f72-5e3c77c42695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce4edbae-4a37-4751-8237-cc75ff4f67c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dbe24c9-150b-4404-abd9-f1d06faa4215",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640d0e9c-09d8-4099-9148-5a61f43b5c32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6374756d-65d8-4ed4-88d4-d2508b2ded7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "231db6d3-e4b0-47ca-a2f1-15b924a335f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "212cb8d1-fe8f-4b7b-9c45-6b8af92539b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43bb310-ba1f-4375-9579-ee07b56d023f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b8510d-0bb2-4938-8f5a-e51e96f7abf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38668317-d303-4699-9853-01e1de2f0f32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "216ec737-cb96-4ca6-8d63-7eec099de767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "554b9c6a-7f84-495d-80cf-8f63fee76047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d674b9d0-844a-4af1-9961-3c64613c9565",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d92533f-29f2-4c31-8119-895645a38184",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18d0d9b6-5f94-44dc-b231-8dc1bb6c95c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0dc4216-1b02-4d60-ab9d-6e1983a02444",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27a3ebb8-7272-4432-9b43-e59fad1fcefe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb6af15-39b4-40e9-bc4b-be8fb582b662",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd736262-2ef2-4fdb-b393-3c1e7c73eec9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81466da2-6651-42f1-afb6-913bb2e5ad90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f82228-bd3c-4783-acb1-23fd4cb85c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ab34e4d-1f14-48c9-88cd-1ef330f6ce85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11268ef-ba18-4564-a58b-3e60783d3d44",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4606c261-822c-4015-b4e8-ee52b71c9cc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b1d97ab-c9af-4fc0-b071-40e5ed02042f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26689f33-a54d-480d-9649-b542788f8730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9b2889e-626c-41d0-9ae6-42f797bbf556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3451e0-49c2-4502-9c83-f197a6d92fd0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48ad815-9fce-420e-8fce-2a722ce30931",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea444cda-9079-4f6c-870f-61730a97ead6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b979e2c0-f745-4b62-bc94-c182c1c234cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baf48277-a2fa-45d9-b2c2-506618fb60ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "980a99ec-e3b8-4673-9f3e-ac087bff667d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d1b23c-cec1-4c73-b22f-97690c38db43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0752bb85-e0a5-4469-80fb-df7ee2ca4896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c8508c-db41-4d91-9fe1-be54639c371b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "005113f7-7c20-4bba-b0c2-089b5ec8c320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c942b98c-2af1-4928-bb79-936fb8f6fb3f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f2de56-e2fc-4966-97e9-02201048ea6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3285921-160f-4d1b-b1a5-93d6b7d10ec4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ea8b79-03b1-47b2-9770-3b9085b30368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f2ed27b-461e-43c8-b193-ad82ff670ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df47eb0-b0dd-4d98-9d65-912471f6f200",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8bd943-74db-4c74-b53f-b3fa3b1ab437",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "181f1fac-71d3-4035-ab89-7109fbf4c4c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79052901-af07-4e47-9a71-095184b77499",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f8d291a-8a41-4a21-86ca-49fd6f47efce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7bd5be-5255-4b81-9bda-8af0aa493948",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f888e86-658c-41a5-8b90-a81531e5c192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "996bf04c-e78b-4d76-9adb-32984745d151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d4ea2c-c61f-4d98-bb7a-b0b6e865ff6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65375faf-ff9c-4722-8526-b279c5a2d116"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "213eaf7c-33e2-4410-821a-c3c55fca789f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1b43e53-f161-4755-9c9e-ef550f0ae170"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a0ef2d4-76c8-44ca-9cd6-0dd4bb70ccc5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c5110c67-ef6a-4dff-bcb4-60ad516aa86b"
                    }
                  }
                ]
              },
              {
                "id": "a600c4f5-d52f-4bf6-9c70-f0cc675c93e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a7ff62b-2254-4b39-a416-936fe11808a8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7d5e3a-e6f1-42e0-b4ba-f45a09e104a7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "79c13f5d-314a-4a5e-9cc4-eff999f45323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ed8b284-9d77-48f8-a479-92b94822a765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c785fbd7-a34a-4e14-ba66-1308197e06d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "025c3980-5419-49e8-8c9a-186000b99e70",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b997ea-182c-4498-87a0-a0fe27065201",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "74b97187-eaef-43ce-baa1-4ea3cb20f604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f53b7a2-29bd-44cf-ae9d-2662cd34dc62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "27a68919-6d21-453d-b5f8-5e89b526a5c5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4043b30-9ec9-4b15-b55b-95e1ac146691",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "babb8d93-021d-4189-9f33-913d82a09caf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b9ed0cb-d8e6-463f-aac3-6b4e11020d5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83bd5fb5-ea8b-4d77-9557-b267ae6a1f45"
                    }
                  }
                ]
              },
              {
                "id": "0261dd7a-dd67-4a06-8323-2f4dbc48adbd",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "cf6e6dc7-d3fe-44e2-9a00-e65db45589b3",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7634af1a-6de9-433a-a34e-2a962523feaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4aaf8637-3ea0-4ac7-8240-62c2f077ee05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7960f68-b669-463f-88bc-186c60cf9325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c7aa500-4e56-4b33-9d6d-ea962f29ba03"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b5d46bb7-ff6f-4a57-8842-a9e186d43dac",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c3aaaf25-6c29-4a1c-93a9-cc668c83953f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5fa1b041-88b4-4592-a990-0f56bfdf09d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c1c5cc36-2d75-4c7b-bd72-b2371ad0ceba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67e3900e-d15f-4cb6-9b51-8bdaff3a6537",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5edf453d-a024-428d-b492-a7e81c9a775b"
                    }
                  }
                ]
              },
              {
                "id": "5019396b-50da-426c-9d64-816dd80b86a8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "444734e7-84aa-42b9-9f07-bf6e99c2c7eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "985f3fc7-f7d7-4fde-9f18-526586d560c7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9f0a669-fcdb-41a5-9167-1270033979ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d36a112b-3f17-47df-be5b-df47653e0dd6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5bbac4cb-a5b0-4ea6-8fa0-316177c6103e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a86bfa63-e956-4d03-9e63-a96e494d1bc9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56ea0f3d-a2b1-41a9-aa2a-e19c7472c8b1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ab4c362-1e9d-41be-bf39-3d0106ac2f84"
            }
          }
        ]
      },
      {
        "id": "0e9b99b3-9ef8-4077-8b3b-8c67786c0414",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4ff9ce80-e783-41a1-8efe-1820b44a9db7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ef54750-8b87-4a01-b6db-5ab11c9cfc82",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b03f9659-dae3-44e7-93ff-8d7d1c140ccd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393dfe70-9f05-4378-8fae-6e601f0d3d70",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "166dbb52-5852-4aee-8aca-ff0c3fed5942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aea2f34-f64c-4834-8098-43d7aeea2e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cabce42d-6cb5-4c16-984d-3c7389fe91db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f05bb96d-6aae-48ae-826e-d05bb4570c6c",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c46d0b-058b-4feb-8c21-d4454fd52901",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a33739d2-3cf0-453b-ae96-916160febd52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13127888-54df-46c4-bde8-c9cbdea000aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f444a6f6-6b2b-4a65-98ce-803269d085a9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "365daa49-dc54-4c06-afb7-8706896fc2c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d100caa-16a9-4cf8-8cdc-23016d7e69a1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d5a8c18-998c-42d6-9baa-6bb8a837ad9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4cacc698-2be9-4815-810e-533fda5418fa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7a226c05-9ef4-4ef1-8475-7575999af62c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6ed689a1-f002-4b58-a294-b0f065eb3bc2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "279a9bc7-c311-4ff0-80e5-9e8ff79da927",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c32f0555-0927-4efa-a483-4a6512f0b690"
            }
          }
        ]
      },
      {
        "id": "770912fe-58f8-46a0-b5a6-8290741cd28c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1967d139-c718-4348-a728-8c70645cdf5c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "32826222-ff85-4c6b-845e-5db654cd4472",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d5a80fdb-c95c-42db-83a1-50cc22d65cdd",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e7868b-998c-4b69-86e0-5b00611da94f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6871c3b-27cb-44e2-a00b-8423e7d86ebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5a6aed-6acc-4b88-9803-fd2f1fece351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "981e732c-5f9a-4c6d-8c86-db531bde05c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e25966-18e9-4eb0-b627-f148147ff525",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6e036e-f5af-4931-923d-030b1fd8aca2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8647922f-54e5-4872-902c-c420f2ae201c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55cdc05d-0cdc-4f96-911d-2b6351ba7324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ef7ed3b-aacb-4eb6-804a-8723dfedf8e4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84749db2-4807-48f3-900a-6bcc45d13a4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c838444d-0356-4763-9049-fc81ac58667b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f692c54-7a33-4a51-881d-082442d094d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e70a6e4f-257b-45af-ad36-a6888bd60f5b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c3aec5b7-16ef-425f-b069-be92600b11e6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9a7ae1d6-1640-4190-8c55-b161dfb26f93"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5e4ae21d-7ce7-4de2-add9-9ae050a0ee5c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "84b9a9b3-1eb5-4ba0-996e-206b838847e4"
            }
          }
        ]
      },
      {
        "id": "a9c9ec50-286d-48c8-b997-63543633da42",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "aa38f394-5183-4a16-837f-3c6aae2b7f26",
            "name": "Negative Testing",
            "item": [
              {
                "id": "88ddb88c-4a0a-4657-a621-d873e23e548b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0998ddcd-d8e7-47db-bded-6b3b36eef195",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c82349-e2ad-457a-b65c-47ba8021ba2f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e299d9d-3d35-4ca0-a1cc-dcca09369393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1168f92b-65c5-49aa-ba15-2559d4178cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23e2f082-6b8c-48fb-999d-32cc71985647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2208d0ec-4cd6-4f98-ab96-99a1ff02c341",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d3cdd3-1152-4c63-a0b3-ee596daa66e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "cf0820a0-f100-4837-a320-1dee3f0cff67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc90321-0184-4461-84c2-9e2df8f054d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81d10bda-5873-4ef9-bfdb-87cc1332a502"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae153877-9458-4224-9c8c-f0d3ef1fddde",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac321205-027a-410d-9e5e-aa2e25d3ecce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f004d4e2-f540-4089-80cc-9f0d7c7f7010",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e36e755-80ac-4f52-9928-7a8aa7cc3b9a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8688c21c-57a5-4c38-a4c2-d8d87556d8bb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1f3b938d-bfb3-4355-95e1-43d3fc7bd9d8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "caea448a-6886-4afa-9495-cd87333d37f1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "310f3197-6ae1-4210-874e-537b753a8fa5"
            }
          }
        ]
      },
      {
        "id": "9e14c262-9cc0-4d1c-93a1-a958ba660920",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "23b8de0c-3b71-4073-ad20-2ae57a19c818",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66883d6a-a14a-4c47-b60f-2fe0ef02215d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8284f843-e18d-43fd-9e2f-87c1c130efe6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6926bc6-3327-4a46-8a94-93a829adfde3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6bb75e92-5084-490f-a6b3-fe6be30130bb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 385.5730769230773,
      "responseMin": 12,
      "responseMax": 22161,
      "responseSd": 1705.4926917412572,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1683765400894,
      "completed": 1683765512683
    },
    "executions": [
      {
        "id": "8f769592-d4a3-4395-877b-487ff253b3e1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "520f4f1e-d183-4e40-929e-0e0801a2f684",
          "httpRequestId": "5cccd220-d190-479c-8d56-eda728003ce4"
        },
        "item": {
          "id": "8f769592-d4a3-4395-877b-487ff253b3e1",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "81bdf438-4358-4f5a-b38c-cbb37829a01b",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 0
        }
      },
      {
        "id": "48bfd106-2b56-43cd-ad1e-f67ec8c19be2",
        "cursor": {
          "ref": "b3e44728-ae04-4906-a7fc-a3df80fc64f7",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "39b8a79c-1004-4c85-922e-02da01199892"
        },
        "item": {
          "id": "48bfd106-2b56-43cd-ad1e-f67ec8c19be2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b89c8da1-1dbf-4bd2-b1da-7b9753469f9a",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "1df724ef-4272-4b97-812b-b74e205442fc",
        "cursor": {
          "ref": "985eb01e-4afc-44e9-8337-514ecf2c3bb5",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8a4c9ec6-df67-4b40-9aff-f1a1bdc0e667"
        },
        "item": {
          "id": "1df724ef-4272-4b97-812b-b74e205442fc",
          "name": "did_json"
        },
        "response": {
          "id": "033a284d-7e6a-48f9-b187-c943365bcf69",
          "status": "OK",
          "code": 200,
          "responseTime": 717,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4327f63-fccf-4fc0-973b-f6389431420d",
        "cursor": {
          "ref": "e066e4cf-0581-46f0-8cd4-d301ceaadfa2",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d691108a-a7b8-4ea9-bef6-ccd17cfc5a27"
        },
        "item": {
          "id": "d4327f63-fccf-4fc0-973b-f6389431420d",
          "name": "did:invalid"
        },
        "response": {
          "id": "e465d379-6fd0-4c76-99f2-0a0c29919b50",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1235,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "d4327f63-fccf-4fc0-973b-f6389431420d",
        "cursor": {
          "ref": "e066e4cf-0581-46f0-8cd4-d301ceaadfa2",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d691108a-a7b8-4ea9-bef6-ccd17cfc5a27"
        },
        "item": {
          "id": "d4327f63-fccf-4fc0-973b-f6389431420d",
          "name": "did:invalid"
        },
        "response": {
          "id": "e465d379-6fd0-4c76-99f2-0a0c29919b50",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1235,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "0e4fc5d5-8312-453d-84b1-0350280a30e2",
        "cursor": {
          "ref": "9e7b995e-8b3d-4e59-94cf-8aece2bd9e60",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5de4af8e-d293-4965-931b-0f958330d786"
        },
        "item": {
          "id": "0e4fc5d5-8312-453d-84b1-0350280a30e2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "35d1ae5f-d1b8-4639-8145-24661e04a454",
          "status": "Not Found",
          "code": 404,
          "responseTime": 125,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df64109b-552b-4620-8c10-940eec00d742",
        "cursor": {
          "ref": "192b7aca-74a1-4f3a-b7ef-3623f1538b31",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c15993af-1e31-43bf-b6fa-c21422403eba"
        },
        "item": {
          "id": "df64109b-552b-4620-8c10-940eec00d742",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ced6e33a-92b9-41d1-8919-75dedfe942aa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 22,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f4f013c-7b76-47d8-85fb-009797d3ebff",
        "cursor": {
          "ref": "8f77e911-6368-4dec-80ae-df0c0167569c",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e49bf297-5a8d-4ea6-b7fd-9003c32ada33"
        },
        "item": {
          "id": "3f4f013c-7b76-47d8-85fb-009797d3ebff",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "52c56fa4-40b8-40c7-a35c-d180530f708b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "000dd705-047f-4905-8b36-88538f66ae26",
        "cursor": {
          "ref": "ec5abbe0-e4a4-40f1-b702-cca6a34157e0",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8fb3b812-27b8-4e6a-9480-98f80a4a65fd"
        },
        "item": {
          "id": "000dd705-047f-4905-8b36-88538f66ae26",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5e92f2e5-1027-4e88-9866-643c1a9afbd6",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "000dd705-047f-4905-8b36-88538f66ae26",
        "cursor": {
          "ref": "ec5abbe0-e4a4-40f1-b702-cca6a34157e0",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8fb3b812-27b8-4e6a-9480-98f80a4a65fd"
        },
        "item": {
          "id": "000dd705-047f-4905-8b36-88538f66ae26",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5e92f2e5-1027-4e88-9866-643c1a9afbd6",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "58b2ac37-b718-46fb-96bd-fd8cb7d764a7",
        "cursor": {
          "ref": "b4fe85b9-b3d2-4899-8784-28e459b3c4e9",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "871cc5e2-a09f-4450-afa9-d6ed415aa4cb"
        },
        "item": {
          "id": "58b2ac37-b718-46fb-96bd-fd8cb7d764a7",
          "name": "identifiers"
        },
        "response": {
          "id": "d41d2816-2cb3-4087-91ea-528ab45beb9c",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3fb88ef-4c37-491e-95b5-755be78d2ccd",
        "cursor": {
          "ref": "d109d845-d433-4bd1-9a44-1c3d321dc88e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "be099495-2296-4e50-b20d-31c799f95bbc"
        },
        "item": {
          "id": "b3fb88ef-4c37-491e-95b5-755be78d2ccd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dc7299ba-3393-49bf-80e3-240a9e8dc3fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3fb88ef-4c37-491e-95b5-755be78d2ccd",
        "cursor": {
          "ref": "d109d845-d433-4bd1-9a44-1c3d321dc88e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "be099495-2296-4e50-b20d-31c799f95bbc"
        },
        "item": {
          "id": "b3fb88ef-4c37-491e-95b5-755be78d2ccd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dc7299ba-3393-49bf-80e3-240a9e8dc3fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac87bd8f-c05b-48c3-9ed4-3e82369e52c6",
        "cursor": {
          "ref": "aeb6e26c-dc5e-4b8c-9b87-9c849b6472a1",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f9660380-c925-4c44-bfcd-457bf42d607c"
        },
        "item": {
          "id": "ac87bd8f-c05b-48c3-9ed4-3e82369e52c6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8bb07161-3089-4cc5-abca-2e2d63bff61d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720ff085-fb82-44ca-9e09-07218e9beb7e",
        "cursor": {
          "ref": "38eb2500-0261-43d2-9fea-3e0f5f6c7dd7",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "75429759-4082-48d0-9ee9-9df74711479a"
        },
        "item": {
          "id": "720ff085-fb82-44ca-9e09-07218e9beb7e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4acb02c6-7438-4770-8654-33099acf525e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c047e2ec-138f-4db9-8dfc-e369d4130b6c",
        "cursor": {
          "ref": "6f03de13-b04e-4e6d-a9dd-360e816bdc11",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b2bb389a-fde5-4d96-90d8-11672b5f4819"
        },
        "item": {
          "id": "c047e2ec-138f-4db9-8dfc-e369d4130b6c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "264cff72-2dd4-4dd3-b49f-948f9cf2ddc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24509f8-98c4-4454-b780-e4bd65c25b2f",
        "cursor": {
          "ref": "5bc1e5f1-ecc9-4cea-8192-f435d5710305",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "afa9c1e3-59f7-4655-90d4-08e1cd1a6184"
        },
        "item": {
          "id": "f24509f8-98c4-4454-b780-e4bd65c25b2f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "aa69bfab-351d-4bd5-b004-5db32b24684c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65aa81f2-e002-4c43-a1e8-d13c50cfaa54",
        "cursor": {
          "ref": "0f00954f-735e-4766-b920-32bdda96f8c9",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ee0d1873-3acd-4dcb-beb3-4ed549c6a3d1"
        },
        "item": {
          "id": "65aa81f2-e002-4c43-a1e8-d13c50cfaa54",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "03dfb1e5-d715-4881-bf13-6366fe238991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d8ebd0-886c-4781-b7da-745a4cdde1b9",
        "cursor": {
          "ref": "d615127f-e595-469d-8bf1-1ef3cab4beba",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "390beee0-3724-47b5-833f-37b6502c8b6a"
        },
        "item": {
          "id": "f5d8ebd0-886c-4781-b7da-745a4cdde1b9",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ee374d60-96ef-4381-8f70-14bcdb236a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d918153d-4cc7-4fe0-9c84-05f65ebbf33c",
        "cursor": {
          "ref": "c8555d8b-8b1b-4a4e-967b-4e45c9c88613",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9282a416-2dfc-45d9-b1a4-730560defb7e"
        },
        "item": {
          "id": "d918153d-4cc7-4fe0-9c84-05f65ebbf33c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e4b7c88e-5588-4166-8a47-990f02e2ca10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72f1298-6b0b-49ab-aea8-64cf487fc86f",
        "cursor": {
          "ref": "966e6a40-3228-4b99-af32-7789d6090599",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "04a6920f-f6c1-4c12-9d1e-1ccf7795a6ef"
        },
        "item": {
          "id": "b72f1298-6b0b-49ab-aea8-64cf487fc86f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "cdf0f096-2e83-48a2-ac4f-b91537908f46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7d8c6d-37f6-447b-ba55-2b7b41f64a7e",
        "cursor": {
          "ref": "3143fee5-c402-4516-9f85-7d42a5eefcb2",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0fa7135c-9250-45f2-87c3-800214296093"
        },
        "item": {
          "id": "3a7d8c6d-37f6-447b-ba55-2b7b41f64a7e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "359316f2-1260-4a5b-a5fe-a258174e918e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f75eadb2-592a-4b3b-b468-9238894f3b42",
        "cursor": {
          "ref": "6a1ed02a-cf75-4147-b489-b552399394ca",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1982f804-abb9-4437-a120-bd0f2229c225"
        },
        "item": {
          "id": "f75eadb2-592a-4b3b-b468-9238894f3b42",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "77a69aea-5b81-430e-ba02-cc8c801f6900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575886b7-f97a-4917-9e0b-f5a0c21c4888",
        "cursor": {
          "ref": "8179d45b-98da-440d-8291-4d494771a34a",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2ed853f3-b753-47bb-b095-f40a10514786"
        },
        "item": {
          "id": "575886b7-f97a-4917-9e0b-f5a0c21c4888",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3f710ab4-2eaf-4d8f-bc12-e186ca2e4ab6",
          "status": "Created",
          "code": 201,
          "responseTime": 1040,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "f04ad2ed-13de-4f6c-86b0-9ef26acbd60e",
        "cursor": {
          "ref": "e51c2cf6-ef5f-4a53-b772-ce06d3be387c",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "446a9466-9368-4ca8-92f7-26cbda9abc87"
        },
        "item": {
          "id": "f04ad2ed-13de-4f6c-86b0-9ef26acbd60e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "739db989-1c55-43af-ae6d-88cbfa5bcb20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c881cd97-ab6f-4a73-8918-736546d3982f",
        "cursor": {
          "ref": "f5b9db9c-432f-4a7e-9a4a-4bfcf80555c2",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5e1cee7f-5273-45ab-86c8-e2ef899c20e9"
        },
        "item": {
          "id": "c881cd97-ab6f-4a73-8918-736546d3982f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "18a1db5e-ee46-41c1-905b-bbdf9f5f5a29",
          "status": "Created",
          "code": 201,
          "responseTime": 9472,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "2049bbf0-ddd2-40a4-a68f-daac0c5cf1c5",
        "cursor": {
          "ref": "390beb85-243f-481b-b474-a778622db2aa",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "28318b7c-8c31-440a-b6ee-65d679ee0f19"
        },
        "item": {
          "id": "2049bbf0-ddd2-40a4-a68f-daac0c5cf1c5",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c765d085-cdc4-46c9-a57b-10d2be361db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461a2903-f70a-487b-8326-04fba26edb89",
        "cursor": {
          "ref": "7a317c67-36fa-455f-ad37-47dc26f5eadd",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ae44eafd-f710-4bf7-8a5a-755b3f7cfa42"
        },
        "item": {
          "id": "461a2903-f70a-487b-8326-04fba26edb89",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4d7d9dea-1632-42dd-9048-fe50d801fb5e",
          "status": "Created",
          "code": 201,
          "responseTime": 8103,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "7d74b44b-efb7-42d2-8734-6e2b1b09285e",
        "cursor": {
          "ref": "054f1c53-2c38-4721-bd77-486a41f53dc1",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f8bdee98-5cd7-4efa-9efa-a34915e200d4"
        },
        "item": {
          "id": "7d74b44b-efb7-42d2-8734-6e2b1b09285e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "829addeb-332c-425b-8c13-93fa853fd954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1641a344-604c-47c6-97eb-9a0d0e40260e",
        "cursor": {
          "ref": "608d203b-6569-4509-9025-9985144bd588",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "902de0aa-3467-4cc7-9308-bb11f21547ab"
        },
        "item": {
          "id": "1641a344-604c-47c6-97eb-9a0d0e40260e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "86fd9383-5f07-480f-afab-13e3b1e539d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0df499-d9b1-4b54-a603-fcc08fcab702",
        "cursor": {
          "ref": "63f409d7-5feb-439e-ad3e-e44881110ab8",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5a213863-f52c-42cc-8a70-9b13f1d70433"
        },
        "item": {
          "id": "6c0df499-d9b1-4b54-a603-fcc08fcab702",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "8533056e-7970-42a6-8895-7e0d59e20c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d2b42b-ebe0-4946-aac7-344972c8e5b1",
        "cursor": {
          "ref": "fb9b7fcd-9a55-4685-97c9-a0e51317f1f9",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "687f813e-131c-4fba-b5de-b2d408409696"
        },
        "item": {
          "id": "b1d2b42b-ebe0-4946-aac7-344972c8e5b1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d37f04ad-d5a4-43d3-b269-0db1ad6a886b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6217845e-caa2-4ea1-accc-453e62df1877",
        "cursor": {
          "ref": "9026eb85-202a-4b27-8412-936f2c696a81",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a91c7fe5-0479-424c-a39f-09bc61560086"
        },
        "item": {
          "id": "6217845e-caa2-4ea1-accc-453e62df1877",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b767da59-d455-4a14-8ef2-556b10e17f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afce18b3-d7d8-456a-ace3-a183de5de33e",
        "cursor": {
          "ref": "811afe26-656a-4176-ae1f-116934a92f50",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c71bb8be-9c5e-44dc-88be-019b2991a560"
        },
        "item": {
          "id": "afce18b3-d7d8-456a-ace3-a183de5de33e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6aa8f433-ca44-472c-80de-0ef21e75ceb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f736723-e0fc-4526-ad10-375ce18f2369",
        "cursor": {
          "ref": "56504e49-4505-4604-adf3-b52c2e8f9777",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "87c19c7b-88df-4135-9f5c-f14a1b5776d1"
        },
        "item": {
          "id": "6f736723-e0fc-4526-ad10-375ce18f2369",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e409fc46-e074-4662-9c9e-3dd2373a8c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efe1c48-44b8-420e-a992-4bd4ac41484f",
        "cursor": {
          "ref": "a67d40ec-bdd8-45f0-998c-08579c7412b9",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d883d893-ec76-4a79-84a9-1db99d29626e"
        },
        "item": {
          "id": "9efe1c48-44b8-420e-a992-4bd4ac41484f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "440e4f0b-7474-437c-bef3-03b073a66a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ddb8fdf-b2b4-4de7-8a52-16dbdae71421",
        "cursor": {
          "ref": "310f62f8-1159-42f5-8d5a-383e8a1e9443",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "99153837-c28e-4baa-ad19-824b66da7abd"
        },
        "item": {
          "id": "2ddb8fdf-b2b4-4de7-8a52-16dbdae71421",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d73dd604-b882-4400-abf0-fdd0019a869a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d849fd72-6f9f-4d27-a96a-fd3e53f3d314",
        "cursor": {
          "ref": "bec2a0fc-c195-44c8-b8e4-819678352f46",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e32ed405-604d-46e0-9e7b-2fc66bb630af"
        },
        "item": {
          "id": "d849fd72-6f9f-4d27-a96a-fd3e53f3d314",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "60c2a9b1-19d6-4bd9-a706-88966d7f8979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cceb7429-4e91-411f-a203-218494e5c377",
        "cursor": {
          "ref": "4f3d610c-2c8d-4b44-80e4-665967f49548",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "804c75b1-0063-417f-9c01-d7df789370d1"
        },
        "item": {
          "id": "cceb7429-4e91-411f-a203-218494e5c377",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8b1c1d46-83b0-450c-a68a-ecfe3977bfb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc526b6a-6a4d-47a7-89f9-3bf8fbe42395",
        "cursor": {
          "ref": "1aaa919f-a3f8-4a61-860d-13ddddb817f5",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cfbed6b6-8617-478a-a869-cbd361f93c09"
        },
        "item": {
          "id": "dc526b6a-6a4d-47a7-89f9-3bf8fbe42395",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "31064e9d-2010-4216-84b8-6dd3fec1a90d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "978935e3-5fa4-48fa-aa19-b9c75f797147",
        "cursor": {
          "ref": "ec3601a7-3f03-4b50-960a-73411a7f70a9",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ec8594c4-7e2e-4a9a-ae71-987fb83f9b95"
        },
        "item": {
          "id": "978935e3-5fa4-48fa-aa19-b9c75f797147",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "bcf807e0-2c81-4b55-adc0-8443bb5820b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101a2674-0fea-4400-99a9-00357e0adf9e",
        "cursor": {
          "ref": "894f4102-e9f7-49ff-beb2-4ed91acd0824",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "707fe910-7cce-455a-8cdd-4ae2ea0f4c6c"
        },
        "item": {
          "id": "101a2674-0fea-4400-99a9-00357e0adf9e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3573932d-44c7-4fd2-a5ad-2854103a5231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d6972ec-b72f-4a6f-b04d-3eb1517fec74",
        "cursor": {
          "ref": "7ffe5d63-cd29-4b7a-88f2-ad5aa1cfc28b",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e2feb75f-0697-4c2c-9b4e-6422d5ed46c0"
        },
        "item": {
          "id": "1d6972ec-b72f-4a6f-b04d-3eb1517fec74",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8c8e97a8-a90f-44da-8036-92476fddc04f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa4259fa-b35c-40b6-b0b7-580a9ec6248f",
        "cursor": {
          "ref": "865bf532-1c21-43b8-b9d4-3a29f3c3e7fa",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b9815ddf-a6c0-4c8f-b065-bf19b0e0ecb8"
        },
        "item": {
          "id": "fa4259fa-b35c-40b6-b0b7-580a9ec6248f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b9810429-312f-4176-aa84-109b3c03006d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b54bba5d-0bfa-4638-b00c-8f588981e7ed",
        "cursor": {
          "ref": "a99386aa-bdb9-4b91-a52e-fb1d238aa25d",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c89e695d-15f9-49a1-b4ad-bbad6af18f98"
        },
        "item": {
          "id": "b54bba5d-0bfa-4638-b00c-8f588981e7ed",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8f1a59e7-9e59-4aa5-8afe-bc5c5bd1e253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c32629a2-8e1c-438b-8bdd-2b3a61c9fde3",
        "cursor": {
          "ref": "0adcf827-7818-4d45-ac1f-672708dbc74e",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5a03284b-4ce9-4af7-986d-7dbbcc8b9970"
        },
        "item": {
          "id": "c32629a2-8e1c-438b-8bdd-2b3a61c9fde3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "644cab37-ee4c-483d-ac9a-662858dc18e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe40602-8667-4fcf-bd58-5aa948b151f0",
        "cursor": {
          "ref": "9d6da5f8-9118-4c51-8402-ba044429ae5b",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "18071661-24a2-4b98-b200-87aeee519374"
        },
        "item": {
          "id": "3fe40602-8667-4fcf-bd58-5aa948b151f0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "751cf29c-2b47-4515-89d7-ac3cfd731101",
          "status": "Created",
          "code": 201,
          "responseTime": 4671,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "90f974e7-f4d5-4596-afc4-79fa30a54e18",
        "cursor": {
          "ref": "d17ce8d3-efe9-4894-b31b-98bafafba634",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "91080483-8ef0-4db3-bfa4-a1c5d501e5ed"
        },
        "item": {
          "id": "90f974e7-f4d5-4596-afc4-79fa30a54e18",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a6156a4c-956e-44f2-990f-b410f2d5fc40",
          "status": "Created",
          "code": 201,
          "responseTime": 22161,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1d647b75-3ab7-4337-b565-92b4dffc7717",
        "cursor": {
          "ref": "51fa94dd-3755-4d2e-a196-68befb5245e9",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b2a563ca-758b-4d56-a947-583377283c26"
        },
        "item": {
          "id": "1d647b75-3ab7-4337-b565-92b4dffc7717",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1b149e85-24ba-4d28-89b6-314b2578ade7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c75376-5474-4b43-a1ba-0d9d581a046a",
        "cursor": {
          "ref": "b1400d7d-7f48-4ff8-a991-dc64eb873554",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2754ecd3-514a-4255-9713-6144f54d1af1"
        },
        "item": {
          "id": "36c75376-5474-4b43-a1ba-0d9d581a046a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c115d74b-5f76-42c6-b3de-ba534c8e3e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af934168-c54d-4ba4-90a5-752bd5ae6c59",
        "cursor": {
          "ref": "8ee36420-f681-44e5-a6cd-29dfc57e785c",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "23e09bf9-c3eb-45d0-b191-b63e83ab1554"
        },
        "item": {
          "id": "af934168-c54d-4ba4-90a5-752bd5ae6c59",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d33dc126-61dc-4174-9e25-fe540ca34f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13311a66-f082-47c7-84d7-72c7e9e2d85b",
        "cursor": {
          "ref": "ad4a8409-5d96-48ea-863e-d0c0742352c5",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "996da780-41af-4d65-9053-46b35dbd0b87"
        },
        "item": {
          "id": "13311a66-f082-47c7-84d7-72c7e9e2d85b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "94d231e6-31b4-489e-9230-88c3f9dde06d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b0a472-2ef4-4215-8258-cabc33957ee6",
        "cursor": {
          "ref": "3848c9f3-ce60-425b-906f-23fdc66c2f28",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f5169aad-f025-458e-b8a4-17df838940c6"
        },
        "item": {
          "id": "c6b0a472-2ef4-4215-8258-cabc33957ee6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "137a123c-dc70-425b-ba93-8ddf85565609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c94606da-39a9-4cb0-9242-9dd831d36fe1",
        "cursor": {
          "ref": "7524ff36-36a2-4da0-bc8b-4a38e39632fa",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a1f1fbe4-d3f4-40ac-800a-e6a20b214d88"
        },
        "item": {
          "id": "c94606da-39a9-4cb0-9242-9dd831d36fe1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "01f21c82-8359-4498-9526-d7e27b45d248",
          "status": "Created",
          "code": 201,
          "responseTime": 6244,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "fe52e501-06e0-47c8-97e6-67afc96ee21e",
        "cursor": {
          "ref": "600fe2d3-ab4e-4720-ae3d-5b4a049fe6eb",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b6c83258-eec3-445b-b0c0-3af0b7a7da51"
        },
        "item": {
          "id": "fe52e501-06e0-47c8-97e6-67afc96ee21e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3f7fe460-692b-4500-8b3b-cab5d19259d8",
          "status": "Created",
          "code": 201,
          "responseTime": 2725,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "0a5c260d-69fa-4f5e-a1d3-bc42a5bfc6da",
        "cursor": {
          "ref": "d5f7c319-3ab2-4460-b021-dca7b5ce6a0a",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0e1f0d78-9947-4cd5-8688-1bca62d2566a"
        },
        "item": {
          "id": "0a5c260d-69fa-4f5e-a1d3-bc42a5bfc6da",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d667ec02-47b8-4328-a001-34ca783bedf2",
          "status": "Created",
          "code": 201,
          "responseTime": 1911,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b22890d8-40dd-4a10-ad8f-3a6425a84fa9",
        "cursor": {
          "ref": "a42f5415-a533-4c43-9c71-3cc0a785548a",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "647531ce-4d37-47c9-b1ec-da0ddf0b67ce"
        },
        "item": {
          "id": "b22890d8-40dd-4a10-ad8f-3a6425a84fa9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "28f5631c-732e-4bb7-834a-919571c3a6f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f88f39-3676-4689-8b3f-4f67d063b6c4",
        "cursor": {
          "ref": "fdfb3bdb-3d5b-46ca-91f5-079dd001d000",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b6725ebf-9319-4e40-819b-5ebffeaf5171"
        },
        "item": {
          "id": "a0f88f39-3676-4689-8b3f-4f67d063b6c4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "afc9f2b4-7319-4eee-9499-7d3f0834929a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0666fc96-6646-4e70-b8c3-ca16336ca5fd",
        "cursor": {
          "ref": "64142394-dfe7-4610-a5b3-2ee9e6bfc546",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "44dd6747-c72a-4c63-8c97-374129bafc1e"
        },
        "item": {
          "id": "0666fc96-6646-4e70-b8c3-ca16336ca5fd",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "30727d7a-a773-43bf-8c8d-10c0baf63655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c77d3b0-b08b-4505-9c1b-d2b354f94c63",
        "cursor": {
          "ref": "57c59aec-ff92-4054-9271-82c95739f7bc",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0c56c68c-f0ea-43a5-83c6-d2344210e60d"
        },
        "item": {
          "id": "2c77d3b0-b08b-4505-9c1b-d2b354f94c63",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "aff7b6a8-a376-417b-a9bf-10174c76d803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083254f1-2597-4179-b4bf-0ef6baf6bcb2",
        "cursor": {
          "ref": "902a705f-a1a0-470c-8deb-872c11eeca02",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2e37302d-8c2b-464e-adca-98fc2ad9cfed"
        },
        "item": {
          "id": "083254f1-2597-4179-b4bf-0ef6baf6bcb2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "cc6dad4d-4d67-49f8-b9a3-475ccdcd2500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a298c3d9-fd5b-48e5-bd9a-74a6deab0d0c",
        "cursor": {
          "ref": "84473d6f-6599-4332-ab7a-1860bb68d185",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ec3b01ff-6210-4695-8524-1555678d3e33"
        },
        "item": {
          "id": "a298c3d9-fd5b-48e5-bd9a-74a6deab0d0c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1da00d1a-fd06-4027-a7e3-58cee1f7d456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "402c03d5-8048-4f96-9479-c20c85def5f1",
        "cursor": {
          "ref": "a7d29e5e-7464-460d-80d7-a101cf32a69a",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "97b3f814-d55f-4990-9d87-a2db17cc38c5"
        },
        "item": {
          "id": "402c03d5-8048-4f96-9479-c20c85def5f1",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "310a5f8b-6c9b-40bc-9d02-12ced63ea01e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c740bb8-b3eb-4158-b4c2-3ddeb312ab40",
        "cursor": {
          "ref": "8ea405ab-b52b-4999-bfdc-818b525f8306",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2f0f53dc-c7f9-4862-8c7e-0ec01854e4cf"
        },
        "item": {
          "id": "4c740bb8-b3eb-4158-b4c2-3ddeb312ab40",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a53e5cfa-c62f-40d4-ae65-85898d677ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b0dba6-7875-4ca6-bfa3-c4bcf86db7a8",
        "cursor": {
          "ref": "760b040f-266b-4ddd-ae7e-babb0655bfb4",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6e3dfc4b-a1cb-495b-bf98-3c20c63cd2e2"
        },
        "item": {
          "id": "a6b0dba6-7875-4ca6-bfa3-c4bcf86db7a8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9690066c-bf7d-4e5c-a737-bf4cbf116f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10dc086d-d29c-4f54-8b3e-fdef36baf750",
        "cursor": {
          "ref": "4cefda99-326f-492d-9955-6791bf3d6c92",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "87a76afc-5c7d-43f5-b367-d6a21c889cd2"
        },
        "item": {
          "id": "10dc086d-d29c-4f54-8b3e-fdef36baf750",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "648dadd2-8099-48b8-a9d5-bc5530ad0654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4994df-19dd-4aba-947a-5c469f6a4596",
        "cursor": {
          "ref": "5d58a8ea-0c93-4891-9a38-715ef93cd6c6",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c8020afd-df42-4c44-9e03-4ef6372d37f8"
        },
        "item": {
          "id": "fc4994df-19dd-4aba-947a-5c469f6a4596",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "668f7870-2e5b-428c-a478-f24b389a6a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff2c37a6-ac46-4754-93ee-19418696aa33",
        "cursor": {
          "ref": "68c3d16c-1d47-446d-9db5-faacfea68ca9",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b839cea2-1904-4e7e-9354-f8e002e8cdb7"
        },
        "item": {
          "id": "ff2c37a6-ac46-4754-93ee-19418696aa33",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e0faa0c8-bf82-4d51-9973-6609f3f25b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a73045-5c17-4473-8580-c1d86c208489",
        "cursor": {
          "ref": "e5c26fdd-91b5-430a-9345-27b2e4b7f911",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bf070cd6-29a9-4a84-bcd3-50ab9d96be8e"
        },
        "item": {
          "id": "64a73045-5c17-4473-8580-c1d86c208489",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2a0d1836-cb0d-4b2e-bb90-cf7cb4a24dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb5bf7e-9164-4bd0-800c-92a4e75adcf9",
        "cursor": {
          "ref": "5ae4c054-f280-40e0-ab92-45a7bd174498",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f6ecf4cc-9e91-4762-9402-309ef57fe6d4"
        },
        "item": {
          "id": "7bb5bf7e-9164-4bd0-800c-92a4e75adcf9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "a871e76b-3078-45a9-8de4-e2bb9ae03151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3470c770-bca8-4ab4-9edb-1e1f9b24ba46",
        "cursor": {
          "ref": "decd4191-1c9d-464b-baf7-91dfaf05b85e",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e002fa9e-54ac-454e-b000-3d0f32a6a40b"
        },
        "item": {
          "id": "3470c770-bca8-4ab4-9edb-1e1f9b24ba46",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "94421522-fb10-43ff-b4ec-1f4786cba203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75afe5d0-055f-49ab-8b25-7d119d898827",
        "cursor": {
          "ref": "23cd991c-c904-4b5c-8aa1-719c78edad4b",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6fc09dcb-8c2e-47c0-bb80-5f926dbf9aff"
        },
        "item": {
          "id": "75afe5d0-055f-49ab-8b25-7d119d898827",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "32cd0a5b-0df3-44de-b918-6926a78471d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33577a80-b19b-4b53-85bf-7173f8c4a767",
        "cursor": {
          "ref": "bde76fea-074c-4a37-b062-ffae2f438228",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "68fc8c7c-7bd8-4df2-add1-77cef18c9501"
        },
        "item": {
          "id": "33577a80-b19b-4b53-85bf-7173f8c4a767",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f73a8b06-d270-4538-9391-7a390e189a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747b60c7-1ed7-46d1-ad53-7e5995f5d432",
        "cursor": {
          "ref": "e762a6a9-c8d3-4286-a4bf-5ba1065e6a48",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3be643e4-17f0-45f3-92dd-24b814606daf"
        },
        "item": {
          "id": "747b60c7-1ed7-46d1-ad53-7e5995f5d432",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "79abff7b-fe44-49ed-a21c-8dafc01b4a3b",
          "status": "Created",
          "code": 201,
          "responseTime": 2799,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "c5eab70e-1137-490f-8c01-c71868039c88",
        "cursor": {
          "ref": "518f92c8-f590-401a-8c3a-057cb30910ee",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "30706ddc-c03c-404e-8a7f-192425b58620"
        },
        "item": {
          "id": "c5eab70e-1137-490f-8c01-c71868039c88",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d160894d-a087-4155-b9f2-f5c0d357cf3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc24d213-f815-43e3-a6ae-8b9f65e7c0a1",
        "cursor": {
          "ref": "3ee33b67-da6b-4bbd-b9ed-c48608ab7142",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "390793a3-380c-48c6-80c0-659aaad08c6d"
        },
        "item": {
          "id": "bc24d213-f815-43e3-a6ae-8b9f65e7c0a1",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "080e1090-b2e2-44e7-936e-caea06b4ba6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e794eb96-08bf-4c82-8fb9-ec13948eaa16",
        "cursor": {
          "ref": "295d287e-af19-497e-9def-7bedce41bf33",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d5b8e4ad-84df-4609-8504-4f7db59819bc"
        },
        "item": {
          "id": "e794eb96-08bf-4c82-8fb9-ec13948eaa16",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8a349dbd-df7e-4ccc-84c6-f694395fa167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de8a81d-1e50-4237-8c79-667b1a13a771",
        "cursor": {
          "ref": "42489c15-d861-4329-822d-cc2289767c13",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b8c80b69-6efb-455d-8692-fbaf2363fee3"
        },
        "item": {
          "id": "2de8a81d-1e50-4237-8c79-667b1a13a771",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "29773c01-7fde-410c-9e48-b055007518cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ec044b-51ea-4839-b45b-257c5e79b939",
        "cursor": {
          "ref": "12e164b1-b418-46d1-939c-f8d4ca50f45d",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "55e8b303-0266-46f2-a258-8b9be7dd7ae5"
        },
        "item": {
          "id": "e7ec044b-51ea-4839-b45b-257c5e79b939",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d1d74cc8-39f0-4bee-9c47-ef14dffcfbad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04be246a-d42e-4bbb-a101-42f01c028fd9",
        "cursor": {
          "ref": "1f86c194-5382-442d-af8c-8c684f9c61d6",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9cd7a290-5bb6-40d7-bd02-ea86103b953d"
        },
        "item": {
          "id": "04be246a-d42e-4bbb-a101-42f01c028fd9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "dde2988e-8bdd-43ba-8f8f-e795a6f3a3a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b67b63b-0db9-4e4c-9762-1243969028e6",
        "cursor": {
          "ref": "a92c8d5d-1be0-4ef4-ba4a-e6a29419b78c",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7d1d5012-05ab-458f-b535-eff4646051f6"
        },
        "item": {
          "id": "2b67b63b-0db9-4e4c-9762-1243969028e6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "05b8394c-4ee8-4131-a12b-f8d6db3f4109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747595f0-6e68-4496-bfcf-28cd252bc1fd",
        "cursor": {
          "ref": "e96fb793-9532-4898-9c55-c8ec71e42df5",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e782f210-b226-4080-b002-cee424cd1b3a"
        },
        "item": {
          "id": "747595f0-6e68-4496-bfcf-28cd252bc1fd",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5bc12e3f-069c-490a-8323-8495ab543484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30039ee8-34d1-4e33-89e5-f7a87bd09a5e",
        "cursor": {
          "ref": "c06b8549-a1e2-48c2-90b3-4ca1e9dba1e4",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c82e8e13-f4ce-475b-a3be-b2cbf883c284"
        },
        "item": {
          "id": "30039ee8-34d1-4e33-89e5-f7a87bd09a5e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8a5deecf-db31-4b0e-97e0-6d3486f0e04e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539c2314-3f46-4d4a-8da5-f64f9df1e4d2",
        "cursor": {
          "ref": "69dacb58-c7d2-48b9-a80f-ec6503f8c127",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1e25302a-97f7-4141-b271-f7d2df298e2f"
        },
        "item": {
          "id": "539c2314-3f46-4d4a-8da5-f64f9df1e4d2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "57294c75-25ad-4c4a-9423-10c5df5bfd35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232cbf6f-3397-4c07-ba1e-5c1772e53468",
        "cursor": {
          "ref": "5efbcc00-009a-44ae-ab49-8a6f83dab25a",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4a4f71c6-3faa-428a-bc5d-1432ad4a82f7"
        },
        "item": {
          "id": "232cbf6f-3397-4c07-ba1e-5c1772e53468",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "73681ec2-1b85-474e-a721-8073e9e72237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d993fbcc-8965-4ead-afad-eacc61e547b5",
        "cursor": {
          "ref": "ce3127ae-d313-4e53-a36d-9e9546d8a54e",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9a454e2b-feee-4f81-953a-98f88d37cc4b"
        },
        "item": {
          "id": "d993fbcc-8965-4ead-afad-eacc61e547b5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ec727b57-5bd3-40e5-b4b7-57c1816a7dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f8b087-ab93-4623-9fb2-e6a46147ed7f",
        "cursor": {
          "ref": "565f86ae-9dec-4252-a24f-618715353321",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ab08844d-64ce-4306-a571-9aea3ab0e59c"
        },
        "item": {
          "id": "a7f8b087-ab93-4623-9fb2-e6a46147ed7f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "25eec45f-84f7-45f9-a2ef-99f636c0e5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeadeaed-a029-4b53-a873-0e4aa216b79a",
        "cursor": {
          "ref": "e700b48a-95c2-440b-b7b5-35442e0fe080",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5c8f6bfb-9336-4676-aee0-28deef274a35"
        },
        "item": {
          "id": "aeadeaed-a029-4b53-a873-0e4aa216b79a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6556dcdb-9591-49c4-ab00-266d803b109d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5413112-7738-4b94-8f45-55589b846eb2",
        "cursor": {
          "ref": "95f6bc5f-3073-4004-9f86-f7d5d2d8643a",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "35bd1bdb-71e6-49f6-a687-ce2058a6917d"
        },
        "item": {
          "id": "c5413112-7738-4b94-8f45-55589b846eb2",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "01abba3c-0122-4e25-8628-265c7e53e555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a94bb72-a8b2-44cf-88f9-545630e193df",
        "cursor": {
          "ref": "10d42e99-c28c-481b-801d-1bf210bb3914",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "bc74ba3a-71d2-448b-8724-1b861fd46bdf"
        },
        "item": {
          "id": "0a94bb72-a8b2-44cf-88f9-545630e193df",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "20ac5920-73c4-4007-b376-10a5cffa7379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70034422-707b-40c1-a35a-0a65c147e062",
        "cursor": {
          "ref": "f5df2560-ed3f-4f7a-993c-0a3f9d76d637",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a9d9a257-0b2a-4227-9d38-42969f002f66"
        },
        "item": {
          "id": "70034422-707b-40c1-a35a-0a65c147e062",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7ec96c75-5406-4319-86da-6d6995ffe8d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf3e524-d3a4-47ab-b9f4-026a5fa117e1",
        "cursor": {
          "ref": "c2ecb807-61f0-4b21-82a2-4304e1532d89",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6a53d6b8-5f20-43d2-af43-f6cb4369abbf"
        },
        "item": {
          "id": "3bf3e524-d3a4-47ab-b9f4-026a5fa117e1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "59c7157a-8a72-4f73-b969-d3f080c2ee2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5fbe25-7c4f-4c3f-b637-d19b98f72d92",
        "cursor": {
          "ref": "bb726e8e-e0b1-4ad0-9321-e2bca4547f63",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4f62f00b-b2f9-4e04-84ac-0d786621ccdc"
        },
        "item": {
          "id": "fd5fbe25-7c4f-4c3f-b637-d19b98f72d92",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "75b593a5-7a38-4066-8ac6-53bc4415d57f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe53c623-fee0-44da-825f-8fa259c431f1",
        "cursor": {
          "ref": "c307e180-6eb4-40dd-aa10-7c09e7e88f7c",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d4586261-ebe4-4743-a15a-c484627e796a"
        },
        "item": {
          "id": "fe53c623-fee0-44da-825f-8fa259c431f1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "fe650f41-bdc3-43fd-b6ca-21c0f189ac1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fbc299-0d90-4658-be37-71daa7e08cf8",
        "cursor": {
          "ref": "eafbc5dd-2ce8-4329-ab3b-4a44a6b2dd87",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9735787d-71d6-41d7-b070-fbdcba65d04d"
        },
        "item": {
          "id": "55fbc299-0d90-4658-be37-71daa7e08cf8",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "1c1c9e81-beef-449e-a440-44addc2263be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f82f44-4f14-4867-a8e7-a00a5efbe064",
        "cursor": {
          "ref": "a85754f4-48e5-4157-976c-922b4155dcd5",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "4e121f7c-6351-4756-9cd1-c41ad60bc99e"
        },
        "item": {
          "id": "c7f82f44-4f14-4867-a8e7-a00a5efbe064",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a00b732c-dc1c-4ead-9f9c-49a600671cfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7520e0ac-a538-4cf0-bb7a-23d47cf380c0",
        "cursor": {
          "ref": "f64cd6e3-aa57-4a0b-901c-5fafc229ab9c",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a7f51901-22cf-4fe5-ae7d-647c40cc08c7"
        },
        "item": {
          "id": "7520e0ac-a538-4cf0-bb7a-23d47cf380c0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4bc91b09-d7a1-4695-8c7d-caf5362c8acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df94d2b6-23b9-49d6-b670-0fbcb115ce40",
        "cursor": {
          "ref": "38b15187-544d-40cc-b08a-8287fc6f2de7",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "22666030-317e-444e-8294-a9294abe64c0"
        },
        "item": {
          "id": "df94d2b6-23b9-49d6-b670-0fbcb115ce40",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "078cbf1f-38e0-48e9-b789-9fdf5f4d0fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbd5ac6-c19c-48b8-91d8-37ac257e2954",
        "cursor": {
          "ref": "40bb0449-f98b-4783-991e-55e41fd01e17",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "55422bbf-bd4e-4561-a2d8-a8aae4768182"
        },
        "item": {
          "id": "fdbd5ac6-c19c-48b8-91d8-37ac257e2954",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9038531b-9a49-46f3-99ef-6ae3535e88b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a5a8be-c0b9-4b51-ae07-a70e2abad760",
        "cursor": {
          "ref": "823db187-be01-4b0e-b125-07bd1e8dfc41",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "88cb1df0-a40a-4ec6-a21e-324a91fa4902"
        },
        "item": {
          "id": "67a5a8be-c0b9-4b51-ae07-a70e2abad760",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "20936cec-8683-4379-9c99-3902db9388e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b563a0-8644-4092-82f7-2321fbacde28",
        "cursor": {
          "ref": "f299bbb5-82dd-481a-b663-06505847d1b0",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "64f43133-9327-4c98-9adc-986af1703841"
        },
        "item": {
          "id": "62b563a0-8644-4092-82f7-2321fbacde28",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "94c40cb9-f2e4-4181-9239-90ef6ec9c7bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11407d6e-071c-46d5-a28f-826a32895790",
        "cursor": {
          "ref": "b5fe90e7-53f5-4a66-8de9-0aae0180f67f",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0fb30c89-0a28-4c4d-ac90-47b08f085a87"
        },
        "item": {
          "id": "11407d6e-071c-46d5-a28f-826a32895790",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "73499cc8-9b94-4e9d-a5ba-fcbe586dc58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b356dc-d90d-45c0-874c-31feed4e33f1",
        "cursor": {
          "ref": "b6853c13-e8a3-4f28-bdab-817ba42db83a",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e928a04d-5f9f-4054-b4a6-c57ae6f0c95e"
        },
        "item": {
          "id": "92b356dc-d90d-45c0-874c-31feed4e33f1",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "83de707b-28b3-4a3b-b69b-a0a81d4585ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b27e909-983c-4958-941a-3a4ee87c9e6a",
        "cursor": {
          "ref": "25c45690-4c6b-4064-9113-00df75ea588e",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f7f1769d-3f65-423e-8b5e-b24b5502f425"
        },
        "item": {
          "id": "8b27e909-983c-4958-941a-3a4ee87c9e6a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d2fae968-100c-4a59-b44e-3b531ef9eb09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad88abd-0346-481f-b386-228d76fbca7d",
        "cursor": {
          "ref": "7dda1d10-30de-40cd-932f-64d738109a57",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8f7c892d-5c89-498f-8187-0e140a99f3ef"
        },
        "item": {
          "id": "dad88abd-0346-481f-b386-228d76fbca7d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d56ce72e-b3cc-4f7f-a4f8-aeed75e63ab3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "db814f57-f43e-4f2b-839c-07bc48929d9b",
        "cursor": {
          "ref": "0155acf8-6fc4-4d00-a07c-88d9f9eb73e6",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e66068dc-ff52-46ee-ada8-1dce249842c3"
        },
        "item": {
          "id": "db814f57-f43e-4f2b-839c-07bc48929d9b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4c7fa54f-cca1-4466-bb1c-223a42cc333c",
          "status": "Created",
          "code": 201,
          "responseTime": 2061,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "acd938b6-ecf4-4fa9-a319-7b40f903e218",
        "cursor": {
          "ref": "2c6808c8-ac16-4dfd-be74-9f0b8f5deaaf",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e7250132-a40e-4eb4-b3b9-ebd638c7d0fe"
        },
        "item": {
          "id": "acd938b6-ecf4-4fa9-a319-7b40f903e218",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a443c449-5d27-4354-80e2-575966541a81",
          "status": "Created",
          "code": 201,
          "responseTime": 3024,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1ef934-c822-4c0b-8d69-fda52d7a0f51",
        "cursor": {
          "ref": "0d532147-976a-47cf-ac39-dfe595e6362d",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "132484d0-7c40-4afd-9274-783ab331672e"
        },
        "item": {
          "id": "fd1ef934-c822-4c0b-8d69-fda52d7a0f51",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "c885d38a-6f7d-4a22-8982-838f0214705c",
          "status": "Created",
          "code": 201,
          "responseTime": 2379,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f407dd5-ebc8-42b2-b23c-498ec357346a",
        "cursor": {
          "ref": "a0af9bc9-9d4b-4bf3-ba48-3985c40114f2",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9d7d7716-03df-4f37-9b4c-88cb65b3c654"
        },
        "item": {
          "id": "2f407dd5-ebc8-42b2-b23c-498ec357346a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "342acc5e-67ba-4052-b45f-dc4fe8a8caba",
          "status": "Created",
          "code": 201,
          "responseTime": 2812,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d7f19b-8435-4080-aa82-a60df50ab7ad",
        "cursor": {
          "ref": "ea95bb30-3a99-4bcf-86a7-669679d7ad96",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6c0ca481-7d6b-4622-8095-d768e2873679"
        },
        "item": {
          "id": "90d7f19b-8435-4080-aa82-a60df50ab7ad",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bdcffff0-61fc-48d3-97bc-eed25dc64b16",
          "status": "Created",
          "code": 201,
          "responseTime": 2602,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab11f31-2aea-4b6f-9467-a452aa1040c3",
        "cursor": {
          "ref": "6f81ba5d-6877-4b7d-ac1d-9430543e6d77",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bd4e0384-4ef3-4f68-8314-6e7666ae0e20"
        },
        "item": {
          "id": "3ab11f31-2aea-4b6f-9467-a452aa1040c3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "555936d2-7006-4a03-a90a-e040f5aa4801",
          "status": "Created",
          "code": 201,
          "responseTime": 2406,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-11T00:38:08Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-11T00:38:08Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "35a311d4-e96b-48e8-9926-5bc3ab308ba3",
        "cursor": {
          "ref": "eee27a33-87df-4f32-8275-7de66576d96e",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c34e14a5-a411-4504-b5ec-cefd98900b37"
        },
        "item": {
          "id": "35a311d4-e96b-48e8-9926-5bc3ab308ba3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "be04eb02-968e-47e6-9580-5fd562b25066",
          "status": "Created",
          "code": 201,
          "responseTime": 2522,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28494ce4-0735-47c7-ab4a-4870fb5298e3",
        "cursor": {
          "ref": "25a7ee86-7487-452a-8745-7e7e419ad9ee",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a5ae9a87-fd75-4625-9eef-f39dfb78a1c4"
        },
        "item": {
          "id": "28494ce4-0735-47c7-ab4a-4870fb5298e3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "09193ddc-c603-4948-a6cc-fac86edf052d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28494ce4-0735-47c7-ab4a-4870fb5298e3",
        "cursor": {
          "ref": "25a7ee86-7487-452a-8745-7e7e419ad9ee",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a5ae9a87-fd75-4625-9eef-f39dfb78a1c4"
        },
        "item": {
          "id": "28494ce4-0735-47c7-ab4a-4870fb5298e3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "09193ddc-c603-4948-a6cc-fac86edf052d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ac97a8-452a-403b-b5ff-e4a0423f2f34",
        "cursor": {
          "ref": "a9f6f905-8838-444e-8e9a-9af35de08269",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4bfca92a-3b0c-4da0-b29e-f746820cd388"
        },
        "item": {
          "id": "94ac97a8-452a-403b-b5ff-e4a0423f2f34",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b48d388f-0574-4f18-9321-18a139d85fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cefe0a04-f93f-431c-a056-169036636369",
        "cursor": {
          "ref": "aaf8c7cd-db66-4f04-962d-9f9dbd4370c6",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8fdb2b20-019c-47ee-8c1f-9133102e5294"
        },
        "item": {
          "id": "cefe0a04-f93f-431c-a056-169036636369",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "46527e73-2f2e-40eb-8252-c1e83151fd54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3d2718-81ea-43ed-b15d-97c77718664b",
        "cursor": {
          "ref": "ebf0aae2-336c-4e41-9980-b2affb289aca",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "474e19dd-ad36-455f-adab-8f47caaae1cd"
        },
        "item": {
          "id": "5b3d2718-81ea-43ed-b15d-97c77718664b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "09ce23bb-3969-4f15-b9d3-255533625e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c94de35-f992-41ee-8592-63b517e24758",
        "cursor": {
          "ref": "b6831c31-283d-468b-8ab3-ec33d5da6f87",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a31f7c10-0467-46d9-af12-c29476991ca8"
        },
        "item": {
          "id": "9c94de35-f992-41ee-8592-63b517e24758",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "29ddb6b1-aaa5-41ee-ace6-12a4ad84429a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74d63c7-0e09-4c62-8dfc-39f5f858cf7d",
        "cursor": {
          "ref": "55c79f60-a5a8-479c-877f-c3d78c838ac3",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "bb082291-b321-4198-9944-c7ad0be7811c"
        },
        "item": {
          "id": "c74d63c7-0e09-4c62-8dfc-39f5f858cf7d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f4c1be9d-4328-46d2-b9a0-e340c27c3dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f4a810-a38c-4ca7-a73b-0613e346c130",
        "cursor": {
          "ref": "33043b71-d4e3-40ec-98ae-fc7596d8bdbd",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "14444c56-5253-42cf-b684-6d4a5b4ad3fc"
        },
        "item": {
          "id": "56f4a810-a38c-4ca7-a73b-0613e346c130",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f810ad36-ae60-4dd3-b1ac-8fbe16130d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc1d8cb-6a7a-4d3d-97ff-de5b16f705aa",
        "cursor": {
          "ref": "2593b357-399f-45b2-8883-65314de30789",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f912e710-a878-4296-9953-25cd6f084cf5"
        },
        "item": {
          "id": "abc1d8cb-6a7a-4d3d-97ff-de5b16f705aa",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1a4581a0-2c5c-4e9a-b5ac-6e708a1e0df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3194c693-1928-4ca9-b7be-a059f69192c8",
        "cursor": {
          "ref": "ad9943fd-1edf-4e8b-b0e3-94b8f89d47a4",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "daacbb29-cf1b-41b9-b652-1aff938ee94c"
        },
        "item": {
          "id": "3194c693-1928-4ca9-b7be-a059f69192c8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a41b843c-f47c-4d95-b971-872b8ffaff3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58557aeb-ab20-4be5-b795-4ce33efd5801",
        "cursor": {
          "ref": "ec1a0a8f-2b95-4064-96a8-1299f1230f67",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "beb3e1a0-6227-432f-a3c8-cf8cd2253b3d"
        },
        "item": {
          "id": "58557aeb-ab20-4be5-b795-4ce33efd5801",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2419406c-bbf2-41b0-a34a-3b0b72f6b57b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "614e5cec-6b20-4146-8304-c9f46edea00a",
        "cursor": {
          "ref": "071ef52d-e1a8-4074-b7cb-b10ccdfcb4bf",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3c2c81f7-d225-4511-8de4-2f1ef1dfd514"
        },
        "item": {
          "id": "614e5cec-6b20-4146-8304-c9f46edea00a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f6d8474b-7c28-4364-8258-5eff3049eadc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0184b434-473c-4e7e-b574-8794c159bfbd",
        "cursor": {
          "ref": "67963c4d-fefb-4b0c-8a79-67cb44a851eb",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "520c3675-bc06-4491-ba72-4988c9e84200"
        },
        "item": {
          "id": "0184b434-473c-4e7e-b574-8794c159bfbd",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d0b167e1-4c7d-49d2-8b53-9e7b9a69615b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9326a234-821b-446f-986d-82607028b3eb",
        "cursor": {
          "ref": "6c7ac3b9-1971-47c7-80a4-b335893990b0",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b26f14b2-b198-41b9-bbad-e12c9d24d239"
        },
        "item": {
          "id": "9326a234-821b-446f-986d-82607028b3eb",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e987999b-97df-4001-a773-28eea2da21e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741868df-b68a-4a66-b850-97663faafec2",
        "cursor": {
          "ref": "5fad368c-07bc-4514-b353-39450d671512",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6a6356c5-c385-42b4-b619-dbabdab09bf7"
        },
        "item": {
          "id": "741868df-b68a-4a66-b850-97663faafec2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "50199960-b816-45f7-9dd7-7991035b231b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31fdae3b-ef59-40eb-9db5-68cf336e1994",
        "cursor": {
          "ref": "95601a14-4e32-43bc-9b97-bb053dac0c51",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "eb79edc7-79b3-4f64-889c-82a177778666"
        },
        "item": {
          "id": "31fdae3b-ef59-40eb-9db5-68cf336e1994",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e104ef21-156a-488a-9306-072c04431ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf2e356-c3dc-48b8-8843-6be9ba830fe5",
        "cursor": {
          "ref": "88c4951e-4470-4bc5-9278-412ff541038f",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d143390f-9b8e-44fc-965d-20f920935326"
        },
        "item": {
          "id": "6cf2e356-c3dc-48b8-8843-6be9ba830fe5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c4978d58-115f-4dda-b8b8-e21cef946c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae5e4e3f-8f1b-48c5-8d97-450913128c5e",
        "cursor": {
          "ref": "e52e9535-b1af-46e9-adb9-134d1ee14778",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6d95d273-377a-40e9-b985-e438f5f8aede"
        },
        "item": {
          "id": "ae5e4e3f-8f1b-48c5-8d97-450913128c5e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c768c524-6f7f-4a3f-bdb9-175c5842487e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f87023e3-6da7-49f0-8d1e-6b0807afcf34",
        "cursor": {
          "ref": "7264eeee-ad9a-48eb-afa3-8f2a2ccb385d",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bffa6e1f-20aa-48e2-afdb-84a5dbeab361"
        },
        "item": {
          "id": "f87023e3-6da7-49f0-8d1e-6b0807afcf34",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b9260d5b-a444-4430-9c03-ff38b31db046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0631f2e-c9d8-44cd-9d43-e4e9d9931e76",
        "cursor": {
          "ref": "74e2aa11-4b1f-4a62-9c0e-003f430ccd3d",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6cc564e9-6237-4e31-9e3e-8005f6980280"
        },
        "item": {
          "id": "d0631f2e-c9d8-44cd-9d43-e4e9d9931e76",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3768b84f-9909-419b-b1bf-5769f5da302c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60846295-de22-4bb2-a66e-9058cdc0eef9",
        "cursor": {
          "ref": "20f5b1e5-d6a0-4f07-9986-118765e8d790",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "94f35185-c89f-4bb5-a532-e7f107d48533"
        },
        "item": {
          "id": "60846295-de22-4bb2-a66e-9058cdc0eef9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0dcfea32-77c5-4a58-8de8-8b880b8f3b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d155c151-ffbb-4f93-9508-ebaebb935427",
        "cursor": {
          "ref": "bcb98fd2-c930-4b36-b6bf-394c317f9a8b",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "340740d9-9750-4b5b-af8e-b5be79fb4d64"
        },
        "item": {
          "id": "d155c151-ffbb-4f93-9508-ebaebb935427",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "97be96bc-c85b-40b3-949f-524345c72c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a8fdca-70a9-4940-8598-e8ca95b768ac",
        "cursor": {
          "ref": "d7f4df6b-7d94-473f-8a2c-5a4791b14294",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "87207b88-5e3b-4a09-af05-6c2857756fd1"
        },
        "item": {
          "id": "f9a8fdca-70a9-4940-8598-e8ca95b768ac",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b5fc9f3e-3a9d-4a57-ac04-f75b497536e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f99e9b-37ac-441f-96ef-66e6645d1b76",
        "cursor": {
          "ref": "00234405-035f-4489-9a1f-31ad4f169c59",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4498e491-b0f4-483c-a8d8-96f2ff91595e"
        },
        "item": {
          "id": "b6f99e9b-37ac-441f-96ef-66e6645d1b76",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b9d20689-f748-4009-8ae6-5de2dc3cad48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05e9eaa-4409-447d-8059-2b0743367e9a",
        "cursor": {
          "ref": "54b2b8fc-dde6-4bbc-88df-df678e47ad5d",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3f8467c3-cc8a-47bd-8e34-0e3dba58cdd8"
        },
        "item": {
          "id": "e05e9eaa-4409-447d-8059-2b0743367e9a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c41e1427-6a6c-4aa0-83f6-08be2859dffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94e9b37-6595-452d-b3ec-0ab65c2e010a",
        "cursor": {
          "ref": "fb82479e-7a9f-458c-9b70-f09f443247ea",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0f3fed4c-340e-479f-bcbe-9bf9d8aeb7c7"
        },
        "item": {
          "id": "e94e9b37-6595-452d-b3ec-0ab65c2e010a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e7c1636c-92c3-4f4f-8611-d28119c86e16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "accf3f3d-3edd-4d5a-80eb-2a0204561418",
        "cursor": {
          "ref": "6f3b994a-5593-4711-bfa2-8d69a33eafe1",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "85c08529-5e90-4f53-898a-9dfedce68381"
        },
        "item": {
          "id": "accf3f3d-3edd-4d5a-80eb-2a0204561418",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "78a91426-1259-4df8-992b-a8b18a9f9227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f26924-25f0-4335-bd14-82302808bbdf",
        "cursor": {
          "ref": "c13d0625-3f9a-4c78-8e3b-4367acc9f056",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a70b5bf9-a540-4e72-a4b0-18bb5ae4f176"
        },
        "item": {
          "id": "18f26924-25f0-4335-bd14-82302808bbdf",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d455db80-2cb8-48ed-9938-0bdfd76a38ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "841de8cd-c0b0-43c6-a501-0effcdec9e0d",
        "cursor": {
          "ref": "b098aa99-0bea-41e0-a48b-7d8b5aa8c466",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a5bde977-b093-4321-aabf-ea64d11bdb69"
        },
        "item": {
          "id": "841de8cd-c0b0-43c6-a501-0effcdec9e0d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "391889ff-2acf-4be4-8331-e70d6cf5787a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a751d6-6c6d-4e81-9229-05dc5c0ae064",
        "cursor": {
          "ref": "40edc390-56e0-4eea-b66c-2f1e06b7d90e",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "79a094d5-513f-4922-b3ec-c11e6ce8486c"
        },
        "item": {
          "id": "99a751d6-6c6d-4e81-9229-05dc5c0ae064",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3fa4b397-2b42-4cf7-9c4c-d873775c5b45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "744f3988-99ac-4164-89b4-69958927586d",
        "cursor": {
          "ref": "cd8d94a3-28c8-4ef1-8555-b968c1d1d495",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1bdbe7ad-d2cd-481e-ba13-f1065fabc705"
        },
        "item": {
          "id": "744f3988-99ac-4164-89b4-69958927586d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3e067c80-2555-4428-a07f-286f1657f1a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cfeb486-52fd-4f66-9d6a-7996f311d854",
        "cursor": {
          "ref": "8182ed41-0216-481d-b5d7-bf32fd8c1f2e",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e2227725-d445-426f-ac91-a6f80401a47e"
        },
        "item": {
          "id": "1cfeb486-52fd-4f66-9d6a-7996f311d854",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b44ba18e-11cc-4e74-bf59-9ff880c3a16d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ffb5f7-8685-4146-8423-ce34275b93cf",
        "cursor": {
          "ref": "9e7144e4-5d6b-40d9-a1a0-84872c8f4eef",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3f81c268-390f-4b60-96c2-0415b4eab51c"
        },
        "item": {
          "id": "c4ffb5f7-8685-4146-8423-ce34275b93cf",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4f2a8315-ceb5-4d25-9c29-066f559daaf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aee7bea-a0d7-41b4-a991-e83333fc64f2",
        "cursor": {
          "ref": "8c5eb4e2-b7ff-4ad0-8f8f-9666dee25570",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7f8b6a5e-eac4-4087-8d38-f7de65530e64"
        },
        "item": {
          "id": "2aee7bea-a0d7-41b4-a991-e83333fc64f2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "021fc1c3-58b8-4805-99d5-4c993a3ee4a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "6e741c40-c127-4387-bcae-38d396984e18",
        "cursor": {
          "ref": "09f3f7f2-73ad-44db-a00e-b07a5682631f",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c967817c-f172-45f8-abad-a5db57d87cd1"
        },
        "item": {
          "id": "6e741c40-c127-4387-bcae-38d396984e18",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "98d3c725-6b6a-4625-9e22-17560fc7350f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "76703310-6e3a-491a-97a7-9cfb28b3f2ca",
        "cursor": {
          "ref": "1e804f27-aaca-49bd-9d25-c389d13a4b96",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ba27a210-bc60-458c-92bb-39cba90e6868"
        },
        "item": {
          "id": "76703310-6e3a-491a-97a7-9cfb28b3f2ca",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "41f8315e-ed10-4c5e-851b-dea423a7fdda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76703310-6e3a-491a-97a7-9cfb28b3f2ca",
        "cursor": {
          "ref": "1e804f27-aaca-49bd-9d25-c389d13a4b96",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ba27a210-bc60-458c-92bb-39cba90e6868"
        },
        "item": {
          "id": "76703310-6e3a-491a-97a7-9cfb28b3f2ca",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "41f8315e-ed10-4c5e-851b-dea423a7fdda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "292018ee-a14c-4d2f-9932-b08c59b4657c",
        "cursor": {
          "ref": "d26519c1-08c4-4e5b-9cd6-5fa8f5fcd676",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "695f61c0-5e7c-4601-9f13-dd0bfaed9853"
        },
        "item": {
          "id": "292018ee-a14c-4d2f-9932-b08c59b4657c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "85bb6bda-383d-473c-bd43-bd8311514ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5df6c7-bfbb-449a-a020-164f8bfb0598",
        "cursor": {
          "ref": "fdd6f5d5-0e32-4fe9-8e4f-160339239c76",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d7069f44-c714-4cf2-a14e-651d9ef19f42"
        },
        "item": {
          "id": "eb5df6c7-bfbb-449a-a020-164f8bfb0598",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "29608fcf-6af5-464e-87cf-018bcf8c4d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15aa325-14ac-4fd8-aef5-86ce18c2c1d2",
        "cursor": {
          "ref": "c892f1fc-6a48-402b-821e-257114430a46",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "fd3458b1-e443-4a5e-83b7-ba6ddbb6a5b3"
        },
        "item": {
          "id": "c15aa325-14ac-4fd8-aef5-86ce18c2c1d2",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "44b1600e-c6c6-4c62-bd0e-72751eb34c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5740fd8a-f263-4982-9d4e-d379e7bba5c2",
        "cursor": {
          "ref": "a15c0279-a233-4976-87df-b7055adb6efb",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "7a479cfd-1c06-493c-b397-3670570fbbbf"
        },
        "item": {
          "id": "5740fd8a-f263-4982-9d4e-d379e7bba5c2",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "78d68c26-38ac-42f8-84f0-223c501f4259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31fe23e-07bd-4f1e-8a56-b7ff13fcbb55",
        "cursor": {
          "ref": "61976172-a8d8-41b9-8117-4b176819beb0",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "688fb52b-347e-4d16-bab0-7236d5b79a7f"
        },
        "item": {
          "id": "a31fe23e-07bd-4f1e-8a56-b7ff13fcbb55",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "778180cd-fbfe-4fce-989e-e6b0ea6e1a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0c45ca-7caf-44d2-8419-975879cd9c4c",
        "cursor": {
          "ref": "07f7053c-bd22-47de-975a-90581f9458f7",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "53c651d4-4a2f-4c51-8b32-1f47b5889785"
        },
        "item": {
          "id": "1a0c45ca-7caf-44d2-8419-975879cd9c4c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "077ca649-ab15-4111-a224-23c4a9571056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96c164d7-16df-4808-9ac0-1b8bd69473c0",
        "cursor": {
          "ref": "3f231997-a341-4720-9bb5-9a1b6f41c314",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d87645fb-2598-4eca-9dbc-f98dd802afb3"
        },
        "item": {
          "id": "96c164d7-16df-4808-9ac0-1b8bd69473c0",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d750e423-39cb-4ae7-a254-1ec79b9a78b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fb326ba-eb63-4cea-a020-57707818ab19",
        "cursor": {
          "ref": "5aab8030-4d12-47c9-a760-261c2aa4b3ad",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8eb73747-ff64-456c-a52d-9084492c444f"
        },
        "item": {
          "id": "4fb326ba-eb63-4cea-a020-57707818ab19",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "65e8b16b-082e-453b-8559-da539080cdaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4c93e4-fc1b-4121-9ed4-befebc97399c",
        "cursor": {
          "ref": "7e1f939c-daf2-4e6e-9cd9-17244d902a27",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c048d843-fd9c-491e-9e85-f0f82e096166"
        },
        "item": {
          "id": "be4c93e4-fc1b-4121-9ed4-befebc97399c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "24736fc2-afe4-433b-9ce9-f59041934ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1904a005-450d-4f76-b7b6-5b626258bf54",
        "cursor": {
          "ref": "69aa3992-a019-4b16-8116-8c56b5735100",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9925aceb-c400-4411-af14-dc5bda0afc6a"
        },
        "item": {
          "id": "1904a005-450d-4f76-b7b6-5b626258bf54",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3c22c935-97cf-47b4-93c7-c594184696c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ce96c6-cc6f-4302-a0c1-52ca7e4c5532",
        "cursor": {
          "ref": "dab1b3ee-d5c6-4151-b286-2395307a76db",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "bea280bb-7b0f-47f9-ade1-cf46bfab456d"
        },
        "item": {
          "id": "67ce96c6-cc6f-4302-a0c1-52ca7e4c5532",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "61262da7-6039-4f3a-97ef-2a5dc075d9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf2646e-2aaa-4ec0-96d3-a3cb06c4de30",
        "cursor": {
          "ref": "8e4f13cd-85f1-4582-a7fa-e23db45394a3",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a02bfc11-8019-404f-9533-5e5e6a31773e"
        },
        "item": {
          "id": "3cf2646e-2aaa-4ec0-96d3-a3cb06c4de30",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f2b633b0-6054-408e-b825-20ed27d0a9cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cea6143-6e62-4348-8334-c0fa9baae31b",
        "cursor": {
          "ref": "9bd1a7ed-2698-47a6-8aaa-6f41024ce55d",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f2c0a983-604f-4375-aa95-bfadaa949665"
        },
        "item": {
          "id": "2cea6143-6e62-4348-8334-c0fa9baae31b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b622a5aa-55c2-472c-9db5-97de3fd366be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a40a39-9a7a-4ec6-9502-10e944097566",
        "cursor": {
          "ref": "8a84fca9-fabc-4990-985f-94672ef90254",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4a36c640-7544-4fb6-bbed-112f250fe915"
        },
        "item": {
          "id": "d5a40a39-9a7a-4ec6-9502-10e944097566",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "44227309-edc4-4ad9-8ff9-c0bfab6896e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57e0d41-8f37-4967-bb56-9d85ea6f914f",
        "cursor": {
          "ref": "82a65c3d-e309-47d7-b81f-960597985442",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9d8c4d71-3095-4645-a1bd-50cfad56e909"
        },
        "item": {
          "id": "f57e0d41-8f37-4967-bb56-9d85ea6f914f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4ac022fb-0ae9-4989-8a30-c16f8fb4203b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34174d82-b26e-40ae-b30a-3f1a15bfd7ac",
        "cursor": {
          "ref": "ba689ab0-0a19-4603-ab7a-409810a47f13",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "233c8439-4198-410f-8a04-05db0ea17a89"
        },
        "item": {
          "id": "34174d82-b26e-40ae-b30a-3f1a15bfd7ac",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "868835ab-b57f-4509-ba53-da19b6a2fe34",
          "status": "OK",
          "code": 200,
          "responseTime": 199,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "66b75582-3276-4163-b1c7-277948f7e469",
        "cursor": {
          "ref": "6bea033c-c442-46f0-8292-eaad343343cb",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4c8b0ea8-561d-4d6b-8d6a-3932f733deaa"
        },
        "item": {
          "id": "66b75582-3276-4163-b1c7-277948f7e469",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "92d6338f-864f-4231-9494-b2034baa6069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca307c8-dcde-43d7-9acc-9ef9ff6d8109",
        "cursor": {
          "ref": "3d1cfac9-16d6-4129-ace8-fc8223028548",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "77eaef9f-bfe9-481b-91a2-dab53b08368b"
        },
        "item": {
          "id": "4ca307c8-dcde-43d7-9acc-9ef9ff6d8109",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ec39d3f2-c400-48d7-be95-d67e2e5d147d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47aee430-c352-4c72-9ca6-707d5f8f130f",
        "cursor": {
          "ref": "a6a3870b-67fc-4e5d-810a-ae4380deae6d",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "da11f5ef-8333-4aae-8091-154b7bace85d"
        },
        "item": {
          "id": "47aee430-c352-4c72-9ca6-707d5f8f130f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3d17d27e-1d77-4973-92f6-2d882cb98c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d1bdaa-f787-4e72-b0f3-87fb37ce582e",
        "cursor": {
          "ref": "511c1309-8d60-4a03-a84b-6542c60c1634",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "499a6b96-74b2-42dd-bf9a-14379db4da2b"
        },
        "item": {
          "id": "08d1bdaa-f787-4e72-b0f3-87fb37ce582e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7193dcf8-b6fa-4e2b-a3ac-0a587e823a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d699b658-9b23-4a80-90e4-d104737413f5",
        "cursor": {
          "ref": "c567297f-b76e-444b-aecf-f6daea86ad57",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a08fec48-d400-4b7c-b2f1-5431e863737c"
        },
        "item": {
          "id": "d699b658-9b23-4a80-90e4-d104737413f5",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a8586817-d3b4-458b-a8f5-3b33b065131d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37b60cdd-8d1a-4f18-ba07-5881ef0c1b4a",
        "cursor": {
          "ref": "1723bfa7-77e9-4133-bbd2-925348a5e585",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2d79229b-3ef9-4e40-b47d-1e6f1d821a55"
        },
        "item": {
          "id": "37b60cdd-8d1a-4f18-ba07-5881ef0c1b4a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a14d9428-5e4b-448a-b277-97bcef6bf96f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fafe376-7bde-43de-9181-45b8ef1b4f1a",
        "cursor": {
          "ref": "9e8aa50e-1b7f-4253-a100-ec7936b7010e",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "885ebdbf-b5b9-4e5c-aec2-0c148cd4a500"
        },
        "item": {
          "id": "5fafe376-7bde-43de-9181-45b8ef1b4f1a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8dde8065-18da-4b8b-8a29-33da663569c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7883c300-cba4-4376-902b-e08f58600d12",
        "cursor": {
          "ref": "945a1dc7-4a60-49d6-9421-756ba677f14b",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8d33fa54-e090-42e5-918d-330e030b672d"
        },
        "item": {
          "id": "7883c300-cba4-4376-902b-e08f58600d12",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d33992e7-9326-46df-9203-cfaf802f8c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab6b18d-c65f-460b-8b0b-103c9d2fb3a7",
        "cursor": {
          "ref": "b520f53f-75f6-4b6e-9487-b7028cc44ab6",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2134aed5-473c-4d1a-a752-c42dfd710ab5"
        },
        "item": {
          "id": "6ab6b18d-c65f-460b-8b0b-103c9d2fb3a7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b0fc55f9-bf50-41db-bb53-c81b4e9eed56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5be61b-6d84-4e32-82e8-c57f0481e80d",
        "cursor": {
          "ref": "ffa118a2-6e27-4ac6-a9e9-4e47d05a9342",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "495b2e00-68ee-4a9e-978e-bf34abb21758"
        },
        "item": {
          "id": "2f5be61b-6d84-4e32-82e8-c57f0481e80d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c5489c4e-fd9e-478e-82ef-04ee6e3b2e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c4dbdc-b635-4a3f-8b50-12be5109d8a1",
        "cursor": {
          "ref": "bec85341-b3d8-4e0a-a06e-182fd6324fee",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "206f2947-3f36-43dc-993c-f6f012b3ea90"
        },
        "item": {
          "id": "48c4dbdc-b635-4a3f-8b50-12be5109d8a1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8424cb33-a91f-468d-80dd-22546972709c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76d8b64-28da-4db0-9e7f-22de9ad52cdf",
        "cursor": {
          "ref": "d2151469-0298-469d-8690-e73a2c13c6f4",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1351c400-c807-4f53-a63e-ce5a68983b9e"
        },
        "item": {
          "id": "a76d8b64-28da-4db0-9e7f-22de9ad52cdf",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5dff7f8f-ce20-46ca-94a0-8179fc6b49aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f1dc36-117d-4308-9aa5-ff028ddf4205",
        "cursor": {
          "ref": "93658935-1b07-425e-94ba-87ad9e471da5",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8aa451c9-802c-4628-83de-b98bf7996854"
        },
        "item": {
          "id": "13f1dc36-117d-4308-9aa5-ff028ddf4205",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "39c12fd3-329d-4a55-9d5b-30e670ac3799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad82fe67-0ee4-415f-88c3-dcd7cf0f5c6e",
        "cursor": {
          "ref": "e09641c0-edba-4bc2-9b81-6f8f8cb5f474",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "62118f3c-4d19-479c-94b9-8df75f69e8ce"
        },
        "item": {
          "id": "ad82fe67-0ee4-415f-88c3-dcd7cf0f5c6e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "05fbbe60-df82-4b42-b1dd-064593d77be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba797ccc-1514-461f-b227-b9ed912b7c46",
        "cursor": {
          "ref": "5e4ea14d-94e6-4c1b-b53b-c4366ec5d454",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "448b6a56-ef57-480f-8de4-435374659e7a"
        },
        "item": {
          "id": "ba797ccc-1514-461f-b227-b9ed912b7c46",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4847048f-70cb-464e-8d0d-2533d2f8f92a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2af06a-9e73-4d2b-bdae-c86ea3032994",
        "cursor": {
          "ref": "73d133bb-1f48-4d2a-9a48-70cab931740d",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "652a46ed-4580-4963-b057-b795bb85bc17"
        },
        "item": {
          "id": "9f2af06a-9e73-4d2b-bdae-c86ea3032994",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8f13dd88-1750-4919-85a9-3e3b58d0ec5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046306bc-7432-48cd-9bc9-18b899abc752",
        "cursor": {
          "ref": "925429a8-b8d3-4ee2-9a14-aae21f103cc7",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "44b22b02-60d0-4f62-af27-389a08416eee"
        },
        "item": {
          "id": "046306bc-7432-48cd-9bc9-18b899abc752",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1408af47-3b69-468b-adfb-fcef1da72ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d597899-3f1d-4501-8d2b-90b1a47b8a2c",
        "cursor": {
          "ref": "26e0067e-e994-474c-915a-b162802d990e",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3c1bed70-820e-4cc1-92c7-21d7036bc737"
        },
        "item": {
          "id": "0d597899-3f1d-4501-8d2b-90b1a47b8a2c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "24dd22cc-9e15-45ed-a972-7c33d0f18a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15fc26f9-ebb6-49b0-aaa1-bd2490f2e7f3",
        "cursor": {
          "ref": "31f88374-cbec-4141-9502-140fce3cc0c6",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bd4cbc62-361b-4c09-a794-094ea33b4323"
        },
        "item": {
          "id": "15fc26f9-ebb6-49b0-aaa1-bd2490f2e7f3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ead4043a-247c-4b7d-b4c1-05a60a0d0082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b5ed4f-c119-414e-aaa3-ef15ba4aaae7",
        "cursor": {
          "ref": "a1c4f47b-a772-4928-b397-b67e7bffb668",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a2727c33-cc94-48f2-9cf9-6c6dd17beb79"
        },
        "item": {
          "id": "16b5ed4f-c119-414e-aaa3-ef15ba4aaae7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "bed41372-cadb-47b9-b1b4-f3d1984671e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289e982a-20d1-4992-b73f-dacf8497b75f",
        "cursor": {
          "ref": "ac80ac63-2b67-4116-8556-3957f7ed5ec2",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c064b9e8-e72e-4037-b40f-b16669408c63"
        },
        "item": {
          "id": "289e982a-20d1-4992-b73f-dacf8497b75f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "071d9e16-8302-40a0-87a9-f7849ba6e374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55923e7c-8cfa-4065-9db6-cf1fe78fe8d3",
        "cursor": {
          "ref": "1a0923fc-071f-4e3a-bcaf-a517954149f9",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "30fb2608-3dc4-4c5e-846b-6509cc4b2272"
        },
        "item": {
          "id": "55923e7c-8cfa-4065-9db6-cf1fe78fe8d3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0c871ea1-9724-4f18-b8a7-b129de5e1637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81cc1490-f8ea-4388-b30e-ef225077344d",
        "cursor": {
          "ref": "e85e3ec7-ddbc-41aa-bd2c-3ccb5a9291e4",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "42cbacc0-8bcd-4d59-be53-81cef1e23f1b"
        },
        "item": {
          "id": "81cc1490-f8ea-4388-b30e-ef225077344d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e9efc4a5-2f4c-4847-8352-cae7b2dd1513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1195,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443308e3-b31a-4aba-93b7-5681bdd70d35",
        "cursor": {
          "ref": "c0d0e1a2-1626-4f2d-bf63-a6a030ca11e6",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "16ee2281-694c-4e18-82c6-dffc6a618765"
        },
        "item": {
          "id": "443308e3-b31a-4aba-93b7-5681bdd70d35",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "449d23d6-d498-4bd4-babb-b43cade08199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f352504-646f-4746-82b3-00a3700169a5",
        "cursor": {
          "ref": "5aa08ab3-eb6a-4e53-b108-6421070acc3d",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f69c8f95-7723-4a07-aaee-d5643da24dd6"
        },
        "item": {
          "id": "7f352504-646f-4746-82b3-00a3700169a5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2347829c-ce37-4b1c-ae32-e473ab0d9e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5dbe22-ecaf-473c-92b7-9031cab71249",
        "cursor": {
          "ref": "e3402c23-372c-482d-9eda-987dbd05ab24",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d27b0b6b-2f68-4c6e-a4da-46b008a9644e"
        },
        "item": {
          "id": "6d5dbe22-ecaf-473c-92b7-9031cab71249",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "55c7e1dd-b5ca-4516-be13-4d9ff3f79c1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a764a33e-a3c6-4186-ac70-cc32d6d63390",
        "cursor": {
          "ref": "fcfebf7b-fd63-4fed-a529-a6a5fa1dca57",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "978f2a79-5100-48f0-a0cc-6bdaa3dcf06c"
        },
        "item": {
          "id": "a764a33e-a3c6-4186-ac70-cc32d6d63390",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e3571dea-fde8-4bd2-ad57-28e182c8b227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e868f6c7-c9d5-4e2d-ba89-63f6568f988e",
        "cursor": {
          "ref": "40baae65-2e42-404d-978e-73abbb5a8f94",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f9bb2d90-ec4f-40a4-9053-dd15507bf9e1"
        },
        "item": {
          "id": "e868f6c7-c9d5-4e2d-ba89-63f6568f988e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7be365ac-c35a-4f97-b40e-5c606994bd2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ffdec3-6a96-4304-9b5b-bbe573cf381e",
        "cursor": {
          "ref": "34160978-9098-4b17-a91f-9e226bda5b15",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f4790c7b-e942-443a-854c-6a05096b7c1c"
        },
        "item": {
          "id": "16ffdec3-6a96-4304-9b5b-bbe573cf381e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a471a9a2-7c0d-4b01-837b-1935b7627156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e80a889-e110-47a5-9423-f5734cfbced9",
        "cursor": {
          "ref": "a8c76574-6128-4352-8fcb-aff1209bc2cf",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "95b98282-b48f-4df5-8261-68c98e833080"
        },
        "item": {
          "id": "1e80a889-e110-47a5-9423-f5734cfbced9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "77ddf1da-60d5-47f5-847d-79be5aabd7c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b0a1a0-1185-4c06-aea8-4fb98e409e37",
        "cursor": {
          "ref": "e6243876-b6d9-4993-aa2a-e68246ca449f",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4ba956c2-d004-4b35-8e3b-24e44ee2e61a"
        },
        "item": {
          "id": "89b0a1a0-1185-4c06-aea8-4fb98e409e37",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "53e56ce3-b753-4fd7-893c-53448a78b550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155f0e57-8891-420b-9cc7-36c9c3b37a34",
        "cursor": {
          "ref": "e1db2137-5074-4113-bd2a-31a3f3a0c0fc",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "86e20422-ae40-4572-8b63-b7970ecf1081"
        },
        "item": {
          "id": "155f0e57-8891-420b-9cc7-36c9c3b37a34",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a49441b7-398a-4615-a5d0-bf09f00fb8b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e4da4f-8c0e-49b1-a5c0-21ee2a62807d",
        "cursor": {
          "ref": "668f5771-c385-474c-aa1f-2f1487fbfc51",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ef0da827-2a02-4c53-ba21-cd29162bd543"
        },
        "item": {
          "id": "99e4da4f-8c0e-49b1-a5c0-21ee2a62807d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "dd332ee3-0ef1-435e-810f-df928cc56aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772a58e5-459c-4a5e-882c-ba2379ec0124",
        "cursor": {
          "ref": "cd42b3e2-a9b9-425b-af87-37b002331212",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "808f759b-5a01-47c6-ae76-ded8310db7ce"
        },
        "item": {
          "id": "772a58e5-459c-4a5e-882c-ba2379ec0124",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "850a6a4c-fbb6-4a4e-a78e-3d73085b33a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872c1e86-830f-4b02-9fc5-1ce61869e5b1",
        "cursor": {
          "ref": "d1d7768f-afa2-4068-9662-2822e48d96b3",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a689df4e-0cb5-4956-8856-35063f94ed00"
        },
        "item": {
          "id": "872c1e86-830f-4b02-9fc5-1ce61869e5b1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "22bcb8ba-2784-4ad2-98df-3914145c0764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a959701b-c61b-4ce5-a530-9104015fb266",
        "cursor": {
          "ref": "8eac65e5-7b50-449e-8922-675df814605f",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "833e88c2-e2f0-4278-83ca-a5f528dd6f23"
        },
        "item": {
          "id": "a959701b-c61b-4ce5-a530-9104015fb266",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c15c4d1c-6154-4cea-8ac7-feec6f806d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8281d234-cf61-4f4f-a859-f27c304b7899",
        "cursor": {
          "ref": "4af80b75-1249-47c0-a994-07171be244a5",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c62990a1-f32f-4357-96b8-5c4eb2a5f073"
        },
        "item": {
          "id": "8281d234-cf61-4f4f-a859-f27c304b7899",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a5c11104-88be-4477-b17b-6cbb821e9e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a43f7c38-789f-487a-8fcb-eaba75f7cd39",
        "cursor": {
          "ref": "c19b5223-b89b-42ee-9ede-29755e6b8737",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "97272add-2684-405e-942c-aa620683874a"
        },
        "item": {
          "id": "a43f7c38-789f-487a-8fcb-eaba75f7cd39",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "07a8cf52-ee61-4971-a679-1fd996134b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5a4655-82b1-4fd0-a2a9-1223b3941653",
        "cursor": {
          "ref": "7c827ae9-725b-4672-995f-a8e012382d0c",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b6b61d85-ef12-4abd-8342-3f730a6b42b7"
        },
        "item": {
          "id": "9f5a4655-82b1-4fd0-a2a9-1223b3941653",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c3dc720e-5242-4aa4-8174-43d0241fddf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db72ea16-4751-4fef-8cab-f5fbad7d6fc7",
        "cursor": {
          "ref": "ea4e5505-04d5-458a-99e5-1fbb1dad846e",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ce4b5623-d0a4-454f-aaec-b0fec5faa92c"
        },
        "item": {
          "id": "db72ea16-4751-4fef-8cab-f5fbad7d6fc7",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b1f5d20c-99c1-475b-8c12-c62a5017e3c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa29bc40-0832-4053-a549-1b2c50590f43",
        "cursor": {
          "ref": "c008b5e6-1787-4f9b-b5e5-1dd248ec932e",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f91f4643-9d29-4bfa-997d-c3afd543c15c"
        },
        "item": {
          "id": "fa29bc40-0832-4053-a549-1b2c50590f43",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b62e94f2-682c-4b4a-8de9-d1f8c8131181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db097df0-8d39-4576-98a8-037d846e6d8a",
        "cursor": {
          "ref": "8d0bf3c5-a7ca-4f27-897a-7ebda9a1730c",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2692ce7b-92d6-410b-8dc9-c74bed8fe7f4"
        },
        "item": {
          "id": "db097df0-8d39-4576-98a8-037d846e6d8a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "16244e76-97c6-484c-8982-f676bc976dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f328b3c3-7343-4a61-a11c-beb739bf20ce",
        "cursor": {
          "ref": "43f8cabf-e09b-432a-b183-65d2e3b0ce0e",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c3336604-df7d-45b2-a723-c7a9fd211387"
        },
        "item": {
          "id": "f328b3c3-7343-4a61-a11c-beb739bf20ce",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "43a4c844-2e3e-4081-b0e8-5479b483b046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5315e975-aa77-4382-85b7-25647e395e9a",
        "cursor": {
          "ref": "a7936d67-13d8-4628-942f-8a1e5ebb9e02",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "86824af6-9b5f-4f2a-889e-d0c0d71ac9e7"
        },
        "item": {
          "id": "5315e975-aa77-4382-85b7-25647e395e9a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "53d37801-677b-4138-9cfd-35631c308679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4b9fa4-501b-4e40-bc5b-f99b474e6f0d",
        "cursor": {
          "ref": "6e066656-db68-4004-bc5a-20cdf9dac80a",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3015049d-854c-48c6-918a-762235ad327e"
        },
        "item": {
          "id": "2d4b9fa4-501b-4e40-bc5b-f99b474e6f0d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6b5154cb-355a-4ebe-b8dc-fd4a414027ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ffb199-6e50-4e88-b975-a2123ac6f184",
        "cursor": {
          "ref": "caeb96bb-5203-4b48-bf29-6f92aa08e95e",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "79663222-0e58-473a-a292-ddc9fb9de32e"
        },
        "item": {
          "id": "16ffb199-6e50-4e88-b975-a2123ac6f184",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "53f3e6df-b4be-460b-90d9-1b3dd6137fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a99a71-1e13-4b5f-9a41-10780f95f6fe",
        "cursor": {
          "ref": "54faec6a-4428-4bf9-9c73-0d00900427f0",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c8879e8b-58e1-4ff9-ad63-b9df4110b177"
        },
        "item": {
          "id": "25a99a71-1e13-4b5f-9a41-10780f95f6fe",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "615defb0-685c-48fa-98a7-69048b1bd542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7345813-d08b-484f-aaee-d736b058c5bd",
        "cursor": {
          "ref": "8cd2bc67-8e65-46bd-8ebd-77afbd310f2e",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "31435ed7-9379-403d-b42a-d5474e072aae"
        },
        "item": {
          "id": "b7345813-d08b-484f-aaee-d736b058c5bd",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d6b94cb3-a286-4e43-9fd8-bac1a3d1ab7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e31e8b-ecee-43f8-be6c-482abaf5663f",
        "cursor": {
          "ref": "c26ca909-13ef-4d35-baf5-7360edab0ca2",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "75dd49bc-52a0-4371-adba-2477e1f23f1b"
        },
        "item": {
          "id": "20e31e8b-ecee-43f8-be6c-482abaf5663f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "155853da-d83b-49cd-8699-d2d388fc40fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f686d534-aa58-4025-ba33-19f8eb922a48",
        "cursor": {
          "ref": "a882fe85-0741-4dfc-9e4d-7e4751c79ded",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "127a05f1-4c54-41a0-9925-405e8c7f8d4c"
        },
        "item": {
          "id": "f686d534-aa58-4025-ba33-19f8eb922a48",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "fd090567-8f9d-4f9e-adb1-ca3c1962aa8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f7aa8a-1b1f-4b0d-bb74-a0de7d58f075",
        "cursor": {
          "ref": "b1035307-5ef8-414a-97c1-42ca39258bf7",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "92647c54-0930-4ebd-bd90-65d80bf843cd"
        },
        "item": {
          "id": "68f7aa8a-1b1f-4b0d-bb74-a0de7d58f075",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a5aea2b4-a307-473a-9745-977210b0d1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58eb3efd-24a4-4d8b-a2e1-2b6e9150d591",
        "cursor": {
          "ref": "586993eb-85d0-4ab9-b6a6-8aaafca1ee05",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a6ce1c67-7e0a-4dcb-a349-d2031631ce7d"
        },
        "item": {
          "id": "58eb3efd-24a4-4d8b-a2e1-2b6e9150d591",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "125554c2-fd80-4032-ac08-a8b5929ae2ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac7acfc0-85eb-42da-be64-2574114545df",
        "cursor": {
          "ref": "3d14fa00-a158-4a1f-b277-4fcbe844928e",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "3d90fa35-9b9d-4dbf-a270-dba9a7a0e981"
        },
        "item": {
          "id": "ac7acfc0-85eb-42da-be64-2574114545df",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1c46c1c5-8c37-453c-9953-684189e131b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193eae7f-b7de-412a-9bef-573f25624f06",
        "cursor": {
          "ref": "85e62f94-8cfd-41b7-bab4-3d6d2342dc00",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "038a93c9-f789-4683-8db4-5d27908e8fb7"
        },
        "item": {
          "id": "193eae7f-b7de-412a-9bef-573f25624f06",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d85fb724-ba4a-40db-bd10-618621865b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0fa1845-6d6e-4b73-a674-514a9af2166b",
        "cursor": {
          "ref": "a16650ba-be71-4e05-975a-1a20cc512131",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c1275da0-1753-4d34-b84a-f3df18759385"
        },
        "item": {
          "id": "b0fa1845-6d6e-4b73-a674-514a9af2166b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a1c27452-e077-4035-b600-52721b504e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426a4abd-87db-4892-87d3-d21051196022",
        "cursor": {
          "ref": "041a87bd-d931-4aff-9fd5-7b14cf3da849",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0581cd78-ebdf-4a15-a37c-2c4a6a1b0526"
        },
        "item": {
          "id": "426a4abd-87db-4892-87d3-d21051196022",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "808dbecc-0636-44ce-b8db-bfdb3330f414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0cbace0-2eb4-4d7d-a7b5-543e61b3b017",
        "cursor": {
          "ref": "a55fff30-2783-4317-aaa3-4b68ffbe01af",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "16d23e77-4700-46d8-a695-b32d0fc8e5fe"
        },
        "item": {
          "id": "f0cbace0-2eb4-4d7d-a7b5-543e61b3b017",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c1b93ed5-60af-4901-ba67-11331027ec43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35bed908-ed79-46cc-9b67-2b2ff1054756",
        "cursor": {
          "ref": "fa5f03fc-86e4-4f19-bf13-fa09dc356777",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "547beff5-df03-41a1-8ec4-3f72085429e2"
        },
        "item": {
          "id": "35bed908-ed79-46cc-9b67-2b2ff1054756",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "32e48059-4df9-49e0-9c27-9645f57c8124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb300874-db4d-4570-bc65-f8c29feda789",
        "cursor": {
          "ref": "8195ce49-af5a-4414-a24b-380527fe5b88",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8298589a-25fa-43f8-a565-6796b00a6856"
        },
        "item": {
          "id": "eb300874-db4d-4570-bc65-f8c29feda789",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3df5f077-6166-4560-98d3-c84a04461591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc29706e-7a59-4969-8068-2171968091c9",
        "cursor": {
          "ref": "a6ec4649-ff7e-4a20-af49-e2d6f1a15c2e",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "92fabc51-2ebe-4177-8659-cd43090ef6cf"
        },
        "item": {
          "id": "dc29706e-7a59-4969-8068-2171968091c9",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d7f08584-c8c6-4b33-8cd3-72adb77c13df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db48f6b-04d0-4ea3-9417-f5609de10a66",
        "cursor": {
          "ref": "17e823a8-2e86-418d-b47e-bb329818e3af",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a01ded8a-9582-4432-8d01-5005f5febf78"
        },
        "item": {
          "id": "5db48f6b-04d0-4ea3-9417-f5609de10a66",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a131e4d0-322d-4216-b48c-ec14878b3dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e3f9f7-b145-4cfc-9426-3f50fe3e7278",
        "cursor": {
          "ref": "ccbb8580-5415-4f42-9baf-7ce33017fed1",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6142d58e-dc56-41c6-b7f7-f50eda6c69ff"
        },
        "item": {
          "id": "71e3f9f7-b145-4cfc-9426-3f50fe3e7278",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "126ccba2-50a0-4ecb-bf6d-fe38fae39ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ec673a-b7a2-419c-a887-611b8e8c86bc",
        "cursor": {
          "ref": "c95b6d12-a7e6-4ef9-9a42-350deea84bc3",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f3ae57bd-e9f0-4674-83ea-f731e77e308b"
        },
        "item": {
          "id": "05ec673a-b7a2-419c-a887-611b8e8c86bc",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d5babe94-d7f2-4e57-a23f-41a814da77e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98233e5f-8501-4875-a370-b2cf2e3019aa",
        "cursor": {
          "ref": "77c4e150-c770-41f2-9c3d-8c00685e8475",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c6be0c21-3e21-414f-bb39-0cc33b4d373a"
        },
        "item": {
          "id": "98233e5f-8501-4875-a370-b2cf2e3019aa",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "97f5dd6b-51c6-4401-9c13-15c958153e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8cff189-e322-41a5-88c1-e56bb92ec709",
        "cursor": {
          "ref": "eb0dcedc-c3bf-4f6d-aa7a-ded967169d5e",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d4af3a67-da4b-4c08-b3f4-1f61a8d8bfad"
        },
        "item": {
          "id": "b8cff189-e322-41a5-88c1-e56bb92ec709",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d52f68f8-9b34-4263-978b-c148a0986bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bba966c-eef6-4045-a25d-d08d7ae058d2",
        "cursor": {
          "ref": "c715807e-49fa-4871-b983-6ed0147e0329",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1ee7274a-caa6-4236-a7d6-323ff78ea75f"
        },
        "item": {
          "id": "4bba966c-eef6-4045-a25d-d08d7ae058d2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e1ab8376-631c-49c1-9d4f-faaae1ff88b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc5af8b-2da7-48df-92f9-955f6029b1a1",
        "cursor": {
          "ref": "dc51a0c5-ca2a-4230-be27-992fbe4a4c8a",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e01795d3-0ad7-4565-b4d6-9018b28fd3b0"
        },
        "item": {
          "id": "0cc5af8b-2da7-48df-92f9-955f6029b1a1",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0369e1d9-c602-4fbe-992b-ab142f5e0654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "515c7f92-248d-48bb-9b63-57013f99064b",
        "cursor": {
          "ref": "2bbfd754-4350-48e6-aebd-6f65e9645843",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d772a461-55b4-47c4-85d1-8ff708ca7fdc"
        },
        "item": {
          "id": "515c7f92-248d-48bb-9b63-57013f99064b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1609404c-d259-410c-a7fa-df8e16faac20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b488bd7e-bb6d-431b-b223-bf97bf0d7b74",
        "cursor": {
          "ref": "e5bdc6d7-4999-4e3f-a8c3-c70a4bb55108",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "35090fb7-e121-4b48-9441-42c0306930ff"
        },
        "item": {
          "id": "b488bd7e-bb6d-431b-b223-bf97bf0d7b74",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "88c622cf-16cf-47c6-90bf-3437d5b016e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be618332-3467-4695-acbf-7c3dd1e2d8ad",
        "cursor": {
          "ref": "25d4859e-310a-412d-b7cb-6d4c326157df",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9f59125e-e84b-4b5e-a892-eaf73f003d56"
        },
        "item": {
          "id": "be618332-3467-4695-acbf-7c3dd1e2d8ad",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "50f1c910-f06c-4004-a869-6b59f814a19d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dbe24c9-150b-4404-abd9-f1d06faa4215",
        "cursor": {
          "ref": "f6ae0e42-f7a8-4612-a9f2-ba14c16cd97f",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ed86ca74-63c5-4ec5-abc5-a89a05f8179f"
        },
        "item": {
          "id": "0dbe24c9-150b-4404-abd9-f1d06faa4215",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "bfa0fc01-60a0-40cc-b16b-e51d46bffa56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43bb310-ba1f-4375-9579-ee07b56d023f",
        "cursor": {
          "ref": "dc08ce0a-d2af-4ac3-87af-6d501214775e",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "feb27499-b40d-421e-b6af-68be8ece7b0f"
        },
        "item": {
          "id": "d43bb310-ba1f-4375-9579-ee07b56d023f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e0c51ca8-9b6a-4ed4-8db7-2bb84e2c33dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d674b9d0-844a-4af1-9961-3c64613c9565",
        "cursor": {
          "ref": "935d3062-c9ec-4ead-afb2-8c485b5c9b47",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "447acbfa-2444-40ae-8ad1-8905106aaa18"
        },
        "item": {
          "id": "d674b9d0-844a-4af1-9961-3c64613c9565",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "faf04038-de6a-41fd-9791-ad8027e30b14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb6af15-39b4-40e9-bc4b-be8fb582b662",
        "cursor": {
          "ref": "29cb8cf7-1252-4cb6-b8bd-ab7ae9dc4f82",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d8fc5f7f-4152-4a57-9426-33fc7d6fea43"
        },
        "item": {
          "id": "5bb6af15-39b4-40e9-bc4b-be8fb582b662",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "08bf7deb-ebd3-48ce-965b-59194211ed60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11268ef-ba18-4564-a58b-3e60783d3d44",
        "cursor": {
          "ref": "94741c9a-7e95-4209-b529-ca1b2f905161",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "25c98aee-ca67-458e-adaa-bfda35548acb"
        },
        "item": {
          "id": "d11268ef-ba18-4564-a58b-3e60783d3d44",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "bfb06f45-e866-4fee-bb0d-1dd5cc055e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3451e0-49c2-4502-9c83-f197a6d92fd0",
        "cursor": {
          "ref": "dfadb11c-f96b-4b3b-8213-b23cc458eb0e",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "fb0d4210-bcb8-4d9b-988b-6548799b2756"
        },
        "item": {
          "id": "3b3451e0-49c2-4502-9c83-f197a6d92fd0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "489195d9-5929-463c-b8e4-323753b485c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "980a99ec-e3b8-4673-9f3e-ac087bff667d",
        "cursor": {
          "ref": "e5e2fd67-bcec-44f0-b817-70c56c34f1a3",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "50f8651a-e451-4efa-a26d-d7bfa8624b96"
        },
        "item": {
          "id": "980a99ec-e3b8-4673-9f3e-ac087bff667d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3a14344d-d4a7-47e6-a4c5-680f63686961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c942b98c-2af1-4928-bb79-936fb8f6fb3f",
        "cursor": {
          "ref": "178181ca-dd4a-4495-856a-e5a2f681e8c8",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "289e7d51-357a-4270-9578-b5a711876dc4"
        },
        "item": {
          "id": "c942b98c-2af1-4928-bb79-936fb8f6fb3f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "91384388-a453-44dd-b1c7-d3c2801fe520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df47eb0-b0dd-4d98-9d65-912471f6f200",
        "cursor": {
          "ref": "8e7fa1b4-235f-4c8a-9a59-2ff7d321ff7c",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "25267865-5f2f-4402-992f-6a8b0ec7b839"
        },
        "item": {
          "id": "9df47eb0-b0dd-4d98-9d65-912471f6f200",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7ecbb4a4-5507-4fc7-92b5-b966cbb29b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c7bd5be-5255-4b81-9bda-8af0aa493948",
        "cursor": {
          "ref": "fa669ca8-2e83-4b4b-b0aa-ac6226bd92f7",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1d5e8a13-2025-43fb-bb05-0f6caf11d010"
        },
        "item": {
          "id": "4c7bd5be-5255-4b81-9bda-8af0aa493948",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1aa79e21-4b8c-4bba-9525-8197034b72fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7ff62b-2254-4b39-a416-936fe11808a8",
        "cursor": {
          "ref": "9b2afb2d-8357-45d0-a4ae-3b1995bfe71d",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d50a27f2-8807-4a71-a442-6e9d55e2ff6f"
        },
        "item": {
          "id": "1a7ff62b-2254-4b39-a416-936fe11808a8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "be032347-3e07-4562-9c75-76aee6e84bb2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "025c3980-5419-49e8-8c9a-186000b99e70",
        "cursor": {
          "ref": "8b1ad86d-58c6-4f7f-a200-593a174c3c93",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "740b9f8d-e494-4f8c-8daa-c30e0ce2419b"
        },
        "item": {
          "id": "025c3980-5419-49e8-8c9a-186000b99e70",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "3f5e71f8-0ffb-4dd1-aff1-3415fffd4bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "cf6e6dc7-d3fe-44e2-9a00-e65db45589b3",
        "cursor": {
          "ref": "5afb3942-248c-4f49-afdf-62d47d95f5c8",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b33fb143-7aa3-4297-a100-b8992cd4f30a"
        },
        "item": {
          "id": "cf6e6dc7-d3fe-44e2-9a00-e65db45589b3",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "badff4d1-514e-4ca5-94af-7831cd5e779d",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3aaaf25-6c29-4a1c-93a9-cc668c83953f",
        "cursor": {
          "ref": "d27c2104-0424-4ff3-9cd2-494a74f40137",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "182328fc-80b3-4355-8676-982b7fac54e6"
        },
        "item": {
          "id": "c3aaaf25-6c29-4a1c-93a9-cc668c83953f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e1dcf6e7-10dc-4c78-a039-63a489eda362",
          "status": "OK",
          "code": 200,
          "responseTime": 2051,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5019396b-50da-426c-9d64-816dd80b86a8",
        "cursor": {
          "ref": "49ca7392-77dd-4e36-b827-edb0bb82e0bc",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "cd31c2ac-336c-43cf-bdf5-c71e2b5562dd"
        },
        "item": {
          "id": "5019396b-50da-426c-9d64-816dd80b86a8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "aafb0b1c-ec8b-442a-b29d-727a43ca96f8",
          "status": "OK",
          "code": 200,
          "responseTime": 2277,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b03f9659-dae3-44e7-93ff-8d7d1c140ccd",
        "cursor": {
          "ref": "89e9e8e5-a41a-4f14-88c8-1b3666052a8f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "234ba671-8515-4e19-95d9-fc7985ef965c"
        },
        "item": {
          "id": "b03f9659-dae3-44e7-93ff-8d7d1c140ccd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "815cdccb-fa1d-4512-a3ca-1ac7b8149d1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "b03f9659-dae3-44e7-93ff-8d7d1c140ccd",
        "cursor": {
          "ref": "89e9e8e5-a41a-4f14-88c8-1b3666052a8f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "234ba671-8515-4e19-95d9-fc7985ef965c"
        },
        "item": {
          "id": "b03f9659-dae3-44e7-93ff-8d7d1c140ccd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "815cdccb-fa1d-4512-a3ca-1ac7b8149d1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "b03f9659-dae3-44e7-93ff-8d7d1c140ccd",
        "cursor": {
          "ref": "89e9e8e5-a41a-4f14-88c8-1b3666052a8f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "234ba671-8515-4e19-95d9-fc7985ef965c"
        },
        "item": {
          "id": "b03f9659-dae3-44e7-93ff-8d7d1c140ccd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "815cdccb-fa1d-4512-a3ca-1ac7b8149d1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "f05bb96d-6aae-48ae-826e-d05bb4570c6c",
        "cursor": {
          "ref": "c7586ca0-440f-4a7a-af33-b83676db5e47",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "390c7d7e-bcfa-433d-9278-3928ddfe1beb"
        },
        "item": {
          "id": "f05bb96d-6aae-48ae-826e-d05bb4570c6c",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "31c0b8d2-61c9-4e62-b4ad-e85266871b09",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "d5a80fdb-c95c-42db-83a1-50cc22d65cdd",
        "cursor": {
          "ref": "d2203c89-c099-4c6b-895d-ec82d10db68e",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "73c588ae-0796-434f-b53f-0414a3c576b1"
        },
        "item": {
          "id": "d5a80fdb-c95c-42db-83a1-50cc22d65cdd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a3a0ddbd-3dd4-4384-bc34-d269cd02a5fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d5a80fdb-c95c-42db-83a1-50cc22d65cdd",
        "cursor": {
          "ref": "d2203c89-c099-4c6b-895d-ec82d10db68e",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "73c588ae-0796-434f-b53f-0414a3c576b1"
        },
        "item": {
          "id": "d5a80fdb-c95c-42db-83a1-50cc22d65cdd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a3a0ddbd-3dd4-4384-bc34-d269cd02a5fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "99e25966-18e9-4eb0-b627-f148147ff525",
        "cursor": {
          "ref": "191b8aea-ebc3-4254-b7c8-2449548a07bb",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2f1ab319-5ce0-4ed7-9b9e-b4387efb26e2"
        },
        "item": {
          "id": "99e25966-18e9-4eb0-b627-f148147ff525",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "4842f3f5-6818-4b11-9320-620355bea987",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 148,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "0998ddcd-d8e7-47db-bded-6b3b36eef195",
        "cursor": {
          "ref": "2fb07b36-1df3-4017-8a89-1a6ce844a0a5",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "aa30b150-e218-463f-b913-e52ccee61f60"
        },
        "item": {
          "id": "0998ddcd-d8e7-47db-bded-6b3b36eef195",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f694839f-4fe5-43ea-b9cb-d295a21ab711",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "0998ddcd-d8e7-47db-bded-6b3b36eef195",
        "cursor": {
          "ref": "2fb07b36-1df3-4017-8a89-1a6ce844a0a5",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "aa30b150-e218-463f-b913-e52ccee61f60"
        },
        "item": {
          "id": "0998ddcd-d8e7-47db-bded-6b3b36eef195",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f694839f-4fe5-43ea-b9cb-d295a21ab711",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2208d0ec-4cd6-4f98-ab96-99a1ff02c341",
        "cursor": {
          "ref": "be8146a0-cf47-4ece-9a76-344ca9305b09",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "62a3d72a-84e0-4f84-874f-dfc99e3b899e"
        },
        "item": {
          "id": "2208d0ec-4cd6-4f98-ab96-99a1ff02c341",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "23543c34-c659-417e-b701-53cea86e3a21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 156,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}