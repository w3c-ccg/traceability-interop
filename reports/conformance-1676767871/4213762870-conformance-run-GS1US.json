{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7f0682e0-7854-4623-957f-7b10195947c0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ebd05174-7423-4f8e-b391-4a434366093d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6be074af-fa9d-42bb-a3e6-fff283f4e7ac",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d6697cbe-af3f-4f1d-9f32-18377486ffd4"
                }
              }
            ]
          },
          {
            "id": "09469b17-0aba-4209-ab02-7e3be1873d5a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fc7791b5-3105-4a00-955f-d7fee272b681",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5b2a5bfb-041c-4ba4-9d1a-81349da0dd8a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3640117b-1d46-4d21-ab43-5bf511a7ec2a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8cbe88e5-030a-479a-bc03-ecd13a01ffa5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d395d335-b3a0-40d7-9b1e-972a56b43892",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7eccc6f-12dc-448b-8fe0-7fff051f6dbf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1fbee611-fe0a-4a5e-acd2-f8cacf556924"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a5db237d-7fdf-4ce1-aad6-8fcfeb991842",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c8980a85-7e99-4e8c-9e60-17d31cb6afbf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a9ad1451-929e-487d-ace4-aa12115ba427",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "28e3da29-7e2d-4765-819f-0f3fd8be22ec"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8a4760b6-c9f0-4bc3-afb2-7e810543ba28",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "dc3f04ab-ea06-4c41-b226-8f10f1b7a8cf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "35144f3a-959c-4d02-9d6a-5b70ae3fd344",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91bff19a-aad2-40c1-9eab-bfff8f12dd8a"
            }
          }
        ]
      },
      {
        "id": "b5856fde-a3fc-4904-a22b-ea0f3456a711",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1d4ad3f8-9d10-4ed8-89e2-24041b62b76c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "912c3b2f-a0d3-44b2-97d7-e3f1b13c29f3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f51e5431-dea4-42ab-9bc6-152294848bf3",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67600ae5-59bc-49ce-85f3-1e0a698ba3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65333f6f-147f-4e90-92a1-cfb10a9ba44f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6867df2-3766-4011-bed6-d6a62cd9aa55",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1871b138-d9a8-4b5b-841d-26591783a7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91867836-28eb-4446-831e-aa11c5d46eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27b21ad-f5fe-4a8e-8236-38d0e7dfee00",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed799b9d-0ddf-49a4-a554-f8a034fb2c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "680cb0c1-2557-49ad-b970-74a57ac3d0b9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4f782d84-794a-4e31-acad-ab52a688953b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "446bb128-b22f-4734-abe3-0b4d597794a5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f810d02-f9b5-4993-a2d0-e55f947d0491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7c286a2-de33-4898-9e7e-7a123cee691e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0caad3-3c98-441f-bcf0-72330b568723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "151daefc-1ba0-4c83-952e-9858ab188f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf9e143-9a84-4b45-a644-8bde15fb067c",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c149ac85-b426-4765-af19-185d1119c57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "235359d1-b7cb-41a1-9cbe-f74b9fbffd8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a049cc41-7f79-449c-a3de-dadad9d7c9c2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "2e021d24-5329-4752-bcc7-822420ac824a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1482f342-37d4-4034-b8b1-efaf87b66cd1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8b815fcd-0c96-4c64-beda-ca5ab07b33e4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40da0bd1-bdb1-41f3-bfd8-8b4ad682bd5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4366cb55-8538-4943-89d4-f95cfdec2b40"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8911ced8-b65a-4764-8432-9a3f6d635b41",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "acd801d6-21e4-4356-90ed-61e925855ff8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "623d1a7d-ab55-4eb6-9285-efd4b5c5d8b0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "05bacd87-5dee-4343-99ce-8e01ebe2efc9"
            }
          }
        ]
      },
      {
        "id": "b039353a-7ec7-4f0c-8e20-1467ff7726e9",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "767a9d0e-05c7-4923-9a28-ec2fc55479b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2dd98f4f-cd45-4776-ac99-8960622eeb92",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "36966a72-40ce-44e9-9232-92d656b5fc50",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62658620-87ce-43f0-90f8-2244dec6d442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb01c37a-aa61-4344-ab86-b10d3eb4d641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a115356-acdb-4cc8-a480-ecfa2682ebe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c458a1d6-6e2d-4057-bc1b-d3c8e44d50fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f3839d-85c6-46d4-86a3-393b5920f4bf",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21613a3-ace5-4f33-a05d-0a09a50b8a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2524df5f-baf6-4363-ad46-d97866f0e629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1de3c7-76bc-48d7-8cca-62f1bb0dff17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57327e19-87ae-4021-ae1e-37d3326a91bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec718658-2790-4fb5-b962-92454cf4260c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f763a310-978b-44b2-92c4-a8b5a4b13407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6686479-789c-4254-b555-c859ae79f3f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4301e6f4-4206-4b20-b68c-ba44519bec72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d30a9ea-4734-40d2-aadb-1892e683cacf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f21c6f-e63d-4e1d-b353-c7a09720cee1",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a8484f-89e0-4f1c-9021-c7445008b888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68400156-faea-459b-b292-8ba9d7506856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4cbc9c5-f794-47a0-871c-0f29f4b30bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b711ea4-1f20-4391-809b-df76cff57541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7006fa-94da-4826-b4ed-82b543f5ba67",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd1436a-df04-4cde-9849-c6d12311f336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2673840c-d991-498d-a3e1-190445fcd90d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48cfa5c8-614f-41dc-bf15-6c4041b45711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af86e8c7-4528-4787-a974-4feeb87ea40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5843bbf-e7cb-43fa-a3b3-2ba89fa598b3",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3b5e06-1528-49b5-ba86-87761714301e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87bce3bb-d466-43b3-9076-2cad8c5ab636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4699446a-3590-4593-8990-4a33d1bb316e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f72a9ce1-aa77-4ca5-bf24-b9a90d791924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f9c2d6-e7ff-4f50-a62c-62af903c76d1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee49e96-f8c8-4be1-814b-1a06da1ac7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78718fe7-01cd-4f0a-98ca-3094e90b1759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a4bf8e-b3f8-4193-a9a3-c2564f0905f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b56de8ce-7c6e-434d-8632-5b37dd8a5b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838f59d9-2a9a-470c-8f17-8bc5beaa2707",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d6dd20-6a82-4ceb-af4b-07c708f68ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22933f3e-e8bf-488d-bee3-edc3938fb31c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5f35aa-3edc-400d-85a9-f257fbbc2a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97bb9f68-8e64-4486-b89f-2ff827e9a159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3dd3951-7a6a-42da-a825-64de736566ed",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e084a58b-488c-4fb0-b0e9-87e5ecd92f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f3b37f-f819-42ad-a0a4-56710ea7625a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da30af1-acae-4aab-a51c-a1ba425989ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71327e81-f8bf-4a08-8698-61ff801661d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1530b8dc-f2a8-40aa-aa06-d376db67bc9c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2182ec84-f4dc-4eac-bdb2-438767ea63e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e1a5a38-faeb-4d8d-ac87-f0ad13c140cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63266fdc-8be4-4287-8b59-e360bcd0df00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be68ddf7-c187-4a6c-a3b6-ea2ba38b2c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b56c331-1a92-448e-9519-5fc8e28d9263",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79549fdd-1896-4b1f-b2b3-970a79462732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8b730ab-2eb6-4d01-be62-e6d83f682bd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c17acd8-495b-4120-86c5-3bb204f45995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a87dfbc5-3e71-461e-84d5-2ac20c2be105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067fb019-ef44-459a-a92f-85046df1064c",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2347955-5c9f-4b3c-a74d-852332f98840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5844be3b-28b7-4d09-8645-4dc378fe2376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877c46c6-1c1c-4b5a-b11f-10fd819e1d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98fe14d6-6a5e-4b76-a43c-bd4d0f106c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf5994d-b49b-4c37-a754-83ba23e83705",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b7abaa-d03f-4c15-8adf-425c2a263de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ec92798-c8f2-4604-adf9-5c18a9516aa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2448dbd2-97f7-406f-8ceb-082cdab177f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f6748e7-e5b9-4437-8d55-582e6213560d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7b0a92-3b61-41e5-a5d3-0066e27b1d81",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb0ccb0-f2da-4579-8d67-7e6790e2ea0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21acd6b-e632-455d-afad-137a6e4e6515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ddd015-5476-45e5-bbea-1aa1b02c7836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b939585c-ea44-4133-aee3-121c1f0e6483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6daee34-b92a-4ecf-aea3-dc73f9314d57",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c66efd-dcc9-4bf1-bae7-dde600d0f08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d93d5b-9992-46f5-a694-af14aeee2c38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f72059-365c-45cb-b852-d43deead6ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a85fffd-2fdf-4701-bcc7-13121ca69c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91d6ce8-ba2f-441e-8631-c2aded0adbdf",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "246f8ff0-9e59-4240-9fc6-e3f280df11f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "686edf86-e346-4029-8812-4d553e6c8382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97bc17ba-3cfd-4842-b021-92be8f3934b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b27de1fe-5130-46d8-a9bf-cfbd5621ef90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb273d9d-918c-4780-b54d-7d58a2563e7b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5c7ee3-af1d-4735-b46f-813bdb3038bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea0ea7a-2d8d-4d0c-b82e-ed5a54addf91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9305a4f8-30ff-49a6-b1b8-505f66f0898d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e68400ba-6c16-4d94-b18f-d589c2b01cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4834e1c4-66ea-4685-8291-7ee6cc23e0ff",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78462cce-fda0-4089-8e13-278ba03ecac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c4e3485-516e-400c-87ea-bb6cc49f24f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01640e2b-599c-4c94-8791-802321946844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "070cbab5-699c-4b75-8eed-62fe3d661e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33fb896a-5092-4948-82d5-8a4253f383d7",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bca7b47-f5e6-4378-ab3b-2e7f6e35c13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2adf8825-04ab-4fbb-87a2-a1744f975bb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76e0d37-fc86-4d28-aa76-f2d61fa94328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "590ae57a-2806-43fb-87ce-465938241b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782a7378-cb6a-40ee-bb91-f89cb020ef51",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22aa0e8b-09a5-449b-85d1-7159286017d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2526a881-33e8-4bcb-afc6-05669e0176bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8dc883c-f119-4756-9d08-2ad7038a7ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "581eedd0-f750-4bdb-9c22-06a553ce484e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45618495-1db8-4a64-be0b-3b330edef31e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2097cd6-2f7c-4cf7-99da-6e7a04c2ea4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b85b144-5522-495b-8b36-8fd1c2d10328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689c0333-aae3-49b1-bc2d-a758684122a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e61cf216-77c0-4945-9c37-0ddd76c81a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664ebc17-f254-49e6-ad3d-2edb5c87f385",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739eb077-f175-4aa9-beff-9b6556ccc91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70aa99f8-4138-43a6-8707-79d540321076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a93ff6-0183-40db-b4e7-9ce5322f8523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "50079536-8e77-4124-8f03-feccf4fcbe8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97872605-ec49-4702-8b88-d0805907e24d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85866893-2613-46d4-9d93-1edf3e436099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d32f3d-3256-4857-a3a1-80786902551e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95dd9106-6cb7-4366-b801-dd909f984e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c45b1ddc-3d3a-4bbf-8a60-295842f8ec00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8febb343-f7ef-4d8f-baa5-591a88e3aef0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4407e933-b421-4c11-8e54-09611bdfae30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b568c62e-d25d-4c53-9c33-49ae3c1c8e4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb551122-12fb-4564-a81d-72d6444493db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "838ae712-f613-429c-b189-75cbe84d31d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f46707e-dc88-4a79-a0f5-4b918ad46bdf",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82fa9740-502e-48f0-945f-a53d344957f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c15d1f-e2fe-48ca-80e0-c2f34faf7f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8edede1-ed58-47a1-b0ce-f4c792a0fc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c133eb6-cd01-4083-9e10-a3522f9776b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b664743-f8d0-463b-b58e-b14b48105cbc",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10c4fc6-8471-40c0-b15e-881135c0c167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e59b07c7-3f5a-4dab-ab10-0b8db6aa975f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7db9275-776b-4f2a-8f23-5ab6d1ce6e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "58d486a5-6f65-4d13-ad26-833958c53e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d479a00-029d-4908-96b9-6ea40ffdf38f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28014f1b-01b2-42e5-82e0-baaec5b1755d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9635d89f-36c4-44cf-b054-26fb76fa7eff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61f24b9-ce7b-43ed-b8fe-ec67bf0cec5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f4f2699-2131-4084-93f8-98fda5477c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca3dac3-e06d-4df2-a538-fcb750cc91d2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f97f31d-b241-427d-8687-3703b5be49ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa7ea22-bea8-4a80-bece-3129c27fb2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e8b0be-dfc7-4f5a-8b71-5f4aad6c9c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9129fd4e-1ae0-46d3-9ffb-b933372744ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0c5d58-bc7b-40f0-a910-548dda1ad6a2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656e0c52-b0d3-4d10-9231-4333084b391b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c69957df-31da-45cc-af40-11753952302c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531da608-4a8c-4c2d-81a7-9e62b0ff34cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "48e7175e-824a-4f23-a7ac-1aadf1c44ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93df1bd-48da-4d95-a90d-9c3dd7f77303",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8509d9-2a7e-4a09-b6ea-32870ce70a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60cd471e-cf38-4600-9777-873297f52ea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb10fa55-4aef-4de9-9d1d-8645df51c34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "925eb783-36d7-4a56-bb12-ea438e3f6fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb099f2-cf8c-42b7-93ba-e10fe6b2d7af",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee196d0e-fccb-490d-b056-211b212adca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c45597d2-ef25-4ba8-bd35-2c937b99337d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba77bca7-5577-4dae-b193-1c422e3accdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3519645e-bfc9-4870-a547-2a13535a9d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49bedbd6-ae1e-4f7e-b7e8-f1db0682a6ba",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c9bd86-bec8-4aba-9c97-021c3277cc01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81914e3d-b5d7-481c-8088-740b71bc5c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "021dc105-283e-4a96-be57-28ae5c2a4c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "14490d03-56e7-45ce-98d0-ec4099fa2782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147e9a2f-e7f7-49d1-a945-94ab339407c3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20239cc4-6e69-4b61-b3b2-f2129fe6a49e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88fb7e72-3d36-46d7-ae99-acd66642c942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b13107-3cd2-458e-99bc-a25ee2fd7739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "11b324f0-cb6e-40f2-93e8-c8b56fa3e726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348580b3-acf8-47af-b1d7-34a1527cf074",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "801042f2-db8d-4c01-861d-f7bf7862f2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f97a8e-b5de-4b1a-8068-4fb8b61a35cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639dfeb2-00b7-4d7d-a336-ee5f08eb9675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a0d1631-699d-4b09-ac6c-617ca24757d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8282915d-db2a-4568-8f95-e541a4f9292a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8422569f-fbab-4cb5-92ed-b0e57cf3cae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5648af2b-c238-4acc-ae00-34f25f0fd625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9d06e3-9d9f-4d67-b0f5-fec78a74bf79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c386281a-760a-4d17-9d0a-24bdc4c63981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca949618-bc3d-4f6d-a1ba-0adb8e7b1ff2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b629b104-dc62-40f5-8dc8-a6fa8f69ce19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2d51740-20bb-4b8d-a698-311edffda8cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8a049d-2f1b-4278-a31f-bca6bfdde62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df270b7f-27e1-4764-ba23-fcc473bbf78a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad28a2a4-1f8a-49c4-93d1-981a63fd7189",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32063ce-b84f-4c82-891f-85a221963e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20cc2b0a-8a8d-44b1-84e9-9e420897f875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d7db23-0ee2-4ccf-9f1a-baec0a72fcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf5b78c-6186-47c6-9027-2c787382d605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25bba311-9a7c-49af-baf3-534d934673e0",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f79ce291-2fc9-4d29-a4a5-1a9d7fb8e845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "537134c9-d642-4af9-b7a3-f849f46b285a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe15d52-a1b7-4bb4-b017-280f781385be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "19f8597d-2a3f-4e3c-a1b3-37ab2a573490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b9592d3-1c41-49fd-b5e1-861f1d4d9adf",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8548efcf-2f75-4f5c-9816-3532c88a029b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "250e8b07-1b9b-439d-98e6-bc7fd02ab297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd0c653-0e65-4529-8293-5b55d1dbfaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0840a270-8d73-455c-896d-874ef098120c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf35f96f-38ee-48b3-ac70-45e91ca851a9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1122da-fe96-492f-8a9f-bd67704067b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "608740fd-2601-4e8f-b89f-c2a932bbe94c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768950b2-5fdb-473b-aabc-8ca89b5990fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "57b07dbe-517c-496d-b26f-50eb7ea2a44e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca427b1-889a-45f5-8417-d7d8e380c5c3",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c1ad7e-df0f-4c54-8114-be6ae9dcc841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb48d954-c84c-4924-8997-09080aab8593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3ae1f9-4cc8-4e1e-a82b-3c124bff27f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "25833f23-88fc-4c1d-97a3-8cd446d9e640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8448abd-e538-4820-b812-1fad096b5886",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9952eca9-4177-4e15-8c87-cab9854b6332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6d7aeec-f739-48bc-97c6-2d63dff16559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26206b9-3e30-4260-b944-de8a43af963f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "4393e0c9-ad33-4b46-8fc3-8c5ce4ac4f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a41609-20b0-4311-a5d6-818988bf302e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62674365-ab9e-42ca-b66c-64356cb75737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c3cd46-b76f-45b4-b6a3-3dc38c5e3e9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "756fb229-bacf-4922-b3b1-072cc8db8b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "97f0088d-f0e7-4d9d-a406-ee45899f5572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49aaf81d-b312-4baa-9156-5b0e9162b58f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb4d940-29f8-450e-9523-1a1e59a6fb4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b08fcdfe-388f-4da5-8fd7-b1b6201b0265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d4f40e-9a39-4687-9d13-5ef06dd21aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b843ec10-aa39-4d4f-95b6-d1f3926957df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d6e306-576a-46db-9ed8-01ab4f317f68",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2482d887-64f0-425a-bd7c-1e33c669785c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c87b98-9b9e-4884-8e43-c428f76c80b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22e7c95-d9b0-42a2-9c80-7c8d9719d637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f861a314-3bfe-43ec-9ddd-4f218dffe9e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2955a53-9ca7-4e7a-8dfb-5fad0b424f07",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb5f893-b939-4753-bb22-230a9ee3441f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f7e9983-2402-48a4-b80d-bf24a728215e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9c4c41-8b18-47b3-8af5-aeebcb913240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db21fcda-45c3-4385-9309-727d01a1fdbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09907e9c-2489-4590-843e-b9a04d15b7f4",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "996fb68f-5c09-4eea-a359-49b335eefbb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2cb035c-1f75-4ceb-83a8-7a84b166dfa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6295d5f-eb90-4474-b962-d5efd4d41b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9555fde7-3886-41c2-8a81-9e075b44ffa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c759a53-cf8c-4c3e-8689-b96660263d6f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4d3cc7-5167-4c5a-99ef-b5981dace679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "094d0a14-b7ca-45d2-8c47-3353ea536067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a307cf4f-127c-43d9-90e7-f5dcd80ee240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f663124a-ec9e-4a07-8d4b-8ecfa4fca6f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4188a068-183b-4c03-8187-90edd6a66494",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab9055a-6074-417e-bd4d-d04306200528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e4d9688-10dd-4447-89fb-7757214dee56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b91ffff4-2650-4fd3-a76f-2505e0eaf67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cce80eb5-0e75-4d99-8a93-999415454ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ea1d7f-6910-45df-9d0e-dbd684d15174",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5fe15c9-0090-4041-9400-0143bffeef4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39a01ef7-cda6-40af-b55d-5268d03ce809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c97bbf-a503-4576-ade7-47b68705e518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "affd3b2f-57f1-488f-82a9-008dcd6ef23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e74c042-58ba-4ca6-ab34-b43f7854c424",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7dab062-ff62-430e-b7d3-f21c49df1327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e455fd51-373f-4ca9-a6a3-e9f369c89351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7279ad78-7489-47bd-884f-9b2ec1f7b7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "252a172d-c9ae-4399-93a5-fae13fe2b62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc428d74-de77-4855-9600-05758ddc54f3",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea6dade-db0e-49b4-8ebb-59ea4cedb380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a704b0b-f01e-441a-bfbc-af1ed306e4aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734f549e-ed70-4d86-bdb5-c08ecdc4ed30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cc42ac5-ed1b-4b0d-a5ca-b3b429f8b84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94fcd55b-baaa-472c-9ee7-7bc71050ab85",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "018e2469-b629-450e-81d3-fb435e713427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f2889ce-58ff-450a-a4ac-1e115fa25dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fee46e-c432-4583-a2c0-5a73c89c2089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b35352fb-ea3d-427e-9f42-a26cc11f41ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc365f17-36e0-412a-9a37-c978dd50476d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6eaea6-0075-4c0c-86fe-e623b77727a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d66f1b8e-c922-4d64-8831-ef50ac26e8de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80facd93-61f9-4e12-ac7f-da30ce2a508d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d8cae46-b367-4c98-85c5-0f48343115da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b687ac6d-8347-44b8-8244-96f295dedde7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "016b7c24-d413-4529-92c0-7b80af2d4edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d8f7d8-1519-4d7a-9a75-e3bb631a7e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f8deee-94f6-42fa-82d9-568afe3a7e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "522c4d20-c847-4cf2-a8b6-47efcef619cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd3995b-fc04-4025-8b47-1b9328614926",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc0c750-ca2e-49d4-8062-c2b1a57636c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f243b3b6-4c10-485c-a841-ce010031d10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9c7777-9a12-461e-9f82-bedaa33e4734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d610420e-8c21-4fe5-bca9-4aa6f21b9cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be1e005-e71b-406c-9f0e-93aca115dca3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819b22b4-7220-4b4e-89f2-5e66f370e5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ef5cd4-b378-41d9-b6d5-416e92aad3b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3952e70-1b69-4a1a-b273-925b379e4783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ddbca81b-1e98-44b1-a3b2-f4511fc92c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d5f9bc9-5ca0-4976-b820-ed481a9e8692",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ba0961-127f-4693-861d-9b9ba4619bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6800c817-67ef-40ac-af2f-c130131674cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805be1b9-bb15-449c-ae87-e3af2482cc85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "16da9f7a-1c3d-401c-92ca-14e48beeb352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d84b1c76-3c2e-48c0-ba35-2193c9046977",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91d31ce-2fb1-4972-85c9-9aa5f65b5a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3538d0fe-000e-41a4-a360-677ba3c78f83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e03106d-d6de-41a2-bea8-2b307b22520c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2019ab1-307d-4997-8328-f6bd8a2ed8a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed16449-1b7c-426e-9d93-8ff30cdb7f8d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7112d486-0a5d-4aec-8729-bf6e4aeb0f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da2cd2b-990a-4095-ad60-21a9c0c90d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3a0edc-92f4-455f-9eed-708b6fb68a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9bb6c4b-0155-4929-a649-7a6921441b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa1cd6a-98fd-48e3-8cfc-2d6d68e29faf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0db8234-8cd7-4a27-9a48-4e40888d90ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff6b690-0490-4fce-8969-ee24572ad93f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa3b936-c8b5-4c36-9d06-b3b29c712bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e15ed8b-b969-43d9-9890-85dcbef32e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574f5a20-e871-4d3a-a8fe-cea28c8869aa",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70b52d9-abce-4fda-b478-569cd3038fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5d91013-dc0e-4cdb-b4a1-4bd0b33baee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc33e323-208d-4342-80a5-1a10baaf1c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca32b684-0f77-4236-8723-a8515181a19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67784558-b62d-44b0-8e0a-432cdbd6a636",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5981086-0f39-4831-ac15-633e7fcfd1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a831bb4-6d55-4448-bb36-5f49a30e7c6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba00e8c-c04a-4ac6-ab5c-c6c94bb6a850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0138d93-b80c-4265-980a-5755ae565634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "635e5d02-215f-4b61-a241-5eae295e6bee",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33082255-51e3-4d26-8f2e-ac8c30de169c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d18c60c-0068-4469-a66f-2a485d688b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec2a243-53b4-484c-b5ee-4cfe03600755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a92fa3e8-3a85-4ddb-bfd8-c33ffe5a436a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c07381-ab70-4ef4-a973-5d35e214dd2b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7df630f-d9a7-44f8-9c1a-ae45bd876071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d41f54c7-fde9-4c5a-86bd-cfc3f4410372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600b17af-ee1a-4002-a407-864ae812a9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "638c51c4-4ec0-4d67-8d88-07ddaeefde8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f272bd45-99fb-407b-aa46-0979fc1d5c62",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58a31eb-da78-4762-824f-6aefdd24c85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e651222-071a-4e60-b25e-c01ed216dc63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b83c2c7-6352-47ea-98c3-d1f176a573e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02c6aeec-6c70-4b45-a89e-8de768dd4bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd6281c-abfb-4b06-bdbb-8c9367d4f6e6",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e095442-c30f-4453-b747-9390e57e6933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "618134d1-08ac-412a-8b0b-7d9f438fb0d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600e59c8-e71d-4d05-8bb5-addb4a498b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "89c16998-55a0-40e6-89af-eb26c5856902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd7e490-add6-43b3-8129-c9520405eb7c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25419633-0ca3-4770-adbc-ddb35826ac91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87c0d8fa-3f95-4335-95b4-05fe50232713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b816cd3b-2dff-4b30-b03f-d8c5e706c05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "13ffcb8a-80ac-41e2-86a4-250e7c54fabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e4d25c-289a-4690-b54f-51f04842e42b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa844395-0401-45f9-ab7b-280d42c08e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e8663e-39c3-48a3-9094-6a6accfe067c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c987ad-9afd-47dc-8bdb-77c8d4f5a6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "40fab105-ac95-46cd-b30a-d970158c786c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb18aa08-0617-482e-844c-45cafcc63aee",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1967f2e4-5cac-424a-aefa-749b9cc6b84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a3d735a-367b-4fcb-ad33-79b136b9d48e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a7cac8c-0a9b-46fd-b135-c82525d5650b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72bc6a8d-5166-4302-9f2f-2efb03eb11b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d5d872-6a07-4dbb-a82d-53710d61bda0",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbfe83d-7f30-436c-b16f-217388c50b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce16ac0-5577-4112-ac02-b54899619a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff036bb9-83f0-4c0e-a4b5-e9f9aa8bcfaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2431c753-bd1c-4fff-b9b4-8c11a1e5170a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af5a8c1-db22-4c57-bef4-59ff0385ca1e",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960f5b38-e89f-49e1-8bab-9be605ea4e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f3d34c-0e2c-4091-82a0-94653eb22889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58dd9e1e-c16f-4dc4-a131-aefc7540598d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a236169-7ad6-4a21-94a3-900a48b09d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f4ed4b8-d8ae-413a-9298-7ded9d20ce87",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35a9b20-bbdd-4d20-aaed-db48104f8427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3840d3e2-b448-48c4-8e45-39e05fb2cb60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e477395-899e-46ca-b4e1-615641ee788e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c83f319c-cb1e-4ef0-aa66-2e718e3f6a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1342a866-ca7a-4f3b-9d50-847835487282",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e6e52b-3d20-4d54-82c3-323b9a460bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec06f705-2bf5-4c4f-b0d8-54f7becb804a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5980447-8d3e-482f-8149-9d7c9683e611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5309c470-cd4a-41c2-9b32-48f3cf8b75ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e29b59d-3dec-4043-8186-c90e6f5127d9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2b339e-3b20-492d-8a0b-c88792358229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a62357d7-7729-4914-8afc-9e57d945b91f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe0b6f8-7b37-436c-bba2-c8754089c624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b93da218-1328-4449-abf9-e2c10a2990cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e72ed22-fce7-45d9-8fa3-c04a75b06fa3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b07c38-fe2f-49a4-a3e4-e22bf7b2491e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9de4a410-a3eb-4e7b-8d78-e616790f8eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8e3af5-849f-488f-97d5-2c99e6ddc0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b80dc27-3d5f-4f7e-9d82-9bb78d802a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d30522-9a34-4afc-a771-0bc7ac83f640",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a33fef3-97d9-4737-ae23-02cead543bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "679ba53a-ff2b-4221-bafb-ab2088c3bd32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5b641a-c74a-45b6-b2a2-72916e09ae14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e05c6aff-17b3-4fe2-a880-4071cde219e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001d8735-ffc4-47c0-ae52-3c695fbf1b72",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "377688cd-949e-49a5-be49-66e2ba3e3ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c048d86-0688-4c95-af94-02b9cd679083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390e0b68-9eb1-41bf-bbc5-e81832893009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "af3893a3-7f1d-4740-a6c0-2dcac356783c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd602f1-2544-42f8-905d-92a9af8081cb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6b25f6-5e1e-4696-8742-39294c5970e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66a4acf6-80b0-4eee-8d4c-9b34bfdadf42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90bc6330-917b-4112-9857-609f9d469732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "510924eb-6638-448a-ab4e-1b69be4901c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45808b24-c388-44b8-a219-24758a5fdfa0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a97a32-38e1-43eb-b7fd-e92ba087940e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2623c6fa-9aa4-45b9-b806-7b728d800165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb1f122-7f15-4e61-a4c6-10fabdc6820a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8bb0028b-3bbc-43af-b1e6-cfee1f74b8b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbcd4456-b689-4ca4-b524-421e99935ad5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c068fd-28fb-42e7-9a9f-ba1786be2c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "298d65f5-0159-4d32-b3c1-3163b3e62053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b5c7e0-7390-4106-9eff-f229919cb00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "700159a6-3281-44bd-b53c-03f338254b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34966a8b-cbfe-4d83-851c-4af3d5f57aff",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e79e08-d748-482d-886b-e0a795f0333a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "327ec12e-1fc7-4eeb-b3d5-29a38b67425e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3b5316-6b7b-4dcd-94b8-14ca07e162ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40617a03-7658-4860-8563-298cdf78cbfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7141bdc-6716-4d01-a64b-7fb8eb2fb623",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78bdd233-e857-4faf-b169-6232dc902632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c858bbc-7186-45ac-b853-49b4841977e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83aaa240-2d6d-4a11-86ea-2ae34cde4b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "813bef31-9098-4df4-9ce4-07913427dd32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c87c991-b34a-4490-804c-7da35e363c87",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f145a1d-ac5a-4af7-9ee4-b980104df263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d960e50-01b8-49a3-8705-ae287b1ab09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8da8c14-810b-49ff-9c5f-7667864b37cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5ad659-fc2d-4326-8dd2-5eab9a32177c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11539c0e-fc52-4bb9-be63-0e2dba3791e2",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aacd8381-c337-4d41-ad35-e149596e2f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c27e343-8b6d-466a-9b40-849a8da815d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25f0680-1550-4316-8caa-7ccd3537b67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d3894b4b-4905-45a9-b761-9413825d5c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835ce00d-22bc-4347-9ca8-e0627962a6ae",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18dae08-57d3-4714-9df1-aa2cfd0ddfb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b83ed577-f819-4574-90bc-1ec50f731f84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368d6ff4-0dae-4895-8940-2ba5a033d104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "33d1edc9-6ad1-4608-a65d-3e2968320271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a56bc17-a238-411d-bd73-e2e221aadadd",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b853620-88e6-4b39-9531-e694229b7cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "858492b0-eb0a-408a-ace5-1a73cb7dd5d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3774e1e-78e1-4e3c-83bf-c98d0745bdce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c254b0d-67b6-4bf5-8830-cd7dd1c13fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e033b651-eb22-47cd-9df7-6021752cb9aa",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85094ea2-1fae-4d5c-b031-5eeb63f33995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d633c97d-574a-4493-a3ac-e5fc28894d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c410054-119b-4f9b-8655-660393ec88e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0389e1de-2e8b-4fba-b6d9-a17546c2730f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7233de81-8f2c-461f-a187-cb66375a8f77",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48615768-cc1a-4401-b2e4-cc424a9a62e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b0b339c-7c07-4b90-935b-34e583e0236e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37dbdb16-8c77-4ec5-aae0-1dbafa9f6512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8bff67e9-21a5-434e-9fc4-fa870b99f29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1e257a-e6d1-46f5-a17c-0271d61f4a88",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "589ff70c-9a78-42c7-962f-dcfe82057970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6697412a-e08b-4728-a94d-135916baca68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753b5117-3fdc-4e0d-a347-e09718493444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e9e42dc-d90b-4979-8376-bb98b73925b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4521c2fe-989f-4a2e-99a2-d658e5d6c2bc",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "075e987f-29ef-4ff3-93b1-f1d96de003ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06d360c6-c8a7-4301-8075-0ef1f4bc4f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22218a4-5cee-4160-baa4-c62d37cc7ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7da8e64f-fb1a-4fe3-835d-6b98667e8bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197b6b7f-d552-485f-8f81-d0f96aaf2d51",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0684399-1553-4a04-a2b3-5be34cf5a2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "886268fe-8891-452a-9a2a-864ad49dba53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8826107-3e72-4e52-9cef-5f7e4f046b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa479467-33e9-419c-88f6-fb3923ca6b68"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "521be4c2-d6b7-4018-936e-d17cc2afffce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a10e848b-001d-4c7d-aac9-0c99e3be08f2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b37803d-d425-41a3-a38a-ad99f2b7a6d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4e39589-84b3-4aa6-8960-c805e042bddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace5047b-22ce-4f32-add9-c4603376c4aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "55ba8154-dfdf-49de-860c-04e69ebead12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05fa823-0176-498a-a986-ab7689b62214",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "689c4a35-63a0-461b-a85c-caa11f35c7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a10aadf-f8be-4611-843a-e2e93367f349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc62f4c8-d3fe-4d94-9876-2c1488029f3d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2a8d7b39-fad7-4078-a280-ac40e78e175f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb88b47c-5ccf-42ab-a897-4ac7886595a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1be9951d-b6b6-4952-a66c-9ca6a343ab00"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9803569f-0358-4a36-bcf7-197293dbb38e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0cca4c96-5b6c-4428-9bba-5999381aa7db"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ade5036b-37d7-4707-acd3-13ed68d12c20",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "16908448-d178-42a1-a69d-7e22a7f4c558"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8b3590da-5afb-4f5f-a28f-f3520738e822",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2687af00-022c-4215-8276-02a931b9f17d"
                }
              }
            ]
          },
          {
            "id": "3c4e9039-a52d-44b9-a92b-27c7c74ebba1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a0c3cc5d-7636-40dc-9297-b13fb99425e9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53cdc577-21bb-4a22-84f3-2bf5274eef89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "02aacccd-f064-44b1-92c2-9c08ab01f7fd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45d1ff35-9c07-4a49-9aec-507c7d0f098c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f2093f6a-235e-4a9e-865b-6b21e63a5e03"
                    }
                  }
                ]
              },
              {
                "id": "626ebd52-704f-4cee-85d5-b120a6d77593",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b48a4791-c220-45fa-9cd5-8fe2d680d0b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "400a7485-8e10-44a7-9a2f-b0517282b17d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "23a4a48c-5f5c-4956-8c78-448dd8cfb029",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "54fec41d-b401-4711-a73e-bfbb1fbb9b95"
                    }
                  }
                ]
              },
              {
                "id": "f1eb8b82-3eed-4a26-a88f-7d85111c5c0b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e1e8000-84ca-40d9-bcfd-1463ce470b1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d53769ec-05f5-4be3-bc2d-43cdd03f728c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6905a1ea-3bb9-42e7-a42a-e140bd3fa9c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3c5ddbb5-d271-4bd1-8f10-97fa2e5e132d"
                    }
                  }
                ]
              },
              {
                "id": "858c3e38-73fd-4475-aec7-6c40ef73c537",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7584820-a9fe-4585-92d4-8eea4be94910",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89406801-c8aa-4a54-8406-cd58ac59675b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f0847c9e-8ed7-4fd6-a717-2138aabb3eee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "fb512725-96d2-4ce2-8809-7704a3c66219"
                    }
                  }
                ]
              },
              {
                "id": "3e3b14fa-76ac-4eee-8277-658c64c14066",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c51add0d-ba84-4441-b50d-1af216af5ca5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e5738839-44de-4a15-80d6-7871ff936a88"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21aa7bc9-e0be-4a43-a496-fb422251155e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "48bb12dc-12d8-48f2-bab7-44548af55ab3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "18c47cc1-6485-4d79-9e29-cb243f3752fe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7b7f50a5-3b37-4c85-8032-b50bb4f284f1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "07e06322-86a4-47d2-b58b-882e7464893c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "65bd293a-4b94-45c7-bb92-073782cb0090"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad9b5ab6-52bf-4ae8-9a59-9bb48740935a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b90e212d-41e6-49db-945c-c53db4668ba0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2619838f-e83e-401c-88d1-8ce10109b81f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "810d0761-0587-467e-9503-f170c374235e"
            }
          }
        ]
      },
      {
        "id": "96e81d0d-a624-4114-869c-8ca10a69fa64",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c32167b3-55b9-4363-a423-26e0a58fee78",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1f1514a-64e1-41ac-87d5-18ef70d81b28",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "573e72b2-13c1-4db7-a8a6-30d07c66571b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb201af-d03e-4614-ae37-3f9e96d9fb19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c6e7c1-a5bc-417c-a809-99c0c7c007b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52903d4-3aa2-4151-b4b7-4193b2b98f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "39d19dd5-b40b-4daf-b727-0789a0fda852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78fb817a-35c8-4f2e-b2c5-cea0d6745ecd",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c82821b-32ee-4fe3-bb3e-977d71be0ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4efcd16-9870-45a5-a037-9c482218c6f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3579d4a1-3c87-4155-8c1a-38a6c6e2f03d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e1ad15e-90ab-43ef-82b0-b09414427525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932fae0c-993e-4aec-bb4c-4c30f0aeba9a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc964a2-4946-405d-b3a6-5bb22bf5f0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "703f3339-1491-44f6-a926-230f3491e327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8155c528-b877-4e55-82c0-17e0ca840ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "78108668-c80e-470a-b260-08d0b94b15e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36fc2681-7c03-44a5-b1e2-843f05f006ae",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b5fb6e-e094-49af-a469-b4c76cb4a1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1dca229-8665-4922-ba90-f99f78f864ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fcfbfca-cb9f-4099-83b2-20ec3226b53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e522b89-0794-49de-9ef8-5fb19690bf6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24cd1a3-9e8a-4733-808c-f7b662104cc0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8003403-7c5e-4764-84ed-2011b27c6714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f3b421a-5c0d-4ba1-bfbe-cf2a82b3c9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4bee6aa-0d25-4af5-8829-4a070105f084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f45c92d-293a-49d3-8473-3c5ec50ce318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044d724a-1802-4023-8455-696d5bc24777",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5dfd68-9bfa-4915-a803-2a48c086e5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f06c9105-41f2-4207-b772-b25a58eb07af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266b4801-dd36-4d1f-8a53-652d49f6f71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d26f01e5-30dd-4455-bfc8-a0bcd267ce30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3ac120-a2e9-4ca4-9662-e95b8e47a690",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7028cfff-198b-4264-b873-95e236732e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e425222-1fbd-40d9-85ed-fe831745fc3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87999de7-cadc-46ab-8ef1-47d568727de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "10c2c1f3-c3e1-46fc-88b8-b62820f80f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c068da8a-6c57-4a18-914b-90ce58438671",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e6604b-39b3-4ebd-94fa-23ab8f56c580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdd0a583-9f11-412e-8dd8-e68b848a99ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0ab652-b9a4-4c66-b448-609b559908f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "986e783c-4059-4be7-9fce-8fd2928a8d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ce016c-31cf-4399-8ed9-7a0578539a03",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc370e16-910a-4465-91d8-eec910fc306d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed96f494-8e78-4fb1-b598-5f1b5d9baf42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2081f82a-765a-49cb-a052-3579f6c84ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "566043b9-d10e-4c5d-bd2a-8cfd6db7b9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1301b3ee-6b07-40d9-936c-dfdadeea2846",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b138169-9c61-4abd-9944-526445356119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff9a4cf1-b233-4e61-983c-454bbe474bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d162a269-86b0-4fb9-bcba-40d6fb9edda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "716f43ad-fdf7-450f-a118-c8107cbfd1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bca729a-ea45-479b-8403-1997acb9d373",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02eea119-0642-4c46-9882-23c4359f2ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "714c2ec8-857f-449b-9658-9cf903b8f3dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4076da7-3352-44ec-8660-2b2da197786a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d1e80c-710c-4bde-a32b-1b0e8a8c0fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c04489-651c-4689-9e49-668b45b9c94a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960f0b5f-9ca0-4440-a442-996ca2c3993a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2b383c0-e788-46b2-bed1-f6d669c5a760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b8294dc-1c0d-4683-903c-dc48db8a9442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e0359dc1-f125-45d2-a87c-0fc17bf41bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f4b94c-596f-4884-acb2-a82d2f15deaa",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4279b5-6982-470e-b976-e154aacc1486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b0e051-1644-4eb0-8987-2df8010735a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c4e32e-f0b8-4caa-a903-ec435516fcc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f231a2a7-9723-41d1-b8cf-1311d8351b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2595b2e0-1862-4017-bccd-109d68d5128e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b06a682-9920-4832-8dfb-06ea4f672120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b40da3c0-1ff5-4560-95a8-b2dc4808581f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f261e5-454a-4b69-89ad-d0641d321f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c49de72-08b2-47ec-9191-c1b990e0f5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e5a62b-0298-4cb0-9de1-9effbc351379",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fafc5ec-e345-4adb-9fc6-a522f8b7eee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "554e8861-b289-4776-9e39-7b3a3175dc6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ab21e5-4737-4920-adbe-35e9c4dbfa2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3abd626-8905-4f6a-bf2d-795419671823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8b1ebb-d326-4985-b0cf-be5184197524",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0128bc5a-d043-4811-b6a2-f63845413421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f89118cf-835e-40c8-bf3d-52eb1ee33e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b36d32cd-ef30-4ecf-a6f8-a0759b9014a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9563457d-b81e-4620-a71f-e5035f23aa8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317a688c-d333-4ee9-bf81-36d9f7eaa6d3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd665c7-555d-42f2-91ae-403cff9c8e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6772b05-e630-4cbc-b90f-91846fe393a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8c6137-1dd6-4b95-9694-3c324101f004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4a893ac-bad0-42de-ab51-2066d971f316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad22d14f-1835-42c2-a9c8-66a46550aa64",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dddb6d13-a991-4e7b-928f-52cd666c9981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64dabb16-345f-4303-9b63-5a2a40658f50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6fd900a-0bbb-47a7-8de0-62bfe857f5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b4ec808-a796-4fc2-b2fe-f9a2e2d87f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8769ec-84ad-4eb5-a26c-b869212162f1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d812b3-9b91-491d-85b2-cb76845457b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c1c165-7b18-4bf1-a594-5ef0f5ae854c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab4b729-28c1-46f9-8ba6-4602d8afa197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1686ec8-f215-4d23-a1d7-39096c28706b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc33ca3-91b5-4408-85a9-e9b1bbf41a71",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f173613-f798-43e0-9b03-a3244b43275d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90bc8f2f-aa66-4437-9f27-a52d993a5ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "641e9f4e-f71d-4fe8-9621-22a833695d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d26048-5211-4904-9282-3d3d8bd57772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7774a327-04e9-400f-b7e2-53d677402154",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea430e1a-0881-47bf-8ecc-15f80ce2c7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c269feb-fbe4-4dd9-b38c-297f18864540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47f7c6a-68a7-4f46-bc83-cb68cf2fc2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38dc457b-d838-4ba5-9554-bd9de0303a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f072f9ac-0ded-4dd5-a9ee-9f0ef1a675d2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8543ec9-94c5-4d41-accf-1b3e98eb883a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48fa59c7-266d-4ebc-8d98-dd9d2328a7bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0187d1f-bd51-46d8-8b5b-aa04945c58fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b790adda-29b0-4205-a7ea-4ba58a56f1ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb294f5-5d38-4c74-9a99-33ee8b45c2cc",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2025b2f1-a4c4-4249-9161-3ce4e7c81dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80c99c7a-ad8a-4601-ad5f-b51f4c6ddb39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac37ac2-853a-4bf4-8528-48fd405ab5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee37b240-6fd3-46c2-8614-db12bf68849e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c6a1ae-8845-416a-a355-262a55d468f1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77d8a04-5879-4cc0-accd-7e0da1b48539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab2b487-08a2-47e2-99f5-4c39ee1bf88f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f55a665-2387-4c9b-b0d4-639800ccf570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e28986ac-864b-48bf-a849-9955cb092b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a5772b-288c-4f9e-a505-1818a2121e06",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3969fe05-de63-4667-9d4c-dc4dd2e31168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9db0580d-34a4-40c5-8568-b603633893a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d266345-7c53-42b4-a393-aa1cae720051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15bd403e-447e-4f31-bdb0-9b778671917c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0e5bdb-4e79-4dcd-83dd-d568d472cedc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d0ccd4-6041-44b6-9b88-ef212feacc8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d50b75d-9d1f-4d1d-9810-baf7aa03cba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0dd7ab7-ba9e-497d-ad16-64ef8711a744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e246e011-5ebd-4238-9239-972ddb9b1ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e3a3b2-78ac-46f5-8017-6fdccef43975",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "015f00ce-ea31-4873-81cb-b0e409553b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68754015-b380-4420-88dc-773432e547e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a982aa-16a2-47e9-915c-dbb6168fb251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ffd96f3-f9e3-48fa-b976-ee394b1a1bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674da5fb-4a67-45ee-9805-f2bc84c83b3d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59a77a9-b57b-48db-bde4-37ef09d398a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d7a1400-848f-46b5-a7ad-e2a4f3150fb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75dc5806-9d3d-4983-937c-a17c6113aed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e57f7b97-3775-4444-acfe-a79ff6863546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643b89e6-978d-4f9e-b8b3-5ac5c504c819",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1092880c-d496-4303-977c-5d8468b5aa5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9526db0b-880f-4a55-a2d2-6382f3639321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87509207-dde0-44ba-93f7-42ae183f8139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d8308d2-b57c-4189-8b0f-6d461d3ccd77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e19698-013d-4306-bbff-04ec04e8a8f5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ebda5a-13e5-47cd-b358-6ab4849bea13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a482babc-776c-4079-a15b-aac1686a75ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47eec6b9-da7d-4854-ac57-a3cee001f809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "008b4fba-d4cc-47c1-b74f-7aa45de452cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b5a027-0bb1-403c-9cbc-d5449c1c1f4f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8fbd012-fcb4-43cb-b168-f38cc4300c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0298f754-bbcc-4f8a-a723-504d9b826c1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575289d0-9ae3-4f1e-98a4-03bd05d3e1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c545b2d-76a0-4f6a-8330-b06b463154a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1ea13d-3d3b-470e-a9b6-ef902170da99",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eaffde7-81ba-4525-ac7f-a95e59e01ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cdca043-b145-465e-9221-068637a2ff17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e9679d-8ac4-48a1-8900-0b73a1420f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74f44e0e-e31e-415f-bdf1-4ee99f523a2f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aefc7d20-8318-4390-8b09-b56b7c5be949",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8bb27030-4cc5-4e4a-b8ad-faf03a79916a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdfb9fae-0e41-4163-af46-e63f09c3d5b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d816a3f5-7c79-412c-ac3f-f427287a5b77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca7e2de-db8e-4b1e-a757-ec32dd805957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce069e1e-e468-4c50-b7d7-6a9e8ae1310f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f897d4-a8ca-4de3-8ed3-b37dd8357f33",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ea1cc3-f3d9-4cef-897f-47ba8a67035f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "f9e1cfce-2200-4beb-a9b0-32aad5a2b22d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a29936-ca6f-4b7b-b51f-a17c3d68ad9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4bb2af3e-8c8f-4b61-b213-273587c07c5e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "061e1e4f-9ecf-4399-aaee-3b6d56b5e74f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b876b78-76e9-4d2e-9436-ebaa188430cc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3666cf4b-2714-40aa-85f9-480fa7566390",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7516c69-b177-415d-9540-435c8c078271"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70a1a4a5-d4e3-41a0-8ad0-794c5d13280e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0a1af94f-948b-450f-8f0a-49ee75822049"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3cc86744-ed11-4272-acc3-6eed2d0e4bf2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b0c7b11-fab3-4613-9e7a-756b2c5d8256"
            }
          }
        ]
      },
      {
        "id": "f9c8ebb5-3361-4473-9416-38ac4dc8abc7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7f4748b5-9bee-48bc-9996-53648475b393",
            "name": "Negative Testing",
            "item": [
              {
                "id": "02deaa93-51cc-4ecb-849c-ab9b95ff0bae",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7af3b013-d999-40d9-a7f8-a6d75003c991",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c614b34-bfb4-40c0-b050-ce2703fb383d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1656499-5351-4f34-aded-f94f514dda1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2c6d13-b5f4-4287-b13e-192ac9fe4416",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daeb453e-9f5a-4239-a508-ae20e2ed6f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6b6bb40-426b-4ed4-899e-d317e6cd94e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc49409c-e6f7-4150-aadd-de2a107f0682",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de96df7-ead9-4044-b89c-30949742ea04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa49358-8ed2-4aeb-a314-c9a6d1646d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c2e0ee-298c-49e6-b290-1beb99dfa54b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16920f9d-f78c-47da-b9c1-cb1969b7f8fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2b0214a-24c3-461d-9ac7-39052e1f9b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731019d9-2d33-4492-a32f-ba79efee3734",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd1a20c-e2f8-4988-b3e5-df0315ef8734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc23c55-dfc5-4c30-a9ec-82d8d9a871d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0cc4169-b9ca-44c6-8d54-5f084bf653d3",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e796b9ac-4289-427f-a4bd-8118cc191e17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a8fcd66-cc4d-4a93-8341-ce06ac1c1116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77cc733d-f6c9-4446-ab18-fec9572baa6c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4e929b-d8d3-43e4-b94c-c69a49b598ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ffa2632-faa8-46e1-9d81-da3e5f8bdd03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "479a7372-5cce-4195-b168-463a7d446e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f613a72-c253-417a-b48d-e115c2da6a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39b2884-bce8-4639-987b-2f4c772d7dd5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa8c98d-136d-46d9-93ff-b35b1edf90b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2c4d734-5789-4bf0-8331-73810a54c1ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95e52bc-d2f2-4310-9689-43df6916d7a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "075de988-9d23-41a6-bd4c-2c17d7a9bfe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc09ef4c-582a-4dc9-930b-e91e2ad71b5f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02dae61b-bd79-4651-bc7b-6ed133cbfaa2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d0c196d-7710-472a-b74d-c3f604f15a9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0652c275-a5d0-48b7-ba3f-637b7694a84a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ab8f89-88ba-4e70-9dd8-c9c1b5b9fe10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65bdf6da-9c31-4889-9032-0f59c8570fea",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd6a58e-d52f-4390-b4b3-19c8d26bf746",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e185b1ff-1184-48cf-aa35-525b7f0548f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "801bf221-8a19-4029-b3e0-6489b8f53d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f9986fd-b792-43fd-b773-dd0e04266b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9edaca-700b-4de6-b32f-e4ac15db178a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f07d53-e03f-4b96-99b7-b3df4e094e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa8e0173-c6ce-4809-9c31-d6a0140053eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7459d6fb-cd33-49e7-a2eb-53ccfa574932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43c2db11-8675-4ba7-9364-ba4236a0c0d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697b981f-a665-4e92-a5ff-a97ed27ba685",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5f5845-e4c0-4d63-8a95-2b693656e897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1a47386-f570-4459-9eef-12adf11d12f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de24177c-8073-4c9b-9a9a-7e038f66f119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a0c0f2b-d728-42b8-a2c4-1c5d0863401c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be6e3bc-0d5c-4ab2-8a18-54862322596c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9154d6c6-51f5-4566-b158-520e82a717e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab8d5e9d-67a8-45bc-b0e1-1ced3560d787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a023e6-67c9-40a5-ae8f-1373d89f72be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b84e8c3-e5b0-493c-bdac-1078d631c9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8cd450e-8a13-4546-9af0-f8d9cb16b8a2",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e86696a-7c7d-4d78-b92b-f50d7b9de172",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01c962c5-bf65-4143-8bf7-ffc80040647e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef31ba5-05be-4688-80d4-c9315ae3109b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ace12bc8-ff6d-4bfc-b0d7-e641e5f59a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f73d63-466b-42ac-962c-1758917ad686",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d36032-0efb-452c-a507-1c5aef90bf92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2bf63ad-da15-4330-9318-07e84236f6f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ed538d-6490-4b4b-b198-0ba03839c5ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b689cff0-7e0d-49ce-99e9-9dea323f3a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de32867-76b4-43a7-a375-25644d369034",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed84b15-6be1-4220-9e7d-85fb50bc685b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5eabcb67-7fcd-430d-9727-d7a55bb9a6f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62368126-99ac-4246-964d-dce8d6b82b5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea931b5-bbd8-4016-a20e-4e771fd98120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843cdbd0-1fec-494e-a71a-330e7d2ada24",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5738fb4-1a68-4c46-9aac-e33be1e02e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d6d38d1-0032-47c5-8bc2-06af7cb75de5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86acc2fd-b3db-48c6-9c11-961ca1246fb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ccbfa0c-2fbd-40fa-b8ac-9dc7982b286d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b51b35-f9ad-43f2-9553-7fbccd621197",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e4caec-49b8-400d-abed-e73737a5f63b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25683308-8a67-4462-beca-1b64b655fe8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39cc99ff-a303-4c2a-a315-a60b7094330d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb07df7a-ea8d-4a76-998d-312763e88cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36875ad-ad05-42b0-b7e7-30b5cf68bdf4",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54cda40-f85f-4035-9a1b-de158cf1e047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c13a97-dafa-43bb-8f85-a4b4641dca94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ffcb77b-94aa-4eea-a9d7-4c84ea77a9c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82e3aad7-81f2-475f-9d31-00f5435fceca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc19a3b8-57c9-4b6a-8e4f-c1dc52c4bda6",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "792ee8ca-84c7-4ae7-a681-4b328c41d539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7d36287-1047-4ec7-b391-2d8a01898b1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c68bbbe-f8df-4668-ab70-0da9e9e414f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "386cd1ae-523f-4292-83e2-1d909c0c0adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6b028f-3365-420e-a1ec-329484a7fcea",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fadb0e9e-5398-4de1-9491-32970327b7e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf590ef-af15-4c88-9cd7-b13932629003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1a2896-5a1d-47b6-a107-ba8633b3a1d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cbe4534-783b-4e33-970b-b683c9a83a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ca63b5-ccd4-4056-80b9-23eed10646e7",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9671bc9c-0f0e-4e36-93db-e8300cffa83f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "244b45a2-d7d2-435e-b6a3-174834b89e98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e299c47f-8ef7-4d20-827b-6df5328d1a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f84c74d-27a7-4d1a-975a-dbf89ba8220f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba17ea7a-9a12-4497-9ed2-b3121cd329b9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd448f12-f556-4a0f-a05b-5c94570951c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efa46f8-c6b4-49f0-a455-21b6bb8fd8ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "295bdc9f-23ad-4c05-9f6f-735213f1ec8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3e51cfb-0550-4bee-9b66-f3df44e8a0fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e47e0bd-7c9d-434a-ace6-4de9168796a9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44bd7d31-650f-465e-8529-5ba0a00b60d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71d26156-f8a7-4b22-aed5-6a7dd5697b2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "566d0f36-079f-47a1-bb25-3ca86457c4aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "769cf2f8-8b60-440e-be85-06d262cb6757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3aab53-4a77-4f73-a984-bfc9ad8fa238",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18de164f-1285-4f3b-be22-3d8fb8847b67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee7bb464-dbd9-479c-af7d-2e4b93205ffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d640fb9a-019e-4308-89a1-d09ba793755d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4fa3679-83ef-40d8-9be4-685131db55fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7bdada-5549-485c-be19-9c53c9538150",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b704e3f-44f7-47dc-944d-1bd89af42a50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b08af22-26fe-4e9d-815d-6f660781f2f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39152bb-560c-4f5a-9c1a-575df2afaa16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f66ca51-3152-497b-98c8-7f17cb65daed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d58aa28f-73b7-480f-80d9-888cc6ef335c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cabf1287-43d5-4056-9b49-2e3b7a5867bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8263838a-3a80-492a-92ae-c1581db93a51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd52f267-addd-4b3b-9265-b3d14e07658c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeacd562-4235-41db-86aa-a2b34ebbb123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74412f68-e25e-432b-89fd-136bc5a5ee7d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6eda6a-5ab3-44b0-8739-324bcfbe53b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11075dc7-39fe-4177-9687-5c8cc8dee748"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b00072fd-3f5a-43ed-8753-3a79f5202481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0a82b1-8ba1-4f26-81db-783a9bb646d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c5f1a3-f3ec-4f7b-ac0e-e68e050e37ad",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c28f21-df65-4b44-86ce-4feebe876460",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58f352c3-8128-49d8-b804-9f159394a5ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce96ebaa-f252-472b-bdb1-3c96a741babd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b6bd102-e061-45a7-90a4-6fc0574cb3d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a63a80-4632-47b0-8ede-da60f5953aa8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a96882e-c242-4a5b-9a35-972d9bf9a35e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21461ae4-eb49-4dc0-b9a5-e6a6d2b3179e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c33c0f-3bb9-4750-86b7-82b28ed66a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a53ddf5-0d7d-4431-ac1b-5a476dd138f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c3a21a8-2536-45b5-93cd-e3f1f44614a3",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9422455c-c14f-40b9-b1dd-0f2111a4d989",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f32f0e49-bd9f-4f30-8325-49b525612a21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3104233-8404-4c60-a578-4476053b56d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b0a0dc6-17c3-4876-938b-994ab4b3f1f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d70b32b-7bf4-4811-bc68-dd325245cadf",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2d7e19-b6a5-4239-b442-88d159648206",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd585216-677a-412a-8cfa-6804100b0779"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d240a67b-b822-49ad-83e7-2fd185263b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "903ecc86-3aa1-43f2-a2ab-dd82675b3430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20ad2db-3dc0-4ed2-b0e2-0934b7d568bb",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfe810b-38d9-4958-943b-6ab5928d1a28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ff302f7-37df-4d5c-9130-aebdda12913b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b75b9d1-5088-474f-80cd-3ff1839398e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d292471b-e798-47bc-a887-81b41ff568d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb63651f-a415-4df1-b236-c36c33d9d482",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ad1c9a-e32f-4117-ace5-1d0b5d1dad90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f633445-4a7e-428c-bf87-23b459161e4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9dd017-2cd6-4683-8add-bd24c4d42ca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf4e9d44-adfe-4737-b209-1f5d41882ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb2501e-d8f1-45fc-916e-4d0c3432956b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb890ce2-96bd-4e8a-9cbe-41cf4d0d8e1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d72084ad-4133-4c3d-a654-423698c2417e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f3a58f-a8cb-4a09-bd78-39b19e84114e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a45a0c6d-03c0-4717-a51e-ea058b266792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27e8bbe-1c25-4990-a554-a8ba9f6eaac8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc245345-e245-4aab-9461-8bde3536998b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bc1df91-2e77-4491-b19a-3a0f2e76ca49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00554dc4-e304-4aa9-8814-72aef9e73a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06aab3b6-34e3-4211-9f14-579c2aec6a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c744eb0-e613-46d2-b6ff-b012b058d87f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63dcd32d-45cf-46a7-ba73-4e9b439a83a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a00f6ac-b336-4559-91e3-fea3dfdc02ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6dfafeb-7fc1-43df-b25a-6fe15cc38cb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2445731-1ed4-462f-a376-03279b495c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ea553a-84fb-4190-803c-9075dc305b9a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bfa32a-5937-4972-ac0a-09f09c5b2fe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caea0b3b-f40a-4a7d-9b5c-840f49e08d0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6f5372-cc3d-44d2-8253-f3ec8770aa3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eace4b89-e755-49ed-942a-30cbb70148f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9390534-ced0-4b36-b5cc-d868a308afdc",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "331d9926-c9e7-4d51-a3ae-9d748879e36c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f671dc3c-2e25-4409-8981-498d39ed429c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce00174-b02d-495b-97e9-0799c63d0faa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e64fe363-6f2c-4f31-9632-6a2a762560c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bfef10e-dff6-4668-a2d2-09e123ded791",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7265f9e-cf5d-4d0e-90e1-8173dd21d776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6882572a-b7dc-4abd-9c36-ab02f093babe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1fef10d-8911-4528-b0f2-c4b62e0be0a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d325160a-20e4-46d1-ac1e-1012c0bc78f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c378a147-4531-4e69-9e30-8b4f79e9b0f1",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b51db08-06b8-48cd-8771-67220f8102a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bb8f79a-8008-4eeb-8215-cfa065c54202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d451ca89-88a5-4afc-800b-fb0d5b294ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aa31304-a51a-4d35-88af-7aac262ce091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47516440-f4eb-4b02-8188-eb6a36e51057",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70892417-0bb8-4d15-94f9-2e422ec2d4d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "902b00f6-1d36-483d-95d1-5778dec88266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21af80a9-92cb-4fec-8ab5-39345a381ad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5a4e5e7-f45d-44ce-8a14-f3b45f795832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c9fa23-6c86-4206-a8cc-d3c4c97b0ded",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cadb3247-533d-42f0-ac8b-6eca820f025e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02f6c0bd-c6ff-47c3-a08d-ebe71cf236b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cad6e99-3f10-4171-a6c9-5ddc6635c62e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59f78b31-db7e-4643-8834-abad3f9b4a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0cb63ee-6679-464a-be5a-bd029f009c81",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc180f7-a4d1-46c0-923a-d8552706ca80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57709051-f67f-44a7-b921-31af7ad38551"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0759b114-ad2c-4d83-ab6b-ddcf75962c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57bff933-299c-4e75-92db-3a4492d8d11b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2687f90a-d8d0-4d9e-b9db-7e2f78c71bb4",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d9a19a-eb44-40bc-ad14-ff3292da126f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59eb512c-9092-43f9-948d-aa57e62cd91e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bb4314-fc19-46ad-8b9f-e030ce6f08a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85efc372-b4ab-4598-a7aa-96dc2e6d819d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0eb4865-312c-4b9b-b25f-5c7f36f7c0b3",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88068fe0-b9fa-421f-92ae-929f26c4ee4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b1c7d5a-6b74-4e2d-b7ec-a99da2e2fd08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5845de8-806d-42dd-bc35-ebe824dd0a22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe3bca26-5db2-4fa9-a269-05602692a653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7ffd29-a875-47bd-add8-2263437567e3",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3446c66-8d25-4b96-8f6a-d8ba8336bf78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ff11bb-1590-4f90-92a7-ccc43cb0c275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "026809f2-9c82-40e5-a1ba-34dee89157a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae45a17-6b6a-40c3-bb96-59b2d7b6f304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1720018e-4c07-466d-9af9-a4f554414ede",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f25913-d5a8-4049-9af5-b18b56429742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91ca5027-ccc6-46e7-b580-82a9f071d4bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc016e7-3c7b-4672-9903-7be0f4141fdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b426d07-4085-4c6d-9761-9e8262a0a847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77561b85-b67a-4a6e-8ab2-1be8c956e020",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a769da56-579b-41cc-88d5-6b6526c74dee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7e5e6fb-ac6c-4912-8741-cb599bdd1801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9bee02d-7400-4b1c-8cbe-211ad7c1e404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "749c4f32-911d-4974-965b-bc2c027705fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ec997d-c725-4345-bc27-5aa0f172c5a6",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe1e0d3-2715-46be-b8d5-53c592fafe7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f51f283-68dc-45b6-be16-239897c4575a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd61a78-83ff-4cb2-a925-ea1faebc5719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "716492f4-44d4-4a00-bb49-96a570848eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45daeca-0a88-486c-9dc6-c30cb85aeeab",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6cffd2-6663-4556-b298-50cd6b05aad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "222615d6-f884-4e3c-b8f6-9326295c20e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0698d39a-1a75-42bb-a5e2-365f2bfbd6f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c083f68c-328f-4efb-a293-24e77e15569c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6d30c3-ade3-4a03-9554-0ccfbc498a05",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8158fb92-94ef-445a-8e74-372fca7df4fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50225a02-ca83-4ffa-a255-a75de93b2841"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8bbfb5f-94bb-4d96-af78-2c8c45327a37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bc9eabd-4e68-45c9-aebe-3fd1e9b67224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4fdc75-48f3-40f2-b1c9-8cb943f8447f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c035e37-31a8-4579-ac5a-c521b2358877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb16302-f156-49c6-ac17-66babfae558b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0cc5f2a-cc62-4cf9-a454-33cf67c02b9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f54d1bad-a41c-453a-8bff-462a40518e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d857469f-4cb0-4625-afa8-1b3194c4dde3",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2a35da-b0d3-4863-b202-534ae92fd4a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40c5d9af-f4db-4b5a-88cc-45088cf02121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc5f6ad-e055-4a90-b63d-35edf5e39ece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a15835c6-66fa-4fa6-9887-c189595492e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b3879f-3472-4f1d-b335-eda67a90013e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77835cc5-932c-4032-9a8f-3876bb0f50d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cfcb582-297b-418f-b4ea-7e6f48de7f98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87976394-9024-4fe6-bc64-4d5a1dd69f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a504ff78-31ca-4977-b111-7a1f6c7c42f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5707418-f7a1-4080-b7e4-015904f6710c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b75a34-6b85-4b6f-89ee-f5f4293afc74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c95042-493e-4e30-8644-b47dc838ea71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e76e373-ab4f-4f1b-ae73-71eff91c1936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd13ff0b-826e-44a4-a5bf-d5f340adc81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba319e7-5fc7-4b5a-b9b4-246da8915d8a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1980e504-fc64-4573-8ed5-53dfacdae7cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512f1ad7-3229-4675-8035-aac24ef517dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c62235d-522f-4a06-a727-214cb8c120fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd2a4138-7e65-49dc-9335-1457fd7936be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ad045f-657a-435f-a120-44b250f2726f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4128798b-9259-4ea9-9317-fbe0f5b8164e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "684c2c66-b00a-442e-8662-47384580c14b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "739fbaec-c22d-4bcd-bc3e-4ab0439938db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0e1b4b4-11a2-46ac-b743-96c1225c1762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b268445b-9791-4735-b8d4-2e4dea7446f3",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62c20ff-ebc4-4dc0-a50f-8de96262411f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac51611-2a39-435e-a527-66c891a9cbac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "248c2db5-2ea9-4f9c-9a87-9f458f7f2c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b288dc61-3fd2-47dc-bc73-346021ce1501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b2bbd4-541d-436c-9a3a-9d74efe832bb",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd09bb3-d0e8-406a-9121-63f9b57217a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccc11f98-cbc9-4939-b05a-cafae1f9ccd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7d407c-b00a-492a-94e8-e28db628c1c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b34290-e267-415d-9d81-f22113f2d028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c47035-e813-48dd-9331-6c7c766c7afb",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8b119f-cf18-4315-8006-7dc1bc215f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "406f905a-fc6c-4641-8b22-1d5ca2c2ad9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb61ddc-4209-4b61-97bb-4bfc3d710562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a8d97e-43ec-4535-a965-cb388c73abf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c40573-b5fc-4b4b-9a0d-6fe9fc2e31a9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c221d1f0-b8a3-40d5-af4c-4afb9d63f85f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3179821e-3bbc-4cc8-a53e-18882d0bdba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1e1997-345f-461e-a45a-1bfba45ba69c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddc6074c-797c-4cc3-bdfa-4d5f2df3ed06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85049e75-726d-41a8-8e1d-30827c6e2bfd",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e07fc18-62a6-4dbb-b707-570eeff57241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f5d5f27-664a-4611-94d9-58d6caa68304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8c585e-1b18-4c1a-bb2e-9a8e42eda207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "771dc2dc-b392-44a5-b660-98336aab5c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301ba39d-b3f3-4abe-b4a4-8e2c861caf83",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "941ba881-6bae-45c2-bc3c-4d52dcdfb135",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b68e91cc-6b8d-4dc5-b2df-1b1f5b7537b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98830311-f353-42db-a6b0-a40b89c31c50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7b22306-f79c-4407-87bf-9d2e1a5ea3e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ce7291-78f4-44bc-8f83-f5391ae2f92b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e93a209-39b8-4b96-8716-886a10317242",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe1fbd8d-11c4-4e3f-a2cf-0783ee0fb403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54873f3-7f48-4cf5-88a5-0af5914c7e7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59f9d3eb-b490-440f-b0ce-874bc82436bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a09266-a42d-4edc-a71d-6fe29a036d24",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b4f3a4-5ce0-4c20-bb9d-885a2fe28633",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2825d59-cd84-47a1-85c4-297fe21f4e84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9827264e-ce50-4c4e-ad57-ebc0f8d4a57a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ac46bd-1e42-4b7d-8fa0-a275ec70fb08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6e4deb2-740e-442e-83e1-c4e44f6ec9ab",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6edefc8b-0008-4f65-bdd8-fa195a0d716e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "164ff5d3-5df1-4bbe-bcb9-3e98d558cdcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6a7dce-b011-449e-9a27-cea0bc63ca74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d704d848-a96d-4115-aee0-5c7c62dd44f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca74013-461d-4151-92d1-4c659f54afd8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c693c17-69d1-4466-ab57-7b99b163b98a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "483895cc-43df-4334-96bc-bea55008c3ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d1a016-ae1c-4b82-9145-27878ef055ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "383b695a-8b48-46c4-bc35-a99d89b3d51d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c152dd-ae4d-484d-b219-9f5cc6d63b2e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475486e2-4eb5-4670-bd10-7d0f491f058d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f54446d2-0852-44f4-a591-52aa7c5a32a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c297a8-8ccc-4b36-bcc6-b971088191cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f63001d8-fb38-409e-898d-bab91ecc8f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebcc5194-8b49-48b5-9da3-76ff09844486",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17c2743-4411-4f3c-8d87-b69812e45747",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6226142-ebb4-4fe3-9f70-1183e44ca41d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2935d215-3ed9-4457-86c9-2aa3b36599d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "377d4c57-a1ce-4037-89d0-0f92101e5f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdffd5cb-bdc5-46bd-9855-487cff240cbc",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112a8e1f-ea51-490c-bf41-05f28cbaec7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c06b0f3-394d-4abe-b0ab-c52dd503d0f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "555b553a-1ab6-44d6-9057-5af4ecd4fdef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c6408b6-71d9-4b6f-823a-10da423fa056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7a0646-d8f6-49b3-a039-4e309345a3eb",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf661c69-a988-4505-b614-0674728d91de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc014fd1-f888-404c-9801-70fb4cfcb77e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0816d2e3-7fa5-4532-bec5-b50f3b3d3569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ce4456f-ee26-424b-b89b-0ba5884d1649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d030f1-1e60-41c5-abb7-cf6e305ba92c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf4bfa3-4f7e-41cb-b8d4-2af8e749cc54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf3834e7-a2da-41a3-a9d1-1c76530b8811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f2cb87-cbb2-4a58-831e-56d6e7e78fbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f07cc6c-7c14-4144-b30e-2e0e893cf203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cde7f14-16ec-4f0e-805f-3b592b4e8b0b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815dc6d5-f374-4ea3-8890-23f9d67815c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82fbee7c-2690-488e-b8e5-dd005a76effe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d0caad-d1d0-40a4-95dd-4d1dc1f90c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40f3f394-735f-4ea8-8232-53e100d98b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a194efa-1a91-46e3-b371-b8ec586e08f2",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b1e005-1a14-4fe0-9d5b-318c62c83e17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63cc3cf4-0881-4a6e-8667-d9f0633f60a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19fc096-2033-4e85-a61e-5e3f680fd99b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f18f7cb8-5142-4917-a60b-b9f3d52144d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6c52bc-0477-44e1-b128-fafd095393ed",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4cdf7ff-c59b-40a3-a304-bf878de81224",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "796f8bf3-7b4e-42ea-bb28-ee2bfd5a70d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f615e30-96dd-4294-b272-91812ecf4ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c69507-5c1d-4d36-a73e-6073365f7da4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423125ef-9797-4019-a4eb-ac8e5b8b1d17",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb0115c-5b25-461d-bc85-170712e2302d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a12903d7-71f8-42fb-a2db-d0290edb0875"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ba86f7-583e-494a-bae9-1899c508a6ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "751af7f9-279a-4bb8-9f66-a1f19c4ac48d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ac00f7-25fa-46c9-8a52-0271558d7269",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c86863-4b55-404a-91cb-5a806663981e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b373e1f-25e1-4995-a2de-3271299c9888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e06aa4-b2d5-483e-b9c5-d10ced3cc249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f47fd5-35fd-4218-a162-1494e68baa74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a333c2-f5be-4102-8cc7-da3e6c8882a9",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a03d13-0917-4757-9c21-84a12f55174e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "548a0f60-fa39-4054-b6fa-e07b255fee92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3291d89-b8cc-4ae6-b414-0ba85c85958a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "135b4f7d-1cdf-472a-b780-c8c9a8dc8fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef36ff7b-de9e-4b03-8844-cc1176dbd25e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d12e423-7dcd-400c-80a8-c5ac9788ef48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f47b9669-4d94-4c4f-9873-29353a4b4ac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b4fa6b8-9e2e-4ecd-9a5b-62e5a5b8a264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1bda18c-b3a8-48dd-b2ab-75772c51c142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac21a39-8cc8-453f-b748-a1ce416b411b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cfb4c94-dffd-4287-b290-8dcb227b2f8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51384ac0-b204-4efb-aa51-1747daffa482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1a92e8-d812-4641-bba9-7645af492639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93d0389a-a608-41ba-a92b-45746c8c9d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0611f2c-c26a-41fa-934d-0ed1ad56ae17",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34ba6a6-3f50-432c-b225-2bc246e47e3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "604d8191-6ac7-44bb-b698-25eb3e54a089"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f773137a-18fd-46fc-80b5-a68d80a880ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "775d6ef9-b15a-49af-8d2d-bcffd99fdc69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1cc25a-9cc0-41ff-ac4b-22c0788884a0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35eba2cc-ddaa-4c6c-9900-fe514a2da858",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2590e1e2-45c4-4d38-8e4e-9b44ab1aeace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e11b4c81-8f78-403d-8f78-ca8e7a66a187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "333047c6-6703-438b-b2a6-133fef2989aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e6d2a1-bddc-4358-aa37-81226e160904",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4210c633-0032-45ef-b78d-6a031f3b7944",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec2bcba2-2fbc-47b0-ac54-b67fbba92064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "417ef2c7-b6e4-438c-b734-7c217a3324d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8424e6d4-0fbb-404a-9272-6ca305b046f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00882f3b-92df-4bfb-b36d-c31b964eccb7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee5017a-db08-46cd-afd8-bdbb3b80f158",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fd3e603-d8d3-4321-98dc-f054c979e0a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1820acd-6405-4852-9a78-805afe89dcb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcc95e2f-52c2-4522-b338-70fde644832d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42fb5fd-0a62-45f2-a1f2-e3393772f30e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e1aabf3-fc08-4339-85e5-a2fe62d2e4f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2aa5815-deee-4b01-9369-cf15b2b22ab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3732556-3a40-4dc7-a325-6a84ddc10b05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb13f1ac-0658-4a2f-893f-d7a671df7055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952bcad0-4d37-4a61-ad58-5e9abc2de6a4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8a2baa-2145-41fc-8ee9-5b91c0594aa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f91b24e-909b-47cc-ad7c-4a2d46980faa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d64ebc-5972-4799-87a3-2248a114aecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bb01831-f4c6-4bdc-b7d1-73ee48e42c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44547c2a-40f3-4b0a-81ec-e23c6028ffef",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce98e82f-581b-423c-90b0-716eff95b7ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7037f98-ec89-41a5-8849-dc2b93b928af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ce60d7-d970-4926-a297-294a2d17639e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c356145d-03c8-432d-8922-56c82f9e3989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494d1a64-a913-49b5-8036-4be4b4931dc2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873fd8a9-01e5-414e-ab4c-e0fcb7f1aa24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c86acd5-ee1e-48c3-8acd-79fdc41f6347"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93355744-0d7e-420c-9f90-3b237df63d4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc21317e-68c2-4a07-beba-f1754e0f74b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf33e528-e6a9-4c50-a760-6e5b4bbff628",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92918a55-74d9-4070-99f0-e72bed1413cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3f5aef7-4933-4c8c-b65a-a5d7d460ff58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "238df525-e739-4574-94ca-bd9bf2836d24",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ac9cb1-d745-4939-b7b6-1838fa5417ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c3453d-7177-40ac-9da6-97139b5b8e62",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee4aa345-58e6-444f-b199-cae9dac92dd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a33f9f22-01e1-423e-a6cc-036b7002d974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "631b316d-50d2-426b-89a0-f2a451e717fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de2737e3-ad3d-418a-a2ed-bbc40007dafc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9fc109a-a141-49df-b86f-ad4e61f7c56f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48762660-b99d-442a-897b-6f5df7486042",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6782ab8f-927d-4352-a11a-57c638bb0ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08fc3f10-70fc-4135-947e-181efa4a243f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c79c19-e65b-469c-93b6-7edf4aaffa67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0878ce-1977-45a9-ae0f-5f164f44879c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b11bce-8525-4297-b444-197ac3fff62d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20babdcf-ecd4-440b-ba30-2ecac5a35f34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777e0f52-a103-45e7-bc0a-7c57c0866dd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51fceaf8-345a-4c59-8c4b-61a0b4819dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f8ac695-45f1-41bb-b079-46d3dfdb932f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a77a3b-2b95-4732-b5a0-1605f7ffb52c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f52a593-f3a0-4d89-b2ec-ed9b47b82452"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c57473-fb88-439b-9f6d-34bcdcddff2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd341bd9-3da3-4a13-bcb1-32d3dabbef07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86100b37-a587-4814-a9a7-140a66db02b2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbd3a08-bd37-4ce8-8296-34c59c37502a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44eddb82-361a-41ee-8b19-765adbd85c0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14efc61a-d530-4e00-88ed-f0c859188755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47106118-e73e-443c-8c9c-f87f04566e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8808ea9f-9afb-4e04-9761-6542ff0ef1d0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ea787d-0e51-427f-9fd0-267de32a0b5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c29bb1fb-249d-454e-aea9-1ed5ac20ede7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0627fcc-8fb0-476e-8edc-cfbe9e0f13a8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53096fd9-f5ac-41e0-9974-3fb15d37283f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d002b1-dd4e-4611-987d-85482b035230",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3334a51b-e338-4c48-9006-8e618a48fb1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af4325e8-ff81-4847-8916-5ddfaeed60e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10013588-8e6a-4516-99cf-263dbf7133f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc8d83fe-5431-4ea8-91fb-c4a12376e921"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "250f3e4c-fa5f-4b3e-a465-15bd9f451199",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f839470b-afd0-4676-ba33-78c353f2dfbe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9ad008e-0621-4683-8d14-83e0dee1c7ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "810f5cfb-ed15-469c-a70a-6f1556151333"
                    }
                  }
                ]
              },
              {
                "id": "db054b41-9218-425b-b4ab-3a9d6b1d9cba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f01719b-4101-415c-b468-298b353df4ee",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d28991-ee72-4d8e-8537-039806ae4ffd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "842bf1ff-00d8-4fe6-a39b-71e853ac75c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60a83bd-5ee0-4a08-a5d6-67455f3e0ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4fcea6f-86b1-49f8-a1fd-ec3423c7dccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d50880-4890-4c4a-8aac-b10a61a64bd3",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dcc7861-4ea1-4086-a409-f460133f133e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a1b69c58-a4d0-456e-aa54-13d0b198ed59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8380caa9-22c1-4e53-9c7f-df84209546af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0ac1b98-2365-4bfb-aefa-5b26ae2eed88"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80e9fb31-9557-42cf-8495-f34c9453295e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1438b488-ec7f-4c83-84bd-1049df439172"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9593d05f-11ce-41c8-9e98-919a0d23f870",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e630127d-1684-454e-8024-b48d4b5af966"
                    }
                  }
                ]
              },
              {
                "id": "13d71bb6-4a96-4734-adcb-b437dbd9f5b8",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f210d690-944a-405a-b98f-c702072adb74",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12ce288-62f7-466b-899c-033f4fe70041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "2a4d42b2-3b44-4569-b16c-5a0194ddbf7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "801a39f1-56d9-449e-b7f7-47831ffca5f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7415e666-96c4-40c5-a87f-a0e824ccde72"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8be11244-7395-47e8-b653-7eae1d92569a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fb0fc4fc-6cf3-4ec2-ad6e-8f8a9bddc574",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4af6da28-e97b-49bc-9c49-3e9f3e642709",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "09b06889-6b42-49de-95e0-8e3883cb2c20"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3678c35-beb6-47d5-a53f-bcaad5460375",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7dfe5a0-7f43-48bc-90e0-e9c62d2233af"
                    }
                  }
                ]
              },
              {
                "id": "62a64e45-9425-4a17-a409-4d076c3f8a48",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9c53e17-d989-4686-9369-50bb9cd02191",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a294cde7-0665-4370-90b6-5a0f437b42ca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e958b21-348c-4138-822b-2992b8f0f786",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ed08bf0-136c-4834-aa81-f4a344cbdd70"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "04f26524-3159-4389-9b99-4351699b0c2b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "61f5501e-964b-4947-84ae-e1bd498e3db5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a6379d0-b490-4ac3-bd8f-6262569e5416",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2cea2bee-35aa-47a1-9de9-783f5201d7a1"
            }
          }
        ]
      },
      {
        "id": "5a1c75aa-c72f-411c-acf8-a5f6ba6a70d1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3b2e2130-e51a-459d-8bea-f56e8eab2ec7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb04850a-680c-4b47-b93b-97573f60127d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "523fb2d1-58e2-412d-af28-b89db32f547c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03e431f-020a-4d1d-a35f-0b5f0c233069",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "06630aa3-a8a9-4efe-a788-34305546c727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2adb0b0a-8f04-439a-be16-dabad1590282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47dd9b4a-52fa-41f1-a968-041400471705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a4291f-fafc-42f8-a20a-bd5cf0525cdf",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be487dc6-eb57-42a3-9e14-cd73547d0457",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5c5559d8-37cc-4a74-b9f6-f936f9dda4f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1b2980-06ee-443a-84ff-af5e986415bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a00dd194-7c30-4acc-83ba-16665586d0bc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba12f815-0dba-40ba-a9f6-4823106f6544",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88668a93-ad07-4afe-a734-29ca53a21839"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "259ff579-8d18-44b6-8058-a38046ca4567",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1de6ba37-cff9-453d-ad63-6d8c5fbce5f8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9df1f0c4-eb33-421d-b8a4-cf97302e1d97",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c62cc38c-6419-4257-9d42-33cb6fd9e486"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55e166f1-79e1-4d29-a7ec-2b1d6adc7c2e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09ed7b13-9f26-4c2d-8363-6ccd828ab9e1"
            }
          }
        ]
      },
      {
        "id": "f03e73a0-e256-4a93-b088-ecc7ccc7a921",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "bf3e811b-3d7b-4820-9e3b-8de8ef847b65",
            "name": "Negative Testing",
            "item": [
              {
                "id": "06f16457-942c-41b4-8ff0-628cfd97e667",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "45ae4dc0-6ede-41eb-8f6e-f3ded2324532",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4cd1a1c-0939-43eb-bdf7-7d7805a45adb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "357bdfe5-2f78-44fb-b362-8231a46fe645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d84382e-f663-4ff6-a516-ba206820c8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94732f1a-335e-48fe-a529-2a89dd609b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70feb2b7-c3bb-4dd2-a3dd-bf2c077cd80e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8e6737-f54e-4d3f-8e71-83300b5087ad",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1f7857a4-f6d7-46b0-ad0e-da52e96f7cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14486eea-d0c6-4eda-aace-b609e80b172b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc7d4397-92b8-46fc-a4d7-49949feb44fa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "477597ed-051e-4cac-b7ee-ab02da1251b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9303757-05a6-4b39-8e1a-37f0b702a919"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec5b20ac-6cfc-4c3e-bd53-36f1b11cb58d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60e5e969-c198-4985-adbe-ea30573d79c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c53b22ca-ec43-46bd-a23f-5c5acb789f31",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0347493c-4868-42ee-a822-3fc1a1a68695"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d81ddac9-6c8c-4afa-86f3-57234ac16840",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "17072bee-310e-4c15-bcc1-19a159fb832b"
            }
          }
        ]
      },
      {
        "id": "6ce7cfb7-4176-4e03-89f7-854cb19204f7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6853992e-b55c-4afc-93bf-28b1df3e4005",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8fd9fdbb-a936-45b5-af56-8d6fb4c77424",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82627550-206d-404c-a298-48b1f67ebdfa",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d83011-87c1-45b2-ad56-7c195ed90208",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d4dc6b02-4855-415d-b024-7f5735b99931"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a662a6f6-54d6-41c8-b822-4311ec766de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00075c0f-481e-4961-a7bd-dc6ffebc7797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e6c4ad-189c-4837-b554-7129e922e23b",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065095aa-3c95-401e-a50d-d2c3a493558f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b37b0031-97b2-4f25-85b1-fc1ad6fd5703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fccd0ec-623c-47a9-9880-5e598b0d218f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40ef4e61-cc65-495f-8ffb-2f6acd9748ba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ada2486-2a8a-4390-99d5-0192f936de12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f45732d-9ded-4079-a880-c8bd49b481b3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9af2021-90cf-4a2a-b931-b6869df5a902",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f363df81-2762-4c9d-ad79-a8a1b7f0d47f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "27d7cbda-2f93-4ee6-8525-fec9e4df0f50",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "05eca7ae-7bf4-4ec1-ae3f-33e3411f597f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45a99cb6-6dee-4c4e-a5c0-5b0a98286ada",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "188790f4-7b20-4db7-89fc-37b15184878d"
            }
          }
        ]
      },
      {
        "id": "102054f0-3c9f-4efd-b1e3-31bea1affa12",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a88b57c8-4f27-43d5-b4dc-9afd56e8a515",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf88b04c-772c-47ea-a84b-d935922a447c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ed66f75f-16f9-47ee-a8e9-e069c7d8ef7d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1aa3b558-df37-4e3f-b036-d43521b4489d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c783328e-104b-407c-a0b5-6a30b95ac760",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 254.1544401544401,
      "responseMin": 5,
      "responseMax": 8603,
      "responseSd": 872.5981393675878,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676767312567,
      "completed": 1676767389300
    },
    "executions": [
      {
        "id": "ebd05174-7423-4f8e-b391-4a434366093d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1a6dd502-cd70-473c-985c-0df88eb7daa5",
          "httpRequestId": "efaccfa7-7f99-47ea-b51e-da461513b649"
        },
        "item": {
          "id": "ebd05174-7423-4f8e-b391-4a434366093d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "aa0798cb-bf8b-4d30-9a78-4007b8d330e0",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "09469b17-0aba-4209-ab02-7e3be1873d5a",
        "cursor": {
          "ref": "9e89c79a-04cd-4800-8507-32b603f0e95d",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d64cb683-c4dc-41bc-8a8c-9b65d95c3ac5"
        },
        "item": {
          "id": "09469b17-0aba-4209-ab02-7e3be1873d5a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6a0110c9-cab3-4100-92b9-c850f85ab0c1",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "d395d335-b3a0-40d7-9b1e-972a56b43892",
        "cursor": {
          "ref": "846bc40f-8a91-440a-a375-6d8cb8d87875",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d8c3acf8-b27e-479f-aa35-e0ec1cb92b16"
        },
        "item": {
          "id": "d395d335-b3a0-40d7-9b1e-972a56b43892",
          "name": "did_json"
        },
        "response": {
          "id": "857a47b6-8ce7-4f2f-b5d2-c8c63bc7727a",
          "status": "OK",
          "code": 200,
          "responseTime": 318,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51e5431-dea4-42ab-9bc6-152294848bf3",
        "cursor": {
          "ref": "5eac6227-9aa5-46fc-b506-1e29c0af63a2",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "28370669-24cd-4188-82c4-9ed61361e364"
        },
        "item": {
          "id": "f51e5431-dea4-42ab-9bc6-152294848bf3",
          "name": "did:invalid"
        },
        "response": {
          "id": "6b31b98c-dc16-47fc-bd89-e334cf37400d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1275,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "f51e5431-dea4-42ab-9bc6-152294848bf3",
        "cursor": {
          "ref": "5eac6227-9aa5-46fc-b506-1e29c0af63a2",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "28370669-24cd-4188-82c4-9ed61361e364"
        },
        "item": {
          "id": "f51e5431-dea4-42ab-9bc6-152294848bf3",
          "name": "did:invalid"
        },
        "response": {
          "id": "6b31b98c-dc16-47fc-bd89-e334cf37400d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1275,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a6867df2-3766-4011-bed6-d6a62cd9aa55",
        "cursor": {
          "ref": "6ea15821-a92d-4aaa-af59-6e65634a2668",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6183d5d0-9eda-4071-adfc-8ab876590f2c"
        },
        "item": {
          "id": "a6867df2-3766-4011-bed6-d6a62cd9aa55",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c376e7f8-56d1-4df1-a1f2-0437881f425f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 46,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e27b21ad-f5fe-4a8e-8236-38d0e7dfee00",
        "cursor": {
          "ref": "598b2c9c-07d1-4c3c-b88b-f3d3462ace4e",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "424342f3-305e-4411-bc82-83bb14bf40a6"
        },
        "item": {
          "id": "e27b21ad-f5fe-4a8e-8236-38d0e7dfee00",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bb5f47bd-7a0b-43c1-aef9-876458eef1c8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "446bb128-b22f-4734-abe3-0b4d597794a5",
        "cursor": {
          "ref": "cf91987e-c75e-49a0-b7fc-31ce658f204d",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cb500c47-2023-47c8-a1fc-a0fb1b041551"
        },
        "item": {
          "id": "446bb128-b22f-4734-abe3-0b4d597794a5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9cf4d607-7c90-4749-ad64-cac6ba5b0326",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "acf9e143-9a84-4b45-a644-8bde15fb067c",
        "cursor": {
          "ref": "85af52b2-c729-4c4f-ab05-ad90437e5983",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b407e450-1484-4a2a-8d25-95032605de3f"
        },
        "item": {
          "id": "acf9e143-9a84-4b45-a644-8bde15fb067c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "de236cd2-7c93-456c-bedd-73fd00973a4e",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "acf9e143-9a84-4b45-a644-8bde15fb067c",
        "cursor": {
          "ref": "85af52b2-c729-4c4f-ab05-ad90437e5983",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b407e450-1484-4a2a-8d25-95032605de3f"
        },
        "item": {
          "id": "acf9e143-9a84-4b45-a644-8bde15fb067c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "de236cd2-7c93-456c-bedd-73fd00973a4e",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8b815fcd-0c96-4c64-beda-ca5ab07b33e4",
        "cursor": {
          "ref": "d0c51bf8-83d0-4d4f-b1ae-83fe7952a44d",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a9bf05b9-410c-4370-8786-631a5feed318"
        },
        "item": {
          "id": "8b815fcd-0c96-4c64-beda-ca5ab07b33e4",
          "name": "identifiers"
        },
        "response": {
          "id": "13674f52-db55-45f4-b26c-8987c8bdb4e4",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36966a72-40ce-44e9-9232-92d656b5fc50",
        "cursor": {
          "ref": "f1b797b2-94dc-471e-a522-94aa13a099ff",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b53b8909-31a2-4893-a8d3-06d4039aaf44"
        },
        "item": {
          "id": "36966a72-40ce-44e9-9232-92d656b5fc50",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e6dc3dc6-4eb8-4014-8176-b6415f2fb86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36966a72-40ce-44e9-9232-92d656b5fc50",
        "cursor": {
          "ref": "f1b797b2-94dc-471e-a522-94aa13a099ff",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b53b8909-31a2-4893-a8d3-06d4039aaf44"
        },
        "item": {
          "id": "36966a72-40ce-44e9-9232-92d656b5fc50",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e6dc3dc6-4eb8-4014-8176-b6415f2fb86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f3839d-85c6-46d4-86a3-393b5920f4bf",
        "cursor": {
          "ref": "e40e5670-9b9c-476d-ae16-ac7b582796ce",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c79ae60e-b3a3-4071-97a8-e401516a2c25"
        },
        "item": {
          "id": "d9f3839d-85c6-46d4-86a3-393b5920f4bf",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e99f22fb-c932-476b-a9cf-0e567b2fa6c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec718658-2790-4fb5-b962-92454cf4260c",
        "cursor": {
          "ref": "fa4bf2b4-2c0a-4178-9dae-10a3ce5675df",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "afc9e99f-5d88-4e94-9c84-32cf1870bbb7"
        },
        "item": {
          "id": "ec718658-2790-4fb5-b962-92454cf4260c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ea005f39-56ca-46ac-bebf-71288ca3a53e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f21c6f-e63d-4e1d-b353-c7a09720cee1",
        "cursor": {
          "ref": "99515582-f8c8-4da4-a31b-13a7781903c2",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "92efd158-94d0-4859-9696-6be58b10d01f"
        },
        "item": {
          "id": "a0f21c6f-e63d-4e1d-b353-c7a09720cee1",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "39e991b1-7f24-4eff-bda3-fb6d7cd13b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7006fa-94da-4826-b4ed-82b543f5ba67",
        "cursor": {
          "ref": "462a74b2-fde3-4887-9d94-acb25c0901e9",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9b9b3123-2ca1-4887-8ee4-1bf555aa8c84"
        },
        "item": {
          "id": "1b7006fa-94da-4826-b4ed-82b543f5ba67",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7944b0dc-ad95-4dd3-aef9-f5e1a0f2a770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 968,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5843bbf-e7cb-43fa-a3b3-2ba89fa598b3",
        "cursor": {
          "ref": "524f9a09-f997-4212-903d-46cfc4b4793f",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "160fd0e4-7f8b-4e88-b52f-596fdb2b0fcb"
        },
        "item": {
          "id": "a5843bbf-e7cb-43fa-a3b3-2ba89fa598b3",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b9892d9b-e0c8-4144-a902-81a0e6e28759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f9c2d6-e7ff-4f50-a62c-62af903c76d1",
        "cursor": {
          "ref": "e71bca62-921d-42e1-a9bc-63d8aab9db00",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6483bc3b-24cb-4146-95d5-8420f5e903dc"
        },
        "item": {
          "id": "86f9c2d6-e7ff-4f50-a62c-62af903c76d1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "97f03ab0-4fe2-43c9-92c3-c83270854167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838f59d9-2a9a-470c-8f17-8bc5beaa2707",
        "cursor": {
          "ref": "7ffe05df-7dfc-420a-b81f-cdea44d71088",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9c266c4d-eb3d-440e-83af-06aad556e904"
        },
        "item": {
          "id": "838f59d9-2a9a-470c-8f17-8bc5beaa2707",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "417a3ed9-b710-4387-8544-3c0af430d0c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3dd3951-7a6a-42da-a825-64de736566ed",
        "cursor": {
          "ref": "a830f26e-6370-497e-b7dc-88b9db6af00c",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7cf780b6-6d3d-4ea1-bcbf-56797e8fb9be"
        },
        "item": {
          "id": "a3dd3951-7a6a-42da-a825-64de736566ed",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "164f5190-3342-4f7a-a18d-d604ed26b64b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1530b8dc-f2a8-40aa-aa06-d376db67bc9c",
        "cursor": {
          "ref": "10b0af4d-77f5-44b3-a548-501d3aa08cec",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c609a545-a32a-41f3-83b6-32389cb1ba8a"
        },
        "item": {
          "id": "1530b8dc-f2a8-40aa-aa06-d376db67bc9c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "bea28962-f19f-483b-a3e9-3ecb8ebc437d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b56c331-1a92-448e-9519-5fc8e28d9263",
        "cursor": {
          "ref": "9e3bd548-55d4-49a6-8cd2-571019dc05a0",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1af46cce-9e83-4ba3-bbc8-255004baafba"
        },
        "item": {
          "id": "2b56c331-1a92-448e-9519-5fc8e28d9263",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ec35c5df-9e5a-4c17-b95a-46d6b1921fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 321,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "067fb019-ef44-459a-a92f-85046df1064c",
        "cursor": {
          "ref": "cf2367a7-012a-4cc8-816c-060f864263da",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "35c2deb2-b6e1-46ed-970d-a393f27c87cf"
        },
        "item": {
          "id": "067fb019-ef44-459a-a92f-85046df1064c",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "152651db-8ba9-4cce-84d7-2f4ebdbbb5f9",
          "status": "Created",
          "code": 201,
          "responseTime": 1756,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "5cf5994d-b49b-4c37-a754-83ba23e83705",
        "cursor": {
          "ref": "3f271b1e-5e00-47e3-b7d8-8d062ddf8687",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "35d7273e-49f5-4169-b2af-6df889b4fb8c"
        },
        "item": {
          "id": "5cf5994d-b49b-4c37-a754-83ba23e83705",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "afe8260e-b868-414e-8ce1-f0d3caa3dd39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7b0a92-3b61-41e5-a5d3-0066e27b1d81",
        "cursor": {
          "ref": "0021ba46-8696-4257-99a0-9d5c220bd11f",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5afa3e13-8958-4b9d-95c5-f20f5c98f010"
        },
        "item": {
          "id": "0e7b0a92-3b61-41e5-a5d3-0066e27b1d81",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "129aba2a-0314-4891-9a09-d4d8fbf25e1f",
          "status": "Created",
          "code": 201,
          "responseTime": 7285,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "e6daee34-b92a-4ecf-aea3-dc73f9314d57",
        "cursor": {
          "ref": "804d764b-c413-4bf1-aafa-a206dfabd865",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "61802001-77e3-4658-b53e-659a0f76beb4"
        },
        "item": {
          "id": "e6daee34-b92a-4ecf-aea3-dc73f9314d57",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e98c73e1-9155-4a00-b7ac-df074ae7a70f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91d6ce8-ba2f-441e-8631-c2aded0adbdf",
        "cursor": {
          "ref": "e092d42b-3001-4ffe-b4cd-3fd1fe8f32a8",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5e59ce35-9d72-46ef-9691-2d4214d48ef0"
        },
        "item": {
          "id": "c91d6ce8-ba2f-441e-8631-c2aded0adbdf",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "464f09b7-7b9c-49eb-a886-d2c872338902",
          "status": "Created",
          "code": 201,
          "responseTime": 8603,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "eb273d9d-918c-4780-b54d-7d58a2563e7b",
        "cursor": {
          "ref": "b1829ecc-d064-4b8b-9254-b9fc5055db44",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bc1fc9c5-b760-4c76-879a-b399806370fe"
        },
        "item": {
          "id": "eb273d9d-918c-4780-b54d-7d58a2563e7b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "945ea3bb-23c0-45ec-859f-914ffdea2eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4834e1c4-66ea-4685-8291-7ee6cc23e0ff",
        "cursor": {
          "ref": "7ae8b202-0fdb-4a66-97d0-0e38a4500240",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5b90d537-062c-4378-b8c6-0f1b35b3ed21"
        },
        "item": {
          "id": "4834e1c4-66ea-4685-8291-7ee6cc23e0ff",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7e3ec86b-0b9c-4212-8310-8a62c8e61857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33fb896a-5092-4948-82d5-8a4253f383d7",
        "cursor": {
          "ref": "d43f71d4-8a1e-46f6-af7b-a8ee3285e910",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d7f0cccb-8da0-4085-acaa-78c1736dac6c"
        },
        "item": {
          "id": "33fb896a-5092-4948-82d5-8a4253f383d7",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "29925fbe-4c15-494c-83e2-38827be586f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782a7378-cb6a-40ee-bb91-f89cb020ef51",
        "cursor": {
          "ref": "bb6fcc0d-b729-41ad-8e41-2cb76f01a24f",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "08c5ee0a-4d73-4312-b06f-c72527e1006f"
        },
        "item": {
          "id": "782a7378-cb6a-40ee-bb91-f89cb020ef51",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3c56beed-d4ed-4f65-9659-f0984eebdcf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45618495-1db8-4a64-be0b-3b330edef31e",
        "cursor": {
          "ref": "34f25b62-1371-40ba-9cba-d4c31bc88fc8",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e2a28f48-08cd-4cd3-b386-2b9c6dde96ae"
        },
        "item": {
          "id": "45618495-1db8-4a64-be0b-3b330edef31e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5df30e72-84c3-4a7c-affb-efa807cd9c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "664ebc17-f254-49e6-ad3d-2edb5c87f385",
        "cursor": {
          "ref": "ae27e9e1-07c4-412b-abc4-e55e13a010be",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b8e7c172-b5e1-4e4d-a9c7-7b8b4f3542ef"
        },
        "item": {
          "id": "664ebc17-f254-49e6-ad3d-2edb5c87f385",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f3dca02d-1d68-498c-8b4b-0fca74c233c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97872605-ec49-4702-8b88-d0805907e24d",
        "cursor": {
          "ref": "aadc083f-3715-450f-bba6-2b0b3f213df3",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c15ae220-1ca7-461e-b059-a303c16819e1"
        },
        "item": {
          "id": "97872605-ec49-4702-8b88-d0805907e24d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b07c0963-a911-4908-8ed9-624078259bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8febb343-f7ef-4d8f-baa5-591a88e3aef0",
        "cursor": {
          "ref": "32c6b279-1dfa-42b6-b2f7-fe7750d7dc66",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9f2f26c1-84af-4893-b803-4425f20eba13"
        },
        "item": {
          "id": "8febb343-f7ef-4d8f-baa5-591a88e3aef0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e405c08a-4398-44bd-8ce3-c777846dc5dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f46707e-dc88-4a79-a0f5-4b918ad46bdf",
        "cursor": {
          "ref": "42ad4172-1cde-44dc-aeb9-04727a96d84d",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6e2dee76-106b-45a9-a226-8f6576807164"
        },
        "item": {
          "id": "8f46707e-dc88-4a79-a0f5-4b918ad46bdf",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "06473e6d-5d94-403c-a950-b805760ce5de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b664743-f8d0-463b-b58e-b14b48105cbc",
        "cursor": {
          "ref": "5d3ce220-88c5-418f-bc38-27e05869135c",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4a6a63e7-abcb-4724-a604-94b638fb2596"
        },
        "item": {
          "id": "8b664743-f8d0-463b-b58e-b14b48105cbc",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c5364091-c266-4bb8-a8ba-8d4c2cbac89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d479a00-029d-4908-96b9-6ea40ffdf38f",
        "cursor": {
          "ref": "a1e56761-89be-4fda-a667-66e5fd861ff3",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "45097e84-df0b-49b0-8fdf-a5dc61d8bbf7"
        },
        "item": {
          "id": "4d479a00-029d-4908-96b9-6ea40ffdf38f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "60eabfc6-259e-4f7d-9c75-fc394e2e10ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca3dac3-e06d-4df2-a538-fcb750cc91d2",
        "cursor": {
          "ref": "c966cf29-aaa3-4c33-89e2-2c6a0667f90d",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "45ba6c63-0c2f-447d-8e30-2023ef19d556"
        },
        "item": {
          "id": "0ca3dac3-e06d-4df2-a538-fcb750cc91d2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "bc9c2a1e-7f33-4ef8-bbb4-e6aff4d3649a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0c5d58-bc7b-40f0-a910-548dda1ad6a2",
        "cursor": {
          "ref": "3d95bb2c-c78f-47fc-9701-21290f66370f",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b89851f6-19f3-43d1-82ad-015aa3b145ca"
        },
        "item": {
          "id": "2a0c5d58-bc7b-40f0-a910-548dda1ad6a2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cafc52ae-c91f-46df-968c-5f0fea353aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93df1bd-48da-4d95-a90d-9c3dd7f77303",
        "cursor": {
          "ref": "bfb276fd-5788-4eff-ac47-bcc08e0488fd",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "92d9248e-3e8e-4caa-85a6-5dca11c0ca01"
        },
        "item": {
          "id": "d93df1bd-48da-4d95-a90d-9c3dd7f77303",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "abe57cf8-d0ae-4cbc-99c7-9c1695998cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb099f2-cf8c-42b7-93ba-e10fe6b2d7af",
        "cursor": {
          "ref": "fec5a915-44c1-46a9-9473-158583892db4",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "56eea536-be15-49bd-b5d1-dcb06f4db664"
        },
        "item": {
          "id": "deb099f2-cf8c-42b7-93ba-e10fe6b2d7af",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "710be1dc-ca6d-4d72-b669-feead47578d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49bedbd6-ae1e-4f7e-b7e8-f1db0682a6ba",
        "cursor": {
          "ref": "9a8c8552-aeff-4218-ad73-0e1e86c9d37f",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "01293ed0-04c1-4497-86fd-3bd8feda37a4"
        },
        "item": {
          "id": "49bedbd6-ae1e-4f7e-b7e8-f1db0682a6ba",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "bb21bb04-9a84-417f-90b8-e1aae39bda94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147e9a2f-e7f7-49d1-a945-94ab339407c3",
        "cursor": {
          "ref": "f421406c-90e4-4e9f-8e18-46378c86b8ec",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "131d0b53-b99e-4bf6-9810-2f710f506f72"
        },
        "item": {
          "id": "147e9a2f-e7f7-49d1-a945-94ab339407c3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a578d9fd-32b7-469e-a942-3b7afdc36c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348580b3-acf8-47af-b1d7-34a1527cf074",
        "cursor": {
          "ref": "2645c94f-2444-49c8-bb01-42137ec64193",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1260b2ec-1946-42d4-9585-33b998d04a78"
        },
        "item": {
          "id": "348580b3-acf8-47af-b1d7-34a1527cf074",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "23de0a61-0dd6-4a32-8d64-fe271de913e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8282915d-db2a-4568-8f95-e541a4f9292a",
        "cursor": {
          "ref": "d6f3ba5c-12e2-4db5-965b-562b67e47248",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d9b38b04-533b-4d56-a3a8-3d89aa92acec"
        },
        "item": {
          "id": "8282915d-db2a-4568-8f95-e541a4f9292a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6e0e6469-cb70-4b40-8d0e-11278a8eb375",
          "status": "Created",
          "code": 201,
          "responseTime": 1890,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ca949618-bc3d-4f6d-a1ba-0adb8e7b1ff2",
        "cursor": {
          "ref": "a0f10983-18cb-4f94-a6c1-d5435abdc557",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4db7a1fe-fff9-47b7-b32a-2a2446f8eea9"
        },
        "item": {
          "id": "ca949618-bc3d-4f6d-a1ba-0adb8e7b1ff2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4e92a4d6-0bc7-4ccf-9001-d6e1fd4562f0",
          "status": "Created",
          "code": 201,
          "responseTime": 2558,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ad28a2a4-1f8a-49c4-93d1-981a63fd7189",
        "cursor": {
          "ref": "5be774fb-7bff-454f-bf62-7aa6f913f6be",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "54c0e6d6-b739-48f9-a01d-60756de8df68"
        },
        "item": {
          "id": "ad28a2a4-1f8a-49c4-93d1-981a63fd7189",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a7af6f11-8e47-425c-b6cc-3abe54609e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25bba311-9a7c-49af-baf3-534d934673e0",
        "cursor": {
          "ref": "bda65b80-3ece-4c58-8d8c-9544bc1254dc",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6bd5ee52-4fe6-413f-822b-fc9eb0868574"
        },
        "item": {
          "id": "25bba311-9a7c-49af-baf3-534d934673e0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b0b120ce-3c62-4590-a345-24008443d4b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b9592d3-1c41-49fd-b5e1-861f1d4d9adf",
        "cursor": {
          "ref": "6ce24301-c700-4a7d-9bd2-13299d6e1f6d",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "749cc95c-f8e9-473b-bb5d-aee32f0063e5"
        },
        "item": {
          "id": "1b9592d3-1c41-49fd-b5e1-861f1d4d9adf",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "55e82fdf-8190-4cd7-92a7-8115b547a1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf35f96f-38ee-48b3-ac70-45e91ca851a9",
        "cursor": {
          "ref": "616a6a05-e219-4365-9bcf-ec4afe80c8d6",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "521cacbd-86b1-4170-b01d-d873ff8bd428"
        },
        "item": {
          "id": "cf35f96f-38ee-48b3-ac70-45e91ca851a9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c72dc4fc-2ca7-4aa1-96d6-eda61d55c843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca427b1-889a-45f5-8417-d7d8e380c5c3",
        "cursor": {
          "ref": "976116f1-a45b-4f68-aa14-547240358fdf",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e23bea88-3bcb-446a-88fb-f0bff91d0ae7"
        },
        "item": {
          "id": "2ca427b1-889a-45f5-8417-d7d8e380c5c3",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9ded563d-9974-4920-b387-896dba60803e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8448abd-e538-4820-b812-1fad096b5886",
        "cursor": {
          "ref": "5de07eef-bfdb-41f9-9c00-58b763ac586f",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2930069d-f179-4941-8ded-6edbee8b7571"
        },
        "item": {
          "id": "e8448abd-e538-4820-b812-1fad096b5886",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "52af0a77-da7a-412a-89b5-3af356433e40",
          "status": "Created",
          "code": 201,
          "responseTime": 2456,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "40a41609-20b0-4311-a5d6-818988bf302e",
        "cursor": {
          "ref": "a967259e-f016-4b6a-8af6-7468d8cf2c69",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ccc2b71f-e168-4b41-80ac-a342ce938370"
        },
        "item": {
          "id": "40a41609-20b0-4311-a5d6-818988bf302e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "400689cc-b14a-4af8-82d8-591cf5ee6bcf",
          "status": "Created",
          "code": 201,
          "responseTime": 2389,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "49aaf81d-b312-4baa-9156-5b0e9162b58f",
        "cursor": {
          "ref": "074fd39a-0cc9-41e2-84e5-27a910a10a83",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "73c5e1c7-c728-42c4-9f71-22f9f0158314"
        },
        "item": {
          "id": "49aaf81d-b312-4baa-9156-5b0e9162b58f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "676ee85d-03bd-46c9-aeb8-3ca33ae4d828",
          "status": "Created",
          "code": 201,
          "responseTime": 2516,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "55d6e306-576a-46db-9ed8-01ab4f317f68",
        "cursor": {
          "ref": "75b3c16e-7bec-4e1f-8ea5-5a6777e89651",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "28bc397f-0339-47c2-943a-e1f718dbe6a8"
        },
        "item": {
          "id": "55d6e306-576a-46db-9ed8-01ab4f317f68",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7ae3c4e9-89a2-4e50-86d8-49da95f3f2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2955a53-9ca7-4e7a-8dfb-5fad0b424f07",
        "cursor": {
          "ref": "3650a7cf-f433-40f2-8038-2e3d97c665f1",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "50f92897-3282-4ddb-a501-5cc7ebd3acf9"
        },
        "item": {
          "id": "b2955a53-9ca7-4e7a-8dfb-5fad0b424f07",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c6f28b7a-9ccb-47bd-898f-0245f8516ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09907e9c-2489-4590-843e-b9a04d15b7f4",
        "cursor": {
          "ref": "375d1d5a-99d0-4e62-a2ff-c7798cbaacbe",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5b4cf715-ee31-4207-9b95-33c4b7a51205"
        },
        "item": {
          "id": "09907e9c-2489-4590-843e-b9a04d15b7f4",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1741154c-3dc7-4923-ab99-48d2d6f7df0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c759a53-cf8c-4c3e-8689-b96660263d6f",
        "cursor": {
          "ref": "61dbc932-a5f1-4bb6-b37d-af20fafa7ef0",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b4020c92-45e1-435d-8bd7-3c9a5db84be2"
        },
        "item": {
          "id": "3c759a53-cf8c-4c3e-8689-b96660263d6f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5ffbd843-52ca-4b6c-8919-0b48c5eb2c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4188a068-183b-4c03-8187-90edd6a66494",
        "cursor": {
          "ref": "18b0b9a0-e822-4b25-a3c2-72965f8a63e5",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9390c04d-e861-4358-9913-fca853f26dfc"
        },
        "item": {
          "id": "4188a068-183b-4c03-8187-90edd6a66494",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a198968d-a8d0-40f3-99b4-5053f6c2878c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ea1d7f-6910-45df-9d0e-dbd684d15174",
        "cursor": {
          "ref": "1ed50a70-16d7-4bf5-ac01-79d483c99ab8",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "10716a2b-851f-4f7c-87a4-b31670bce732"
        },
        "item": {
          "id": "19ea1d7f-6910-45df-9d0e-dbd684d15174",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "89634134-bd92-461d-b10e-ac9d5d01073a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e74c042-58ba-4ca6-ab34-b43f7854c424",
        "cursor": {
          "ref": "98edb474-c329-4008-b7d2-aeedb6751c42",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "879dc4ad-e992-43f3-a704-28fe290e8560"
        },
        "item": {
          "id": "7e74c042-58ba-4ca6-ab34-b43f7854c424",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1fd32050-c844-48f2-8141-405d2b4480f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc428d74-de77-4855-9600-05758ddc54f3",
        "cursor": {
          "ref": "b51bf489-7fcc-43d0-bff5-ba40db8ec961",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "80f0db87-7f96-46a5-8bb8-58aba70e143b"
        },
        "item": {
          "id": "cc428d74-de77-4855-9600-05758ddc54f3",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c84ee61e-f69e-47d2-9878-47a9e623b1ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94fcd55b-baaa-472c-9ee7-7bc71050ab85",
        "cursor": {
          "ref": "8c2236a9-9b1e-45ec-9b7d-87dcd84f8347",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "46c1df42-d1de-4a48-8ff8-eaccb8ff7f24"
        },
        "item": {
          "id": "94fcd55b-baaa-472c-9ee7-7bc71050ab85",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7c6c721e-d4ac-47dc-aaa3-b01bb3d26da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc365f17-36e0-412a-9a37-c978dd50476d",
        "cursor": {
          "ref": "716e84ec-ba59-4cfb-a8d1-9686d1ed82e8",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "da9dd29e-2cbd-4cce-adbe-f4ca47cdb81e"
        },
        "item": {
          "id": "fc365f17-36e0-412a-9a37-c978dd50476d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9723afb3-3bf7-49f1-af49-402e7a4e8ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b687ac6d-8347-44b8-8244-96f295dedde7",
        "cursor": {
          "ref": "3b0eacf0-d7b7-4a5b-81d4-0ec758612344",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9e73e253-9ad0-44bf-a539-d5c662129b45"
        },
        "item": {
          "id": "b687ac6d-8347-44b8-8244-96f295dedde7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e467cae0-a946-48c8-991a-e193b62efcd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd3995b-fc04-4025-8b47-1b9328614926",
        "cursor": {
          "ref": "a5c9af70-f9dd-48d0-9f68-81f67e2185bb",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7ec9bee1-f7fa-4982-be3b-27fcc85be811"
        },
        "item": {
          "id": "4dd3995b-fc04-4025-8b47-1b9328614926",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7070c821-27bf-4259-b682-7d435f87c9cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be1e005-e71b-406c-9f0e-93aca115dca3",
        "cursor": {
          "ref": "d29dd0a2-f64b-427f-bd4a-427f0f095171",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "48b5ad4c-5f12-4a91-b7a0-334d67b1d88f"
        },
        "item": {
          "id": "9be1e005-e71b-406c-9f0e-93aca115dca3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7c98193a-1ed8-4860-8bcb-2b1c6c9eac96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d5f9bc9-5ca0-4976-b820-ed481a9e8692",
        "cursor": {
          "ref": "fa6bdd4f-e80c-4f7d-9afa-80dea34cba5a",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d7dd1196-a3de-4f8e-a937-15c592b6e6e2"
        },
        "item": {
          "id": "7d5f9bc9-5ca0-4976-b820-ed481a9e8692",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "25e533c9-4c30-465f-ae94-a8c10d93bb4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84b1c76-3c2e-48c0-ba35-2193c9046977",
        "cursor": {
          "ref": "9d177fc7-4636-4b94-81c8-00f7f78c2848",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "55a4cbeb-990a-41f3-b861-b6f8b8e03173"
        },
        "item": {
          "id": "d84b1c76-3c2e-48c0-ba35-2193c9046977",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "7e39c8af-398c-430c-849d-664e20f47438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed16449-1b7c-426e-9d93-8ff30cdb7f8d",
        "cursor": {
          "ref": "e1ae5104-8e48-4695-ad6c-38ddc856e659",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "eac9fe0c-2cd8-4ac2-a540-654f08ecdc9f"
        },
        "item": {
          "id": "7ed16449-1b7c-426e-9d93-8ff30cdb7f8d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b11e35f1-989e-4e7e-8ea4-7dd41010ead4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa1cd6a-98fd-48e3-8cfc-2d6d68e29faf",
        "cursor": {
          "ref": "b872ae44-162e-445a-87b6-c9e1d417f071",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "666642cd-926e-4ae8-a08d-063d09807da0"
        },
        "item": {
          "id": "ffa1cd6a-98fd-48e3-8cfc-2d6d68e29faf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "74060845-8028-4650-ba96-8400e54a89fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574f5a20-e871-4d3a-a8fe-cea28c8869aa",
        "cursor": {
          "ref": "b33502fe-d445-4f16-95d0-f5b6ada62752",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2f9b0b05-7054-458c-9040-b477617e5cee"
        },
        "item": {
          "id": "574f5a20-e871-4d3a-a8fe-cea28c8869aa",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2e26ba15-5b5c-4ad1-b3e0-4f9bb63c79ee",
          "status": "Created",
          "code": 201,
          "responseTime": 2919,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "67784558-b62d-44b0-8e0a-432cdbd6a636",
        "cursor": {
          "ref": "8abae48f-98ee-4c58-b239-2f8160fb2f80",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9cbe95fd-0e00-43a9-9943-059c13535303"
        },
        "item": {
          "id": "67784558-b62d-44b0-8e0a-432cdbd6a636",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3786d40e-1274-47d0-b0b1-d626baae7173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "635e5d02-215f-4b61-a241-5eae295e6bee",
        "cursor": {
          "ref": "16102ff9-1490-4449-b657-8df0035051e5",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f074f5b6-31d2-44c0-a7af-8db7ead26f45"
        },
        "item": {
          "id": "635e5d02-215f-4b61-a241-5eae295e6bee",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d6ecb964-0d51-4519-9ee2-29d1c924d198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c07381-ab70-4ef4-a973-5d35e214dd2b",
        "cursor": {
          "ref": "3702d1ba-52f8-46b9-8758-ed074b7522ba",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4f63f086-d0a4-48b3-a875-a85b04928d52"
        },
        "item": {
          "id": "42c07381-ab70-4ef4-a973-5d35e214dd2b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5bd49b64-cf6f-4471-aa69-d8b73f93f1fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f272bd45-99fb-407b-aa46-0979fc1d5c62",
        "cursor": {
          "ref": "61c309f7-9394-4ac1-8ec2-a70d48fbff1f",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "22e3330e-c874-48bc-a561-b610abb49df5"
        },
        "item": {
          "id": "f272bd45-99fb-407b-aa46-0979fc1d5c62",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "eea2eb95-4df3-41dd-9943-98f4fa8dcea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd6281c-abfb-4b06-bdbb-8c9367d4f6e6",
        "cursor": {
          "ref": "ab5e99fd-ba90-4fbe-adc4-c1a47f2df065",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e853c5f6-887f-415c-905d-896a2a6600fd"
        },
        "item": {
          "id": "bbd6281c-abfb-4b06-bdbb-8c9367d4f6e6",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d9f8a252-b8a8-42dc-9bb3-643e69108b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd7e490-add6-43b3-8129-c9520405eb7c",
        "cursor": {
          "ref": "e5560836-51bb-4245-82b9-39b026ba7048",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f1bf483c-84f1-4d91-9116-a4deca4528d3"
        },
        "item": {
          "id": "0bd7e490-add6-43b3-8129-c9520405eb7c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "eb64abe5-7aca-4cf6-a25d-b5fcdcb568bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e4d25c-289a-4690-b54f-51f04842e42b",
        "cursor": {
          "ref": "371e0c20-7bc8-462f-b710-87a54d17d69a",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "46682c16-fb70-4f08-9d64-66527a8b2023"
        },
        "item": {
          "id": "30e4d25c-289a-4690-b54f-51f04842e42b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "138c80d8-785f-4392-8934-a25ae1c22d6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb18aa08-0617-482e-844c-45cafcc63aee",
        "cursor": {
          "ref": "ac094f30-9265-46fd-80bf-ccf1c8fcd5ba",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c5282238-d88d-4eaf-8307-e0c15cf6d1cd"
        },
        "item": {
          "id": "fb18aa08-0617-482e-844c-45cafcc63aee",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f8206061-8581-47af-9ffb-ba2930a1cd4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d5d872-6a07-4dbb-a82d-53710d61bda0",
        "cursor": {
          "ref": "7402d2aa-a12f-4d9c-814a-edeac198683b",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0f6ecdde-4f6e-43a7-b342-514f29fd9f88"
        },
        "item": {
          "id": "68d5d872-6a07-4dbb-a82d-53710d61bda0",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "22911200-f518-4536-9dc2-c0e69f726d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af5a8c1-db22-4c57-bef4-59ff0385ca1e",
        "cursor": {
          "ref": "92741c2a-675c-4a08-838c-7bba0a88de04",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f43d7869-fd20-45b3-a46c-a88b1981b9a8"
        },
        "item": {
          "id": "2af5a8c1-db22-4c57-bef4-59ff0385ca1e",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b99004e0-6d45-4a6e-a0c1-174ad7ea51a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f4ed4b8-d8ae-413a-9298-7ded9d20ce87",
        "cursor": {
          "ref": "2da37e40-e96b-4f4b-976f-9d2ee33bc5fc",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "cd3cbb8f-7fc7-4a26-b6c4-29cb3f683eb2"
        },
        "item": {
          "id": "4f4ed4b8-d8ae-413a-9298-7ded9d20ce87",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5fe587c5-d3ee-4cc2-bcf5-ae01dbf26891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1342a866-ca7a-4f3b-9d50-847835487282",
        "cursor": {
          "ref": "244ce5ea-aa16-494c-8c72-68fd025c7289",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2c2172a3-6041-4419-a041-eff722dbbe1e"
        },
        "item": {
          "id": "1342a866-ca7a-4f3b-9d50-847835487282",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "bbe00dcf-9998-4f56-9b06-350575817036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e29b59d-3dec-4043-8186-c90e6f5127d9",
        "cursor": {
          "ref": "972a2abb-3425-491e-94aa-6b59c5574e9d",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "86d86de3-aa80-4093-8363-19a136e648e1"
        },
        "item": {
          "id": "1e29b59d-3dec-4043-8186-c90e6f5127d9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "424e0467-d952-4515-bc1a-d460dea3774c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e72ed22-fce7-45d9-8fa3-c04a75b06fa3",
        "cursor": {
          "ref": "9563ad63-51cc-4daf-a948-b96b29069470",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a0e90d2b-55cd-4439-9360-650f99dcf5f6"
        },
        "item": {
          "id": "6e72ed22-fce7-45d9-8fa3-c04a75b06fa3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d49c6a25-ee35-47f8-bd70-e742048e016e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d30522-9a34-4afc-a771-0bc7ac83f640",
        "cursor": {
          "ref": "62ca54d6-8c6b-4241-8824-b74c12fb11e9",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "cf879251-3cd8-43b4-8e22-443a12e85ff0"
        },
        "item": {
          "id": "54d30522-9a34-4afc-a771-0bc7ac83f640",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3cb24a2c-d7e4-4cf3-b909-cc37d1d1dd02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001d8735-ffc4-47c0-ae52-3c695fbf1b72",
        "cursor": {
          "ref": "fdf719c7-06bd-440e-9bfa-6bb7a98f8844",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "60785c19-d76e-4a68-9d62-8ed9265b625f"
        },
        "item": {
          "id": "001d8735-ffc4-47c0-ae52-3c695fbf1b72",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "23662750-8357-4801-bbba-582add0fd28e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd602f1-2544-42f8-905d-92a9af8081cb",
        "cursor": {
          "ref": "c1a34789-6f84-41c1-91d8-5589d63edee5",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3a2eea72-8a85-4085-9313-a7104a86f381"
        },
        "item": {
          "id": "dfd602f1-2544-42f8-905d-92a9af8081cb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5a7d3880-b9ec-4c9f-bc2b-d90892c57fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45808b24-c388-44b8-a219-24758a5fdfa0",
        "cursor": {
          "ref": "8e2677c2-19de-43b3-8d47-d726995bae0a",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d8021c51-6209-4e09-bb3a-f87da6c7e922"
        },
        "item": {
          "id": "45808b24-c388-44b8-a219-24758a5fdfa0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "02d98bca-e97f-44b6-a822-e3e91bfb30e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbcd4456-b689-4ca4-b524-421e99935ad5",
        "cursor": {
          "ref": "91185a01-587a-42cf-88e0-be4ecc67d875",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e6a51648-1552-4823-a6ff-e485d58ad295"
        },
        "item": {
          "id": "bbcd4456-b689-4ca4-b524-421e99935ad5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "56da258d-18cb-484a-bfa9-ae07b13114eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34966a8b-cbfe-4d83-851c-4af3d5f57aff",
        "cursor": {
          "ref": "6350669a-ff58-419a-b5c4-47a522bf6ce9",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "cce8a97a-f020-407a-b1c4-65c3be2a652b"
        },
        "item": {
          "id": "34966a8b-cbfe-4d83-851c-4af3d5f57aff",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2ac37772-c7a0-44fd-9f1d-65c4de45f22d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7141bdc-6716-4d01-a64b-7fb8eb2fb623",
        "cursor": {
          "ref": "c977c2f3-538a-4f4e-8e25-c48dee98dd2d",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8ba2bd5c-1dab-4746-b208-75baa8d5ecb0"
        },
        "item": {
          "id": "e7141bdc-6716-4d01-a64b-7fb8eb2fb623",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "26e33be7-3b14-46ce-a8e6-84970fd1f811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c87c991-b34a-4490-804c-7da35e363c87",
        "cursor": {
          "ref": "591e2a39-a4fb-4e2a-9c20-c0de39c43eab",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1c23464e-037c-4ec8-9b18-02cb7198bdce"
        },
        "item": {
          "id": "1c87c991-b34a-4490-804c-7da35e363c87",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "835015bb-b706-40bf-bc85-8e839e3a436c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11539c0e-fc52-4bb9-be63-0e2dba3791e2",
        "cursor": {
          "ref": "3279e394-b6d5-4240-8639-31d096c1f1ae",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3a7c53e4-21f4-4392-b4ce-921c3d885006"
        },
        "item": {
          "id": "11539c0e-fc52-4bb9-be63-0e2dba3791e2",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3589c3f4-fcda-413a-9011-bc1a95daad45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835ce00d-22bc-4347-9ca8-e0627962a6ae",
        "cursor": {
          "ref": "ade68e32-1635-4509-8e30-1f5a4844e5fc",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ccf72754-c697-4229-8924-93360a52fe67"
        },
        "item": {
          "id": "835ce00d-22bc-4347-9ca8-e0627962a6ae",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "548854e7-84af-4e27-8fb5-37702d17b1f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a56bc17-a238-411d-bd73-e2e221aadadd",
        "cursor": {
          "ref": "5df17375-f8d8-4b2a-8c72-e31b897e9208",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d1c63385-0ab8-4445-9822-cf96cda9df95"
        },
        "item": {
          "id": "4a56bc17-a238-411d-bd73-e2e221aadadd",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f0b97093-da30-4576-a49c-af417dd11d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e033b651-eb22-47cd-9df7-6021752cb9aa",
        "cursor": {
          "ref": "3a078b71-f3c4-4866-b57b-204c8b14e299",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f8c33483-29de-4ef6-99f8-582764bc268c"
        },
        "item": {
          "id": "e033b651-eb22-47cd-9df7-6021752cb9aa",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c8372010-004f-40ba-8c46-4461d812b87b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7233de81-8f2c-461f-a187-cb66375a8f77",
        "cursor": {
          "ref": "67742ea9-d37b-4aca-807b-cfdb4fbcfea0",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "da5e65de-69d8-4386-b5cf-10d35bc568d8"
        },
        "item": {
          "id": "7233de81-8f2c-461f-a187-cb66375a8f77",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "beac7f77-822b-4dac-94e0-721a7bce1757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c1e257a-e6d1-46f5-a17c-0271d61f4a88",
        "cursor": {
          "ref": "6ab00a5c-ce80-4909-bcbc-98261eeae9b0",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c6346b58-1010-4d81-baab-c3e484c23103"
        },
        "item": {
          "id": "5c1e257a-e6d1-46f5-a17c-0271d61f4a88",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e26a8bd2-ba7e-4a0e-9fd8-9e3e5b88570a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4521c2fe-989f-4a2e-99a2-d658e5d6c2bc",
        "cursor": {
          "ref": "a5d5c1d1-677d-4c58-94f1-3dc4c611fa62",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5b4e861b-7ca8-488e-98c0-0cae23d70cdd"
        },
        "item": {
          "id": "4521c2fe-989f-4a2e-99a2-d658e5d6c2bc",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5a8ef16f-c824-4d1a-9dd9-4e6b0fcd42c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "197b6b7f-d552-485f-8f81-d0f96aaf2d51",
        "cursor": {
          "ref": "962914d0-f403-46a7-8494-67bea29cbfc6",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b771b55c-ccbd-4754-bc59-c9f8e62c6ae0"
        },
        "item": {
          "id": "197b6b7f-d552-485f-8f81-d0f96aaf2d51",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e87ed592-ca74-452b-8e7b-f90e6c5a3779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a10e848b-001d-4c7d-aac9-0c99e3be08f2",
        "cursor": {
          "ref": "4c9caea4-fd3d-4635-bd2b-4800604b4f46",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c7334804-a372-4a2d-a90a-3187e468f719"
        },
        "item": {
          "id": "a10e848b-001d-4c7d-aac9-0c99e3be08f2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "875ab61f-dfb0-4a9e-9bf3-5a2ecdcc5ea7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "c05fa823-0176-498a-a986-ab7689b62214",
        "cursor": {
          "ref": "a72b2355-545d-4c78-929e-464b024de5c5",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4aac6d55-5ab8-4100-aa66-f404d8ecd537"
        },
        "item": {
          "id": "c05fa823-0176-498a-a986-ab7689b62214",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "2aecbf5a-a93f-401d-9db1-49bd3a652e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "a0c3cc5d-7636-40dc-9297-b13fb99425e9",
        "cursor": {
          "ref": "9319dad2-49e7-415a-9582-ee4c01e15a20",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "440db4ff-4d71-4e10-b390-fb9955335f25"
        },
        "item": {
          "id": "a0c3cc5d-7636-40dc-9297-b13fb99425e9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "30e97d0a-7938-44e7-862e-13e020757049",
          "status": "Created",
          "code": 201,
          "responseTime": 2726,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "626ebd52-704f-4cee-85d5-b120a6d77593",
        "cursor": {
          "ref": "35f0b88a-a1ec-44d8-8072-3a8d785a6b25",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e70cb14f-d5e1-4615-9e7a-a33066a35a59"
        },
        "item": {
          "id": "626ebd52-704f-4cee-85d5-b120a6d77593",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1d83ea91-3301-40ac-88a0-1baf5c6498d3",
          "status": "Created",
          "code": 201,
          "responseTime": 2312,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1eb8b82-3eed-4a26-a88f-7d85111c5c0b",
        "cursor": {
          "ref": "4ed073c7-3f99-4185-93be-6f5c0050ff5b",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "15290a7e-7ba6-47ff-b91f-32d25c2e6252"
        },
        "item": {
          "id": "f1eb8b82-3eed-4a26-a88f-7d85111c5c0b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5e674af6-8f82-4a14-9a00-7d4bdb5015e7",
          "status": "Created",
          "code": 201,
          "responseTime": 2208,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "858c3e38-73fd-4475-aec7-6c40ef73c537",
        "cursor": {
          "ref": "cb5ecbed-6678-4cb1-9660-fa5a4f0b1d8c",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4b53481b-4628-42a9-9055-6c44e5abf09c"
        },
        "item": {
          "id": "858c3e38-73fd-4475-aec7-6c40ef73c537",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a980a14c-11f3-49e8-9ab3-75b3ba141f98",
          "status": "Created",
          "code": 201,
          "responseTime": 2204,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-02-19T00:42:47Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-02-19T00:42:47Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "3e3b14fa-76ac-4eee-8277-658c64c14066",
        "cursor": {
          "ref": "970e1ece-9763-4eeb-9455-53598eb9f618",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "12b37681-4dfe-4213-8f68-ec8898de5d5c"
        },
        "item": {
          "id": "3e3b14fa-76ac-4eee-8277-658c64c14066",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d5fdd684-279a-4dd6-8d92-761ef1a6546a",
          "status": "Created",
          "code": 201,
          "responseTime": 2403,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "573e72b2-13c1-4db7-a8a6-30d07c66571b",
        "cursor": {
          "ref": "40214ac8-21b4-41c1-8e70-6924946e94c9",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "26fd21cc-1175-4300-aa14-182dfe3f824c"
        },
        "item": {
          "id": "573e72b2-13c1-4db7-a8a6-30d07c66571b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b7b42e6d-dff9-48b8-a2e3-2a76a96cb547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573e72b2-13c1-4db7-a8a6-30d07c66571b",
        "cursor": {
          "ref": "40214ac8-21b4-41c1-8e70-6924946e94c9",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "26fd21cc-1175-4300-aa14-182dfe3f824c"
        },
        "item": {
          "id": "573e72b2-13c1-4db7-a8a6-30d07c66571b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b7b42e6d-dff9-48b8-a2e3-2a76a96cb547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78fb817a-35c8-4f2e-b2c5-cea0d6745ecd",
        "cursor": {
          "ref": "18cb696d-539e-4e3a-870a-09758d3ee843",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "475e7922-bec2-4d6e-9f02-a6aec6368f83"
        },
        "item": {
          "id": "78fb817a-35c8-4f2e-b2c5-cea0d6745ecd",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "56cd9ff2-0803-4ba3-80aa-2379e32cdb9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932fae0c-993e-4aec-bb4c-4c30f0aeba9a",
        "cursor": {
          "ref": "4d609bed-e240-4edd-a89e-dc7f98c430af",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "baa09721-90ed-4358-8531-4cde851008fc"
        },
        "item": {
          "id": "932fae0c-993e-4aec-bb4c-4c30f0aeba9a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "078fb53a-67f2-4f00-aa2c-610ab73d942f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36fc2681-7c03-44a5-b1e2-843f05f006ae",
        "cursor": {
          "ref": "7562b9f9-93a3-49dd-aa88-1a2216f044a2",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "43a1509e-9ada-4fa2-a44c-91201cc4bb6e"
        },
        "item": {
          "id": "36fc2681-7c03-44a5-b1e2-843f05f006ae",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1f6a2d0f-0dba-47ec-b0c7-ee789941da27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24cd1a3-9e8a-4733-808c-f7b662104cc0",
        "cursor": {
          "ref": "b88e5df8-389f-411d-8eec-0bc5b22e9ca5",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "251ff4af-d7de-40fe-bdd8-8b324bb2baaf"
        },
        "item": {
          "id": "b24cd1a3-9e8a-4733-808c-f7b662104cc0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e9671fca-a8a9-4fc2-836a-8ab37b639087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "044d724a-1802-4023-8455-696d5bc24777",
        "cursor": {
          "ref": "14a62a08-69fc-4cc5-b7d1-5afe1ebd8bfa",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "14d63ffb-5588-49dd-87a0-b436fd222f36"
        },
        "item": {
          "id": "044d724a-1802-4023-8455-696d5bc24777",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d0216554-33a8-409b-8431-758d714e6cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3ac120-a2e9-4ca4-9662-e95b8e47a690",
        "cursor": {
          "ref": "1b9ff4f3-6489-46c5-8a09-3654ecaae370",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "81fa9261-b164-4880-a9fd-3eece5063cb6"
        },
        "item": {
          "id": "3c3ac120-a2e9-4ca4-9662-e95b8e47a690",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "447d3c15-d220-4495-8334-1c677c23dc26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c068da8a-6c57-4a18-914b-90ce58438671",
        "cursor": {
          "ref": "e14ef2f3-91c9-43b5-a1d7-c476c0454f4c",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ebe58e44-52c8-48f4-af7c-1628dd22d65d"
        },
        "item": {
          "id": "c068da8a-6c57-4a18-914b-90ce58438671",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4ea614e3-54ae-4561-ba94-8cbb6144e900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ce016c-31cf-4399-8ed9-7a0578539a03",
        "cursor": {
          "ref": "166a53b5-9d4c-431f-8fbd-c5d5692081b0",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e89f4da3-2f6c-4e6c-8985-24ed9de0cff6"
        },
        "item": {
          "id": "38ce016c-31cf-4399-8ed9-7a0578539a03",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c8bba86b-92ab-4431-9812-9039ed6bcae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1301b3ee-6b07-40d9-936c-dfdadeea2846",
        "cursor": {
          "ref": "7ab480e2-7692-43d3-84b3-86df2a19c914",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "50d04863-ea38-49b8-89d9-e9bc171156f7"
        },
        "item": {
          "id": "1301b3ee-6b07-40d9-936c-dfdadeea2846",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "561f73d3-792e-488d-97aa-2ecfc288e4d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bca729a-ea45-479b-8403-1997acb9d373",
        "cursor": {
          "ref": "d4293d19-79f3-4c72-9d5a-ec00a4d037d0",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "848e903c-8d43-4bc6-9a72-2c89c0078d21"
        },
        "item": {
          "id": "2bca729a-ea45-479b-8403-1997acb9d373",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6bfe221e-86a1-421f-80f2-cc5fdf10a393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c04489-651c-4689-9e49-668b45b9c94a",
        "cursor": {
          "ref": "e5136744-f7a4-4fe8-a6ef-4a920d5ba780",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ee86b8fb-cd76-4c7c-bf42-18cd74e7ad77"
        },
        "item": {
          "id": "31c04489-651c-4689-9e49-668b45b9c94a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7730e7c9-66c3-44bd-a49d-b06e97e69758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f4b94c-596f-4884-acb2-a82d2f15deaa",
        "cursor": {
          "ref": "2ceaa0bb-b8f5-4843-8ecf-a4b3fd4d1a9f",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "030c013a-9167-41a1-b57c-b5bb1852f3e1"
        },
        "item": {
          "id": "77f4b94c-596f-4884-acb2-a82d2f15deaa",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b903b18d-8115-433c-9ee4-01e27d112618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2595b2e0-1862-4017-bccd-109d68d5128e",
        "cursor": {
          "ref": "653636a7-0136-44f9-8e09-f85c7a37361a",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "50e6801a-0946-4de4-aecf-886946c3e711"
        },
        "item": {
          "id": "2595b2e0-1862-4017-bccd-109d68d5128e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b404d34a-0554-4762-9b1c-7eccd7b21011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e5a62b-0298-4cb0-9de1-9effbc351379",
        "cursor": {
          "ref": "0c7e76d5-8419-4baa-82b6-f5585e5817da",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3da0af5d-62c9-4202-8c9e-3ea34a1e92b9"
        },
        "item": {
          "id": "27e5a62b-0298-4cb0-9de1-9effbc351379",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d06188ff-8f7c-4e5c-b972-70f41bea372d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd8b1ebb-d326-4985-b0cf-be5184197524",
        "cursor": {
          "ref": "af30af46-c54d-4809-ac1b-fad52be91078",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c7ebd5d8-d8cc-4823-b8e9-12bfa770655c"
        },
        "item": {
          "id": "cd8b1ebb-d326-4985-b0cf-be5184197524",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1a71a37a-fec4-4909-9083-5e71d95019e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317a688c-d333-4ee9-bf81-36d9f7eaa6d3",
        "cursor": {
          "ref": "0df0dd12-95d6-4add-8179-eab8f4c7cea3",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "87c2bff1-c8c9-4c8d-84d4-d8cc223a7e90"
        },
        "item": {
          "id": "317a688c-d333-4ee9-bf81-36d9f7eaa6d3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5187c265-740b-404b-9d13-7efa3f4e0913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad22d14f-1835-42c2-a9c8-66a46550aa64",
        "cursor": {
          "ref": "f1825107-3971-47b1-8aa3-0ff5826c2cf2",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "660e82d9-3ded-4ec8-91df-73cabdc304f2"
        },
        "item": {
          "id": "ad22d14f-1835-42c2-a9c8-66a46550aa64",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3c110afd-0d07-4d88-b0fd-873e0b1d8b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba8769ec-84ad-4eb5-a26c-b869212162f1",
        "cursor": {
          "ref": "3eca4ab3-ef4d-41ce-a3cb-c6513cf8fd7c",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d2382d3b-204b-40f6-8b06-3f5f30e15990"
        },
        "item": {
          "id": "ba8769ec-84ad-4eb5-a26c-b869212162f1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7094421e-f431-4440-bf6d-6a4cd5068958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc33ca3-91b5-4408-85a9-e9b1bbf41a71",
        "cursor": {
          "ref": "f134c915-d432-4557-957b-16a481b78b7f",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2f52f541-7410-4d89-8a84-4d4fbbb7c8c1"
        },
        "item": {
          "id": "acc33ca3-91b5-4408-85a9-e9b1bbf41a71",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0df18e4c-e707-4b8f-9239-44b8a6c0fe06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7774a327-04e9-400f-b7e2-53d677402154",
        "cursor": {
          "ref": "4317ce69-1332-465f-85a9-2154ce57275c",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a44036da-f872-4083-bb5c-c9052f6b2af2"
        },
        "item": {
          "id": "7774a327-04e9-400f-b7e2-53d677402154",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f9d2f27c-7259-4695-bb0e-6425af4a6d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f072f9ac-0ded-4dd5-a9ee-9f0ef1a675d2",
        "cursor": {
          "ref": "8f855b6c-5e44-4203-ad98-cae20f21f856",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ec5b2bae-fb2e-4b06-9867-f8e44af1f784"
        },
        "item": {
          "id": "f072f9ac-0ded-4dd5-a9ee-9f0ef1a675d2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0daa30c0-a54e-40d6-9f78-bcb3535ab4ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb294f5-5d38-4c74-9a99-33ee8b45c2cc",
        "cursor": {
          "ref": "04906531-154c-4d0b-b05a-e60436ef218a",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fbf476dd-33a7-4154-afdd-410d830a8208"
        },
        "item": {
          "id": "adb294f5-5d38-4c74-9a99-33ee8b45c2cc",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "75e31be4-312d-4c15-b094-c428b3c2cf8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c6a1ae-8845-416a-a355-262a55d468f1",
        "cursor": {
          "ref": "f5f46571-1e28-432c-a8f5-1dc6b5634b41",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "de125eb6-4995-49d5-b41a-2cca11a7a771"
        },
        "item": {
          "id": "35c6a1ae-8845-416a-a355-262a55d468f1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "72c0eda2-43f0-474e-99f4-f1ae7fdd76bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a5772b-288c-4f9e-a505-1818a2121e06",
        "cursor": {
          "ref": "7a9b843d-d784-4768-a5bf-f079e365772a",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8acb6d9c-1025-496e-ba16-950177a27bab"
        },
        "item": {
          "id": "19a5772b-288c-4f9e-a505-1818a2121e06",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6e74385e-3aa5-40d7-870b-2ac9a7955b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea0e5bdb-4e79-4dcd-83dd-d568d472cedc",
        "cursor": {
          "ref": "e8c02c56-ecd5-4cd4-a69b-4b8306f29bd4",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c360f045-4062-4f50-b0ff-75513a8a58a2"
        },
        "item": {
          "id": "ea0e5bdb-4e79-4dcd-83dd-d568d472cedc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "373b906d-9f3a-4fc6-87f9-d45ff72ede4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e3a3b2-78ac-46f5-8017-6fdccef43975",
        "cursor": {
          "ref": "f5dd8733-c204-4843-9aa0-f76967331a1c",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6e60804a-958a-4f7c-8aff-836c53179eda"
        },
        "item": {
          "id": "b0e3a3b2-78ac-46f5-8017-6fdccef43975",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "34e62a14-6459-448d-99c0-117661b26a37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674da5fb-4a67-45ee-9805-f2bc84c83b3d",
        "cursor": {
          "ref": "ff0dfb57-c30f-4f61-9a35-e7a081c76dee",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8bfa9d89-6762-4f1d-8ae9-ada67b6bc8ee"
        },
        "item": {
          "id": "674da5fb-4a67-45ee-9805-f2bc84c83b3d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "050d1b0f-0bcf-4e38-9ea7-c09350098eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643b89e6-978d-4f9e-b8b3-5ac5c504c819",
        "cursor": {
          "ref": "c16289b7-d152-41e4-9feb-55ade11b5b47",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "bbd88b27-d541-48ee-a1f9-4bc078c1a1ea"
        },
        "item": {
          "id": "643b89e6-978d-4f9e-b8b3-5ac5c504c819",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ec484af5-174a-4f20-b7e0-f54f68881bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e19698-013d-4306-bbff-04ec04e8a8f5",
        "cursor": {
          "ref": "0480bb80-ca05-4046-9bf2-31c7508ebc67",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ab5c896d-9db5-4ccb-82aa-fd71ecbc6367"
        },
        "item": {
          "id": "25e19698-013d-4306-bbff-04ec04e8a8f5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f807173e-cd33-47be-aee0-f221824e5cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b5a027-0bb1-403c-9cbc-d5449c1c1f4f",
        "cursor": {
          "ref": "74847fbf-0eb7-4334-a740-880e39c45a64",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "cf2826f5-f0c6-4663-814e-e12d909ef131"
        },
        "item": {
          "id": "78b5a027-0bb1-403c-9cbc-d5449c1c1f4f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1fac6fad-ab26-45c5-a55d-1f0ec5f139af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1ea13d-3d3b-470e-a9b6-ef902170da99",
        "cursor": {
          "ref": "6390b28d-9ccf-4ef8-9172-aa5f21e8b936",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d493c1f0-1fdd-480c-9f6a-299d3d731723"
        },
        "item": {
          "id": "1f1ea13d-3d3b-470e-a9b6-ef902170da99",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2e274a9c-7063-4e70-8150-c378a91c535c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb27030-4cc5-4e4a-b8ad-faf03a79916a",
        "cursor": {
          "ref": "2c5d20cb-5b67-4b14-a24a-73f186de6be5",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b6d3a1a3-d08a-4b40-a30e-04a8f369ec9b"
        },
        "item": {
          "id": "8bb27030-4cc5-4e4a-b8ad-faf03a79916a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "25c38fcc-411d-4a72-b08f-000d971ab561",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "f2f897d4-a8ca-4de3-8ed3-b37dd8357f33",
        "cursor": {
          "ref": "a8f0d17a-d353-4922-ac9a-5038240991df",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5cee9198-dec8-4d81-81ab-78a7003427fa"
        },
        "item": {
          "id": "f2f897d4-a8ca-4de3-8ed3-b37dd8357f33",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "36886b57-66c5-44d8-b876-9aaabdca4461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "7af3b013-d999-40d9-a7f8-a6d75003c991",
        "cursor": {
          "ref": "fd015b71-e354-44b4-a815-3df90935fc6e",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7b5d8737-4529-4cc9-80e4-40e9520f2c00"
        },
        "item": {
          "id": "7af3b013-d999-40d9-a7f8-a6d75003c991",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "079fd3b4-c07b-43f7-b2b2-220fda3df6a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af3b013-d999-40d9-a7f8-a6d75003c991",
        "cursor": {
          "ref": "fd015b71-e354-44b4-a815-3df90935fc6e",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7b5d8737-4529-4cc9-80e4-40e9520f2c00"
        },
        "item": {
          "id": "7af3b013-d999-40d9-a7f8-a6d75003c991",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "079fd3b4-c07b-43f7-b2b2-220fda3df6a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c2c6d13-b5f4-4287-b13e-192ac9fe4416",
        "cursor": {
          "ref": "e7d2bab3-5821-4b92-90c3-8c59ef3730de",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "75cc8d6a-1c01-434b-ac42-f892b90d5862"
        },
        "item": {
          "id": "4c2c6d13-b5f4-4287-b13e-192ac9fe4416",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4b00d9a4-6c9f-4935-b64b-d1b70e87fa8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc49409c-e6f7-4150-aadd-de2a107f0682",
        "cursor": {
          "ref": "f23e4a70-42c0-4261-8ce2-7634e597e3f3",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e3b2c268-a938-47ca-8564-09dc71788795"
        },
        "item": {
          "id": "dc49409c-e6f7-4150-aadd-de2a107f0682",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "76f7da96-52df-4d57-9731-749cebc7a03f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c2e0ee-298c-49e6-b290-1beb99dfa54b",
        "cursor": {
          "ref": "c8278944-7bb0-4763-8e0d-168d165671e8",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "38aabbdb-6d14-4bff-bbd7-b9053da39728"
        },
        "item": {
          "id": "66c2e0ee-298c-49e6-b290-1beb99dfa54b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0e316263-c23d-4885-bc24-5a8e81eb38e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731019d9-2d33-4492-a32f-ba79efee3734",
        "cursor": {
          "ref": "c468e373-de05-4fd0-be1d-943bb9d0926b",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "88ab7444-f1b7-46ba-bcde-d42e9d9874f5"
        },
        "item": {
          "id": "731019d9-2d33-4492-a32f-ba79efee3734",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e2582e6c-f426-4312-a32f-a48f91cb1763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0cc4169-b9ca-44c6-8d54-5f084bf653d3",
        "cursor": {
          "ref": "085df2ba-3868-49d0-863e-a0e1cf99ff6b",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1274ae1d-d114-48a7-be3d-090c52fdfa55"
        },
        "item": {
          "id": "f0cc4169-b9ca-44c6-8d54-5f084bf653d3",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2c150775-21d4-4512-95df-0f1c2eae85b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77cc733d-f6c9-4446-ab18-fec9572baa6c",
        "cursor": {
          "ref": "fb6157e3-ad9e-4479-a560-b6cbcf37ff69",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a78c2358-8d0e-4813-9f63-eff8561096e7"
        },
        "item": {
          "id": "77cc733d-f6c9-4446-ab18-fec9572baa6c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ad1f01b6-59fa-4602-bd54-d724eded9b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39b2884-bce8-4639-987b-2f4c772d7dd5",
        "cursor": {
          "ref": "91ae9779-1aea-47d6-89af-b584da054a51",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "aa01d8a5-9611-40d7-bdb6-cfa28e612914"
        },
        "item": {
          "id": "f39b2884-bce8-4639-987b-2f4c772d7dd5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "faddc236-df2c-4dd7-997e-c882a553d84a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc09ef4c-582a-4dc9-930b-e91e2ad71b5f",
        "cursor": {
          "ref": "75b30658-3f32-47ee-ba9a-8553f7c7195b",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e5e05a61-339f-4efe-ab56-050299f9bd97"
        },
        "item": {
          "id": "dc09ef4c-582a-4dc9-930b-e91e2ad71b5f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f208c152-7b42-4d6a-a113-f6231b6c5125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65bdf6da-9c31-4889-9032-0f59c8570fea",
        "cursor": {
          "ref": "07674755-6c57-489c-892b-8a56efe714ab",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5967a2d7-e4ad-463a-a997-6e6f44a5a327"
        },
        "item": {
          "id": "65bdf6da-9c31-4889-9032-0f59c8570fea",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e183aed0-d1cd-4557-89c9-a5233ada3906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9edaca-700b-4de6-b32f-e4ac15db178a",
        "cursor": {
          "ref": "166fac66-32b9-4a2b-8cbf-c8c7c432a4d4",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b3357f47-523b-4021-9087-97bf98d89165"
        },
        "item": {
          "id": "de9edaca-700b-4de6-b32f-e4ac15db178a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "feb6a080-85e1-46c5-86aa-8541ef85d876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697b981f-a665-4e92-a5ff-a97ed27ba685",
        "cursor": {
          "ref": "31f92125-e200-46ee-b477-a12e117ffc57",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "5a606a7c-5c20-44c9-a498-2a6b8e92412f"
        },
        "item": {
          "id": "697b981f-a665-4e92-a5ff-a97ed27ba685",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d76ea50f-2c9e-4e0e-b727-0e6b4b65df50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be6e3bc-0d5c-4ab2-8a18-54862322596c",
        "cursor": {
          "ref": "75c0e97d-a422-4845-b158-7e5288a0210b",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b3dd7676-f271-4519-acd8-c00f9d12948a"
        },
        "item": {
          "id": "6be6e3bc-0d5c-4ab2-8a18-54862322596c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9b5267c8-facc-48e6-b73c-b1347ec38a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8cd450e-8a13-4546-9af0-f8d9cb16b8a2",
        "cursor": {
          "ref": "a571988d-51c7-4801-bb7c-dc378307ee3f",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e33458a8-7715-4612-82ab-329d8d26ac10"
        },
        "item": {
          "id": "e8cd450e-8a13-4546-9af0-f8d9cb16b8a2",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f10b68a7-8079-4244-babf-9dfab9d1d317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f73d63-466b-42ac-962c-1758917ad686",
        "cursor": {
          "ref": "af10426e-affa-49ae-84fb-ffd6156baa26",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d7d347ab-9e8d-4f4c-9056-4a7b1230ecea"
        },
        "item": {
          "id": "08f73d63-466b-42ac-962c-1758917ad686",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5a9e6c9d-3e3d-4986-bfed-2d47960c6088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7de32867-76b4-43a7-a375-25644d369034",
        "cursor": {
          "ref": "ae705119-8f69-4652-8f22-a16cb88b694a",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "50df074b-f96b-42fa-bfba-f72dee80f88b"
        },
        "item": {
          "id": "7de32867-76b4-43a7-a375-25644d369034",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ec887cd0-ec3e-4a5f-988a-ae40ebf0a3ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843cdbd0-1fec-494e-a71a-330e7d2ada24",
        "cursor": {
          "ref": "48618108-79a8-4812-bd20-71ddd4b4c783",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6dc10d8b-1730-4c7a-9cf4-aaf53e5fcf11"
        },
        "item": {
          "id": "843cdbd0-1fec-494e-a71a-330e7d2ada24",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "abed60dc-ddc3-4955-a4c8-e9cacb287aa9",
          "status": "OK",
          "code": 200,
          "responseTime": 249,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "63b51b35-f9ad-43f2-9553-7fbccd621197",
        "cursor": {
          "ref": "b0c32e03-01dc-4481-b3a9-fda451d61b40",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "03ba402f-7d84-4a95-997d-6794d323412d"
        },
        "item": {
          "id": "63b51b35-f9ad-43f2-9553-7fbccd621197",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9737af86-8426-4c23-a2ae-98c2ec4e1027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36875ad-ad05-42b0-b7e7-30b5cf68bdf4",
        "cursor": {
          "ref": "52b4f75d-afc8-450f-b952-f6a88cb212ef",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8e2e9c7e-801e-4c21-8b9d-880fde8ddfdb"
        },
        "item": {
          "id": "a36875ad-ad05-42b0-b7e7-30b5cf68bdf4",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "97b8f9ae-0e17-466b-a8eb-c64146176a36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc19a3b8-57c9-4b6a-8e4f-c1dc52c4bda6",
        "cursor": {
          "ref": "941284d1-0c4a-43d2-886f-fe95107dd008",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0879bf09-e56f-4696-80d6-1497f9b9b0fe"
        },
        "item": {
          "id": "bc19a3b8-57c9-4b6a-8e4f-c1dc52c4bda6",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2590d20c-acfe-4f16-a890-c830356d4421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6b028f-3365-420e-a1ec-329484a7fcea",
        "cursor": {
          "ref": "f9569817-b17e-4ee4-b72f-3a06370ff1ab",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2fb1053f-8811-47c4-8972-bfab0d6044a1"
        },
        "item": {
          "id": "9a6b028f-3365-420e-a1ec-329484a7fcea",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "79ff000f-4175-481b-b96e-f040b64594b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ca63b5-ccd4-4056-80b9-23eed10646e7",
        "cursor": {
          "ref": "32948b0c-24b0-4ff9-8f13-c3f17dc1b983",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "98c38041-020d-4303-9edd-d6956607485e"
        },
        "item": {
          "id": "52ca63b5-ccd4-4056-80b9-23eed10646e7",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "306004cc-0d6b-4042-bfb6-1b4f44dab0c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba17ea7a-9a12-4497-9ed2-b3121cd329b9",
        "cursor": {
          "ref": "d7acadd7-1f66-4d7f-b8a7-bb0e23ce3c68",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "370fba5a-2899-40d2-8b30-bd5503cbca41"
        },
        "item": {
          "id": "ba17ea7a-9a12-4497-9ed2-b3121cd329b9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0b7d7ce6-b6aa-477b-a1fd-345231041f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e47e0bd-7c9d-434a-ace6-4de9168796a9",
        "cursor": {
          "ref": "f3564be9-fdd8-4024-b05f-64cbb5076408",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "18193b76-370d-482f-831e-5878448e1c16"
        },
        "item": {
          "id": "9e47e0bd-7c9d-434a-ace6-4de9168796a9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a43498b2-4450-4bd3-8743-39a1ea7d3119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3aab53-4a77-4f73-a984-bfc9ad8fa238",
        "cursor": {
          "ref": "4f2458f4-45dc-4acf-8ff2-d91a0b731cc2",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "bcc90077-f257-41fc-b6ec-aeb06550fc2f"
        },
        "item": {
          "id": "8a3aab53-4a77-4f73-a984-bfc9ad8fa238",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "484b9ed6-78d5-48e7-a952-fac4dab608eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7bdada-5549-485c-be19-9c53c9538150",
        "cursor": {
          "ref": "8008424e-eb2d-4e6e-b802-03cb338e5452",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4511be4b-41e0-43f6-80e9-d4f0c9ae3040"
        },
        "item": {
          "id": "1b7bdada-5549-485c-be19-9c53c9538150",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "53b3f6bc-e74d-4f29-9e3d-622cd5f28327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d58aa28f-73b7-480f-80d9-888cc6ef335c",
        "cursor": {
          "ref": "384c8ed9-fc81-4905-b04c-110275e7de7c",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "966bc6ae-420f-4a5d-af9c-0c6b83b27789"
        },
        "item": {
          "id": "d58aa28f-73b7-480f-80d9-888cc6ef335c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5cff83a3-c09e-4da4-825d-b4bd49c6eb32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74412f68-e25e-432b-89fd-136bc5a5ee7d",
        "cursor": {
          "ref": "fb98e0c9-bd1f-4717-9d7a-b4f3edc582af",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "57906e1a-69e8-4a6e-a965-d2a28f958233"
        },
        "item": {
          "id": "74412f68-e25e-432b-89fd-136bc5a5ee7d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2d1ce569-1584-4f6a-8173-ae7e9dc2ba83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c5f1a3-f3ec-4f7b-ac0e-e68e050e37ad",
        "cursor": {
          "ref": "c2a75d97-15b4-4945-94c0-4c75a4920f28",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "79ff3fb1-976e-4844-b9cc-054ec74d3c50"
        },
        "item": {
          "id": "37c5f1a3-f3ec-4f7b-ac0e-e68e050e37ad",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "823dde41-9b3c-4369-ae89-7c0267724e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a63a80-4632-47b0-8ede-da60f5953aa8",
        "cursor": {
          "ref": "4952c020-4104-4a8a-9852-8082ccab24cd",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0e53ffaa-bf9f-45a6-8b5d-fe30ae5c85aa"
        },
        "item": {
          "id": "68a63a80-4632-47b0-8ede-da60f5953aa8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e712c5f9-5dc6-423a-b4df-42a07cf885dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c3a21a8-2536-45b5-93cd-e3f1f44614a3",
        "cursor": {
          "ref": "1969a7d5-d927-4b44-82b4-b576cedb22a8",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "68ed07c0-e179-4663-ac17-29ee7eaff4ac"
        },
        "item": {
          "id": "6c3a21a8-2536-45b5-93cd-e3f1f44614a3",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1a0daa9f-914e-415c-a7a1-86e160a62112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d70b32b-7bf4-4811-bc68-dd325245cadf",
        "cursor": {
          "ref": "4c4d50a2-e918-4fb5-82b7-fbe1839fd031",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4e63a951-2cb3-4da7-9ccc-87e91d198e36"
        },
        "item": {
          "id": "1d70b32b-7bf4-4811-bc68-dd325245cadf",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5b109cce-4af9-4232-af61-fb7ba384bcc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20ad2db-3dc0-4ed2-b0e2-0934b7d568bb",
        "cursor": {
          "ref": "dcada209-08ea-42f5-b3b9-976afd7eb96e",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "61b5e631-6add-4ace-8282-d449b6667e7e"
        },
        "item": {
          "id": "e20ad2db-3dc0-4ed2-b0e2-0934b7d568bb",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6e9fa9e2-e362-4cb6-bb19-a00922eb2138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb63651f-a415-4df1-b236-c36c33d9d482",
        "cursor": {
          "ref": "9b47be41-180c-42f8-ace0-32a7be4f04ee",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "532fb12d-bff2-442c-b924-6b612328bcf8"
        },
        "item": {
          "id": "bb63651f-a415-4df1-b236-c36c33d9d482",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a07d437b-cd6e-444f-b189-c9b82cf4a0ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb2501e-d8f1-45fc-916e-4d0c3432956b",
        "cursor": {
          "ref": "5404230f-5699-4422-ae0b-8d402edaaf4f",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3567473f-8058-4cdd-a7af-664105d512f9"
        },
        "item": {
          "id": "6eb2501e-d8f1-45fc-916e-4d0c3432956b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "3c540ef4-1a9b-45f8-b042-6ba824f7028c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27e8bbe-1c25-4990-a554-a8ba9f6eaac8",
        "cursor": {
          "ref": "d761f7ad-41d0-4cbb-af63-13454b820728",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0fdba983-6804-49a0-9c15-a8f0b098260d"
        },
        "item": {
          "id": "c27e8bbe-1c25-4990-a554-a8ba9f6eaac8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2f64d0d3-c226-4e57-9e49-705e90310ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c744eb0-e613-46d2-b6ff-b012b058d87f",
        "cursor": {
          "ref": "6851ba8c-2ad1-40df-b82e-0d49f9f26213",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "288ffe5a-4787-4067-9432-82f4f48655a6"
        },
        "item": {
          "id": "6c744eb0-e613-46d2-b6ff-b012b058d87f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "062f1e72-ebb9-44dc-89b9-0e9609d7752b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ea553a-84fb-4190-803c-9075dc305b9a",
        "cursor": {
          "ref": "5bee4946-76ae-4943-8a7a-6777218371ae",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "6428155e-031e-49dc-a0b6-e761d75f9b6f"
        },
        "item": {
          "id": "75ea553a-84fb-4190-803c-9075dc305b9a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "86a31384-6afb-4ad7-af62-ec266773de6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9390534-ced0-4b36-b5cc-d868a308afdc",
        "cursor": {
          "ref": "20cc20a3-83c9-4bdb-bac3-524ce75f7f7e",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9d64cb3c-c3d8-4066-891a-9fdb5eb5d9f1"
        },
        "item": {
          "id": "a9390534-ced0-4b36-b5cc-d868a308afdc",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0cca1f33-042a-443b-ba19-6b5132da822c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bfef10e-dff6-4668-a2d2-09e123ded791",
        "cursor": {
          "ref": "2160794d-d42e-452e-9ae8-bb1ddcb0df81",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "66502ac8-c848-4aae-b7cc-dffb5340be40"
        },
        "item": {
          "id": "1bfef10e-dff6-4668-a2d2-09e123ded791",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5ef58983-06fc-4955-81c0-887a9a348256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c378a147-4531-4e69-9e30-8b4f79e9b0f1",
        "cursor": {
          "ref": "026f4d09-37f2-408a-85c7-266f17e02df2",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "41be566d-2833-49e9-bf8b-620e34ccc83a"
        },
        "item": {
          "id": "c378a147-4531-4e69-9e30-8b4f79e9b0f1",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8ac14a1b-1aed-43b5-8833-cd7da7968616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47516440-f4eb-4b02-8188-eb6a36e51057",
        "cursor": {
          "ref": "bfa32056-f471-4130-9dff-613360eb0d9c",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c37f26b8-0d47-4e35-b96b-49b4d9873a44"
        },
        "item": {
          "id": "47516440-f4eb-4b02-8188-eb6a36e51057",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3f767a33-8d22-4a52-ade7-08c6c7caf69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c9fa23-6c86-4206-a8cc-d3c4c97b0ded",
        "cursor": {
          "ref": "42220fd8-fdea-454c-a671-9f1b43f12ea3",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e431f9c4-4dac-43fc-9566-d77a3b905a5a"
        },
        "item": {
          "id": "d6c9fa23-6c86-4206-a8cc-d3c4c97b0ded",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6e0f6341-a0cd-4c01-9594-d652581b3dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0cb63ee-6679-464a-be5a-bd029f009c81",
        "cursor": {
          "ref": "993f2b3b-bd6d-4a83-a632-91c766c3b381",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "83e5022a-1fcc-446e-b8b4-c44bf8748bde"
        },
        "item": {
          "id": "a0cb63ee-6679-464a-be5a-bd029f009c81",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2a465732-1627-40b0-853b-3d9794c4ae1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2687f90a-d8d0-4d9e-b9db-7e2f78c71bb4",
        "cursor": {
          "ref": "7c4a51a9-caf0-4ef3-9f8a-02179658d708",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "abcbd686-1a7a-4cd7-873c-3d149be7bd13"
        },
        "item": {
          "id": "2687f90a-d8d0-4d9e-b9db-7e2f78c71bb4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5ae45bed-ca6d-402a-84ce-e4f3f4aecd13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0eb4865-312c-4b9b-b25f-5c7f36f7c0b3",
        "cursor": {
          "ref": "98e8a3d9-bab3-40e0-9291-115e002cde38",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "50af60c8-18a2-42a1-9c03-258b2ea4a686"
        },
        "item": {
          "id": "b0eb4865-312c-4b9b-b25f-5c7f36f7c0b3",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "77b6277e-80c3-428c-adbb-a313b2995294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7ffd29-a875-47bd-add8-2263437567e3",
        "cursor": {
          "ref": "5921bcf2-6330-4cc6-b48d-a12c6e2add82",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "83e2eab0-c046-4f7d-a8a3-968676f1b847"
        },
        "item": {
          "id": "1d7ffd29-a875-47bd-add8-2263437567e3",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "002c4dc7-4c00-4206-8756-448aa539683a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1720018e-4c07-466d-9af9-a4f554414ede",
        "cursor": {
          "ref": "da670285-76ae-42c7-bc87-9204c40e6c2c",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c52ac5b2-eb18-4441-b759-0614825abf65"
        },
        "item": {
          "id": "1720018e-4c07-466d-9af9-a4f554414ede",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0128fa5f-b6c7-40db-881a-2c12bc287cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77561b85-b67a-4a6e-8ab2-1be8c956e020",
        "cursor": {
          "ref": "d7e24944-e935-44d1-88dd-db7b90ae15ba",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "185152d7-e212-4747-9f46-f8c1ff499fa6"
        },
        "item": {
          "id": "77561b85-b67a-4a6e-8ab2-1be8c956e020",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c2c82d73-5e30-4baf-9d6c-84213188f78f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ec997d-c725-4345-bc27-5aa0f172c5a6",
        "cursor": {
          "ref": "81ed38e8-1458-4e07-8f28-fed63186e635",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "743fc95c-aed4-4cf0-9c8b-6be192538cf9"
        },
        "item": {
          "id": "12ec997d-c725-4345-bc27-5aa0f172c5a6",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "816838f1-6835-41af-9ed8-e6dc21ec826f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45daeca-0a88-486c-9dc6-c30cb85aeeab",
        "cursor": {
          "ref": "beae7601-64cf-4db6-9f08-21cd9d57bfac",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "88507829-193b-4b67-a228-e26d796aa34e"
        },
        "item": {
          "id": "e45daeca-0a88-486c-9dc6-c30cb85aeeab",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1572122b-6420-46c2-af92-f410c302f059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc6d30c3-ade3-4a03-9554-0ccfbc498a05",
        "cursor": {
          "ref": "d305462d-fad6-426f-ab34-d6ef209a821f",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "42c25de6-be2e-497a-a7ff-b92511709680"
        },
        "item": {
          "id": "fc6d30c3-ade3-4a03-9554-0ccfbc498a05",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1df4996e-2374-49df-aa12-05444c806fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4fdc75-48f3-40f2-b1c9-8cb943f8447f",
        "cursor": {
          "ref": "a85c9838-8e8f-41c7-a387-7108bb5e53ba",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "84131ad3-7c8d-4e8f-951f-acdebd6f43ea"
        },
        "item": {
          "id": "ff4fdc75-48f3-40f2-b1c9-8cb943f8447f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b3b51c4f-39e2-4e93-b07b-413b64e3dff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d857469f-4cb0-4625-afa8-1b3194c4dde3",
        "cursor": {
          "ref": "f4464e77-b8d7-4f33-a22c-9cce3fd875d7",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c6af3122-b9d3-4a3d-8b55-dc92e346d9be"
        },
        "item": {
          "id": "d857469f-4cb0-4625-afa8-1b3194c4dde3",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "74c0bcbd-d115-4606-b7aa-364daae4dc9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b3879f-3472-4f1d-b335-eda67a90013e",
        "cursor": {
          "ref": "31893c83-a0f1-4834-b218-2ad418d22780",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a21b266d-351d-4ebb-8028-84553fe43333"
        },
        "item": {
          "id": "64b3879f-3472-4f1d-b335-eda67a90013e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9b1ec36e-78c9-48c8-a7ed-f6cf6eb6677a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5707418-f7a1-4080-b7e4-015904f6710c",
        "cursor": {
          "ref": "f34318b6-f3d4-4b82-9185-2256bf944dfb",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0539ddca-ee77-41cf-92ea-aaa92c24f132"
        },
        "item": {
          "id": "f5707418-f7a1-4080-b7e4-015904f6710c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b0219579-e6ab-4233-a262-1ddd663e321a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba319e7-5fc7-4b5a-b9b4-246da8915d8a",
        "cursor": {
          "ref": "c322979d-117f-44f0-9d0f-5479dbb373ec",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8926e768-35d0-4634-9fa8-0e894f05fb34"
        },
        "item": {
          "id": "eba319e7-5fc7-4b5a-b9b4-246da8915d8a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "81ab623a-111f-498f-a88a-a80f384d29dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ad045f-657a-435f-a120-44b250f2726f",
        "cursor": {
          "ref": "f8d741e9-5ed1-48f7-92f6-aa90b26d2e64",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "921f9831-69c6-4c5d-a5d9-3ada43c5fca3"
        },
        "item": {
          "id": "82ad045f-657a-435f-a120-44b250f2726f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1d2c9e04-0f29-48a8-9f3a-b1a0a12b4316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b268445b-9791-4735-b8d4-2e4dea7446f3",
        "cursor": {
          "ref": "dc0c09b4-8dcd-4fb7-90f4-54b781eb47ba",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7685db37-f49e-4d53-9158-d492e673ce32"
        },
        "item": {
          "id": "b268445b-9791-4735-b8d4-2e4dea7446f3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "edc2f957-d94e-402a-a757-ffb935760396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b2bbd4-541d-436c-9a3a-9d74efe832bb",
        "cursor": {
          "ref": "50e4fb4c-82dc-499a-9e8a-d31036d01c20",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "bc01881e-9fdb-46c6-a356-0e8bc3442dfd"
        },
        "item": {
          "id": "d7b2bbd4-541d-436c-9a3a-9d74efe832bb",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "df3f9c73-7f61-4411-ae74-6ca4fe9542bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c47035-e813-48dd-9331-6c7c766c7afb",
        "cursor": {
          "ref": "05a0cc9b-0138-4472-a478-a59f8c118ef0",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f94d4cf0-ab7d-4e40-bc4b-83a50e6299d3"
        },
        "item": {
          "id": "12c47035-e813-48dd-9331-6c7c766c7afb",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fcab7d4d-72b3-4aa2-a042-c13175a948d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c40573-b5fc-4b4b-9a0d-6fe9fc2e31a9",
        "cursor": {
          "ref": "2a5916b2-ae64-462f-aced-c9eada2c733a",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "755a21b7-67fb-4fef-b69e-a352c0685fa1"
        },
        "item": {
          "id": "f4c40573-b5fc-4b4b-9a0d-6fe9fc2e31a9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "49f56a3f-f501-4371-aa33-a7fc6ce9b940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85049e75-726d-41a8-8e1d-30827c6e2bfd",
        "cursor": {
          "ref": "2436df51-711d-4630-b7c6-6bde2a136556",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ef1c5ffc-2725-4631-9863-9d912205d74d"
        },
        "item": {
          "id": "85049e75-726d-41a8-8e1d-30827c6e2bfd",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "bacb2b76-fefe-41b7-922d-e19b5b2c7d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301ba39d-b3f3-4abe-b4a4-8e2c861caf83",
        "cursor": {
          "ref": "21be667a-f9c2-4afe-858d-055a1dc93d9f",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a7c5093b-9a29-4be4-97b6-5a652d31b7d6"
        },
        "item": {
          "id": "301ba39d-b3f3-4abe-b4a4-8e2c861caf83",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "fb618344-2cbf-4ad4-811e-40d8fcb995a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ce7291-78f4-44bc-8f83-f5391ae2f92b",
        "cursor": {
          "ref": "1a131ed7-16aa-4aa2-90f2-c6eb3540ebf3",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e3f3f520-db1f-4b83-bb94-9d0f49029a6d"
        },
        "item": {
          "id": "76ce7291-78f4-44bc-8f83-f5391ae2f92b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f9514e89-5910-4734-8c1a-4080ecf682cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a09266-a42d-4edc-a71d-6fe29a036d24",
        "cursor": {
          "ref": "046937e2-beac-4906-bd1b-176bc9c087c9",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "88321e67-c8f4-4763-b630-58d426117783"
        },
        "item": {
          "id": "09a09266-a42d-4edc-a71d-6fe29a036d24",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c61b8f4e-aadf-46b6-9384-2e0cb2124ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6e4deb2-740e-442e-83e1-c4e44f6ec9ab",
        "cursor": {
          "ref": "d81811ce-bfe2-4d18-9fdf-5e5fc7740112",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "093a4177-eea0-48ba-93c4-1493e154b4a4"
        },
        "item": {
          "id": "a6e4deb2-740e-442e-83e1-c4e44f6ec9ab",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "80e18eaf-2281-4d2d-8f27-d7522f1f7b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca74013-461d-4151-92d1-4c659f54afd8",
        "cursor": {
          "ref": "aad9f894-3d3d-4757-9a09-6e442dacf230",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e47a9bd2-a9cf-441b-94b5-56da392001c8"
        },
        "item": {
          "id": "aca74013-461d-4151-92d1-4c659f54afd8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "aa1b8b51-46b3-44ed-9f2a-37896c21d39d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c152dd-ae4d-484d-b219-9f5cc6d63b2e",
        "cursor": {
          "ref": "d4afdc82-954a-411e-a1b1-58471886a52a",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "85d51a0a-8c1d-4f19-886a-94efad40778f"
        },
        "item": {
          "id": "37c152dd-ae4d-484d-b219-9f5cc6d63b2e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "34b5522d-d4ff-4a06-a2b9-d8255728b136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebcc5194-8b49-48b5-9da3-76ff09844486",
        "cursor": {
          "ref": "3af6ed3b-7ed9-4ed2-bbd9-693f47476f13",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5289c985-55fa-4808-beb9-f75328405eb7"
        },
        "item": {
          "id": "ebcc5194-8b49-48b5-9da3-76ff09844486",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6d6bd314-dc0e-4c7f-98d5-c9706a05de56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdffd5cb-bdc5-46bd-9855-487cff240cbc",
        "cursor": {
          "ref": "bfdb81fe-4980-481e-af57-2fa23aec907e",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ce7e77f3-ccdd-49e1-88c3-98a4f6fdfc0d"
        },
        "item": {
          "id": "fdffd5cb-bdc5-46bd-9855-487cff240cbc",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "88e776bc-2542-46aa-ab0d-3743e28c0aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7a0646-d8f6-49b3-a039-4e309345a3eb",
        "cursor": {
          "ref": "1441fdf8-faa2-4dc3-a64a-f7bba12d373b",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4b48c07b-e79d-4700-9ef0-e72780f2bb6b"
        },
        "item": {
          "id": "9d7a0646-d8f6-49b3-a039-4e309345a3eb",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7510f8e9-80e2-489a-8802-ee3b7d12b6ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d030f1-1e60-41c5-abb7-cf6e305ba92c",
        "cursor": {
          "ref": "ed722b95-3dc1-4a05-bd8b-6c9283aa8cb2",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "69478926-d4d4-46e6-93a7-6b5d8063d9f6"
        },
        "item": {
          "id": "59d030f1-1e60-41c5-abb7-cf6e305ba92c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2f47425a-d21c-4ddb-9c38-45d03ed594df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cde7f14-16ec-4f0e-805f-3b592b4e8b0b",
        "cursor": {
          "ref": "1bc11e3d-96eb-4193-91ec-a17eb4d71d6f",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "28925804-cb6b-4f6f-b37c-09ff238c3365"
        },
        "item": {
          "id": "3cde7f14-16ec-4f0e-805f-3b592b4e8b0b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "189cef26-08d0-480f-af85-e73ba964ff9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a194efa-1a91-46e3-b371-b8ec586e08f2",
        "cursor": {
          "ref": "ffe2d447-9d82-432c-8f4f-e16daa316041",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f31d2403-17b3-4a33-93e6-44bcfd642dab"
        },
        "item": {
          "id": "3a194efa-1a91-46e3-b371-b8ec586e08f2",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b518690f-92c2-48b0-9d73-1080d126c453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6c52bc-0477-44e1-b128-fafd095393ed",
        "cursor": {
          "ref": "24cb007d-36c0-42a4-86a8-3bcf2400296c",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7d75c16a-37f3-4dc6-8490-eb4b80d891cb"
        },
        "item": {
          "id": "ce6c52bc-0477-44e1-b128-fafd095393ed",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6cdbffe9-f1f1-4d93-a7ce-336d43beac02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "423125ef-9797-4019-a4eb-ac8e5b8b1d17",
        "cursor": {
          "ref": "7bb9c94e-aaa3-4add-a686-179da998e95a",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "06d298ae-d1ff-417d-b467-8e8782a6b6e3"
        },
        "item": {
          "id": "423125ef-9797-4019-a4eb-ac8e5b8b1d17",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fb5f7ba8-dd98-40c2-bb19-b652d70e0d1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ac00f7-25fa-46c9-8a52-0271558d7269",
        "cursor": {
          "ref": "52a4be23-bcd7-4875-88f2-02e488ae374a",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "aefb457d-1a25-4fe6-b8e1-fc1d586f51b9"
        },
        "item": {
          "id": "48ac00f7-25fa-46c9-8a52-0271558d7269",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2a03cb59-4842-4638-9773-140234206ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a333c2-f5be-4102-8cc7-da3e6c8882a9",
        "cursor": {
          "ref": "0527e975-d414-44b0-852e-bc1965eb1402",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2c149f52-469d-4782-9b95-4c1187438b7a"
        },
        "item": {
          "id": "93a333c2-f5be-4102-8cc7-da3e6c8882a9",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7923002d-a0cc-4e5a-8ca6-85fa341432b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef36ff7b-de9e-4b03-8844-cc1176dbd25e",
        "cursor": {
          "ref": "002ddd97-7afb-4bd3-a8ed-10504652abe3",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f27d116b-4224-4dfe-ad00-32c8a9712074"
        },
        "item": {
          "id": "ef36ff7b-de9e-4b03-8844-cc1176dbd25e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e4be5e69-f369-40fc-9855-d30079c22bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac21a39-8cc8-453f-b748-a1ce416b411b",
        "cursor": {
          "ref": "39d51023-38fc-488f-aba6-616ddebaee24",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3299490a-b670-4abf-81a5-0774c8a6c360"
        },
        "item": {
          "id": "2ac21a39-8cc8-453f-b748-a1ce416b411b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3be2f1e2-3c26-4b9b-a0da-95c78c893145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0611f2c-c26a-41fa-934d-0ed1ad56ae17",
        "cursor": {
          "ref": "20ccb710-c4e8-41e1-80fb-6b38144c63e5",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "06480969-6e70-41d0-b6e6-2035afd2eab6"
        },
        "item": {
          "id": "e0611f2c-c26a-41fa-934d-0ed1ad56ae17",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8b53cd20-fdb3-4341-9da1-1d2d552870d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d1cc25a-9cc0-41ff-ac4b-22c0788884a0",
        "cursor": {
          "ref": "f5ffe754-73e5-4c9b-9726-113cded6ae7e",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "556c2323-0b68-4a0d-a802-ca98cae1f8bd"
        },
        "item": {
          "id": "9d1cc25a-9cc0-41ff-ac4b-22c0788884a0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "af517476-6f5c-4fd9-99a5-17871aedbdf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e6d2a1-bddc-4358-aa37-81226e160904",
        "cursor": {
          "ref": "3a788dc9-a2a8-4482-ab90-ab89bb9461e8",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3007bd77-43f9-48eb-be73-945d0979485d"
        },
        "item": {
          "id": "32e6d2a1-bddc-4358-aa37-81226e160904",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "dd153aeb-6516-4f98-abbe-473162e9f2e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00882f3b-92df-4bfb-b36d-c31b964eccb7",
        "cursor": {
          "ref": "5db3da39-198b-4283-8eb0-9e452650f33b",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "32b71779-df00-485b-bacc-a0353f4f3b5a"
        },
        "item": {
          "id": "00882f3b-92df-4bfb-b36d-c31b964eccb7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "30d6fe73-133d-4dac-9138-9963d1c9cb52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42fb5fd-0a62-45f2-a1f2-e3393772f30e",
        "cursor": {
          "ref": "9103d116-6406-4b31-b002-959834ef1919",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "67c50bf1-d108-4bf9-9452-713ae11049ad"
        },
        "item": {
          "id": "b42fb5fd-0a62-45f2-a1f2-e3393772f30e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "01c4b25d-af52-4988-a873-641df99549d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952bcad0-4d37-4a61-ad58-5e9abc2de6a4",
        "cursor": {
          "ref": "714944fb-2d77-47ed-8e1d-1da3132ff2c4",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "072ea2b3-15ef-47d3-b2aa-8d8a21c32db0"
        },
        "item": {
          "id": "952bcad0-4d37-4a61-ad58-5e9abc2de6a4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ad02b2bb-9d6d-4c76-8d57-cfb78e5296bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44547c2a-40f3-4b0a-81ec-e23c6028ffef",
        "cursor": {
          "ref": "612cccd9-5519-4da0-9bd2-c4b6d5dc8da2",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "64d74620-584f-4258-b2f1-9460f80a2a48"
        },
        "item": {
          "id": "44547c2a-40f3-4b0a-81ec-e23c6028ffef",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "496f38d3-e627-42c6-be64-2d3ef95c58a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494d1a64-a913-49b5-8036-4be4b4931dc2",
        "cursor": {
          "ref": "77059d23-e061-45bb-b96b-5f1a1204efa1",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a613e6d6-ad17-44f7-a797-fd56ec00d6ff"
        },
        "item": {
          "id": "494d1a64-a913-49b5-8036-4be4b4931dc2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "83a1f457-dd58-4206-bb27-c204d4c33a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf33e528-e6a9-4c50-a760-6e5b4bbff628",
        "cursor": {
          "ref": "9ec95057-3f8f-447a-8330-cae8fdcdf70a",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "55d62ff7-16b5-451a-80b1-db412e09a09b"
        },
        "item": {
          "id": "bf33e528-e6a9-4c50-a760-6e5b4bbff628",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "641c058e-1f3a-4c6d-8527-701c4db31904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c3453d-7177-40ac-9da6-97139b5b8e62",
        "cursor": {
          "ref": "5f07c0b6-b7ac-4e6c-9338-c26513b6ac8e",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e42269c3-44df-47bb-b70d-068f448f66d5"
        },
        "item": {
          "id": "15c3453d-7177-40ac-9da6-97139b5b8e62",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e694579e-67c0-416f-9eca-31170dc40fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9fc109a-a141-49df-b86f-ad4e61f7c56f",
        "cursor": {
          "ref": "d797f0ed-3ac6-4199-8b7a-e9bc1a2d8122",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2042c66e-493a-4eab-b718-fb920424c524"
        },
        "item": {
          "id": "a9fc109a-a141-49df-b86f-ad4e61f7c56f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "03aeb344-1e68-4f86-9a45-aeec40899daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0878ce-1977-45a9-ae0f-5f164f44879c",
        "cursor": {
          "ref": "8851081b-603b-4762-ae34-1675dba15d8f",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c0a10bd0-8865-4133-b3aa-a48e8ba6f4ea"
        },
        "item": {
          "id": "bb0878ce-1977-45a9-ae0f-5f164f44879c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "18fb6672-4f3f-4432-8c87-b45b03ec083d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f8ac695-45f1-41bb-b079-46d3dfdb932f",
        "cursor": {
          "ref": "5cd68c8c-8317-419d-8b5b-cefa3fcd85b1",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "294f0c4a-d3fc-40c6-bc9e-81dde944c373"
        },
        "item": {
          "id": "9f8ac695-45f1-41bb-b079-46d3dfdb932f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6bcc2d86-dd73-4b35-8161-c2b2f322213f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86100b37-a587-4814-a9a7-140a66db02b2",
        "cursor": {
          "ref": "86459cea-6712-474d-af04-19c5eb59b1ac",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "dde7aedc-3973-41b0-a95b-918644bf5779"
        },
        "item": {
          "id": "86100b37-a587-4814-a9a7-140a66db02b2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f727c094-57c8-4f80-b67c-4c506ec1ab78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8808ea9f-9afb-4e04-9761-6542ff0ef1d0",
        "cursor": {
          "ref": "acbc9896-d729-4ce6-9997-df6202a953dc",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4e43d078-6c25-4ad6-87c6-7f65ffa693c5"
        },
        "item": {
          "id": "8808ea9f-9afb-4e04-9761-6542ff0ef1d0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d2936320-3c71-48ef-aca3-d82662cafa05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d002b1-dd4e-4611-987d-85482b035230",
        "cursor": {
          "ref": "7550774f-caf6-46d4-a924-6fb78b4691a4",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7046f0b8-d42d-4cfe-956a-1d0f520d2673"
        },
        "item": {
          "id": "b6d002b1-dd4e-4611-987d-85482b035230",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d05a7185-568e-407a-84c6-8e2f061f034e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f01719b-4101-415c-b468-298b353df4ee",
        "cursor": {
          "ref": "a2d5c0f0-fdb3-4e1e-9237-0d2348a13609",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "79ed6da6-16bc-4f49-9abb-ccb52e80e5bd"
        },
        "item": {
          "id": "1f01719b-4101-415c-b468-298b353df4ee",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "27a5f6ba-3852-4ec8-8e1c-223f5b981d0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "74d50880-4890-4c4a-8aac-b10a61a64bd3",
        "cursor": {
          "ref": "c0826034-f050-4a4c-8ffe-c8e0cf5fd502",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d2e46508-786e-4e57-847f-17e798bd7a92"
        },
        "item": {
          "id": "74d50880-4890-4c4a-8aac-b10a61a64bd3",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d92a9e33-6a86-4175-8581-a5a9e6801f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f210d690-944a-405a-b98f-c702072adb74",
        "cursor": {
          "ref": "1357f68d-21dd-48c1-99e4-b7c4509eb140",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5c402e33-ed90-4ade-ab4f-b8b2648e1fac"
        },
        "item": {
          "id": "f210d690-944a-405a-b98f-c702072adb74",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a73c8faf-ad7b-4dd9-8228-d9498856fac3",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb0fc4fc-6cf3-4ec2-ad6e-8f8a9bddc574",
        "cursor": {
          "ref": "405e4644-9c10-4d7b-bfa3-e3a792cc250b",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "94f9c39e-7f91-426c-82ec-b5167a3fa050"
        },
        "item": {
          "id": "fb0fc4fc-6cf3-4ec2-ad6e-8f8a9bddc574",
          "name": "credentials_verify"
        },
        "response": {
          "id": "db0d7a95-7e43-4641-9b84-db2a09342a42",
          "status": "OK",
          "code": 200,
          "responseTime": 1911,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a64e45-9425-4a17-a409-4d076c3f8a48",
        "cursor": {
          "ref": "265c6474-aa0d-4b39-b074-5916b00809f1",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c0f7d80d-dc0b-44d6-a734-69b02301b687"
        },
        "item": {
          "id": "62a64e45-9425-4a17-a409-4d076c3f8a48",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e36a7060-ac6a-4338-8112-98e9f0e4794d",
          "status": "OK",
          "code": 200,
          "responseTime": 2692,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "523fb2d1-58e2-412d-af28-b89db32f547c",
        "cursor": {
          "ref": "7ecac9c9-5731-4182-84b5-d0083ee05600",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "65626497-f64f-4caf-a98c-8d963439b17a"
        },
        "item": {
          "id": "523fb2d1-58e2-412d-af28-b89db32f547c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "abc385b5-4c08-415a-97b8-39f481864945",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "523fb2d1-58e2-412d-af28-b89db32f547c",
        "cursor": {
          "ref": "7ecac9c9-5731-4182-84b5-d0083ee05600",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "65626497-f64f-4caf-a98c-8d963439b17a"
        },
        "item": {
          "id": "523fb2d1-58e2-412d-af28-b89db32f547c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "abc385b5-4c08-415a-97b8-39f481864945",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "523fb2d1-58e2-412d-af28-b89db32f547c",
        "cursor": {
          "ref": "7ecac9c9-5731-4182-84b5-d0083ee05600",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "65626497-f64f-4caf-a98c-8d963439b17a"
        },
        "item": {
          "id": "523fb2d1-58e2-412d-af28-b89db32f547c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "abc385b5-4c08-415a-97b8-39f481864945",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "87a4291f-fafc-42f8-a20a-bd5cf0525cdf",
        "cursor": {
          "ref": "c46ad22a-169d-4605-9c7c-fa0c0cc7682b",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "19540cf7-99b5-4212-8812-d422818acc62"
        },
        "item": {
          "id": "87a4291f-fafc-42f8-a20a-bd5cf0525cdf",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "4730e270-1ac7-419a-b633-ebe74812e6da",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "45ae4dc0-6ede-41eb-8f6e-f3ded2324532",
        "cursor": {
          "ref": "b56cc682-fa1b-473e-99ae-de51e80844bb",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ea25477a-7e40-43d9-8d6d-6dfcd4e7dfa2"
        },
        "item": {
          "id": "45ae4dc0-6ede-41eb-8f6e-f3ded2324532",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "50f592da-1d38-412a-aab1-9bdc618611a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "45ae4dc0-6ede-41eb-8f6e-f3ded2324532",
        "cursor": {
          "ref": "b56cc682-fa1b-473e-99ae-de51e80844bb",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ea25477a-7e40-43d9-8d6d-6dfcd4e7dfa2"
        },
        "item": {
          "id": "45ae4dc0-6ede-41eb-8f6e-f3ded2324532",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "50f592da-1d38-412a-aab1-9bdc618611a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "70feb2b7-c3bb-4dd2-a3dd-bf2c077cd80e",
        "cursor": {
          "ref": "b1f39e20-2a70-4030-b4a9-875cd96346ec",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9ba10270-cf2a-4745-91ea-248d94426c30"
        },
        "item": {
          "id": "70feb2b7-c3bb-4dd2-a3dd-bf2c077cd80e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "369ae47a-5ad7-4e2c-b6b9-02b7b5b2fa1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 114,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "82627550-206d-404c-a298-48b1f67ebdfa",
        "cursor": {
          "ref": "c9f793b9-a796-47d8-9d0f-a80e2578d5c4",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c47f27a8-08dd-4626-8eef-9a8567896c7a"
        },
        "item": {
          "id": "82627550-206d-404c-a298-48b1f67ebdfa",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e1669788-fa85-44bb-8303-05923632f1fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "82627550-206d-404c-a298-48b1f67ebdfa",
        "cursor": {
          "ref": "c9f793b9-a796-47d8-9d0f-a80e2578d5c4",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c47f27a8-08dd-4626-8eef-9a8567896c7a"
        },
        "item": {
          "id": "82627550-206d-404c-a298-48b1f67ebdfa",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e1669788-fa85-44bb-8303-05923632f1fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "87e6c4ad-189c-4837-b554-7129e922e23b",
        "cursor": {
          "ref": "921a8104-d74b-4907-862d-41d7cf005a12",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "014221d8-13bf-46f2-bd02-2ad5d919f389"
        },
        "item": {
          "id": "87e6c4ad-189c-4837-b554-7129e922e23b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "64476c9a-01fe-4fe4-a15c-dd762e976372",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}