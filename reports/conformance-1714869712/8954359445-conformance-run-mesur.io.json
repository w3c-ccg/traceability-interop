{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "09457914-a4db-4171-bc3b-dd6c6c800576",
        "name": "Clear Cache",
        "item": [
          {
            "id": "94d4238a-664e-4345-80b2-32a3ff011398",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "edc5f02e-de97-464e-ba8c-8a0dba61ce1e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8afa97fd-b237-4178-b17e-8295aca111df"
                }
              }
            ]
          },
          {
            "id": "fc376b72-5509-4c8e-b360-53df550e969c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "537cc63c-ae8c-4877-a85b-70e796228301",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2e30c241-baa0-46dc-9eee-1f9517f031c5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "26156362-418b-4f76-8618-bde163fcd0ea",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5ffbffa5-4940-40d6-bb97-a9bbaed723a9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "295fe501-773c-4bc8-9ace-544ad7899f6b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ece6b72-6ba5-422f-8cf9-4fe24427156d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "92ae0d39-a0de-4126-9b4a-6149d6ddc64c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d3dcdd17-7bec-4cb4-a449-a5b1380f81e7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1846ed2d-5512-4a16-87a0-a4187db957b1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f114d7c8-dbfd-4bcb-ad1d-34a5e36ea42e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0c2ec233-e4e1-4a02-b8be-e8e6671dc3b8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "224feda4-9239-46b5-949c-b8b6d950f133",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0b917cb6-4a6b-4337-ac9b-e596269675cc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e4f30b1e-4efd-49e9-adbf-f7cc62f675fe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "08e5a254-3afb-42b2-9b53-057ad61af44e"
            }
          }
        ]
      },
      {
        "id": "003c1464-4876-44b8-a787-6b186bcdbb2e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c26e11eb-a527-4a4f-95e8-8e98374cd7ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9aa39f5c-937d-4452-b945-3f84bd6db765",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "48cce3bf-85e6-49ea-9f50-0533966f599a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e37c7f-d1a9-47fe-90e8-db344dd1ac69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e56297fc-3820-4104-93c2-e31ab982dbeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c107bb7f-c9fc-4026-8520-ac198d1b1a93",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1101b4-a8b4-4063-a7e2-834023d78435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1605a521-d066-428d-8628-ddcf3689063e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b52f8a-e16f-44f3-87c6-f29a1bef2472",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ced0f76-86f2-4afc-a511-a7a7aee2db6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20cf5a38-250f-4196-bcf6-27ac8ffbbf0e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "29e8ceaa-24e5-4830-87f1-89b1e71442f0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c3a91ba9-7628-4a21-b50b-0e2a737589b9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07707a48-607b-42f0-b76e-d992945971e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "173d59e3-e574-4d59-85ce-28b1b7fe1fe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c75dca9-cf31-402a-ad72-d49cf1b3b4d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7b64bb8-33f4-49a6-8ef8-e76d2295343c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3b91c5dc-9437-41d3-94fc-79a3cdbd446f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b3ba0b86-a809-4bf2-9339-e2b1d0115e29",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "52a5b0dd-796d-4133-a1c1-22e8314d42f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1e9ef35c-2476-42ac-ba6c-879c7a109672"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44480bb5-3acb-4274-a693-806aae6ec4a2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "f342f136-3806-437d-abc6-0f73f044265d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "26e9f42b-78c6-4df8-81aa-01f134fb09e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3b8e3737-1550-4265-bac4-1628ad9544dc"
            }
          }
        ]
      },
      {
        "id": "2f67170f-9d2b-4e67-845d-ed650c201e0d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "71b0bdc7-b5cf-4778-af63-c9c60c03843c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc83bcf6-3493-4b9f-a2c2-46dc1b4713cd",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8261940b-70fc-4639-b2bf-72ae58c80355",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0070cf7c-9deb-4ac1-94e9-d6dee7112120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d83ab37-709a-4a28-9ac4-bc459667191a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e94003-99de-4190-a607-28cb2fadb916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b110516e-7ecd-4c42-9eed-51abde0a07bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5926218d-ed04-4cd3-a761-fa9fb71c583a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb376534-03fd-4ba4-9297-8a8f5fe8cfd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "129fe26b-70ce-4b2b-ade5-9e1979d0f446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ba6a86-4bf7-4178-9315-58cdb068135f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7ea95b8-0099-4514-b624-e51dc2003087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67342b6a-0dc7-43c9-8739-300532f1535f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef392d9a-aaca-4b0f-9166-b66bdc887663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bdea0b1-b42e-4448-a293-2e9975e0ba60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916e8741-6341-41a6-9bce-b084e74dfa05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9290df9-22ce-422c-9851-178f6873d64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d81d673-7b0f-40d3-b5de-31725409aba2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d537c2-7a63-4a0e-bb58-83fe75484498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67c56443-c7d1-4184-bb73-96f1cbdceca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75135365-3e46-4c79-8f60-e09127e1e93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb7b59f8-9e8c-4549-8529-6c36110efe21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce8bd31-c7ce-40db-b579-35ed93d34646",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd000888-d727-4f0d-939d-42ad47f7f050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a551caec-9cf3-40c5-bbf5-0b1a8e4beac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb274c7-c92e-4e90-b0c6-449d1199a450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9275547-1e86-412c-a2c2-6a24d79829db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f48612a-02d6-4e5c-bcfe-5c9c76481a3a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d6cf448-7622-4e20-98b4-5ab1f27e7ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "592eefce-0c8f-46ef-ba39-df54aa0793c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae03c77-6421-4205-807c-bd4ccde9a918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71b86bcc-fb0b-4ad6-9f88-e6968a1d8fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "164ba375-2ea3-4509-b9cc-5128ea695953",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ed8c1c-db3c-49af-8746-d3c8b0415f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fff350e6-34f7-4454-a1a7-9674291e31f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f6f1c7-1a46-4a1e-a1ac-a1a4f07cbf97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1a337a0-bb89-4056-8696-0e48f14f81c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267f5d76-a34d-4467-957a-7613058c6063",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b45f74-85ef-4d05-97e1-ab2626313c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff9eed24-dc97-4422-97ce-4bfa397c8b25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eddb8486-1ad7-434c-8a10-c8236555efae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b4d9d8d-8da4-4ef6-84ab-6c6c71d26b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71b1a9c-ae00-49f3-b5b5-8075d5211520",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2a001b-ec62-4155-beaa-b1229c4f2c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a187435-47f3-4bba-bb6d-d496e7b6c2a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8aa887c-0ef3-4b9c-ba88-42f184aab584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3caa767-c934-4c6c-b48a-8a12675abf54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c61f96-7835-4e28-b62c-e651dca250a6",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7957b794-a67d-40c0-90aa-048a5fe9c2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77059e5e-232a-47b8-8e28-95d45307b415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd85e93c-7b8f-48dd-b95a-b0d607713fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a19b7b2e-b7af-4471-8c16-ce7b5012c681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af86925-bc5d-4647-9592-2fca30221714",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4b1245-b18d-4056-a10f-116b44c74a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95f84ccc-6f45-4b3a-8625-361f2a52d2b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f356c92b-716c-4df7-8f8a-daba2bddabf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32b23533-6ff4-4ee0-9cc2-ac6eb2be714c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5df390-9a86-482e-a3ee-b1e594e91759",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a7cca6-f759-40e5-8a52-82142db10c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86bcb044-45da-4bae-8d25-68ddcde891ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438bbc5c-067b-4c81-b84c-ac3cf847db68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8a01d81-7062-4668-aab8-de69a8e7a937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c4da56-bada-46cb-9988-7e3dc767a2d4",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5517d9-aab1-4ab8-b200-4db356ed7522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ad6863-36b9-463b-b55d-6161e17ce5cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c7c85d8-1e03-4a4d-97f1-1c3330fdafd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d594300b-d4d2-49ed-b634-0f18e7d2bcfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef88d8d-5223-4015-8e9e-b60b2e0d716b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ba20ef-a0fc-49bc-9ee7-539c4b080f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "499d9e48-ae0a-4c5f-9101-3d92e709379d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7abbce-ba0c-4cba-ba46-490142479bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "841ee2f9-b49a-4673-967c-1b6684c90236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599b3570-ea71-4344-8c8b-b4979c50f5c2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "968b75fa-1ec7-47d2-be69-5141dbf84a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a697cfa2-d2c9-418f-a20e-dc558d2aada9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233ad83d-2f03-4e51-ba06-06557b93964b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bce3aa4-3cb8-4c74-952f-520c4c4b385d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfba1aca-d619-4260-a8b3-bf63d151a3f2",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f653148-9709-444e-8ae1-3ce33d7a749e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044ad563-26c0-4c93-a2bc-8567b51e255b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c659138-9f92-4b2a-8ee0-bd7ebc707a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b636a6ff-7839-4d57-a7c1-cef983088e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d32675cc-c94e-4001-a692-7d8fb534dc8b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eba902c-f448-4693-9e63-a6346ec58b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6475220-136b-4c8b-9122-d6851358f598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a50b1d-b047-47a7-b6fc-e406175cfcb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e1853fe-ff56-4796-abb2-c97829bc1e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb6651b-743c-4643-99d3-95ed6640b7d8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8cd621-f289-4c3d-9be0-d9b43ff09c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2abced1-d51a-401a-ae8c-776da1d8799b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79a14f1-a18f-4e4d-b694-b9178b4602d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "69a1a91f-db76-4e92-86cc-e4fa961c2e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e768d4f-16c8-4b25-894d-bb0c8f9063e0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc0b0d7-04ce-4d8c-8bc0-1c9470887014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f5210d9-6e86-45b2-8cc3-c8305294b1e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cafcdd56-3ba9-4927-835c-8fe09fd5fd7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8779f6a-05c4-40cb-a3af-64f64c7c3ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193c5195-02f1-40d2-8337-cb922db3dc9c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b345cfa-424e-4da2-a8e3-177e8f044e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1af4d30e-85c0-424b-bfab-69d5024e523d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce0c275-c74d-4567-b215-e5cb390a7bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ef17468-e6f2-4ef3-8f45-7c1ab1987709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b20bc574-a6df-4c33-95ba-90bb65ca92c7",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "136c485d-d907-43e1-a2f5-2c6261b020e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7403b384-91e9-4877-8594-62cf35f78762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b8b47f-005a-4953-9e6a-8456ca835ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "633baf3b-471b-4d2c-84f0-a76b969cd640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0464a442-9e69-4b1b-8d7b-b5f3bd0fdb45",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5aca34-1a17-4326-9506-0a7b35195b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e69e7219-5677-4799-9e06-09f62fcfeec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb6f813-6676-4815-a023-dd39892bf0a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "36e3d5b1-121d-474f-860c-f153cf12f195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3757c5f7-fe29-4eca-bd94-29a1f7e22fce",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b9c572-178d-437c-ac44-9e2ffbc321f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "526b1fd3-d39b-44ce-a856-51b7d44bfc2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddee37e9-366a-4b51-91ba-94d302e63299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf2aed98-647f-472d-a833-af5148dde402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3cdd0ba-132f-4e54-bf9f-45d5e2b9b3e0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a728b519-ffb1-481a-a131-24b3dad5df91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c19dac9f-1839-4440-b684-9402281a92d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae977daa-1c8b-41f3-8d6c-f0b4483c3726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "30063299-dc0b-471f-aa18-68b267c6400b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1426923a-abc7-494b-b9c7-2a92ea2e06ba",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f491131c-811e-4c04-8bca-15bf11cd6b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8739e50-5860-4e2c-9058-2618eb1851b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643c2f3a-e061-4f2c-ad9f-f2b8896d8e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbc83b7d-cd48-4119-9647-28f1e84016f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355affd5-ecc5-4519-9467-46a732a3ebb6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f93aa5b2-1044-475a-b090-40fa8e48ef8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5ca4f3a-a040-43cf-a18e-56c781a713d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a46ae96-2cdc-46d5-bbef-de35b0dc63f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "86e35a5d-5b70-44c7-9a6a-1709c70f1e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0780d6b5-f5de-4342-bd26-75161a21ab03",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01545e52-ee43-4617-8400-1924f4e085c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3287d22-d81c-4e84-80e9-05f35e07f196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915af815-85ec-4fff-a13a-7af97c9a571d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1159f866-4a37-45c1-9cd1-f566406b0d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92065d0-baa0-4a7d-892f-118047612922",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9489b7e1-8971-4ea7-8499-69ae9073703e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d76d23-442b-4b61-8102-0a25ee649074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fee1a2b-02de-41ec-bb19-82fe402148c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "56fb10ea-5e68-427a-b677-9d9a77d28688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02887c5-16b8-4217-a1a6-572cfa7ad141",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f67b30-6e32-4748-bc78-f19b51621654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1ebec88-ae37-4faa-9ba2-209deb496625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7939eb-1e5c-4278-890a-cd6e3eb456cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee69f913-094e-4156-8f5b-bd1d3efbb2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e10adc4-c370-422d-a0ff-00cd8bb93d94",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "454571f2-52ff-4983-bcc0-d2107ff4d73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d37c6583-2346-4ca8-9bae-0a5cea560d29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397d44f1-cb96-486e-a327-b775019352c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "19f568d2-97b8-4c03-9b12-5f8a9c275773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3103d881-cec0-4146-8e5d-867a37db5d75",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c358456-cc1c-449e-8abf-434b415c4e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "126bd5ef-d966-4599-86c0-e34d131c6ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1285d9e2-6c2b-4e88-a06d-628840787934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9991f6c-0d01-407d-9835-086b412fa2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0510f205-a59b-41be-9462-97f36506adf7",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd4373f-0a02-4329-b6fe-d5d7a2ba5fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38cf4695-f647-4141-bbef-124fe2ad91d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f728cb16-798e-4b67-bbcf-74e4c2d665fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d01b4e40-05de-4f79-b748-edb30a3881ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af454e6-9980-417e-9e33-b91cf86f9ef4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd9463b-9a2d-42f2-aec0-8f8e9869a63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0dff901-0245-4e00-90e1-234a8b492fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b983c8-58db-4697-b842-afd8ec7d7537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f7d52b4-69cd-40e1-b14f-3e05ebf0ea99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57edb6de-a140-4059-83df-7873354ce004",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b27545-e2e0-49a8-abd4-ac57f3d5dbfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5c2a457-9fb2-4b9e-aa0d-435f904762d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74dba2f3-9cac-4fb7-82d4-f736c1a70a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97501b84-96e6-4e1b-bfcc-acbf0596c2a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6c60a5-880e-4143-9cba-fb07daea6f6c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30624b5b-1224-4068-8b87-098a32fa02f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b32e73de-d019-4961-9acc-b4f5e7e6a5ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897d2fc9-d419-4f7f-baff-b2cfe40b2dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "975a2c1f-b18c-4e27-9b05-d4f19f976859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead63b2f-210f-4297-aa0c-00830682535c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "973f601d-ba5d-4284-ab03-6daeb046d2ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "420127af-9027-44fb-b638-76792574a10b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906fcc6c-8e31-4b75-a54f-a9e2ac8be7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6f598ba5-4c4b-4615-ac39-d1b8eda4ceb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad37d0f-ba47-4d95-889f-28b5b6d96acc",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4202b3d9-129c-437e-922d-66146d32984d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cd756f2-eb08-471a-b435-d827dffa286a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6dd4b7-919f-4acc-aaae-ee5fcc9dcef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6b50f7c-93a1-4f53-99f7-4428992fb8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6504a96-0409-4642-b4be-d8db4b857aee",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab861105-a724-44e1-b05b-02511ac88502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e608363-6c40-452f-b06d-1e5cd195dcd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb628a1-8159-454e-9617-e5927037df29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "85933239-84c9-4eeb-a4a5-442965526b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1e450e-980e-4af3-a2ef-b31cd7b7ac0a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9696e7-f9f8-4074-9b8a-8e7b0f8f2ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13dd80b1-0fd8-48a3-8621-12f5b71fc378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef31988-ffcb-4bc6-b02f-99e0a4a0fde8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3874980e-87f0-4587-9a9d-a40c775d1778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6fd46ac-f01b-4a6e-a32b-a860dc4fd1f0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "576a7dbd-b9a6-4c1b-8b9d-fd4431234890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ee4c95-9293-4b02-a371-318853189655"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d783f2f-379e-426d-b439-4ba32ade4931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8413e63-6ceb-44b9-82fc-53f4af9402c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8608f673-e689-4784-9f9f-7a2b11697b50",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de28166-d47d-4301-b5f7-2d903fa4a14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "050c718b-7b17-46de-83f0-26f9cdbdda7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3abf881-956d-4232-854b-c8cae82c3b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3c4f76b-710e-45c5-a993-b737a0db8ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e82fed-ce82-4a1c-83c2-f38b9514db7f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8264a4-587d-41ce-a8e3-cd92f1cbfd6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ad3538e-371b-41fd-9df6-47b6fe1f62bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80dfae13-d304-4e08-9931-2d62a33265e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e0fc8515-ff21-4ae3-9649-839ab6d9d6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8a5b37-7ea4-40b0-a85e-35d5119ff73d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db05a2cb-b023-4858-9f99-e8e16722df3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2885f73e-716b-49bb-8629-c11677b83986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67ceec5-6ae0-48d0-b94b-3e7a1e6b78d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0187775f-d032-4c83-a692-626fdb6ed8b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab64bc3-3534-40d3-b783-82aac97b108c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d0e318-1ccf-4eb1-be62-796c4cc684d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af6e9762-981c-4bb7-9596-9dab37e9170b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8595a284-674c-4f41-8619-46d589ecccfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cf24c42-8a8b-49f1-915c-7a6351aaa1fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a06cf4c4-7138-45bf-ac72-6374f9fcd802",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd185cf-fbf0-4b27-b5e1-f0b6e06e9f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3500f5b-bfd9-4177-a672-3f1af6ca1904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1cf96a-fea8-468f-875c-f1603a659b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "01e224c3-1e40-4726-840d-8c5a733ebba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14207a44-2707-4b21-aad1-380ecb552a11",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b5d771-cc00-4fe8-a01f-82bd959a05a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "119a100f-7383-4185-9cc1-444de6b0ef3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0faffedc-c067-4cea-b8f4-ada7a6fcc580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c3cde6-67a0-47c0-99d9-fe311cd407f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8515a5f7-a919-46bc-bc3d-132d6196a496",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb4ac416-159a-49f8-ae7b-d7d86ae4a9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c4981f-4770-4256-a5d3-f89ee708d3e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5329ed-fb9b-485d-a818-4e507b329c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "27915cf8-942b-4e25-8b5e-efed4efb931e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e234963-43e7-4b94-93b6-d88895bd206e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d8def8-2bd6-4c34-a64c-b832021355cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59ceccf0-8a9d-461c-8100-f6d51f60ead6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a682085-6fcb-47a2-80d3-c3195034194b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f7f2c3b-ece3-4495-8e2c-f495089df7df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b852af18-eb8f-425a-8e19-0dfd280fc8e3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f92538-483c-4601-8c98-f1be4f2edbd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785dc785-928c-490d-964b-30789d08c672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bfe6f93-cbaf-4ca8-900d-e2b6f849e49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b0f7102-734e-4827-b11d-341025894cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8613ede-3db7-4636-9395-0685511ba339",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8fde58-ce08-4485-bb78-bec00bb408cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d87ef13-26f2-437e-bc2b-0dfd01ad0ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234e6cfb-23fe-4030-b977-3dc52c949a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "06f093e3-cf22-484c-9128-5ca803be8bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8a6fdd-6bb1-49d1-8d7e-00dfb24d7faa",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ef1663-1258-4052-9209-4320d1e0dba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c1ed581-2dca-4276-9f04-03b0f4b409e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7497087-72b3-4b43-a7e0-9d01ddaf51d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "5be44dca-4f23-4787-9abe-d4e03764f6a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f62b69-a267-4914-9080-8f1d52345659",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea2f008-9bde-4fbb-abb4-8436f9d8da35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bffc4af-adfc-4736-9b5e-4ce006a8118e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72ebdcc-e933-4159-82a0-1b93998d28f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3ee5df5-6d64-418a-a306-9b2a45f6d78e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1099e6a8-ff51-45d4-8de8-b9d8478f88ac",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446cf356-43ec-4b7d-9c80-c163ff1e58a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c2144a6-d0b9-45c1-895d-d926880ae007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa690dd-1ee9-4043-9608-4312dde84393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bca50a9-a142-4f83-93ce-f6aef0501f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3358f47-93df-4dea-b601-cedf062f219b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe3bd61-a2c4-4ddb-9d91-c8fb9eb72c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33956d14-44cd-42d4-9468-aadd2101a33e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2baf4b6-a2ad-4e61-b4ad-c88e87b18a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f40ccc0-3d37-406f-aae9-d368dbb429b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b05c45e-0339-4c3d-9884-3a1e56663d5d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74607c8c-5a0a-4925-a74d-760a7b2eaac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "944f07a2-9cab-4144-8bef-051f5eb42db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854df1fb-82f9-4c03-b4ad-467fc05f0482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "22ae7db1-0df1-4151-8846-05b0bf8cf15c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aecfeb5-ad13-4115-bbf9-abef288a7d14",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bddde6d1-3186-4bad-9765-cfc44678a076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "144b5bb8-f497-4862-a976-61b1fcb2428b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c91829-dfc8-4070-884b-36a460a7b73d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "53018d57-73a3-4593-93b9-c7fda1222411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4c99b8-8510-442f-9527-eef5fccac5d8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af844364-bfcf-41a2-b83c-8ea984176c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87a5d9ea-20e1-44fc-b5a2-505f25594d9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eee3907-fefe-4916-a160-d0c6c57b6963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0420476-1f57-4436-bf7c-da100cafa52a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364e1486-e98d-4228-9a3d-98865852c7b6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a892fe58-c09a-4b5d-b880-966e828d1a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "839684c6-7d66-4132-b102-f6f9e174310c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad5f11c-fc11-489e-a26d-344fcad8a9bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "78f0643b-2ef0-4c9d-a6b7-4ea88748e687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f2e525-3e75-49f9-ba8f-e40c679fa779",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73977f7-12d0-4d22-baf0-09d59941b22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e45c372d-1038-42d6-aa2a-c06183c2b983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7df491-697d-4c53-9fb9-3616bee4b890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9de28b16-8aa9-492a-8630-4ce607ebd8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf7627a-e990-41a9-931c-9d80aca4d349",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55eb978-9109-43d4-a160-02814286155b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cebf79b9-2fcd-4353-88dd-82fe6b5c59ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a2874a-34c3-4735-b33b-3ea3237d14b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b0f691d-f628-4e40-b0d1-60e1e9d1b0cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d79046-d435-4e16-b847-0a6661283340",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e21368ff-3060-4cea-af2e-4cabdd5e805f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c825ab9c-b221-4888-b4c1-9fb5d1f9b4a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa372120-b0bf-4631-907c-95b7806bbcfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e8de71b-5035-422a-b3b8-67b153d68389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0562a0c7-01e4-4b80-9b08-4ba1c2884eee",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64fd868-6e2d-45b8-8529-542f0a7f6de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53d6ae7d-6ae3-4ac2-997c-8da3b36b7240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f42d068-2145-40f6-9e65-3aba99f9df83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "91dbb15d-d83e-405b-98b4-1db6529545c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d7dcfe-910e-407e-989e-e14bb55f8429",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f1fc6e-fd17-4f94-8b55-3c9e6c6f4b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17df1dad-27b6-421e-974f-7baadef98663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31c6e86-4399-4020-ab6f-941f3f8fc150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d893428a-bbbd-4cd8-a5dd-2b7a32b7789a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d711791a-cf64-46c5-9510-b2f03c987596",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5962b8-a210-45cb-8f29-b67d135d0d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f5e471-1c98-4162-ba71-6de33d00889b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48810521-9b1e-4f02-8073-33f56ca6b5ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af7d8f6c-529f-4d1d-9083-5357c330d1c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e49586d-a82c-4632-8492-f5ba2245b15f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e23b78f-76a2-446f-8468-c28f8394a662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8260e536-86b2-4980-9598-d4bbbff579bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be0448d-e942-4bea-b132-b553e8dbd550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "078f3e40-915f-49c3-be95-341d3a7452d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f65eab59-e84d-4b54-9f9e-ccdee679a40b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b6eb86-acdf-4aae-b976-d6eb91706906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cab0132-3bb8-4fd4-8a1d-46dbad6f2d20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c62da69-87b5-46bb-b447-fdd8dcff641f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f480c009-002e-497b-aa49-2b198e0eb232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6e8241-32cf-4bcd-be16-4cedf3fc6f4a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf8d585-b80f-46db-a043-24db3216e2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03251fd5-9f18-4022-a87f-5d6b2390d3e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4928629-3e17-451b-9115-7e435f920f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "abf3d729-719e-49ac-8ff3-f8e77734d61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b65e19-c6c2-476c-b4c8-c955893e1ab5",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c244533d-ead7-4b7d-986e-365c09ae34cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b0ade55-95ef-4984-aa14-b37a5798f64e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a050f5-15c0-4039-9046-5715880f45fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "35d29175-8ac9-4acd-b26a-7c21b3b48083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02cf3e7-7c84-41f8-8bce-c445778f9486",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd101530-58d4-422a-9151-eb880c6e5cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31fb5dc1-5efa-4283-bede-81d4329bb623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d3fc25-2634-4d5f-959f-998a17f44b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "890dfd74-71bc-4393-b94d-5fcd798ea842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d01f901-720d-4469-85e1-8effcf15181d",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcdffed-0f19-4b15-b1dd-c1a13a0b4614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c2d13ac-12c6-4e00-874c-09522488a247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d2faf0a-8f3e-41c1-a13e-4f3509da5ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1055c918-4cff-4dcd-9176-064f88a12539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02043214-e839-405b-95ff-ec913183f3f6",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed1c20c-95e7-4db3-85d2-325405593df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5463169b-cfd9-4dc7-b600-b429959f095a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b40636-9b56-4553-8b1f-5ec3ec540240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13784196-8eb6-48d7-a1d0-dd892d565700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10698ae-a288-486f-865e-62ebda796104",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb41339-1132-44d0-a3b9-bf045257d958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3300503f-53fd-4855-bd2e-cc330b572ab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c05842-2438-40e2-a4d1-4414c2ea0ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab94ab35-6381-402b-a665-7eaafda4d29d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc23a185-8f6f-4399-aa84-366310ced190",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4dd8238-3666-4a4e-b9b7-c5dff33aeed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e304fe3-1798-433d-8def-cea8fda359c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9081f2db-269a-4d0d-8903-b3d24acaf98a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b681f30c-aee5-4ef7-a42f-49b4d3274be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cfe14ed-aaaa-421b-bbf8-9bce511684a7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbfeebfe-f2c3-43b3-b19d-f9b971680474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d67763ee-b930-4f01-af8e-bbd31c88e520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319171d1-957b-46d5-aa99-fc9273714345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6602f871-a0f4-4771-99f7-ec18f3b66009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f824e8-9dde-46c4-8007-f94162768785",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c54098-a6c5-45db-8a2d-b7b305ea8946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf6e39d5-05d2-4afc-b86d-b93effed4c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff84df6-3bb2-40a6-b97c-fe2884a42fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dab5e371-85c1-4cab-9d26-4775c061992d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a07798c-f322-43b1-8245-48e16edf4f4e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2069eb52-4d04-4ede-8be5-afecbffa3e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e33f2e9-3bab-4bcd-844f-2a6ef4f10d5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189bc4b7-9804-4554-a88b-e715def9974d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fff0b71-4db9-4916-b80c-482dc25d673d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978d191f-30c6-4402-a29e-71f36e8137b2",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f624de-5a80-416c-99e0-994fa261a509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34fbe8a8-a0ea-4c64-849b-bcd649329d1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e3dda0-d3ee-47bd-a772-3286aa3ad332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8698d83-cebc-4d55-b129-08f2da4ac1a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7899ae4c-f82d-4f95-92df-000f93f6f74b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf8541f-a8fe-475a-8776-82d7fe010802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b0d3e1-b430-4b0a-8e00-2a0e73274fe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a063250e-74ba-4ec9-91a7-acf19f913e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c821bdff-9d0b-4060-acec-fe1f8655e1ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83cb8910-6346-4562-b95e-26bd3346f297",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a8cace-e83d-4f5f-9f5c-be475dc83cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eff9c95-00c3-4e7a-9629-88988b20e960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa94189-6826-491d-82a5-33cda954b407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aceb6818-17d4-4f5d-8118-6de4d13344be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b0f84c1-0d31-4450-bcc2-c746daccba1e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d34016a-be15-47d8-87d3-54afe4cb30c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9523771d-dc63-454f-b647-ad2adb56205f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3eeb66-de88-4d7b-8f93-0d3441c8359a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1a73ccb5-aace-4622-9a25-99196d7d95d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5107410b-5661-4e78-b282-5b7fe87c1790",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09542b93-6499-45e1-9c4e-f836c19007de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d91ab27-7224-47b7-a682-8a6fe1d60abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b454cd58-3615-4403-bafa-7a727fce619c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b482899-cec7-43b3-b4d2-ac0d19694799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68015a59-557d-4c98-b532-a8234c26d710",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b33145-45fa-42dd-9f24-9fafad2c6a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916e8a24-6cb8-41f2-b12a-4587eed4ef38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4aaafa-ded1-4982-b709-4a7d64f3bf79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1d73ab7-18c9-458b-a5e5-9feb32bec291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944f8659-7c6e-4761-91bf-89700981132d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00ed6ce-bf22-4f1d-b787-78edeeb705e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "354112ac-9b75-4d60-a34c-b0e1450a4502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13922ff6-6160-4da8-8020-3231fe3233f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62c325c0-87ad-442b-ac4c-3691012df436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e90b4946-5691-4611-998a-9b25c3c62de5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2d1207-5ea6-4e04-a21d-964183d7a1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa3ab328-d094-4762-bd7d-a201e6144e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976d63ad-a906-4bdc-8564-2b2c38349ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9294a5f3-9052-4ef6-9149-9fe6ced03f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31c68aa-d986-484d-9432-0f93848c711f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7b5a35-242e-48d2-9c0e-e80ad1bd51af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d72f06e-778c-414a-9679-ecc95d42e313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9a4018-6303-4f07-8c2d-80e0a8d50600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7f875f99-dbc6-4ed7-8e90-041e420ae062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00137bcd-9094-492d-bae3-ad885bd3f9ad",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "454452c0-d845-40dd-bfe1-ede2c6caa32b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ffca6a8-b6eb-403b-bafc-4f3d7b321c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d54ef00-8dea-4881-b66f-f1ddc02179b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e122548-1508-44fa-a5f6-3cfd00756109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a2be54-3ff9-4ccb-8422-18b6d2d30633",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20ac148-fc2f-4d63-8b85-e72387d41f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3391fb19-3a6a-47e9-a90d-b2749e453368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e217004-1e9c-4169-a448-1c72d206c631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e97e234-bf23-4496-a387-eb1ba77845db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b1a4697-d19e-472b-859e-679717eec572",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc0b24df-2658-4843-a033-b3ae23e4b4f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32fbfdae-2f3c-448d-8f5a-ec307ccdde5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8307ee66-8dbb-48ab-a795-bdf5a7efb276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d402c072-2166-4bfb-8446-0053e43b9c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae56559-e15a-42d2-8789-1052422b8535",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07b5c6c-ad34-4056-a4bc-704671eec6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "804c816a-9c76-438f-951f-850f33eb32cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd8c72a-40bf-47c5-9eee-604336a0db13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3465813f-a4b4-482e-bcff-e5c01fcdbeb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a23ed7-1520-4eef-ba67-56c21e7f709a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8ae7dd-ba7c-4b0f-9bc5-91eca1c94ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ee0164-e091-4400-b800-f6b17f0c383c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc07639a-2a51-49fc-a299-5eebfab811eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c3ca735-a265-4571-a2f2-621bf01d2c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbdea6a-7076-4000-898b-b2886347ad03",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35faa60c-6b2e-4381-b77b-3daedb638bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d229e23-31c0-4732-8a15-6a466f23ec60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233c8c6a-8bc0-461f-a2ad-37f921a4e7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb89a1c8-a177-438a-a816-239cac607be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eedc5fb1-ace2-4e46-9011-a04b28de2651",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b3bcd6-f0ef-4029-9d1a-76af67549334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "89e0f7b4-68dc-4971-9517-c7a5fa37e4eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649269c7-3337-4a7b-af4a-ffdb03c0635e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc6dd46-3f7f-4dfd-8864-2a37c4bb0ccc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6eed1021-dc08-48ff-8cde-f0199a85d9c8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "607ccb73-c4c1-486d-aee0-ea1190594eee",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d326199-df2b-459b-a4db-9ea79bff0666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "231fdd74-67dd-4a5d-82fa-4224a5006152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a8b8e6-338a-46c0-bcb5-3f647041015c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f27b4806-4042-43b5-b4c7-11d0aa31a86b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1aca54cb-f424-43f6-9753-114d5218910a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c9e49a0-b40c-4d41-bdac-663c02f5a7a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "27abb5b2-a70f-4377-b0a2-c2010a63a020",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8cadcd33-6fac-45a9-a043-7016b7ceb176"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e163b617-1b37-4aa3-af4a-eef561a9529c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "46ee4f46-07d1-4264-9d16-1eb2efeaac54"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5a98e198-286c-4f7f-80f5-06198d219e7e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6e495e10-de0a-46b2-83f0-0cbf0fa04096"
                }
              }
            ]
          },
          {
            "id": "e8f0c7f5-9ff7-45ab-a64b-bbbbc254cc1d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f5f6a784-2a4c-449e-add6-7d308540b4d5",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "e736b081-2c54-4aea-b23c-b8b447cf9c3a",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a941098-bec1-48b4-b544-02e9bb815453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d4691cba-cc97-4da4-a2d2-8a8ff079bc0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98660c3a-fb8f-4e58-9457-ba094eaccb64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "192f8769-eb29-4a95-9993-58477c6a323d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8488b583-935b-46d7-bc66-83dd1dc2fe26",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e2a08fd-b436-4eed-8642-afa3470de5ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "384c49eb-6a5c-43cc-ba77-1f55943298c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44a110e7-ae11-467b-bb40-fbdee367b509",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2b70a9e9-b940-4d0d-93df-fac4a9524477"
                    }
                  }
                ]
              },
              {
                "id": "90da90ad-2b12-4924-bbd8-1afefb322aa4",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a947a1a-13d1-4191-b8d4-0644544313ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "36107d6a-a3ee-4280-bdb3-d11f1e80da2f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f8938d4-9e08-4d85-b42f-be40eec2ac20",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6109e28b-ba7b-46a5-9306-c6bed411c48d"
                    }
                  }
                ]
              },
              {
                "id": "d01b67b8-41c3-42b4-b3e2-40a1da3183bd",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d670b64-6f67-458c-a836-ea7115f8a044",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40e2ac49-9af8-4877-a39d-74dba21cb28d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22616294-83ac-4e73-9314-94fa3bb8906d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bf8a946b-7802-4b11-a37c-e6c41f066a3f"
                    }
                  }
                ]
              },
              {
                "id": "ef0097a3-9484-464d-a54e-7875641d198b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0232cd4e-97f6-4d32-ab47-1f6af458bbd5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4accd26c-2c3d-4295-8243-82334b4dcf88"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ce89726-05da-4706-b56e-3621ffc582f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3aca4e47-8b04-4dad-9015-392935777e53"
                    }
                  }
                ]
              },
              {
                "id": "c5fe99bb-a562-4363-b8eb-94ec3d574bfb",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "725f7438-d252-40fa-860a-9a6615943674",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6367d670-b706-4ba7-94b2-0346c9d57b46"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a10023e-b79a-4396-8e0c-0e25697c80dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a4bf7519-dcf7-4033-b4e2-9704bdb3d265"
                    }
                  }
                ]
              },
              {
                "id": "91b22091-0805-417a-b75d-247a98c319c5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33da9ab6-2f9b-44a1-a7a3-5d7686c47c1c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fce87351-9508-45f5-a0b5-6f46e5991780"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbdf3db0-6297-4024-a8b9-65311ac6a193",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "38e7920e-bb25-462a-8be7-885069827ab5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "926e1e04-f826-415f-afcd-c4e2fc2e697c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0fc606fd-0886-4a61-ab00-1445b62fedb7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1de96f41-3661-458d-876b-d87979c5981b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8777d49d-435b-4083-af7d-215e4c916d1c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c09817c-43ec-4b2c-aee3-25c1b6277093",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "43a6af6b-e938-4269-a96b-89f037ddf72e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "834f17f3-bdd1-4c0a-a063-daa770a54116",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a86b6df5-40c5-47c0-a66d-e94903d53d6c"
            }
          }
        ]
      },
      {
        "id": "b52e2c19-c073-4a52-b813-ed20d04413f6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3e3986bf-9a19-4dd1-968c-5f012490439e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f73e9152-95b3-468b-b2f1-d6202fc557c5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1d219430-cc91-480e-9f55-884ce81ba4be",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f943b440-a8ef-4e35-a20b-a3241daa6d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6dc5afa-3546-46ed-805e-42a3782e7070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed3b82c6-c406-419c-92bb-03f08fb85591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cecb37b3-9597-4858-b067-a6960a2b420b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee962196-0395-4486-b2dd-6ce3e682ae85",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e627ea89-3d6c-4f9a-b64d-ebe988548d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5fbb944-b125-46e0-b4ee-c4dc0d9332c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad95403-4474-4709-91d6-0f868194e6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "91a77251-6dad-4100-9b34-61f489436be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc698a06-0ecd-411a-b929-011dabb9702b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89de18da-decc-4513-828c-8fc3c1042ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c03957fb-778c-4cc0-ac5a-30e9105cbb39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b025dd-24c3-42aa-8713-0b3fcbf9b54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc1f27a9-7e5c-47f1-a519-ac5687876e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761dcf28-c0ed-4b8e-ae7d-0d17a85806ca",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bfad2d-b980-486a-8644-243eb83a7a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ba3fdca-b7fb-4052-8e68-de6ec0fc4826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b9c7cd-39a8-49d2-8448-1f71c907c98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bdc92f0-cb43-4e62-9557-a74f6559c727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3c5b51-516c-4964-bacf-7897bb62f55b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74286005-1edf-45e5-8ade-93558a8b329c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f72f1da6-8a07-4f06-b3a9-9fa4705b876c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da8ec6e-5abd-47f8-a71e-3afaaad5085f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "182f9624-cc2c-4fe2-ba2a-035d888b77fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed6fc7e-f659-4c77-8737-9a5d67608844",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de929647-9666-4a07-9c0c-f0b9b192c634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ffffc63-5499-4e42-b036-02b4f9194917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c1129c0-c11b-4061-b195-50aff77703ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5458fc0-7092-4069-8e97-cb4e6c2749b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3fa994-58db-4abd-ba47-3ac9e7d0ae2b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138e678c-b50c-498f-a16e-2413fe8bea90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7571793b-e4a6-4628-98c4-e3a6db1f36f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f58156c-a91b-4d16-aa04-b0ca6e7affa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "39bc1b03-e098-4303-9030-9b41f13b2664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a94c43-852b-48ca-a7fc-c59677f2085f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce900fa3-32ae-46e7-b2cc-08ab77398cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2b111dd-6635-4b81-a3d5-2ab19ae55296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c76d1a04-f264-494a-abb4-daf923df5aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b933394-0e31-4d7a-98e4-8d5feac5f343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b77e58-edd8-4b60-9788-c89e3cb3a202",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb3065f-43c7-48c9-9505-929b686e15bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8524efc-c190-49b8-a72c-d9a989a194d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3903bfee-9500-4f69-a71c-e7e4a4c8b3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a494b796-e248-410f-b40a-1c473312e4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9fe0cc7-d9db-4f71-8763-2389cf763465",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8cd0f1-3fd1-4356-a000-67ee80edff17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "282e9ee0-d75a-4a5e-8c6e-7c22ed81c2e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b28acc-62fb-4f95-8c8e-7cddccc7736e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4670a43-5a9f-463d-b3a5-6a8f72fd600c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c97194f8-72f9-4e3f-8bcf-beb0a057c68f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc43dc12-a5fe-42a2-a46d-62c1a35733bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "321edd5d-d17f-486f-8ee2-2ee4d5331592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840f9e52-c23c-48ec-8df8-3d016be9b882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "55313ec5-faef-453c-ad16-8e618299c76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a115c2c7-629a-49a3-a54d-f5f05c2f9574",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd57881d-c8cb-4d40-b287-2c3718364f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b8bfa45-2f8f-4db1-b215-4128421cefcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1f15df-0e2b-4c3d-97fd-662c4678742a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b1637939-530a-4c0c-b0eb-241bc7f19efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6dd9cd-97cc-46e1-831b-25b072af4ea0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ab5a30-8c0b-4f48-9e2c-e233ff38ec6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77658e42-9160-4a38-ac25-fd58a97c1da7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d610cc34-25c6-4e78-8ba1-3a31acf652a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f37331b8-c14d-412e-911f-49b9bfaf60c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01f8042-5366-4f18-86b7-92e6af9137f0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d43f2f-d389-48df-a2ed-a0576e3b0eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a411136b-f7b9-4b80-90ea-56d304c964c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc2b513-6706-40bf-baa0-c9dc1aa24aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d14533f2-8449-472e-8ff3-1654f80eeb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0217402-0efa-499c-8796-353b639bec5a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51f3cc3-f5a7-43d7-82d9-64a9bd5b8dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f4f6629-5a62-4a26-a8df-13afc8a58ae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78328850-5797-4dc5-bbc7-a750cd4f2260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b91d7005-e1a5-44bd-aa0a-41591c590c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b2bda37-79dd-4a8e-aba2-3d4e18c4b196",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b418a5-f369-4cb4-852b-877c6b51f642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b75b4a5b-c5c7-4ce7-b422-4f6a079a1d87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70195b09-3b4f-404d-9b6c-99533e3aafb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "abef07de-ae5d-4531-bf5b-8edeec0bfabb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c090ee3-d3e4-42dc-b703-f1f216c70d74",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772ceb9c-80fc-4b1b-bf3f-6e9f2624cd86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6546b2-bc7f-44c0-991b-3da6238336c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d94536-209b-4200-93cd-f1d4af0d6853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b28579-ef4e-4e68-a4b5-b727064e114e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "febdab84-2fd1-4f77-a4f0-9525f6ca1099",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "954c421a-124e-43ce-823a-436b4989ef12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e074a4f-b1b8-4303-92a9-a36f6588c539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05fc096-2dd4-4d89-9535-84988a90308b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "12184352-8c1f-4aee-b8cb-1d07af41060c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c0458c-4453-4b46-915d-c2fc3462b3f4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d30e2e4-de47-4590-823e-30ae50ae5968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dda4111-fe57-4eb1-ba5c-2f96c08fe96d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d730528-548d-4fb2-8da8-e80ef5409ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c46f8bfb-e7c5-4b74-ab71-360c790e1ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac671bc-3115-442b-bad1-7359f70462e9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3b2b30-54c5-476d-a7b5-f62e14db1adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b639fb2a-ed64-414d-9804-80d48e74d217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a8bc93e-ccd5-4f25-890c-2c0053516d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8ab45f7-4176-4950-a165-82ef0a76f679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8020188c-76d1-4d70-af44-75593c595969",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d82c2d-4e26-4ba8-b762-24874fc4b708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88524add-94d5-4909-8607-4cb655773668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d682b2-d5bf-49f2-9444-1c994b491c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48f5b89f-0ad9-4438-b88e-ba5f5a862af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775650d1-570c-4f8b-a286-bd4d346502b8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f359fb62-135a-4e3f-a705-d11b0ba4a624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ffb7ff-f92a-486b-bba5-c516a1440341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b13b951-3d84-4941-a08a-15479e45c29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c030ac9-6c22-4308-bb15-88d937e4695e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a1052c-f831-4ee4-8ff2-33dbf009cccf",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "415a0af0-b94a-4023-ab61-6c8ceff0bac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b85e84e5-ffa3-4807-8e57-24504ced5cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b83b78-593b-4a98-83db-c68681702cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da73b1b9-4c81-4655-80d0-7b41f390493a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f175bd8a-2763-4542-95e5-6789a14a16be",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0228fdc-d75d-41fd-b465-01b5cfec9597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce5e1b5-827c-4cbf-bf91-e36ef5925707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27ebb2a-ce10-43f7-9605-3f993c573973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "afa74c97-0d1b-4f67-aed2-260644c94ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "135f32a6-9d95-4254-bbd8-d21111d11396",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2abb29-3d6e-4e75-816e-42b192fbe51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c76fab3-1738-4bd2-8e8f-cef45fe0e9b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7660739-85ff-4632-a475-66906b691999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26faf228-7fba-49d8-af28-1692eae57d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c24bb7-a47e-4dea-ac05-a11d3adae3a0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b6f7cd-d8c2-46bf-8645-ac9eaab61b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b6e04f-2c9e-48e5-a2f9-4f1365713038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da7e2d3-da1c-485a-846c-c1e74c588833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f084e65c-811f-4bd8-ab15-e899378a447a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47845514-3eb0-482e-b0b8-c5f9128c5f91",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "339a2d1e-3a69-4a96-862b-8ac7bebaa28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13f806f6-8838-4853-8d7b-dae565185ce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22c86cb-61df-40fe-baa7-b783849525ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83f00aa5-be2e-40f9-a2ed-f565377c5ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa91bc85-66af-4f68-b86f-70446a653956",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3035b47a-d1d8-4e13-9e3c-908b54f7e018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c0cab8c-6edb-4e48-8987-2c8ebe49dbcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb0c4ca-8b79-4ca9-bef0-552aa0cd7eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e57fe3da-8f55-4ef1-8a52-27824559d07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8c3a15-f4ed-4987-8c29-93ca84c06a96",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46afd39c-8e78-4e64-bd50-17c865a08736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fc59d27-08dd-4584-a1d7-c071876b57e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b23ed25-7ba3-4963-97ba-a067384de955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa45081d-1b15-4a41-8f26-0d70ca04183c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ada998f-bbf0-4e6b-ae94-70d6c6d4be5a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c9c403-5cdc-4d33-a653-9737ba5a938e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6276ba59-6548-4907-ad38-688434ccb6ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734c71dc-adcd-46e2-9ff5-bb818c20a171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34b87605-f2df-4e01-904e-480df033f1b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4e3f24-ad3f-4f13-a568-1634af4711d8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c5edf9-843e-4c3b-aee5-7aaf5f2fca3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee049f88-34cd-4ab9-ae5c-1b2048a5419f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932db4b9-7ab8-4c97-ad8d-567cd4a4c9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32bf4da1-ce23-4da3-9ee1-1e4096979744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a27dd85-9b53-44f3-89da-a61d5c943742",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0370cc-b44d-4a9c-91a7-2769298529ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "051bfcf2-23d1-43d8-99e7-42aa2b6b0c13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77a98ca-628e-401c-92f2-4ea88c3c1743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7e552ae-2b18-4030-b95e-14c52932e972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916c7951-249f-4a84-9c36-2ef68b0b6aea",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "714ee2bd-b4e3-41a5-aa5f-fd34b53e16c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ce0cfa8-0278-451a-a5d1-8fb3dd664fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243dc5c6-697c-4805-9406-a03fbeb33043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32a52eef-3751-4b66-b54b-0c8193e84da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41afb90c-98c2-461a-ae9c-635f3a71d8d4",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "353324b2-bfc9-4f5c-ae11-3d56676d9b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7de75a7-6c15-4afe-b6db-42f9905dc1fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846b613e-8a9b-4515-80a4-7a46968e49c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ce8e53a-43ea-4b66-aa45-a48cb6113b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1372ddee-c83f-4502-a3ed-eb0b2d77f80e",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f7a169-c8d6-49dd-95dc-2025618fbf30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dab7c844-051a-4dba-ae8e-c335b3642652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "692883f1-e54b-4336-b9e1-3df06a259d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba424be2-a503-4abe-a046-b320e12a819f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd45e29d-7920-4dc6-8671-bc6dd20de35a",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "415f2ff6-9fb2-47f4-b6b7-a3da8187d18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5695d0b7-01a5-4dd7-b17b-da1bbc5925c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1bcaffb-534a-40d9-badf-1d9d85f6ded6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9915f1d-7f0b-4904-b5b5-60daf5ce6a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0685472c-063d-4b51-a960-2c195e39111b",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f592ad4-dae3-4cb5-83c1-251a690d990e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8829ab82-f2aa-4562-a3f2-887b735abd4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3df97b4-a773-43fc-b3dd-55486e6cc71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef0af390-64a5-4d42-91b9-c6c448bafe11"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f07fd32f-56f8-485c-a28b-2ce20dd14845",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9fe3b87d-1f56-4c60-aba6-160dd1b2eaa0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c928deb9-5a86-4af3-8347-19ad4717243f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b5ffe283-8d9d-4239-bbc8-f95e889fef48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62cbc339-241f-47c5-81d1-ac4fa99c84ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e29096bb-1d59-4a16-a908-1af93cab1ec4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d08f4eb-bf8f-4942-b2ba-9f6a9fa29ca3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "912f8af1-0fcd-4276-aabb-4f3235223c19"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fb3ae3e-072c-48ae-96dd-77df85844576",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fdc2cc28-e564-4c93-af6b-d6891196a6e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "33583a59-27d8-4954-be6f-a0af80d870c3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cb4b8767-4c82-4b44-b1fc-ca54080db54a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b080e99-159b-4399-829f-2156db89e390",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "20f4b282-a1e8-4844-b347-cd5b33d3c9e5"
            }
          }
        ]
      },
      {
        "id": "5fbf7e48-0c30-44b1-8ef4-c04b881cc060",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "afc1b545-7711-482e-8827-c0011f8dcd13",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb476be7-f989-4bee-afa5-14fb750f5713",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ba897117-f405-41cd-89f3-24a1cc5c0d41",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f947af-b43e-481d-90b3-6c45f16ec3ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d367a87-3b44-4bdc-a513-c216ea78c711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a75c53-f95d-48c4-adb8-04efd0aac318",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6e3143-8031-4b42-9e9a-f808e371c8af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c5a06a9-3ad6-4fef-8af1-255c63bdc280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e034ae-ddd0-4e5a-bbfe-eb967b327d73",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec1c941-6444-41dc-97f0-8cfe0bcbc41c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f780dc0-35eb-449c-acae-e6d7193c50bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e657843-f226-4822-8363-e50e5cd99a10",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96332fc6-db66-4637-a55d-719e4c209446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae1a007d-942b-4c2c-8e5b-aed0bc759668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d97d75-cfe4-428c-b78e-e857f5065323",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8554ae55-740c-43e5-9c1d-54ed9b858874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45d5dc41-822f-4f41-8f28-22678cdc0fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c9c8c2-59b6-430f-97e7-879f3d40f1af",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c02fb686-c393-44ab-a771-80635a848c96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a1a3d86-949b-4ca2-852b-229a92faf544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb14f002-087f-4758-a35e-8fc0a560a336",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f15cc1a-040e-45b8-87d6-55119a3a3ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3b0d608-723e-450d-8b47-317170b3e2ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "072bba6c-f6b8-40c0-88bc-56741ad5f8be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3439bef-cba8-4707-960b-9f839653a98b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c59d2d5-493a-4426-bb37-61ddbce488e4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b33ab3-de17-456d-a56e-1f19357c70b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daa91400-7645-45da-b9cb-4a198cad548b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38116975-29ee-4a97-8ec9-93404264bae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2ab311b-991c-4582-a436-32e9e2cc4157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e1fa54-8cc2-4bb3-a2f6-d02fa1a989b0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7465f65b-0b5e-4781-b93d-ac6a2968fbda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb371fe3-af17-4c9d-8e9f-7dfa9ad8df5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcd5e48-04de-41a4-9190-9522088f57be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c420e28f-dd03-4bc6-a034-3c7f801c808f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230210af-414b-4d9b-9fce-c7238df2408e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a234910-ce29-41a7-9b96-44b86b184d1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90881133-4254-4ae2-ab41-609cab1d033d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b7182d-acc9-45b8-9ff7-77b43351fd81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fab0e2b2-c939-4def-802a-f5ee8b9cd895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b887ca-c561-421e-9de6-cc142cfd7a11",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add67545-571d-4076-beba-00e3bcd2e1c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1ea83f2-b853-4687-a307-d35175e8de4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1eb0685-3eb2-4f2d-a3a9-1a59aa40c3b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2da0f1c-98b8-4afe-8ad6-c46b4dfcfb83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edfa411d-247c-4aa7-918d-0fd43fd9235b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e8c54e-2d61-41c1-a7fe-cf7c6ebb1a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ee320ad-a77f-4cb6-8ea2-1764dfea661b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0177e1-e7c4-4f5d-af36-0d271ae5bb1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ac66fcd-7dcf-4a76-83aa-2c63d47cf124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1195d1b0-1aa9-4603-a6e5-8a1086389c35",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9f0470-dc5d-4c58-ab2b-9b99f6af0863",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51d67ff0-3d7c-4d62-92a4-ced6304e742f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc4ff93-c809-4f68-9e54-c956e19ffad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e62c911b-333a-4a18-85b2-c4a2c56128c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba2b56c-9243-431a-aa02-1a96169f9be8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ffb886-003c-4412-b8b7-3be1ad67737e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0ff7017-7d49-45a0-a30a-436038a5c4a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ddd5de5-1855-4064-9e09-447aaf566712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18f596a-8494-46c2-83f2-bdb334e639ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caacc44b-ad21-4e07-b4f7-255cb75fd3d2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c0bad6-0e02-489a-be3a-56d7004b5fdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d82b732-ebc3-4881-aad6-48de989900d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68758d1e-0b0c-4656-86c8-ec91c3b43134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdf86e44-10d9-454e-9983-634df9a1ce36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434981cb-72a9-46ba-ba0f-599d1c560928",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774f4e46-736b-4b20-b899-3d24d9dde51e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9af71b5-a203-45cf-828d-46927210ec8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09a1bed-ffa2-4ce8-a4f9-0f24522ef16d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81443465-7118-4688-8f81-21c8e0b0ff0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9635d13-d9c2-4d53-a09b-2e4132bfaff9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2723cb-4d78-4567-a174-b8b255033c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81750bbd-6697-4e3e-9101-5c115f925112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee9e82b-4457-4706-ae60-ecbe5aaede68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc073764-4907-4820-ad07-9c243ca2c8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2194baef-7d02-4c36-92e1-379d0ffe12f8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8775ce-5e67-4f42-aeb3-cce560f71321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b18247e9-aeb7-4aaa-9f9c-897d49aed87b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e399793-962b-4299-bce0-f032ee714cc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4dcdaa9-fa8e-4b32-9ca5-d58b49b03b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7106f362-61ee-4017-9ec2-0dcd999f6081",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e4d783-846c-41f9-9f67-fafc7ca4366f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e4ec35b-9f3f-46c4-8616-c01b4590525e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3f5906-de7b-4b75-94e8-eeb0cd416617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6aa6ad9-ebc5-4f00-ac90-850e3a4486c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8da1917-ca4d-4070-845b-702c6e3957e5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b5932c-046f-4606-b432-a5ca54e656d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41192eb9-f197-40f3-98e8-e10542b8d02b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1f4102-b980-49af-96ed-c9c6287dde57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "279aabe9-d083-49b6-ada5-65a980b54503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ec4f77-73e4-4410-8818-8bd248b6c94a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61f51eb-75fb-47b4-9293-6fa8fa5890a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71dd2221-54ae-4de2-bbba-e42dcc5eaaa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51455a7-49cd-4838-83fb-fb5ffad65558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e07322cd-6caf-434e-a7c9-5fe5dd9092af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbdb3dab-3fcf-49e3-90bb-a914328993a9",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c2e323-497a-4265-adcf-26fe32b03aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d972c2f8-7a69-42e0-8703-f2ea57030673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d074d152-0350-4bff-af94-88dc49285853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fae5199b-9ee2-4d3b-8609-6fdce4735bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377b1731-16f2-4cd2-afba-0a6ab90ea784",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a738e346-6ba7-4a77-a393-0205a5aaa834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02245220-22ac-41f7-8a48-2328b58944d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "132f5fb4-d19f-41e1-a1ba-4fe7480894d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c2b5c6f-3045-48c7-8f57-f0252de439a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47fc6725-f0a4-492a-bbce-17f114bb441e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ab10b1-e0b4-42bc-a683-ed807701e368",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20a431bd-a501-4211-b9d9-cf67b2601675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cdcca13-5d9c-4010-bf1a-8aee93175e8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03baace0-662e-4b7a-816c-338b0ee38bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5427f1c7-9bac-4cec-89b6-bfbcfc365e93",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56ee2e8-75b7-4086-8520-a776f69e88ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b1e0812-4eb3-4afd-bd74-08b4d46943c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5106c294-0614-4da7-a35e-920587bbba58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "988f4c2e-fb53-4a2a-b624-d448a9f22aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246bb256-418a-4f28-ad7e-a796653c5d81",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbc75e2-ac5e-43b2-89ae-cfa2d9af1566",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b31f0b3c-d282-4268-a6ff-ef592211625d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c4ff0c-8ae2-4b82-bac2-b52f2f3c4365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5359fa65-9050-4003-bdae-09ab7f69dd48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7042829-1052-4c47-ad89-4117b37c1c69",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3252b76-aaf6-4395-a138-6de142815dda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a096190-878d-4cfb-a727-da507e3d9153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8188997-851c-4138-a31e-e26d8e6f373c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9887f78-9020-430f-a378-dd717d7587d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4733364-2295-4172-9c15-9f5174f37840",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ea6771-4b4a-46de-93c0-52fbd859fbac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bea8ff1-f46c-4007-8b19-d395452e13f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ce34c7-b249-4308-aaec-e7e3bf4a5222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e6e3f23-f64e-4584-bba5-a207e8e669cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e84f39d-c86c-4d7f-8cfc-aec09d696525",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d65eb9-5913-4ead-b2d7-867ca7869cee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdeee069-11a8-44de-ade8-09747f4b4b3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e276d1ca-c40b-4bc8-86f1-0a4f28f32501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1e893be-317b-414d-bb36-4afd95fa1962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd757cf-27d8-4326-aadd-e4ca610e7654",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca1a08d-dd49-4855-a4bb-bea74dbd241a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b3f9b02-444f-4ba2-91ce-ef9fa0ac556c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea840599-f686-4f3b-b674-0b7ba70374ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a08def3-620b-4d98-8649-6aa1363f1779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bdcd043-1f71-4be5-9d88-a72c25513308",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92942ebd-7a8d-42c9-a855-b5eb635a62db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5735bc94-d8ba-42ce-bcff-68424c887c38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a54f8e26-7ae7-40f1-b456-663b2322a7f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea1ed16-31e5-48a4-9e1e-43fec4e6d9f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46609032-77f6-4128-9abd-e446a71f4187",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa76cd6-a265-4bbd-ad0e-0793c4d140dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c11ddea-6942-4db1-871b-fd1ef7fdcc68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e1e7c3-55dd-465c-a4a3-c32cc230935b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ed8e497-6175-46fc-bf6b-e50a3e33277d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec7fb20-13ba-41ec-9a3a-56dabbb300e2",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e3623e-52fe-4926-91ca-009c52902510",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07cfe288-732b-4527-923d-742136042b9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1707b15c-3d4d-4e43-a030-2689e2d7b6e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18286921-a029-42c8-bf17-e158dcbc255a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19fa9243-2dc9-49c1-aec9-576d535525d3",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446c849f-ba9f-4e6a-8785-79fd543156c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4864d59-bbe2-40f3-b003-abb583a4fe7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19ef94e-ed84-4ae5-92f0-812ffa69e4b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a9bde5-34c1-453c-aa95-5ef3de7a4791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bdeda25-f797-46a6-a87a-e97eff5b6b9a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4fb7741-ea6f-440b-bd18-b4fa2ec5d8da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25a8368b-1a6f-4927-afd8-758d1e4c730b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd113d7-bd27-4a52-9294-0b767250f390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "969594d0-9832-46c4-94e8-69def45bf429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5a1396-cac8-43c5-ba7e-d482180498d1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3a944a-0fbf-4ffa-a3b5-828e45a16a97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b11565-7e53-45e9-8431-4964934666c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "767bcf29-1885-431f-a8f8-0a39574fe2c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d498eb2e-f782-476e-846f-bbaeaa6ca59b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ad8e48-bf18-4032-9b46-4bfc5eec2af2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1f9670-3e8d-4a22-830f-dc70943d48bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ac4dee2-b60e-4914-8381-2d1a0ee46e04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72e12d9-07b7-4c77-9b64-8418ad7bb0e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "479447e3-3f9c-474d-b105-943763beea67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8244903b-781a-4771-ad55-ffb64e86bd0e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b72173-01f2-422f-82fa-4a4288472c77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d32af459-abd6-4b21-963f-c1d46f7b8c3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dacac4a4-76a8-4afd-a604-46238756fe28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c8eb77a-e3f6-44a5-9dd7-66d37b561b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eaaf25b-4f2b-4309-8194-c59f4470a3e6",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "152b5015-63bc-4c63-a767-d55bd48daf73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512eef1d-d8f8-4ae2-802d-2aead70ebb67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a9abdb-d658-4b9c-b882-355065fe75ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8202b978-5270-4a48-b772-9f6d3aecac13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dba8939-52bc-4d96-95f4-a666ea0edde4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ade4e5-a5f3-4a09-be2f-001d0be4a84b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c82b7480-7b37-4656-926b-3f1fe7d6dd2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91cd9444-b724-4a3d-bf70-0531e60786b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1e35770-6eb8-4b2d-8d4c-4d13cd132673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a10e06-c7d0-4c09-8303-27732053cd4c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5a92e3-0f1c-4a32-834c-6e2409f6e043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba71c178-0a94-4b90-bb92-5502960342b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d75613-8494-4448-ab45-3bfcdb476f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c4ca0f5-f001-4488-97a8-df88e1567d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce45b659-3a9e-4e8c-982d-6af0152240c7",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0a13ac-8dae-404d-b36b-bf9498fed297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb20fe22-17b4-4976-a678-a84e14e8f088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "413cd21a-636f-4788-8dbe-9fbbab86c6a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26b54488-71ce-41cb-bf67-63d3cdda33fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440aad9f-647a-4e4f-8fcd-03b4bcf726d2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f65373a-4eeb-4563-950f-f9be92163307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ea69b8c-6f58-4ae9-ac1c-629b92a4bdc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "630c8ab6-416b-4614-889c-dd631d29d1e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bebe3e31-4d55-4bbe-9b5b-6adc7a66ebe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ca6f62-d757-482e-b327-9d216b36c156",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5294140f-c359-4482-a178-a41728a632fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bc98cc4-b292-4f31-af90-82ad894c1e22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab41c144-ea95-4343-81fe-af6933ba861a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95722370-6407-4693-8472-fe84b656b153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18304518-09e4-413c-86fd-fd5772a5b793",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d38719-c79b-4507-b85a-f393908e99cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b13780d9-28df-41c4-b510-afa148de2689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5d96de-aa48-4e92-8e63-e19c4da081d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c8c4835-115c-43a0-86bb-613c99680b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07bd7774-f545-49e1-a6fd-d6beabfdb351",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993e7809-a51e-4f69-b47c-72a779613dc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0967257a-431c-4c08-97c4-dd12aa3d1554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "905c5903-1033-4ed9-8e73-745851fd049a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfd88485-56f2-4be1-8070-ce3a01da4c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dcd1ba5-212d-4902-ab54-1496049878ff",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc02882-7fee-4145-af15-cb3ef5951a1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d3a034d-c1f5-43e3-9fdf-0d403790ee83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac44698-13b3-4cf2-9725-69205229cff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "330eb3f2-5682-49e2-8c57-86d06c8b7ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f261de2e-63ad-463d-acd7-ef7c0309b89e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01edebd-534d-4977-af31-2460a2054ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8857f88-4283-484d-a6f4-43491ea3bef4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5119368-4c93-43ab-8f2a-c996e45a754e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7e10509-0f31-47bb-937b-670306d041ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b39c137-88a9-4c54-a257-c8e2c7075369",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a722ce0a-f0f6-4261-b8bd-45ebe9a6ce36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "134f34e4-4143-400e-8b55-57ec02984bb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2503deb-0369-4b3e-b840-9daa6a4f7110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "873902cf-e611-4ca1-bfa5-f580bd7f4aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7551dbb-df7f-45d1-8b6c-175479863e8d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7897832a-c4d0-44b8-b6d0-549f19cf5f41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1da4957-da96-443e-8f87-866201635a06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af484af2-4e14-45fe-8e36-1a0e7bf3e160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faa868ec-69ff-4e65-88a4-bfe670541afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f806b1a9-367d-4158-a6b2-9b04823d83ff",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8aca8f-d792-4ebe-84a3-a9dbdf5438e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22392e88-51d2-469e-b934-b5483d112fb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75bf6511-4bff-42a7-8347-6313523c4a00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "257867aa-083d-46a6-9d49-925e9b405682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7d7a44-294e-44e5-9639-38f0e64c3d09",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b905c581-127e-4852-a8f1-dd569519bdab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f34dbd9-87e8-4c01-b67a-2eabfed21f02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10dfa5ea-e68c-4888-995c-ab3ec614a300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e447038-08e5-4b00-88e8-fd0b96c45a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ac450f-19c9-419c-bdf6-0e9d74895d85",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aeecd61-b5d8-482a-91f6-380880ea0020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa53dfb8-f081-45cb-bb1b-60c46381cb5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e026d425-4fc9-4d35-a708-b69100d3ed09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f77f4c-a597-42dd-b135-cf33b1807619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44dd360f-d2a5-426f-8668-139e56cbbc1d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06bd988a-2f59-4e61-8735-24ee2689494f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6cc09d2-dd75-48a4-a3aa-78b878a1a61b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72450d8-1fd4-4deb-8a68-a131278bd77e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877f448c-26be-4537-a20d-964fb125d6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fcb2368-fa2d-4eaa-9d07-6e092d8822f5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f93772e-8aca-402c-b90f-8d65144fa89b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf57228e-dcdb-4b1f-8f84-3afe93947b4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "355dfc72-42f7-456c-8df1-60f4baf020c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f72ac7-9a1f-4eff-813b-2f7291a3c4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd95783-3bd0-4cd0-80d6-84064f3cf98b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c81d49-67d6-4678-a37a-d306c28ba8a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92b295b3-9895-4484-ac6b-f5d6b5ef4308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3abf6cd-6455-4e3c-9f01-a80f17364d13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37e1f95f-17da-473b-8c79-def99a0df53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfce4656-d43c-4d3c-bfcc-0653884a1450",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a1039e-761d-44f0-aeaf-480ba148f49f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "651bfa67-924f-48cd-bfd6-e4c13809f33a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2985fca-ec74-4e67-81f0-592041abccf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49a58ede-dde1-4755-8cef-5f56b667967d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df2b0846-19a4-430c-9438-406233ac0fc4",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a236b0-d9b1-4b47-95bc-18e06d4d5487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8b19f9f-3db7-4e89-9b42-9236da1f1e8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a517766-8b25-4eb6-8e45-d86fc6b24c49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bfe716a-7345-4a6f-a8c1-cdc83df6cb42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c4a56f-a2d8-4401-9a57-271849e22376",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc76ca0-5d75-4e1c-8b29-d308a84ffe6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "885402cf-f9a0-488b-afcb-ab31f909e9b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ad30ee-ea7b-4b47-a725-280f725f3941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21fc9332-fa35-4ed0-b64c-a9a89ecc1513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b2001c-3a88-4754-a5b9-2191f14d8aff",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26861f64-eac3-481c-aaa2-0aeb00c612f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040aff08-d902-4f48-aa8a-7c1796241cd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fcec24-0b9e-40bf-b244-585b52ef7c58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d78a61ba-4ead-4050-a7a3-7ade81448b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a798b61b-ad11-4cf0-91c1-e72cd61e1344",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00114ec9-3013-44e9-9c48-b8fae2209374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f3455be-5b2a-45d0-8e8c-6ce3bb0743f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd14e39-bf91-4e64-84d4-80ad2c37e9e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a6d5c1-ded0-4842-abb8-e59829f47463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850af178-5248-46e0-98a0-c5a9c93b599f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85392c28-0111-4b5f-bfc7-44b4a7f84e71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eec1e58-0d52-4d27-8f24-40a83972a9cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98fdec8d-58a0-4c3d-83e4-11876afe1240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b93f6b0f-5848-412a-a69b-a67c623fee97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c91897-a097-4dec-891c-124af396b75d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d946e5a6-1558-4ece-8cc0-48b8a096c13e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "108bdd07-3e8f-4f1a-ac8b-7fe0ebf9de5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ef13e5-2129-43ff-949c-ce82988236b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bece4baa-86ff-4803-a81e-ec492ecd2db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee43befa-62b6-458e-bb77-1efd7e8d1625",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f07010-0e5a-48d6-9eb9-d5b16d1f0e93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c339d944-102b-47c9-826b-14efa80fbd2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d20ba38-8abf-4088-bbf5-176b8530cab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf35c33-9fbb-48a3-8135-fbc7447766e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be45ec3-6ebc-4b9c-b540-d49f9aa65d1f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60704727-c1fa-4dc6-8314-dbc720b87aa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d298c4c6-ea36-4c75-b384-e0238951d50c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64facfaa-0db9-4335-a0b7-3df7afcdb2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dd6358e-c16c-41df-9d93-3c8a0c5ebe0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89059579-41b7-4e11-b763-93ecf5ede5d3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649c9f43-15c9-4bba-a1b2-550292bae5df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95af82df-6987-4be3-80e6-5e592b2c534e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0163f29-8db1-4e46-aed0-2fbcc7d961a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3a86e9f-cd80-47a6-9965-c6214ed07998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8a0fa8-899a-4f55-a0c7-840d4db70327",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98147141-23fe-42f3-91e8-2f0ad0a1850e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b1f6a68-bcbc-47b7-a8c8-35c50aa632ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e90c689-3b09-4009-b411-1af3b1558611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47aaa930-9c2a-4682-8738-6e98be7c8e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20561913-5b93-4bcd-8f8f-e1b1904a9ace",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6615683d-d54e-49d1-a03c-69ee81c646e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5765c305-d83b-4fe1-b4a1-89e04057968e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6194b60c-ef66-48e4-8d35-2bfcfd281e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "972af39c-4223-45e1-a2de-b16d2a0e205a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b2b84f-332d-466a-8ae6-260a7d3d0bdc",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ddc74d-4417-4805-a97f-0dc93c658818",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9627926d-6d5b-4461-b27c-2ece8a485366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4adf68ce-3fd2-4b32-af70-3e317d79e433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744797f6-c27f-4232-bbf6-0e26280a3877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "529d2847-6594-48c2-bcc0-b3c4574e8dfb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d3c6f4-fccd-4e18-bc75-9a1840fb9ad7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02a74a92-bacc-4fb6-981c-617b42ad6aaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b528dc6f-aa8c-4736-b93d-4f5b8771e963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f43a8428-ed4f-43fb-8ac0-1f38fdf1f16a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38384d34-f9e5-47d8-9004-ea61ec5eebb4",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b95ad0-6f44-4cd7-b8e1-0ac3b61584c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d79ab94-309e-4c8d-92f2-3257818298eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4540e1aa-84c6-47ea-9542-359141a81d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9c593c8-ac7e-4168-b663-6606f2b3854e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f611831-0a3b-4cdd-9ee1-72f73a12726b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4191734a-8bb7-4539-b8ea-aaaf5bee914d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "698ad5ac-fcdf-4117-993c-47237ad5d8a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1bc978-f263-4887-a9b9-4ec593dd4038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9c9545-b29e-49c5-85f5-b15cca3f3cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f317a1-ba0d-4ce1-8c72-022189114821",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2346cc0e-06ed-42cf-a008-aedeab214481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d75213f-95bb-4a1f-823c-04f9029693ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c35ca59-07e4-4884-914c-2e327f821e58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a0e0b8-3bba-431b-9012-3726ef784f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6cff043-6ef5-4006-a680-78e88248151f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61fcb353-a442-4b34-bdd1-71255ec36948",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "351f0063-d4fd-49ac-96cb-c81f29c933f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2778215-4055-4eb2-94eb-b5923fd1a22a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e300e5-68c1-4d58-8c90-7aa843e03c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c649bb-84ca-4dc0-bae9-44e8f21d6fde",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c90ed1c-b808-4fa0-937c-4a1c6a7caa47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "748afc8a-87f1-44b5-928a-519a67cce82d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a426394e-cabc-4b86-b07e-13983b649049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2282aa14-ae9d-4ac3-ab5d-9cf3366523a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8aeece-8dd4-4f7f-b37d-0d975d2db965",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5654c7-dca3-4740-98d0-7552696a09e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07696f05-47bb-4ffe-8a08-5b63b79132cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8d56bc-2fb8-4e35-8cac-6848e3ce74a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8f34710-6fad-46a2-9a1b-59041e284d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7596608-2f5f-4db0-8cd0-f8f529e449d7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f46200a-144b-4dfe-96fe-6fe600a1965c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97e595eb-a783-4163-aa18-7fef9e0f5355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3077b3a3-6cfa-4fd2-9cf6-26004b4f9f71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa23eba-b677-4c01-adf3-b1d29f33a372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4761ade6-1fc1-4d20-8741-32b1ee2ba828",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2138b5d9-c589-43a9-bf68-26f660563bb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26e23a62-2c9c-4ba1-9176-ccbd76e5d9b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12bdc11e-c4dd-4b18-9386-a2f18670e7e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba8f0ae-0fd7-4b26-aa87-9cbfac4f1432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "791dd5f8-b0d5-4d9a-9c60-cefc8352539d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f51db59-a676-4cf3-a90e-31bf89c4fde0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d17acbf-980f-4562-ac07-8f4e1c79fc9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b393b2f-d0be-44d7-8d4c-3339fda1d96e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a87f86-6bbb-4f7a-9fbf-20a77083695d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf3b5c3-532b-4a53-bd3b-b1c05e2cd5c6",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b79118d-2f1a-4bda-b22a-4be13767bce3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03f0a0a8-dd95-4d0b-8336-041be9a7e7d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1649fa99-b661-4f3d-9ceb-6baf9d7f2a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7125154b-f0b0-45fd-a107-01d3dfb75bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03687c61-d26d-4474-9d7c-ef211807a31d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8abaeb85-39cc-4248-84a9-7e96574fd877",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31ec43d0-4c82-4cae-b765-6b45d31564b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4916b97-dd0c-4736-b3ff-0ce1217a7c4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b38a314a-b55a-47fd-a7a0-649f7f2bee84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7399ea0b-caab-4c98-b010-b4215b035f7e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ca4268-8734-4c36-95f0-3b208c259322",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d0e14dd-50a9-436b-b423-7adb5a6fa40a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df05322-fc5f-4840-ac85-801f87e48b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eabf9817-a172-4c4c-b095-8c49fec9ff85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7bf8e0d-82b2-487e-a2be-5bba662ad353",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eec59da-14f3-4ccc-ba40-63f1e967dd83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7c43681-f1be-423b-9052-d01822e87c59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba82c02-7d82-4ffb-9246-c71f8a4c9bb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7f688fb-b741-4ab9-8ef8-986b2f27cb78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1bf7b4-45e2-4629-8dd5-778bcb506136",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa0ee1ea-40b8-4be9-87af-a6af18ead8c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a48a21c6-821e-40d5-af2a-e10eec0865a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d107fa9-c563-40a1-8384-0246e38da800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e26b546-2a9c-46b3-a148-d94a67c856dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6d4f5b-2dad-4375-b9e7-fa7a40df88a4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e273819-7be8-4d53-be90-4a797b336340",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "032d0475-c919-4fc6-8e28-21083e8dfc89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ecbeb2-03e8-4aea-91de-a42efc3acb15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52feca35-4278-4fed-ac03-8b15402dd9d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c6e5d4-189a-49bf-9c59-79462af895db",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84020995-0416-4186-9a44-3cab69d9fb4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef7d1e5d-27bc-438a-8daa-66faaf3793a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee6455e-4e26-4cdc-831c-a1b472abd038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "755bb37d-beeb-482f-9e51-0e55ebdcfc8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2917fd21-adec-4ec9-b318-055ee2dbc9db",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ecf75b-2cf5-4293-87a3-ea3f8824a4d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9855961-f816-4e42-8395-34c5a5bfd684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88fb94b7-2fe2-49bb-93fa-326d5007ae38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc21e3a0-fb28-46a9-b688-1d2ddea364ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd03d64-b9ae-40ca-9970-24cd2997dc32",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9eae74-c585-4f8f-8bf8-5af25b5055d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5f40f03-f56d-4315-aa8f-9af852798283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2b3576-5a00-48a9-97a7-274115691d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa804d9c-49f3-40ba-ab8a-3d84e9aaad05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ede21b-f928-4f29-80a9-67848ce1ebf6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776de317-381e-433c-b37a-2b700826ff22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5541fa65-8a1e-403a-8d98-968717bacb64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f55dd3b-e218-4e8a-bc8e-556d8da679ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c681998-e7d4-4bdc-9cca-a49348de76a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc20127-c869-4c4c-b571-a8e4f7a38a2f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6bdc5aa-574a-4e25-9b8d-3a1be195be4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10ffef17-63de-4e47-8f53-e8b953d3ed56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8341a51-abd5-41a5-a923-0779cc2a876b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b9f7f02-b70d-4f88-9b2d-a825467b2936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f45e73-14a6-4201-ae26-8f385913460e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3074a8e9-19a7-41d0-aa27-d8e0fbf65b01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11e3d587-127e-440a-8562-6a7dc59e218c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8cdb5af-c939-4d8c-a0ed-3d6059e3ed74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4ed7966-ef73-472a-998e-0e9655c3a9f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b2a151-d170-442a-a03f-a2ac442dc7fa",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4517de09-c308-4c48-b751-2b99dc268086",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a552c063-da4f-4d7e-990f-f4803fb743ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbdcca29-e566-449b-9c4b-96928f5fda49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10f30644-2a34-41fa-b7ab-87abfdf99961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b0f6261-42c3-4ecb-8fa4-9c9ded64bfad",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ffd996e-744d-4273-bdaf-6c8540953ed0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a914fe2-6291-445f-8bcf-87f3144f06d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "878a8491-ca1e-4125-b348-7bf00eae62d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b2eec09-f4a1-4714-98a7-f6808ce28d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9093a8eb-fe66-4694-82f2-2a66b9adc363",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99e94a9-6689-4291-a35f-e19632b8d14a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df127889-e130-4946-bb7b-6d86266bb2ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d109d69-e2a4-4201-80fe-5a71c13a2161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c031e3e-3413-4b5f-94aa-35245005ef04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762afc5d-62e6-48cd-91c6-af4cd5b7b9bd",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811e2770-fc0c-4997-bb73-6e23ccd0887a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d60bcacd-a879-48a2-b675-0f938264cf9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e57dcdc-07e0-45f6-be45-71372d5441f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c38b6a-ae4b-459f-ac22-b55b603856e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f003c8b7-2a87-40c6-8717-114cd397b23f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c9688c-ed14-4763-a800-2e234824eff0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c1c5edc-f838-4781-bc6a-283b14b89296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80974c1-1fa9-4698-a940-587dbcbdcc76",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97059b6d-8cec-4b1c-b3c8-abc2da6531b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38c88684-8318-49b0-9193-1f4abb90ec66",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f013261d-52d8-464c-881e-15c353a3d140",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e5b33ef-3104-4e30-922a-cedc19533269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6646d3a9-c656-49a5-89ab-a30d282b1866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c4acf7-f765-48d6-92c3-9f4300b3e462"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5bb8fdaf-22ed-47d6-8473-adf0aa2ada67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff9261b5-fe0a-458a-a54c-87e8bb0bceba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5455d0f8-f1f4-475c-b1dc-f265744924c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5e22bcaa-2ed0-4c9d-b90f-cf6284488937"
                    }
                  }
                ]
              },
              {
                "id": "a9b05f30-c31f-4b6f-8f5c-84cbb3845848",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7cd6afc2-5b6a-4578-83f7-2f0dfcbbbfc7",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a32d8d-f644-4cde-b7cb-493e90278022",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5c321a6a-8c24-43c3-bb67-cfb013d7824f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a185e87-8908-46c5-97fe-7d8a6bab1f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d8b0cb1-c575-49eb-9824-aeae4c42c3cf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1275e61f-01be-4bf6-b125-8c59e920278a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0689a0f-6967-460a-b1c2-74abe5445a85"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "534e0540-9283-4309-90de-76f517cfd794",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6976ab42-185f-4f7f-9d4f-2a73a6db9aea"
                    }
                  }
                ]
              },
              {
                "id": "af5043f5-c5b8-4694-ba2c-1dfe3efd8c42",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c0fcbe0d-3df2-431e-b8d6-f5b5674dfabd",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbc69df-5ab3-4077-acc4-64d746effc67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a0274dcb-a8a6-4d4d-9761-d350108de107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3e2c38-9048-411e-a884-21bfae25ed07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58763f4b-f8c2-448c-9480-e42ef2729f0c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "72416c07-1dbe-4d5a-9929-8c69a6249ff4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8f9f0e39-1699-49a7-b069-88b2ab25b263",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c099b9bb-b683-43b7-bfb1-d4dbfbffd4ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d2d763ca-a07a-4b50-ba45-45fda4861f72"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee3d6cca-2a5d-47f5-89c1-3884a0d84581",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b836cb6-8dfb-4599-b865-51ff35e1e892"
                    }
                  }
                ]
              },
              {
                "id": "4557775d-9d8d-4ac7-95fa-849281ddf1af",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9da7349a-ae31-47fa-91f3-83f4ae569e8e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9da15388-49b4-4c59-bf62-630149c409b7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4051cb98-19a5-4970-b0ee-5fc6371ccd66",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "755365cb-d980-422c-a182-7d158c4c579a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf5b1e6c-8471-44b0-b87f-24bcd263a179",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "60ad5b94-d7b3-464b-a99a-b4e21ad9b92d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c13b0e61-a714-4b2f-b21d-65c2e9bee92d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f52a1984-ad3d-4e7c-adea-466be692fc7a"
            }
          }
        ]
      },
      {
        "id": "519589e2-3d27-4f8f-a1b6-82ceff7b2cf7",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "26d2d2de-63d2-43b5-b4e0-eeb7270800ab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eeab1f93-9a1a-42a4-a0f9-a3cdf741eebc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b5df3450-48d7-4b1f-bf41-b013aa75a465",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76963c6-e4d9-4e0c-acb4-727c6a8a9cf4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9cb8ca2c-7764-4500-bba5-c229cef406a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56d59e8-a66d-41f7-be1b-92503e5a79f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e7bd8c0-906d-4f0b-9c62-4d45e45c1fe4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4aea07ed-98a7-4457-8758-2963e7b519e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3b44535-cf1e-4c21-aefe-fa7c405ff637"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fbf00a6-feec-4d02-8657-85c8e2844eb1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bcc66440-1967-4896-8df0-cb0266e4a016"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85ab5859-9981-4c87-a8a1-3a3b72013c96",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "05a71fd7-c45d-45ec-80de-5e70fa66302b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bdac7bcc-4d0e-4fef-959d-468ffc46b6b2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a0c9bc17-55ef-4a03-86de-e6048a12f841"
            }
          }
        ]
      },
      {
        "id": "75244e54-8428-4992-acfb-6ee6bccfc716",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e18f2bfe-9b94-4d3b-8d17-f231c66963d6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb306e40-73df-419e-a6a4-59e0e4ac65df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e3d8539-4367-45b5-b73b-7ae72b4b15cb",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a590efa7-8b22-443d-b558-96407dbca73a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5571e3cd-bb29-4a96-97d9-e3a5b8b7e3d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddfe0f4c-4e8d-458f-8530-daa7430712f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c37c2a8f-28ce-4619-a915-1eed6745104e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "562858b5-d136-43d7-a3c7-9e841996cb88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0943b41f-5b9f-44c3-9ec1-7d81dbb71f48"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f7a1540-d920-4272-a07c-82f8d4960883",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b00acc5-cc1b-4957-ab8c-c31d3bc245fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd84bd00-21e5-4ef6-9d2d-72ad518467b5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "98c34f3a-867e-445f-8bfe-22e696abc027"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8076338-eaea-4824-a541-6730bfef72a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9687cce9-22fc-4a5e-ace8-40191fd00753"
            }
          }
        ]
      },
      {
        "id": "df0f9e88-6fb9-4766-8dd7-ff60cb05772c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "275b77d7-73c2-4523-b60a-ea31ef5a38ab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "70d00a65-4c3c-4bc7-8262-7e8d1373dc4b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eb580569-61dd-40fd-8a52-bd552801529c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95bca5c8-c725-49de-8a33-ae8916f38b60",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5feb1b95-31fb-4dbc-beea-8e0653436023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36d6206-2414-4817-9047-2a31a41e6f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25b8ceae-a241-4d5e-b914-636de99ee252"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13eee269-3412-4ffa-93e1-4dfe88cf51d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1233d9b4-1a55-40ac-91b3-bb1205e7f1dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "734c9415-c933-4422-b58e-e4fd3299c5f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bfdab9d9-3849-4805-b5da-3b2ad4ef6375"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5050c155-73f0-4581-8a18-16c6f76bb84b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1aa1fe91-8832-4ef6-92ad-b38e0ba4b241"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ebac6a4-1afc-4cca-af01-73f7c3d240b5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ecb80da-6af2-4dd6-93ee-d279ba7cc478"
            }
          }
        ]
      },
      {
        "id": "e6deab54-7706-4e53-9777-4f2accf8edc1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a849428d-26d6-4b88-a5a3-a49d90d2ea24",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98934316-d2b0-43ae-a3c2-f30e7fe6ce35",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "aceaae72-ccfc-4172-918b-aaddb7350dc5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be5bb618-eed9-497d-b528-bd5d1f47f051",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb167ba0-62a0-46aa-ae84-7c4fd0154b60",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 263
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 29.22619047619047,
      "responseMin": 6,
      "responseMax": 325,
      "responseSd": 35.93159877112952,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1714869504918,
      "completed": 1714869520415
    },
    "executions": [
      {
        "id": "94d4238a-664e-4345-80b2-32a3ff011398",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c28d68de-2e63-479b-9542-ad6ddd97a8d8",
          "httpRequestId": "405b5bf7-0ec8-4b35-a342-70d8086b92cf"
        },
        "item": {
          "id": "94d4238a-664e-4345-80b2-32a3ff011398",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0c73a879-7671-41b0-9580-76c69e73ea6b",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 0
        }
      },
      {
        "id": "fc376b72-5509-4c8e-b360-53df550e969c",
        "cursor": {
          "ref": "aed4c6e5-9ea7-41a8-a003-6099dfd0500f",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "94bf6f85-62bd-4467-99a7-0408dddc800e"
        },
        "item": {
          "id": "fc376b72-5509-4c8e-b360-53df550e969c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "173a73ca-98bf-42f2-b7bf-5601ea35fc28",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "295fe501-773c-4bc8-9ace-544ad7899f6b",
        "cursor": {
          "ref": "c4549582-76cd-42f9-b85b-e826f0c7a5ac",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "64415ca5-eaae-4015-a3bf-3f9d2dd53691"
        },
        "item": {
          "id": "295fe501-773c-4bc8-9ace-544ad7899f6b",
          "name": "did_json"
        },
        "response": {
          "id": "cd4f97cf-e735-4611-867d-78190df1c24a",
          "status": "OK",
          "code": 200,
          "responseTime": 214,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48cce3bf-85e6-49ea-9f50-0533966f599a",
        "cursor": {
          "ref": "94832885-50d8-4e3b-883e-ae8d356ba3cb",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "46f99bc8-5afe-45ec-b8f1-fa130542ebd1"
        },
        "item": {
          "id": "48cce3bf-85e6-49ea-9f50-0533966f599a",
          "name": "did:invalid"
        },
        "response": {
          "id": "91910394-a6ba-44aa-8ab3-446a517e9053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48cce3bf-85e6-49ea-9f50-0533966f599a",
        "cursor": {
          "ref": "94832885-50d8-4e3b-883e-ae8d356ba3cb",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "46f99bc8-5afe-45ec-b8f1-fa130542ebd1"
        },
        "item": {
          "id": "48cce3bf-85e6-49ea-9f50-0533966f599a",
          "name": "did:invalid"
        },
        "response": {
          "id": "91910394-a6ba-44aa-8ab3-446a517e9053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c107bb7f-c9fc-4026-8520-ac198d1b1a93",
        "cursor": {
          "ref": "40f1334c-ff01-48c7-b3dc-99ff2c81db53",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0d441b92-9ef5-4091-b5ad-aae8947d15a6"
        },
        "item": {
          "id": "c107bb7f-c9fc-4026-8520-ac198d1b1a93",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8bc3f418-8353-4651-a4dd-89c20781ac7d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 137,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b52f8a-e16f-44f3-87c6-f29a1bef2472",
        "cursor": {
          "ref": "f317c851-0641-43c4-98f3-ba13d2a7f653",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "85531d2e-dbb6-4a3f-a099-b4ededd5aa6f"
        },
        "item": {
          "id": "63b52f8a-e16f-44f3-87c6-f29a1bef2472",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8722e1d7-ba4e-463f-9ef6-6146dffda31f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 23,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a91ba9-7628-4a21-b50b-0e2a737589b9",
        "cursor": {
          "ref": "de346850-5fdc-4b37-a384-eda7ddeb70ef",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4d6598f7-0c0b-4f88-bd0e-a9f7f8c580fa"
        },
        "item": {
          "id": "c3a91ba9-7628-4a21-b50b-0e2a737589b9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "05ba7432-5b5a-4fea-bf3f-517ad9727f79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3ba0b86-a809-4bf2-9339-e2b1d0115e29",
        "cursor": {
          "ref": "2a4b8721-28ad-4f91-a3e9-53755cc32826",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "58af4b8c-146b-4e0e-80e0-839431599d87"
        },
        "item": {
          "id": "b3ba0b86-a809-4bf2-9339-e2b1d0115e29",
          "name": "identifiers"
        },
        "response": {
          "id": "402ce636-e040-45a5-975d-e8fae72933e8",
          "status": "OK",
          "code": 200,
          "responseTime": 269,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8261940b-70fc-4639-b2bf-72ae58c80355",
        "cursor": {
          "ref": "d76d037f-7b20-42fb-881b-23a8c97183e4",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "69ebca52-e9f9-4b80-91cd-77c11d7b507e"
        },
        "item": {
          "id": "8261940b-70fc-4639-b2bf-72ae58c80355",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9b126ded-3b21-4973-b438-5a78a18fbd94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5926218d-ed04-4cd3-a761-fa9fb71c583a",
        "cursor": {
          "ref": "4300e561-49ea-4c24-a998-6f65c2b4a1ef",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1c9314d3-5ab0-4465-8976-07506c23914c"
        },
        "item": {
          "id": "5926218d-ed04-4cd3-a761-fa9fb71c583a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f6f69a85-029f-4dee-964e-855e471ca1b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67342b6a-0dc7-43c9-8739-300532f1535f",
        "cursor": {
          "ref": "35222566-d722-4eed-a44d-db2ae502b63d",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "469103e3-5b17-40bf-8858-0a5bb4076a10"
        },
        "item": {
          "id": "67342b6a-0dc7-43c9-8739-300532f1535f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "10d41743-463b-4083-9b1f-83d3a6893b8b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d81d673-7b0f-40d3-b5de-31725409aba2",
        "cursor": {
          "ref": "5b154be3-8ec3-419c-a3b8-925c3baad52c",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "de8b8a1c-baf6-4f53-8578-17c2a70902ce"
        },
        "item": {
          "id": "4d81d673-7b0f-40d3-b5de-31725409aba2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "11a4cf15-e39f-4e6a-9131-87c3d0f1f440",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce8bd31-c7ce-40db-b579-35ed93d34646",
        "cursor": {
          "ref": "03b12166-3710-45d9-8c79-4c72b48fe0cd",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ed97f543-b57c-4bba-8976-ca5af234c3a2"
        },
        "item": {
          "id": "bce8bd31-c7ce-40db-b579-35ed93d34646",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a27af6f7-c458-458b-9583-bfe43e8ff38d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f48612a-02d6-4e5c-bcfe-5c9c76481a3a",
        "cursor": {
          "ref": "c895b0c2-aa2d-4656-9f51-617c1079e52e",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d3329ca4-c360-472c-aaba-0c3dba3fb558"
        },
        "item": {
          "id": "1f48612a-02d6-4e5c-bcfe-5c9c76481a3a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "76f2a658-21e3-4f79-b1b6-989fe486e962",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "164ba375-2ea3-4509-b9cc-5128ea695953",
        "cursor": {
          "ref": "1dc30afa-f9f0-4a6e-8009-a7089fa1cead",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6d4cd6d4-6bfe-4b14-8036-eca324a06198"
        },
        "item": {
          "id": "164ba375-2ea3-4509-b9cc-5128ea695953",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2aa0a073-bfe9-4bd7-903b-f9e1372bc2cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "267f5d76-a34d-4467-957a-7613058c6063",
        "cursor": {
          "ref": "bba7ec40-4a48-4fef-8047-2287aba3d0ef",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "60a48873-3994-4b7e-a34a-66709fd2db41"
        },
        "item": {
          "id": "267f5d76-a34d-4467-957a-7613058c6063",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "81937fbc-382c-47f5-a030-8da2442f964f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71b1a9c-ae00-49f3-b5b5-8075d5211520",
        "cursor": {
          "ref": "659b14db-c36b-4124-9a90-ca6787383dae",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "68b57684-78e1-4d4e-84a4-02aa82aaca8f"
        },
        "item": {
          "id": "c71b1a9c-ae00-49f3-b5b5-8075d5211520",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5caa3f0e-45ee-4ba0-bc88-c94e8a6bbf2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c61f96-7835-4e28-b62c-e651dca250a6",
        "cursor": {
          "ref": "8eebb660-9b67-4531-adab-4e337f142dc9",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "69f55cc6-b68f-436b-9c51-954ba4fd0dfa"
        },
        "item": {
          "id": "86c61f96-7835-4e28-b62c-e651dca250a6",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7cc1e07b-47c1-4b37-9265-0bfb76537680",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af86925-bc5d-4647-9592-2fca30221714",
        "cursor": {
          "ref": "ac5e2346-464a-4838-b614-988dbcd05095",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3bd147cd-e339-4699-b06a-60dbcb2130af"
        },
        "item": {
          "id": "6af86925-bc5d-4647-9592-2fca30221714",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d9830037-a758-4e16-9f5a-8500fc033f1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5df390-9a86-482e-a3ee-b1e594e91759",
        "cursor": {
          "ref": "6363b620-4c6e-4720-9667-d77ba479ba76",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "58a83984-6495-48f3-bf1c-88c2802c48d7"
        },
        "item": {
          "id": "1b5df390-9a86-482e-a3ee-b1e594e91759",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9e74b699-9fb3-4cdb-9c2e-1e853a32c2d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c4da56-bada-46cb-9988-7e3dc767a2d4",
        "cursor": {
          "ref": "b0a03764-7453-427f-afc2-e6edaf7d5728",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "afd1ef9e-0b0f-41d1-b5c1-398a6074a878"
        },
        "item": {
          "id": "a7c4da56-bada-46cb-9988-7e3dc767a2d4",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "58ad9604-444e-479e-bb39-2d4a0c370b51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef88d8d-5223-4015-8e9e-b60b2e0d716b",
        "cursor": {
          "ref": "1ab013ad-c884-4ec1-ab88-f5cba6a41bc6",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "14720985-6a59-4507-8b3d-1f36b3143452"
        },
        "item": {
          "id": "9ef88d8d-5223-4015-8e9e-b60b2e0d716b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "80e20d51-bf71-4456-addc-53e54a48eaf3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599b3570-ea71-4344-8c8b-b4979c50f5c2",
        "cursor": {
          "ref": "da2aca6e-0bf8-43ec-b3e7-1d1a87cdfe9d",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0d839999-8129-4a87-96fe-365df5411cdf"
        },
        "item": {
          "id": "599b3570-ea71-4344-8c8b-b4979c50f5c2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "dbec1cdf-a6bd-4932-9e81-49a4c9a1d4f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfba1aca-d619-4260-a8b3-bf63d151a3f2",
        "cursor": {
          "ref": "927dbaf7-2583-4876-8138-49a4b7b0bac0",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f0118b47-dc36-4460-a583-419bd81702b7"
        },
        "item": {
          "id": "dfba1aca-d619-4260-a8b3-bf63d151a3f2",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "772e2013-7036-45e2-a9ac-795a27024493",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32675cc-c94e-4001-a692-7d8fb534dc8b",
        "cursor": {
          "ref": "8b2fef7d-5770-43a9-bfe0-7989a1433965",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "beb4cde3-3b1c-4270-99c6-51a8b32da3b5"
        },
        "item": {
          "id": "d32675cc-c94e-4001-a692-7d8fb534dc8b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c855ca83-facd-4a9e-ace8-5016a7f3e309",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb6651b-743c-4643-99d3-95ed6640b7d8",
        "cursor": {
          "ref": "2a033136-5fd1-42ac-816c-e48510587a5f",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a6b6d572-d81d-48b1-a59a-a6fb7f21f720"
        },
        "item": {
          "id": "0bb6651b-743c-4643-99d3-95ed6640b7d8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b2febadd-f7c1-44af-90b3-60fc1773bd2d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e768d4f-16c8-4b25-894d-bb0c8f9063e0",
        "cursor": {
          "ref": "00667410-7d9e-4b00-bccd-8dbb554ac21b",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8ce0eede-04e1-480e-a6ad-ad5b7d353f7a"
        },
        "item": {
          "id": "5e768d4f-16c8-4b25-894d-bb0c8f9063e0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b7e406bd-be53-4caa-8675-f34a0bb5005f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193c5195-02f1-40d2-8337-cb922db3dc9c",
        "cursor": {
          "ref": "f8f199eb-e85a-49f7-bc78-70c66014c1be",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "888c8eaf-1eff-4411-9d96-f7e8ee302a9a"
        },
        "item": {
          "id": "193c5195-02f1-40d2-8337-cb922db3dc9c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "20deada8-2e1a-49bb-a8cb-7b5b3d1778dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b20bc574-a6df-4c33-95ba-90bb65ca92c7",
        "cursor": {
          "ref": "2bab8f40-3d9b-4eb2-a431-105aea59fc5c",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "09a143cd-ac2b-471c-877d-1897906290db"
        },
        "item": {
          "id": "b20bc574-a6df-4c33-95ba-90bb65ca92c7",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "158d2f33-13e1-49f3-a779-40dd511fdd70",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0464a442-9e69-4b1b-8d7b-b5f3bd0fdb45",
        "cursor": {
          "ref": "ee8fe909-1ce5-47da-897d-249e0acbfb76",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ae5ea755-e092-4899-84cc-a20d8a3a4ed8"
        },
        "item": {
          "id": "0464a442-9e69-4b1b-8d7b-b5f3bd0fdb45",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "df23f841-80d0-449e-a62a-95a21d56dc58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3757c5f7-fe29-4eca-bd94-29a1f7e22fce",
        "cursor": {
          "ref": "bc5ba035-5b49-44c1-a34a-95cacd9f1a8d",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "356a27c9-1e0b-45ad-9caf-ec2b409cf01f"
        },
        "item": {
          "id": "3757c5f7-fe29-4eca-bd94-29a1f7e22fce",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6dc2bb82-2d81-4694-80b3-299c91447f53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3cdd0ba-132f-4e54-bf9f-45d5e2b9b3e0",
        "cursor": {
          "ref": "a25c78c1-9e3e-4a51-9054-7ea3b8643d55",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3df3ab10-6f33-4739-9002-48cd5ae33031"
        },
        "item": {
          "id": "b3cdd0ba-132f-4e54-bf9f-45d5e2b9b3e0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8ab8fb2a-2c0b-478d-8445-148329947741",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1426923a-abc7-494b-b9c7-2a92ea2e06ba",
        "cursor": {
          "ref": "64769cd9-743f-4034-915b-0489924976e4",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "912ceab4-1cbb-49ad-88a9-9038c0cd08c8"
        },
        "item": {
          "id": "1426923a-abc7-494b-b9c7-2a92ea2e06ba",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b11e99e3-dd4b-45ba-85ef-c3170e4ea32a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355affd5-ecc5-4519-9467-46a732a3ebb6",
        "cursor": {
          "ref": "85dbb7b5-8589-47a3-be4a-b01c90ed5f6c",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1cd43a06-703a-4c2c-a87c-13e7078a1fdc"
        },
        "item": {
          "id": "355affd5-ecc5-4519-9467-46a732a3ebb6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "83c96a9d-2b2c-40d7-8cbe-d5695f4fcb17",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0780d6b5-f5de-4342-bd26-75161a21ab03",
        "cursor": {
          "ref": "607c9a63-2d07-4e7a-8da1-6695ee79173d",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d4c2a449-ef32-4c54-a374-da0391cf4cd9"
        },
        "item": {
          "id": "0780d6b5-f5de-4342-bd26-75161a21ab03",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8ccb8265-d324-4d1d-bc28-31dbd7245f1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92065d0-baa0-4a7d-892f-118047612922",
        "cursor": {
          "ref": "a6328170-d7ea-4e15-b41d-8a6ac7719f58",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5e315e32-77cf-424e-94dc-8eda50724934"
        },
        "item": {
          "id": "b92065d0-baa0-4a7d-892f-118047612922",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "45abb977-6277-4376-b6a6-484cf698a003",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02887c5-16b8-4217-a1a6-572cfa7ad141",
        "cursor": {
          "ref": "60d7d6b6-444e-4448-b99f-4e8779d58879",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4d38d6b1-e492-4ec0-b31b-b04b0a8cec6c"
        },
        "item": {
          "id": "e02887c5-16b8-4217-a1a6-572cfa7ad141",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4695953d-4c9d-437d-be03-18670b3dfab0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e10adc4-c370-422d-a0ff-00cd8bb93d94",
        "cursor": {
          "ref": "8ceba259-3c0e-4301-8d28-595d02a0efd1",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8054794d-7828-4df4-ad14-3e0a5c5156cb"
        },
        "item": {
          "id": "2e10adc4-c370-422d-a0ff-00cd8bb93d94",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "560aa4d5-41b0-468d-b93f-fb8a28ef52c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3103d881-cec0-4146-8e5d-867a37db5d75",
        "cursor": {
          "ref": "7e5e0e60-a1fa-4e3c-84c2-96871ecdc8a6",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "36914604-6f05-4e5b-a2b4-ef168be88ca9"
        },
        "item": {
          "id": "3103d881-cec0-4146-8e5d-867a37db5d75",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "5853a988-f55b-4c94-a3e0-cd0807c9daea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0510f205-a59b-41be-9462-97f36506adf7",
        "cursor": {
          "ref": "58c473f2-2c2c-48d1-bdc2-c23649dbb641",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "dcb0a950-48ab-4db4-9c71-e9ce31e97e40"
        },
        "item": {
          "id": "0510f205-a59b-41be-9462-97f36506adf7",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d6379352-81c4-431a-b12f-f3a2708f0a03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af454e6-9980-417e-9e33-b91cf86f9ef4",
        "cursor": {
          "ref": "435c3140-63e0-4a77-b0a7-2c8f1a950ade",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d42c9075-b2a6-4ab7-a530-c97ad602c63b"
        },
        "item": {
          "id": "1af454e6-9980-417e-9e33-b91cf86f9ef4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9395601b-7101-4214-8506-69fab456f6ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57edb6de-a140-4059-83df-7873354ce004",
        "cursor": {
          "ref": "e4441e0c-1830-4574-aa4e-3c4c2c83d179",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1f2d9457-8cad-456a-bea9-d98c1f427b3c"
        },
        "item": {
          "id": "57edb6de-a140-4059-83df-7873354ce004",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d4555f5b-b942-40bb-8ba9-3c1d38c6640d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6c60a5-880e-4143-9cba-fb07daea6f6c",
        "cursor": {
          "ref": "5bef62cc-7b00-42bf-9ee8-152c208534d1",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b3963a31-64db-420b-a8ee-644adf8ba915"
        },
        "item": {
          "id": "6d6c60a5-880e-4143-9cba-fb07daea6f6c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0f8480ad-bb9b-4bd1-82ed-25ed20efc0c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead63b2f-210f-4297-aa0c-00830682535c",
        "cursor": {
          "ref": "5aa34fbf-3e97-4ecc-a515-fa14ee6b6bc2",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0f636c48-b53a-4740-863b-a0711c97616d"
        },
        "item": {
          "id": "ead63b2f-210f-4297-aa0c-00830682535c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "732e4997-81b9-4878-99ad-b05ebd706951",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad37d0f-ba47-4d95-889f-28b5b6d96acc",
        "cursor": {
          "ref": "8faed085-7f72-4324-9b9f-66c38eca3102",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9b4438b5-d482-41f1-8a3b-f81762db0538"
        },
        "item": {
          "id": "2ad37d0f-ba47-4d95-889f-28b5b6d96acc",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4fdd47a0-ea8d-420e-a24a-81c025572932",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6504a96-0409-4642-b4be-d8db4b857aee",
        "cursor": {
          "ref": "9da403cd-a957-4e07-a680-73150d2b1b43",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "88fb9353-b4c7-4a48-b571-fc0071b7610d"
        },
        "item": {
          "id": "f6504a96-0409-4642-b4be-d8db4b857aee",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "52b84404-cee3-482c-aceb-a4a5628cedf5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1e450e-980e-4af3-a2ef-b31cd7b7ac0a",
        "cursor": {
          "ref": "5bd7a571-64c9-4623-9971-b790a75ea294",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c6880694-5ec8-468e-a40f-b066f99ed673"
        },
        "item": {
          "id": "fc1e450e-980e-4af3-a2ef-b31cd7b7ac0a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d431a1ae-6ba3-4340-86ca-58ff69060224",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fd46ac-f01b-4a6e-a32b-a860dc4fd1f0",
        "cursor": {
          "ref": "b6c56504-9057-4dc9-98b3-55b2c497ad06",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2620d551-4855-4063-9921-de9514438e11"
        },
        "item": {
          "id": "e6fd46ac-f01b-4a6e-a32b-a860dc4fd1f0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0e633062-f47c-4a07-9c8e-68911ed25d1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8608f673-e689-4784-9f9f-7a2b11697b50",
        "cursor": {
          "ref": "7bf654b5-f257-460f-996c-c32fc4a5c737",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "490b1054-8566-4e3c-bd91-b7f4db97cbe5"
        },
        "item": {
          "id": "8608f673-e689-4784-9f9f-7a2b11697b50",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7c4b66b5-10f0-410b-8084-db47c5157942",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e82fed-ce82-4a1c-83c2-f38b9514db7f",
        "cursor": {
          "ref": "7f3b7c9c-40f9-44af-a546-a5087a61c112",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2185e90b-b262-4a5c-96c7-46a08fe75d54"
        },
        "item": {
          "id": "57e82fed-ce82-4a1c-83c2-f38b9514db7f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "872c73e7-b8de-4ef2-95e8-3da5da79a83a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e8a5b37-7ea4-40b0-a85e-35d5119ff73d",
        "cursor": {
          "ref": "2a675dd1-e9ff-450e-813f-226a21d6d7d7",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c30901f4-949c-4530-80bc-8b537a0daffd"
        },
        "item": {
          "id": "3e8a5b37-7ea4-40b0-a85e-35d5119ff73d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "eb60cb5c-9434-48fa-bc82-ad8bb05c39a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab64bc3-3534-40d3-b783-82aac97b108c",
        "cursor": {
          "ref": "bc6dd766-68bf-42c4-82ee-37e363498e95",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "39146cce-df65-4efe-aca5-e67f82e28a8f"
        },
        "item": {
          "id": "3ab64bc3-3534-40d3-b783-82aac97b108c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e2a15f8e-f1c5-4836-9032-e7c59c403fcb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06cf4c4-7138-45bf-ac72-6374f9fcd802",
        "cursor": {
          "ref": "436a5e5d-a799-4188-8621-0214253cc9cf",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "29a2f935-0995-4a6d-a137-35a11c142fc2"
        },
        "item": {
          "id": "a06cf4c4-7138-45bf-ac72-6374f9fcd802",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3007be7a-0f0f-4ebf-8f03-2510db92ce24",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14207a44-2707-4b21-aad1-380ecb552a11",
        "cursor": {
          "ref": "a61a7db8-420a-46ae-aa6d-402081055d79",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "cac453b9-4803-4431-84ab-447343fc8996"
        },
        "item": {
          "id": "14207a44-2707-4b21-aad1-380ecb552a11",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "20b1c06b-9584-41fa-a1ed-58cdd7677401",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8515a5f7-a919-46bc-bc3d-132d6196a496",
        "cursor": {
          "ref": "1b2a3b19-72bb-4fdb-8e4f-c79c4991561a",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2e9dedc8-34d0-4078-bba2-161c96122520"
        },
        "item": {
          "id": "8515a5f7-a919-46bc-bc3d-132d6196a496",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "58929a56-b688-4a95-ae07-72cb4e1d59b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e234963-43e7-4b94-93b6-d88895bd206e",
        "cursor": {
          "ref": "f3ae1b75-fa26-4f7e-a211-8f639664d7f7",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "923940f2-2e4f-41de-860f-13044b3da3b5"
        },
        "item": {
          "id": "2e234963-43e7-4b94-93b6-d88895bd206e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "34d4c148-f1f1-4799-b42c-f7cc863bd497",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b852af18-eb8f-425a-8e19-0dfd280fc8e3",
        "cursor": {
          "ref": "d60217eb-0266-422e-bc97-23ede0bb091c",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "42a72252-518f-43a7-b820-aec9d5f1ceff"
        },
        "item": {
          "id": "b852af18-eb8f-425a-8e19-0dfd280fc8e3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "3cc73b46-b85a-4f4c-8c1f-468b322763b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8613ede-3db7-4636-9395-0685511ba339",
        "cursor": {
          "ref": "51253419-14b1-445f-8aff-61693c1c7dcf",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "13c7d148-c7b7-474f-923f-91efd79a886d"
        },
        "item": {
          "id": "f8613ede-3db7-4636-9395-0685511ba339",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3398f0af-a2bf-45ed-9d25-61aa40d51607",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8a6fdd-6bb1-49d1-8d7e-00dfb24d7faa",
        "cursor": {
          "ref": "43922343-f793-41f4-b279-a3dce44f6b5e",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3d0b4cfe-64af-47e9-90c9-7b223eb94cb0"
        },
        "item": {
          "id": "5f8a6fdd-6bb1-49d1-8d7e-00dfb24d7faa",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4aa798a1-a5e6-4761-b230-58980a1a23b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f62b69-a267-4914-9080-8f1d52345659",
        "cursor": {
          "ref": "f18ae4d0-c469-4efe-aa47-096e230bcbae",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "48d6eda7-6ccd-4bc9-83e8-b9c14396c7d4"
        },
        "item": {
          "id": "85f62b69-a267-4914-9080-8f1d52345659",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "57f934b1-f53e-4a6f-9588-61fd5c907db9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1099e6a8-ff51-45d4-8de8-b9d8478f88ac",
        "cursor": {
          "ref": "7736e5ad-9cf2-47f2-b46a-2524a81f0000",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "68e9ac83-a1ff-4cf8-aafa-0b9a45b45b5f"
        },
        "item": {
          "id": "1099e6a8-ff51-45d4-8de8-b9d8478f88ac",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e5eb5432-590d-4884-bf25-c0d040e36570",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3358f47-93df-4dea-b601-cedf062f219b",
        "cursor": {
          "ref": "28b87dfc-4d9d-4104-8832-1abafc0d0a0f",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "52b61070-1713-4ce7-a1b7-124979c1f385"
        },
        "item": {
          "id": "d3358f47-93df-4dea-b601-cedf062f219b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "fe82adc6-063b-4be7-88e6-01a95b778ceb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b05c45e-0339-4c3d-9884-3a1e56663d5d",
        "cursor": {
          "ref": "edd28f07-b852-4c65-a648-548f0f8767df",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5133d190-6c39-4bb3-a19e-87916072b381"
        },
        "item": {
          "id": "3b05c45e-0339-4c3d-9884-3a1e56663d5d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "23e2300d-a33d-4473-a030-a2d7503a665e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aecfeb5-ad13-4115-bbf9-abef288a7d14",
        "cursor": {
          "ref": "65916e88-6e03-416a-96a9-32c9a272bb74",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "71a77246-8db9-4846-b55e-e6d063a6db74"
        },
        "item": {
          "id": "2aecfeb5-ad13-4115-bbf9-abef288a7d14",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2b2ac274-995e-45d5-8905-1b50b9478768",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f4c99b8-8510-442f-9527-eef5fccac5d8",
        "cursor": {
          "ref": "aef3b833-d38c-41af-911a-e57ead8a3624",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8dc30f31-b5b1-4a6a-ad06-8878e95c540f"
        },
        "item": {
          "id": "3f4c99b8-8510-442f-9527-eef5fccac5d8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "dccf2a27-f42b-4bb9-adf1-b92ab3392580",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "364e1486-e98d-4228-9a3d-98865852c7b6",
        "cursor": {
          "ref": "0c4825ac-4c6d-4b1d-ba06-c1eec3dbfad9",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a1b82653-dae2-494d-91de-a04060c3c6c5"
        },
        "item": {
          "id": "364e1486-e98d-4228-9a3d-98865852c7b6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "49e687cc-5af2-4776-afc9-788d79722b6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f2e525-3e75-49f9-ba8f-e40c679fa779",
        "cursor": {
          "ref": "48ff3947-4dce-4785-b410-afb52d3cbbf4",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f31cba50-8e68-4ade-a4d4-c45ab2dd7a47"
        },
        "item": {
          "id": "d7f2e525-3e75-49f9-ba8f-e40c679fa779",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "87b623de-3375-4cb7-88a4-5445684d9ac5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cf7627a-e990-41a9-931c-9d80aca4d349",
        "cursor": {
          "ref": "d4705602-e8ff-48f8-a9a9-8f0b53713a06",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e0ba399c-60be-4432-a84d-c7d1a50c8755"
        },
        "item": {
          "id": "1cf7627a-e990-41a9-931c-9d80aca4d349",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "73a4f560-ca73-499a-ae9d-74c4268a68a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d79046-d435-4e16-b847-0a6661283340",
        "cursor": {
          "ref": "df9c92f0-3254-4b11-ba72-578797b45963",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "125e048f-c1de-4ba0-a9f6-2d77c6f95c34"
        },
        "item": {
          "id": "c2d79046-d435-4e16-b847-0a6661283340",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7bc8a2de-3bd9-4edf-aba1-f62e259b5095",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 21,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0562a0c7-01e4-4b80-9b08-4ba1c2884eee",
        "cursor": {
          "ref": "757fa1b9-2158-49ea-b8c1-6c55435b40f4",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2e1ce819-afba-4ce1-a4c9-b35057adfd57"
        },
        "item": {
          "id": "0562a0c7-01e4-4b80-9b08-4ba1c2884eee",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "74725de2-5ce8-4803-a126-821013c15c66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d7dcfe-910e-407e-989e-e14bb55f8429",
        "cursor": {
          "ref": "1b14539b-3a45-447b-98c1-83866bccd3fa",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "26a3f214-f910-4d1d-a3f7-1698dc9285b3"
        },
        "item": {
          "id": "07d7dcfe-910e-407e-989e-e14bb55f8429",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "30d73b2e-313b-4aa7-94a3-8c6acdcef408",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d711791a-cf64-46c5-9510-b2f03c987596",
        "cursor": {
          "ref": "5f02adb2-b7c4-4558-9552-b326f3d7c421",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7b4efbb8-a56e-4b60-b3bc-3c5bbd40dbcd"
        },
        "item": {
          "id": "d711791a-cf64-46c5-9510-b2f03c987596",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3dc8430c-211a-4cce-a1af-b4028ffd794a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e49586d-a82c-4632-8492-f5ba2245b15f",
        "cursor": {
          "ref": "d8ecc77c-ac46-42ce-81fd-5404fa0c687a",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "138c3ba8-5442-49d9-95f5-53ee6926f3ea"
        },
        "item": {
          "id": "9e49586d-a82c-4632-8492-f5ba2245b15f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a7e658cf-ecd4-4125-87e1-10642ed69607",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f65eab59-e84d-4b54-9f9e-ccdee679a40b",
        "cursor": {
          "ref": "1d71bced-b7f5-43a7-84a0-0149c1971cca",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "05514989-f24a-40c8-b1e0-2b8d689e60e2"
        },
        "item": {
          "id": "f65eab59-e84d-4b54-9f9e-ccdee679a40b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "335ed800-b933-497d-8886-86d7510d02aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6e8241-32cf-4bcd-be16-4cedf3fc6f4a",
        "cursor": {
          "ref": "cfe51041-85bf-443e-8833-451d25fee30d",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f549493a-9581-411b-b31b-a64d5364093f"
        },
        "item": {
          "id": "2d6e8241-32cf-4bcd-be16-4cedf3fc6f4a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ef3c172e-29ad-4683-966a-68dce2751c9b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b65e19-c6c2-476c-b4c8-c955893e1ab5",
        "cursor": {
          "ref": "0b336826-528e-423d-a940-438d00ca7d16",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "366c363c-5fdf-4d29-bd83-1201ad8ff41f"
        },
        "item": {
          "id": "01b65e19-c6c2-476c-b4c8-c955893e1ab5",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4fa68bbc-f18a-4f31-b86d-8be4e4cfd29e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02cf3e7-7c84-41f8-8bce-c445778f9486",
        "cursor": {
          "ref": "87c96bd7-8641-4a50-832a-f600cb36be6c",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3245a3f6-c57c-4fae-84e7-5c0b2a6b2fdc"
        },
        "item": {
          "id": "c02cf3e7-7c84-41f8-8bce-c445778f9486",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6fa59eaf-edfd-43a7-a74a-43d3263b6c6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d01f901-720d-4469-85e1-8effcf15181d",
        "cursor": {
          "ref": "c4ebf047-8171-489f-8b97-74dd851d8ad7",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5746ec50-4e6c-40a5-8b85-e6e45813e5dc"
        },
        "item": {
          "id": "3d01f901-720d-4469-85e1-8effcf15181d",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "141f02ca-346d-4c2b-8eea-5e762150f481",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02043214-e839-405b-95ff-ec913183f3f6",
        "cursor": {
          "ref": "e917aba2-ad9c-4b12-8b02-1425171e111e",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6595392d-f66e-4385-aa7d-015fbdb2bc5e"
        },
        "item": {
          "id": "02043214-e839-405b-95ff-ec913183f3f6",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "3ab541ae-4001-4aa8-b769-e0e0243f737f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10698ae-a288-486f-865e-62ebda796104",
        "cursor": {
          "ref": "2afa3781-e04d-4244-a539-4115d50ba84c",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d14a4567-b576-4e27-b220-a81f9c75b52b"
        },
        "item": {
          "id": "c10698ae-a288-486f-865e-62ebda796104",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "19e1a567-5576-40cb-8653-7df8e874d31e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc23a185-8f6f-4399-aa84-366310ced190",
        "cursor": {
          "ref": "a982dd1d-04e9-432d-8933-b3111fb72f52",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "406b04b7-4a8e-4079-865c-186259f401d7"
        },
        "item": {
          "id": "cc23a185-8f6f-4399-aa84-366310ced190",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "505d0feb-f051-45b4-a20f-c47b755560c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cfe14ed-aaaa-421b-bbf8-9bce511684a7",
        "cursor": {
          "ref": "e12f1ded-8df0-43de-a30a-e6951a165534",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d25eb773-2cc6-4782-886c-57fc71f327d9"
        },
        "item": {
          "id": "2cfe14ed-aaaa-421b-bbf8-9bce511684a7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "15ceec59-ed16-48bf-a8e1-3213bfc108ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f824e8-9dde-46c4-8007-f94162768785",
        "cursor": {
          "ref": "377ac633-a199-4162-a30c-ecaef47dcec0",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c9a61263-1766-4d9e-b5f0-557589941dc8"
        },
        "item": {
          "id": "68f824e8-9dde-46c4-8007-f94162768785",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "30129350-7b21-4476-b27b-9f802a1ef7e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a07798c-f322-43b1-8245-48e16edf4f4e",
        "cursor": {
          "ref": "7d50ba69-4d0f-4134-b98a-41a9a64ea283",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "853e53b3-e1d9-4816-a667-eaa2be824d30"
        },
        "item": {
          "id": "9a07798c-f322-43b1-8245-48e16edf4f4e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "67b43d83-7d7f-4369-b25a-0ce8f16a10f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "978d191f-30c6-4402-a29e-71f36e8137b2",
        "cursor": {
          "ref": "f5355fa8-f93c-4f4d-8a3f-851fcdf7ae7a",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "01785736-0637-465a-a95b-0ba6f984dcb1"
        },
        "item": {
          "id": "978d191f-30c6-4402-a29e-71f36e8137b2",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f0cb2edb-a632-4684-a975-40193dd0d0f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7899ae4c-f82d-4f95-92df-000f93f6f74b",
        "cursor": {
          "ref": "33a02309-d647-46e8-a335-a28848382b92",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b663e16d-5a34-4b9b-a42a-2334c5a518df"
        },
        "item": {
          "id": "7899ae4c-f82d-4f95-92df-000f93f6f74b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "60d37fc0-d17c-4201-bfb8-e8b795156cd5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83cb8910-6346-4562-b95e-26bd3346f297",
        "cursor": {
          "ref": "21d55f04-3011-43ef-9b8a-97c105813322",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9563600a-10e8-4a53-b46c-43616bb5aae4"
        },
        "item": {
          "id": "83cb8910-6346-4562-b95e-26bd3346f297",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5bdb76f6-7309-4752-9f63-c238f38cc2cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b0f84c1-0d31-4450-bcc2-c746daccba1e",
        "cursor": {
          "ref": "0bba17ed-c94a-46a4-a1b6-6665e0ee8627",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e798f16a-4d3e-489f-876b-2ed3c9b5c93c"
        },
        "item": {
          "id": "6b0f84c1-0d31-4450-bcc2-c746daccba1e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "371027a9-02f8-450c-9030-500d12c95853",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5107410b-5661-4e78-b282-5b7fe87c1790",
        "cursor": {
          "ref": "9069ce43-f140-47dc-8a8f-f72a6b48444c",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "eb1bf088-7294-4f48-8add-e254cfbf9cd7"
        },
        "item": {
          "id": "5107410b-5661-4e78-b282-5b7fe87c1790",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1128c68e-94dd-48d2-ba40-1e4b8d4bf7b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68015a59-557d-4c98-b532-a8234c26d710",
        "cursor": {
          "ref": "49b9241e-1371-4ff7-8c3e-30e88c316d7a",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "91e4ddbc-3930-4621-ba11-c8702194a998"
        },
        "item": {
          "id": "68015a59-557d-4c98-b532-a8234c26d710",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3ed07bd1-67f4-4aca-bd87-fe5229a9c40c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "944f8659-7c6e-4761-91bf-89700981132d",
        "cursor": {
          "ref": "c7bedf61-12ac-417d-9a8e-1f31775c92cb",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "83a4adff-03db-4e63-9f82-836f0e95659b"
        },
        "item": {
          "id": "944f8659-7c6e-4761-91bf-89700981132d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5da97479-d86d-47ce-a60a-f902ace08cf1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e90b4946-5691-4611-998a-9b25c3c62de5",
        "cursor": {
          "ref": "8b5dd15b-dd42-4dea-ab0a-0734d5aa4418",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f6102785-d0fe-4321-92ee-502e0d0711ee"
        },
        "item": {
          "id": "e90b4946-5691-4611-998a-9b25c3c62de5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f68ff384-5073-4ebd-b3c8-7d1e67fcd149",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31c68aa-d986-484d-9432-0f93848c711f",
        "cursor": {
          "ref": "7f0b31a6-11da-4831-801d-ad626db28a83",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9b0ed93b-ae9b-41d0-bcf8-9cb6d263f76e"
        },
        "item": {
          "id": "d31c68aa-d986-484d-9432-0f93848c711f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5985da83-c371-4c71-b194-bcf050ff3293",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00137bcd-9094-492d-bae3-ad885bd3f9ad",
        "cursor": {
          "ref": "edbed3b5-f977-4781-a4c6-4bb23c1e5456",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "18e30b05-cfd5-4877-b33a-b358fb1da355"
        },
        "item": {
          "id": "00137bcd-9094-492d-bae3-ad885bd3f9ad",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ee6b5453-d098-4511-9192-e39efc689528",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a2be54-3ff9-4ccb-8422-18b6d2d30633",
        "cursor": {
          "ref": "7acad3ef-c137-4372-98c4-58e49fe9557d",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "31eeaab2-417f-425c-a35a-69732dee0641"
        },
        "item": {
          "id": "95a2be54-3ff9-4ccb-8422-18b6d2d30633",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b8764f31-6b78-4f66-b949-ff9bdc954e1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b1a4697-d19e-472b-859e-679717eec572",
        "cursor": {
          "ref": "08f85f83-7f5a-4211-98b9-77232d3f1443",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "59a6eb99-a453-4278-83f2-59f18a4fd5d2"
        },
        "item": {
          "id": "4b1a4697-d19e-472b-859e-679717eec572",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d69c3b96-62ec-4c1b-ab49-b10421d62091",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae56559-e15a-42d2-8789-1052422b8535",
        "cursor": {
          "ref": "b1c6d56f-dd90-45e8-ad60-c6fa2fb564c9",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d211c5ca-4b31-4c05-b6e4-9e02538373fa"
        },
        "item": {
          "id": "aae56559-e15a-42d2-8789-1052422b8535",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "da2c2b06-5294-41f6-b181-74f26e3f0b3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a23ed7-1520-4eef-ba67-56c21e7f709a",
        "cursor": {
          "ref": "ef9f66ee-e81b-470d-804d-f2934fcde90c",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c19f7988-3343-4118-8780-73175835403c"
        },
        "item": {
          "id": "b2a23ed7-1520-4eef-ba67-56c21e7f709a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1761e548-5a61-45e7-9351-b58649805b89",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbdea6a-7076-4000-898b-b2886347ad03",
        "cursor": {
          "ref": "37129c01-fbb5-4500-b4a3-c937e64d1dd9",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "708d116e-a8e0-4463-ad3b-72add02e01b6"
        },
        "item": {
          "id": "6cbdea6a-7076-4000-898b-b2886347ad03",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0cfa4e7e-0c80-4443-ae3a-6984373c8f94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eedc5fb1-ace2-4e46-9011-a04b28de2651",
        "cursor": {
          "ref": "f8eeb939-40b2-4919-abc0-8b0567473c77",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "db922295-8b11-4f2d-923f-d65aaf39a505"
        },
        "item": {
          "id": "eedc5fb1-ace2-4e46-9011-a04b28de2651",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "5be4e76f-c294-4dc7-8ecf-92d5b1ab6ddf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607ccb73-c4c1-486d-aee0-ea1190594eee",
        "cursor": {
          "ref": "e75f4ade-2a5b-403b-a9b3-8bef17ce4a8e",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3509f7c4-3a85-487c-bd76-5d870bb47bc3"
        },
        "item": {
          "id": "607ccb73-c4c1-486d-aee0-ea1190594eee",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "61b27759-3808-494d-875d-ccc31d370a44",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e736b081-2c54-4aea-b23c-b8b447cf9c3a",
        "cursor": {
          "ref": "70bb616c-148b-4cf6-a600-02e419f899d9",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1b33eaa3-d4f4-4f81-8126-ff48023097de"
        },
        "item": {
          "id": "e736b081-2c54-4aea-b23c-b8b447cf9c3a",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "6b83cbf3-10ec-42a7-893a-8c807264a6fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "8488b583-935b-46d7-bc66-83dd1dc2fe26",
        "cursor": {
          "ref": "9f4d6f69-d129-4b3e-80d6-a14b0dbbaaa2",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d43712aa-679b-4c38-bc1e-d85ee2d9da2a"
        },
        "item": {
          "id": "8488b583-935b-46d7-bc66-83dd1dc2fe26",
          "name": "credentials_issue"
        },
        "response": {
          "id": "302eb35e-0eac-41ac-b43f-e28cf5f02e93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 269,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "90da90ad-2b12-4924-bbd8-1afefb322aa4",
        "cursor": {
          "ref": "43f7b3ab-d993-4ccf-a757-296acf59b797",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8c293cdf-862f-4452-b79e-c6d2b1bef651"
        },
        "item": {
          "id": "90da90ad-2b12-4924-bbd8-1afefb322aa4",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ac2afb96-de5f-4370-ad9b-695c97c7a59e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "d01b67b8-41c3-42b4-b3e2-40a1da3183bd",
        "cursor": {
          "ref": "04aced77-be8d-4747-be53-fc2aa211277d",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e64c7791-0e1a-481e-bfd2-e9feb0fe2b0e"
        },
        "item": {
          "id": "d01b67b8-41c3-42b4-b3e2-40a1da3183bd",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6f8b45a9-6ae0-491f-b83c-bcdef2eff71b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "ef0097a3-9484-464d-a54e-7875641d198b",
        "cursor": {
          "ref": "97bd5a89-e8e4-4eb4-a830-26ed62a0cc90",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f2846de5-94ed-47d6-8da7-000f55acb0c0"
        },
        "item": {
          "id": "ef0097a3-9484-464d-a54e-7875641d198b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c3c8673b-bcb1-4d54-a8c8-0290e07f96ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "c5fe99bb-a562-4363-b8eb-94ec3d574bfb",
        "cursor": {
          "ref": "b0e35763-17b9-4a53-a9c4-b4a6da490b91",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "60eac2c4-28c6-42bb-b57a-eca623ec95f9"
        },
        "item": {
          "id": "c5fe99bb-a562-4363-b8eb-94ec3d574bfb",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a0a56aae-c2f2-4c8c-9715-ecab1b4c5278",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "91b22091-0805-417a-b75d-247a98c319c5",
        "cursor": {
          "ref": "23c0b39a-0ba6-43f6-bb86-766ddc1302c9",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9846122b-314b-4ac1-ba7f-2586bd70d9bf"
        },
        "item": {
          "id": "91b22091-0805-417a-b75d-247a98c319c5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d09f553a-2f9c-4b73-bc13-fa429d5b1269",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "1d219430-cc91-480e-9f55-884ce81ba4be",
        "cursor": {
          "ref": "d5b90eff-8249-4ca6-824f-1ac1151e3aa3",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "aca489a6-af28-4756-9cbf-4bf0cca99bfa"
        },
        "item": {
          "id": "1d219430-cc91-480e-9f55-884ce81ba4be",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "856ef057-caa8-40ef-9a7e-6281d140e424",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee962196-0395-4486-b2dd-6ce3e682ae85",
        "cursor": {
          "ref": "f6164552-0596-4c21-8ff8-d16039c0f966",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f5fa5eac-1006-44fa-9729-37dd25d07314"
        },
        "item": {
          "id": "ee962196-0395-4486-b2dd-6ce3e682ae85",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6f2183ae-0590-48b8-857e-2a2c5340746c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc698a06-0ecd-411a-b929-011dabb9702b",
        "cursor": {
          "ref": "62826ff6-0021-472b-bf53-0617e94002e5",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2e29d7db-8aed-443e-92ff-ba8a1433bfa8"
        },
        "item": {
          "id": "dc698a06-0ecd-411a-b929-011dabb9702b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3dc7b859-63de-4ec0-b364-92309707c4f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "761dcf28-c0ed-4b8e-ae7d-0d17a85806ca",
        "cursor": {
          "ref": "51329d8e-dd36-4cb4-b67c-404eb908d44f",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "086c8ee9-5114-478f-aca0-739707fe486f"
        },
        "item": {
          "id": "761dcf28-c0ed-4b8e-ae7d-0d17a85806ca",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "227ed331-d13d-4132-ac9b-60a1c72c15e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3c5b51-516c-4964-bacf-7897bb62f55b",
        "cursor": {
          "ref": "05dd17ff-b72e-4d88-b4ab-43ca28758b46",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5b57fc46-4152-486b-9e65-86ae2b5d8f88"
        },
        "item": {
          "id": "ff3c5b51-516c-4964-bacf-7897bb62f55b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "96008bba-12b5-4ef4-8ba6-61502cbe8b5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed6fc7e-f659-4c77-8737-9a5d67608844",
        "cursor": {
          "ref": "abc9f632-ef5e-47ac-bc26-143e35e616bd",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3b25e47a-580e-4368-8578-694bf52e0b47"
        },
        "item": {
          "id": "6ed6fc7e-f659-4c77-8737-9a5d67608844",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "eaa5ff1d-32fc-45f4-b71c-5e16b8a6079c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3fa994-58db-4abd-ba47-3ac9e7d0ae2b",
        "cursor": {
          "ref": "845d2dff-af8d-456d-97d5-25bd406c19e8",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "492ec5a5-fc90-4395-9025-43f5a222d9e7"
        },
        "item": {
          "id": "7f3fa994-58db-4abd-ba47-3ac9e7d0ae2b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3ddc0c8e-23c3-434e-a8d5-5e3200967c35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a94c43-852b-48ca-a7fc-c59677f2085f",
        "cursor": {
          "ref": "b6c07de1-760d-4e19-9c38-9450de1a507e",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c0ac6f71-66eb-47b5-a491-d6ec08ae0fa2"
        },
        "item": {
          "id": "04a94c43-852b-48ca-a7fc-c59677f2085f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cb174dfd-30e4-4d1b-ae8e-42274f9dbfbb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b77e58-edd8-4b60-9788-c89e3cb3a202",
        "cursor": {
          "ref": "ed8d89ff-6b99-4941-b420-c44ed41f7bac",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1a6817d7-3e3c-439e-8391-f84d15cabae7"
        },
        "item": {
          "id": "30b77e58-edd8-4b60-9788-c89e3cb3a202",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5931b89b-02d9-4120-b753-d2a566de199f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9fe0cc7-d9db-4f71-8763-2389cf763465",
        "cursor": {
          "ref": "58b6acce-872a-4a0b-b122-4ac37040f8bb",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e142c695-b269-4185-901c-b4643a5c745d"
        },
        "item": {
          "id": "b9fe0cc7-d9db-4f71-8763-2389cf763465",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "07d42a49-1b90-4af6-ad4e-1f17eee3d485",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c97194f8-72f9-4e3f-8bcf-beb0a057c68f",
        "cursor": {
          "ref": "25fd4c14-1805-4345-abf4-c3072c0e9b7f",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3cd4db08-6f6e-4b9a-b6b2-00325e599557"
        },
        "item": {
          "id": "c97194f8-72f9-4e3f-8bcf-beb0a057c68f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a984e3b4-f065-4169-a998-ab9fd2bb0d53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a115c2c7-629a-49a3-a54d-f5f05c2f9574",
        "cursor": {
          "ref": "a5a00c03-bfe6-4990-b0d9-9f7008191888",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "81d34495-c08d-465b-90de-f42038c7bb4f"
        },
        "item": {
          "id": "a115c2c7-629a-49a3-a54d-f5f05c2f9574",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "470bfec5-d1ac-46d4-a2b7-e312b6c235cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6dd9cd-97cc-46e1-831b-25b072af4ea0",
        "cursor": {
          "ref": "1117348f-a9c0-43f9-9691-b7168e7c8877",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c36bb6b4-f226-4f96-8f6a-ca0d990d349a"
        },
        "item": {
          "id": "ed6dd9cd-97cc-46e1-831b-25b072af4ea0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fc65b958-e281-4db7-9d07-f70c8c3fc164",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d01f8042-5366-4f18-86b7-92e6af9137f0",
        "cursor": {
          "ref": "fddf9dd4-e60d-49ab-a0a4-fd374e38f637",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "84018536-5e33-4a34-9e33-a22b63581707"
        },
        "item": {
          "id": "d01f8042-5366-4f18-86b7-92e6af9137f0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fb179056-53e7-4d44-be20-15aa2743c608",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0217402-0efa-499c-8796-353b639bec5a",
        "cursor": {
          "ref": "8ae8e2a9-7500-4794-ba79-fc262041453c",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "63ec7a9b-2f44-42dc-b023-f60c55c96a62"
        },
        "item": {
          "id": "e0217402-0efa-499c-8796-353b639bec5a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6da81ea6-bf17-4ae1-b4f1-c3a43e04c117",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b2bda37-79dd-4a8e-aba2-3d4e18c4b196",
        "cursor": {
          "ref": "18605236-5d75-4fc5-a0b7-6252d9953a07",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1c6ea465-355a-4ad6-9774-2bfb931ea7ce"
        },
        "item": {
          "id": "7b2bda37-79dd-4a8e-aba2-3d4e18c4b196",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e03bd488-e314-4949-9844-f88f54ffbce1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c090ee3-d3e4-42dc-b703-f1f216c70d74",
        "cursor": {
          "ref": "e1732169-cf34-4826-bfeb-4d9b4ec1c132",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "bd66f92b-d958-4acf-a796-768a224e7947"
        },
        "item": {
          "id": "6c090ee3-d3e4-42dc-b703-f1f216c70d74",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "add9ae3d-b723-4ff0-94a7-9a596d46d15a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "febdab84-2fd1-4f77-a4f0-9525f6ca1099",
        "cursor": {
          "ref": "363a3cd9-36e6-482e-9cb9-b4007d57884e",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c3dd80b8-ae8e-4504-860f-a7403a5190ed"
        },
        "item": {
          "id": "febdab84-2fd1-4f77-a4f0-9525f6ca1099",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8c2ed4f7-ec2b-43ca-ba7d-a6b6ac4a2424",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c0458c-4453-4b46-915d-c2fc3462b3f4",
        "cursor": {
          "ref": "16284493-0ee2-43ff-8ff7-95fb1f61a5c2",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "98fd4401-c0b7-4197-8ac4-cdc578947629"
        },
        "item": {
          "id": "89c0458c-4453-4b46-915d-c2fc3462b3f4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3f95d58f-9fd6-4055-892d-ff4b0a44b704",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac671bc-3115-442b-bad1-7359f70462e9",
        "cursor": {
          "ref": "86ed9c4d-8edc-44b6-b93e-a89640d536aa",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7e732624-de6e-4d4b-8faa-29b28fd38621"
        },
        "item": {
          "id": "aac671bc-3115-442b-bad1-7359f70462e9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cae08205-4a6c-45e9-9624-3579ca4c51b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8020188c-76d1-4d70-af44-75593c595969",
        "cursor": {
          "ref": "6ec8aaca-081a-41ff-8658-2687343e005c",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "cd833d0f-4c55-47c1-be3b-c96fc9d3361d"
        },
        "item": {
          "id": "8020188c-76d1-4d70-af44-75593c595969",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "29bf9368-2bea-47ac-b542-a480f47adba8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775650d1-570c-4f8b-a286-bd4d346502b8",
        "cursor": {
          "ref": "e89b31fd-dde1-45d6-96ad-8cab179eb814",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ed9e4237-5e1b-42b6-afee-c4301ffe59d0"
        },
        "item": {
          "id": "775650d1-570c-4f8b-a286-bd4d346502b8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b98cef67-1806-4bc6-b5a0-07a455a7ce23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a1052c-f831-4ee4-8ff2-33dbf009cccf",
        "cursor": {
          "ref": "904284ae-661b-45e0-bef3-b95140b7722d",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7d20e010-6a00-4c44-b0ea-92100ee914ce"
        },
        "item": {
          "id": "89a1052c-f831-4ee4-8ff2-33dbf009cccf",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "85c03530-496d-4513-9514-29bbb7aeb98d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f175bd8a-2763-4542-95e5-6789a14a16be",
        "cursor": {
          "ref": "431369bf-2cff-4668-a274-15f5b2d89b32",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "cd87786e-bc27-4858-8892-75c6bb2b7c82"
        },
        "item": {
          "id": "f175bd8a-2763-4542-95e5-6789a14a16be",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7de57064-e981-446b-a6cf-6fb9d4b7bf1f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "135f32a6-9d95-4254-bbd8-d21111d11396",
        "cursor": {
          "ref": "d1e2be47-ec25-49f0-990c-31886a1f8e48",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "22352e56-68ba-4917-ab33-7b6364253739"
        },
        "item": {
          "id": "135f32a6-9d95-4254-bbd8-d21111d11396",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a577abd2-b761-471f-ad64-8ee73e38d37c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c24bb7-a47e-4dea-ac05-a11d3adae3a0",
        "cursor": {
          "ref": "41561b3e-7cc9-46a9-bf8d-2d8dd275c254",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "be5cf0b4-8d1f-43ab-b4d2-9ddf4a9900bd"
        },
        "item": {
          "id": "a8c24bb7-a47e-4dea-ac05-a11d3adae3a0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2d78ad7c-d092-48e9-85a3-461c11218bbf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47845514-3eb0-482e-b0b8-c5f9128c5f91",
        "cursor": {
          "ref": "207eb232-319f-4548-9b8e-480542e30b59",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2744efd6-f327-445e-95c3-0337043c01a8"
        },
        "item": {
          "id": "47845514-3eb0-482e-b0b8-c5f9128c5f91",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e886a2b6-732c-4f74-ac8f-8a0712fe7c2d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa91bc85-66af-4f68-b86f-70446a653956",
        "cursor": {
          "ref": "32e3caaf-819b-4417-ba49-983c9b770cc7",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "703c8886-7d66-4f11-9ab6-471530b3c448"
        },
        "item": {
          "id": "fa91bc85-66af-4f68-b86f-70446a653956",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e1688a6b-9191-49e5-aa9e-15435e2f88aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8c3a15-f4ed-4987-8c29-93ca84c06a96",
        "cursor": {
          "ref": "d644b25f-c552-4c46-bea6-9bc95ce2bc4c",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ce853245-bb80-4ee0-b04b-96e46116a76d"
        },
        "item": {
          "id": "5e8c3a15-f4ed-4987-8c29-93ca84c06a96",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f23b14e9-3b12-4bc8-b2af-418baeee5758",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ada998f-bbf0-4e6b-ae94-70d6c6d4be5a",
        "cursor": {
          "ref": "96dc33d3-84cd-4ef8-a8b0-b9c69bd2c20d",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b03211c7-d345-485e-96dd-b60fbd83db68"
        },
        "item": {
          "id": "0ada998f-bbf0-4e6b-ae94-70d6c6d4be5a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7d434db6-e545-49cf-8459-2422b9ac01c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f4e3f24-ad3f-4f13-a568-1634af4711d8",
        "cursor": {
          "ref": "d22e4339-45fb-4d0f-994b-de1cb8ffbf17",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "cbfe71ee-14cd-4417-a169-9ab6be2b54b6"
        },
        "item": {
          "id": "6f4e3f24-ad3f-4f13-a568-1634af4711d8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2ecac298-778c-40b3-b69b-b56bc7f28a64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 21,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a27dd85-9b53-44f3-89da-a61d5c943742",
        "cursor": {
          "ref": "9168b5b8-15cf-4a01-b7a0-f30d86fabe8f",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a60fb313-b630-4294-9160-fe3302fe001c"
        },
        "item": {
          "id": "0a27dd85-9b53-44f3-89da-a61d5c943742",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4a2a05c6-5376-477f-95ed-f56849e38498",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916c7951-249f-4a84-9c36-2ef68b0b6aea",
        "cursor": {
          "ref": "9921709c-b00c-440c-9b60-e6ac53751236",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3ac56b91-95a3-4d46-a246-70710989cf2b"
        },
        "item": {
          "id": "916c7951-249f-4a84-9c36-2ef68b0b6aea",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "2e645c7e-15cb-42af-b230-99cea11795b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41afb90c-98c2-461a-ae9c-635f3a71d8d4",
        "cursor": {
          "ref": "4d35ec08-e32d-4a3a-bfdb-b9fb4c51cf47",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5275b409-88e6-4ceb-8095-c9a1c5673e4b"
        },
        "item": {
          "id": "41afb90c-98c2-461a-ae9c-635f3a71d8d4",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f3dfa9df-ef20-4f1d-926f-31dd139130f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1372ddee-c83f-4502-a3ed-eb0b2d77f80e",
        "cursor": {
          "ref": "6ea069d8-5747-4d8a-af91-cc10e9ddbc16",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "319e0b95-78d0-492e-9eb0-2d1e8b4160aa"
        },
        "item": {
          "id": "1372ddee-c83f-4502-a3ed-eb0b2d77f80e",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "6f850624-ff89-45fc-a031-1b89bfcf98f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd45e29d-7920-4dc6-8671-bc6dd20de35a",
        "cursor": {
          "ref": "215d3ebf-5a0c-404b-a258-30a5ff738a5e",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0a993800-3552-4691-8314-707af8cf431c"
        },
        "item": {
          "id": "cd45e29d-7920-4dc6-8671-bc6dd20de35a",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "4c571b41-7d57-4b5e-8b23-7fbaf1ed63aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0685472c-063d-4b51-a960-2c195e39111b",
        "cursor": {
          "ref": "05f8ce7d-102a-48a6-87d0-81ec6f85c58e",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e90f9dd9-b964-4ce3-88a4-a4031e44256c"
        },
        "item": {
          "id": "0685472c-063d-4b51-a960-2c195e39111b",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "0e2aa043-122d-4398-b1f6-cb14470f3c07",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe3b87d-1f56-4c60-aba6-160dd1b2eaa0",
        "cursor": {
          "ref": "fb9d9d75-5edd-450d-8543-6108b617c1c8",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4ee08697-58fc-4201-bf3c-954e329772ac"
        },
        "item": {
          "id": "9fe3b87d-1f56-4c60-aba6-160dd1b2eaa0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d8cd6238-9c19-495a-a4b7-e58e6c7e5971",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba897117-f405-41cd-89f3-24a1cc5c0d41",
        "cursor": {
          "ref": "690f7678-bb4d-4589-9f6e-c5934983c5d6",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "05a632d8-d2e8-4125-b1e0-175c67dfdb33"
        },
        "item": {
          "id": "ba897117-f405-41cd-89f3-24a1cc5c0d41",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8bf36851-5d65-492d-a49d-f9b43465a297",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a75c53-f95d-48c4-adb8-04efd0aac318",
        "cursor": {
          "ref": "95bcd9b3-1c7e-4905-a015-dbae9c91ae92",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "502c4d19-00d1-4e95-8fee-555eb04f5681"
        },
        "item": {
          "id": "e6a75c53-f95d-48c4-adb8-04efd0aac318",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ff40ce1f-805f-4e81-9d35-d09659749567",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e034ae-ddd0-4e5a-bbfe-eb967b327d73",
        "cursor": {
          "ref": "3d6ed31b-c71d-41e1-96c4-5b8363e3dfb8",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e67a781c-06ad-460b-a0ab-9de9ba5ae97e"
        },
        "item": {
          "id": "84e034ae-ddd0-4e5a-bbfe-eb967b327d73",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "23a4fcbf-ba33-4d06-a10c-135e03be186a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e657843-f226-4822-8363-e50e5cd99a10",
        "cursor": {
          "ref": "18c5de15-1246-419d-adec-160c3497eb90",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "06083bb5-5b5c-4a24-a1de-c20444631a60"
        },
        "item": {
          "id": "8e657843-f226-4822-8363-e50e5cd99a10",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1e356276-8c7c-4afa-baa2-84f373a2d962",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d97d75-cfe4-428c-b78e-e857f5065323",
        "cursor": {
          "ref": "8784c9cd-3077-4cc0-8acb-5184b8ff7666",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "55902daf-ad80-42cf-9cd6-270148bff73b"
        },
        "item": {
          "id": "70d97d75-cfe4-428c-b78e-e857f5065323",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4ca9f5e3-aab4-4ac7-9258-f4fcd3c498ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c9c8c2-59b6-430f-97e7-879f3d40f1af",
        "cursor": {
          "ref": "11e63ae2-61cf-4aa6-843c-8d5e324193a6",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d1301f37-b2bf-4c63-b715-2cba37b1a108"
        },
        "item": {
          "id": "00c9c8c2-59b6-430f-97e7-879f3d40f1af",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a48cdab7-6a57-4d66-aefd-f78eaea96ca7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb14f002-087f-4758-a35e-8fc0a560a336",
        "cursor": {
          "ref": "72f0a173-1a18-4c97-a7f6-32026e2920d6",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b44069b6-a1d8-45ba-8ce9-7e9495595f2e"
        },
        "item": {
          "id": "fb14f002-087f-4758-a35e-8fc0a560a336",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b7388fb5-21ce-4977-ab3e-eb0a31fdcedf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c59d2d5-493a-4426-bb37-61ddbce488e4",
        "cursor": {
          "ref": "4772e826-94b5-4476-ba45-24a6e2d6441a",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "dafdeaea-36fc-4f4a-b1bc-e57d4bd1629d"
        },
        "item": {
          "id": "1c59d2d5-493a-4426-bb37-61ddbce488e4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5c315ceb-fde4-4156-a275-89bd13989489",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e1fa54-8cc2-4bb3-a2f6-d02fa1a989b0",
        "cursor": {
          "ref": "e11412fc-30e7-47a0-abc0-1024216a1f2a",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0e83d3e9-5901-4a4a-8f64-fb64b5b09bc9"
        },
        "item": {
          "id": "f8e1fa54-8cc2-4bb3-a2f6-d02fa1a989b0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "62ade24b-fb17-4fa5-8f74-5dd1667b5ed0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230210af-414b-4d9b-9fce-c7238df2408e",
        "cursor": {
          "ref": "2d7940fe-0fb1-4cf3-a671-faa247770995",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "cf8b6c62-1eec-40ed-b508-41fffe8ae3e6"
        },
        "item": {
          "id": "230210af-414b-4d9b-9fce-c7238df2408e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "35022d3e-422f-4ac3-b600-ac717c78666b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5b887ca-c561-421e-9de6-cc142cfd7a11",
        "cursor": {
          "ref": "311dfa6d-65ea-4083-bcce-c4210fa3121f",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "30cfdf02-0e98-4b0b-8548-17ec457c2faa"
        },
        "item": {
          "id": "d5b887ca-c561-421e-9de6-cc142cfd7a11",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2bc1a420-5065-4c93-b393-7a5beac30396",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edfa411d-247c-4aa7-918d-0fd43fd9235b",
        "cursor": {
          "ref": "e19093c5-213d-4e12-b6c6-f841451333b1",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "482cf7de-2c56-4d37-9d01-791c16a81bf5"
        },
        "item": {
          "id": "edfa411d-247c-4aa7-918d-0fd43fd9235b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "0d0144b4-792f-428f-94c4-a3a806793bb8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1195d1b0-1aa9-4603-a6e5-8a1086389c35",
        "cursor": {
          "ref": "0dd3dfdc-89b3-4a16-b22d-9c88acbb032b",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "451c84a3-6e8a-406a-8fd1-b4eb78a11471"
        },
        "item": {
          "id": "1195d1b0-1aa9-4603-a6e5-8a1086389c35",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e379dc43-1a25-48c7-a18a-581b1ed66121",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba2b56c-9243-431a-aa02-1a96169f9be8",
        "cursor": {
          "ref": "36b8d86d-b68c-426e-be98-6e977eab8259",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "712a4205-40c0-4de3-bdf8-684dbbc193cb"
        },
        "item": {
          "id": "cba2b56c-9243-431a-aa02-1a96169f9be8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "fa055b24-a980-4c0a-8901-14e405c0eadf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caacc44b-ad21-4e07-b4f7-255cb75fd3d2",
        "cursor": {
          "ref": "5d19f25d-34bc-41d0-a676-1cac4c951a82",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d4d0e33c-77e5-4ead-88cc-c388b5a6ca87"
        },
        "item": {
          "id": "caacc44b-ad21-4e07-b4f7-255cb75fd3d2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fdd60f41-fc41-4743-a352-2b90c85afb38",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434981cb-72a9-46ba-ba0f-599d1c560928",
        "cursor": {
          "ref": "0109f79b-0818-455d-b9dd-f86d00238715",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1556a877-3730-4721-9f5f-a7f9de31db5d"
        },
        "item": {
          "id": "434981cb-72a9-46ba-ba0f-599d1c560928",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "325aea8b-8196-4cff-aee3-efc712c12fe1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9635d13-d9c2-4d53-a09b-2e4132bfaff9",
        "cursor": {
          "ref": "ea217823-2ca1-4fce-8d15-8efcede5e325",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "25b4e95b-51ad-4714-a96b-9f4d361d0c0b"
        },
        "item": {
          "id": "a9635d13-d9c2-4d53-a09b-2e4132bfaff9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "bb58ae0b-6106-42d7-9361-c0e58d2493ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2194baef-7d02-4c36-92e1-379d0ffe12f8",
        "cursor": {
          "ref": "97b4e20e-ed4d-4c03-ad8e-b7e8897ee7f5",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "11c68131-0c19-4355-833c-2af16c7ffb59"
        },
        "item": {
          "id": "2194baef-7d02-4c36-92e1-379d0ffe12f8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6ada1a5f-7e62-4ae9-a124-cb1554bff3cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7106f362-61ee-4017-9ec2-0dcd999f6081",
        "cursor": {
          "ref": "67dace66-f2ff-492c-92d9-7399a63e496e",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "cd665111-f9bd-4aca-a927-165e1143ae50"
        },
        "item": {
          "id": "7106f362-61ee-4017-9ec2-0dcd999f6081",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f5572f66-69a6-4f06-be74-ebdd8612512e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8da1917-ca4d-4070-845b-702c6e3957e5",
        "cursor": {
          "ref": "a48d5c18-b256-4dd0-9297-70bcddc829ec",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "467986c7-1507-46aa-a896-f343fdc6bdea"
        },
        "item": {
          "id": "c8da1917-ca4d-4070-845b-702c6e3957e5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "53d18542-885d-45a3-b8ed-a5efdb13c69c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ec4f77-73e4-4410-8818-8bd248b6c94a",
        "cursor": {
          "ref": "a545a8b3-8c0b-413f-8d51-573a49a35cf9",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "35760f92-3a85-4dd1-bfad-a5635a0d688c"
        },
        "item": {
          "id": "00ec4f77-73e4-4410-8818-8bd248b6c94a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3c4c6ac8-d0cc-40c9-91c0-d613d0e98c21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbdb3dab-3fcf-49e3-90bb-a914328993a9",
        "cursor": {
          "ref": "1369de69-9d03-4bb6-ace9-d0dd55c32c39",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3756b1e5-dbfc-4c21-850d-0b1d1f5732d3"
        },
        "item": {
          "id": "fbdb3dab-3fcf-49e3-90bb-a914328993a9",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "20ecb802-e238-497b-8333-2cbd99fff469",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377b1731-16f2-4cd2-afba-0a6ab90ea784",
        "cursor": {
          "ref": "800fba8a-3d7a-4255-8d65-f93a7d890801",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "79dd1e01-4d79-4cf0-80a8-1dbe9eae02cf"
        },
        "item": {
          "id": "377b1731-16f2-4cd2-afba-0a6ab90ea784",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f83a45de-5e78-4607-9675-f9eeb54e34a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47fc6725-f0a4-492a-bbce-17f114bb441e",
        "cursor": {
          "ref": "a949b8d6-2d43-40e1-b8bb-77a330eb8d9c",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a135d790-f1b7-462c-8b44-9d4c0497597b"
        },
        "item": {
          "id": "47fc6725-f0a4-492a-bbce-17f114bb441e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "533bcf6e-134e-48c3-8be1-dabb2bd8a4c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5427f1c7-9bac-4cec-89b6-bfbcfc365e93",
        "cursor": {
          "ref": "53625595-da6f-4295-9211-94b92f32e49c",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "734d949d-d579-476f-b662-25e842464ea5"
        },
        "item": {
          "id": "5427f1c7-9bac-4cec-89b6-bfbcfc365e93",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b50434a1-5520-400e-87f5-55d4442ba64e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246bb256-418a-4f28-ad7e-a796653c5d81",
        "cursor": {
          "ref": "83e182de-790a-439b-adcd-23f0fea8f508",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "414377dd-0caa-43f1-b7d0-236f531e63c9"
        },
        "item": {
          "id": "246bb256-418a-4f28-ad7e-a796653c5d81",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "37433cf3-ee1c-4d9b-9a7b-bfd649b2702e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7042829-1052-4c47-ad89-4117b37c1c69",
        "cursor": {
          "ref": "d74588b5-25b7-432e-ada4-5db938bae085",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7ab9cd23-38b3-42b3-ae50-870dd54c0fb0"
        },
        "item": {
          "id": "e7042829-1052-4c47-ad89-4117b37c1c69",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "dfe64198-39ca-4eb3-8fcd-aa95592f338c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4733364-2295-4172-9c15-9f5174f37840",
        "cursor": {
          "ref": "23305bfa-83b7-4f2c-bd27-149de89af512",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e9685a6b-5aff-40f0-aafe-b739b9f255f6"
        },
        "item": {
          "id": "b4733364-2295-4172-9c15-9f5174f37840",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7d48db21-60d4-4677-92cd-32c9482d5fb8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e84f39d-c86c-4d7f-8cfc-aec09d696525",
        "cursor": {
          "ref": "35bc66f8-18eb-4bb0-8c9b-dccf3772470a",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1c5c9271-1d1e-48d5-a812-5e1ac8388d30"
        },
        "item": {
          "id": "0e84f39d-c86c-4d7f-8cfc-aec09d696525",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "10fe8d55-aa54-425a-9c26-02b1199821f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fd757cf-27d8-4326-aadd-e4ca610e7654",
        "cursor": {
          "ref": "46955d9e-fc15-4e34-bb0b-aab8d9ad3253",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e0f4bec0-48c8-4d47-a417-8a63d93d6e38"
        },
        "item": {
          "id": "0fd757cf-27d8-4326-aadd-e4ca610e7654",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "740f2ff7-ea08-4423-bf59-94bfa3c85213",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bdcd043-1f71-4be5-9d88-a72c25513308",
        "cursor": {
          "ref": "2b4bbb6b-0ff0-4607-8ddd-d61e2d801237",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b08b1c5d-69aa-41c9-892f-29327bcff4e6"
        },
        "item": {
          "id": "9bdcd043-1f71-4be5-9d88-a72c25513308",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0f3309e6-1d34-4928-8dab-6852db0687f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46609032-77f6-4128-9abd-e446a71f4187",
        "cursor": {
          "ref": "a7864409-ac58-47dd-852e-5bd2f5543527",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "af208bdd-1fe1-4784-8d67-09bdfc924cc6"
        },
        "item": {
          "id": "46609032-77f6-4128-9abd-e446a71f4187",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "29842dd3-3d69-4252-b82e-fa311eec40a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec7fb20-13ba-41ec-9a3a-56dabbb300e2",
        "cursor": {
          "ref": "991d94ce-e266-4b8b-a387-d110d3bd1590",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2b32a6a8-8ab4-49af-a78f-8513960629e7"
        },
        "item": {
          "id": "0ec7fb20-13ba-41ec-9a3a-56dabbb300e2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e9870a1a-d5fb-43e3-bc10-bff4f6585e2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19fa9243-2dc9-49c1-aec9-576d535525d3",
        "cursor": {
          "ref": "a70d0df2-3d8a-44e6-8c8e-563340282582",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3ca23fba-3fb1-4d9f-9e35-315f0d163325"
        },
        "item": {
          "id": "19fa9243-2dc9-49c1-aec9-576d535525d3",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7d714bc2-c5f6-4c2c-b8b6-4f1839446762",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bdeda25-f797-46a6-a87a-e97eff5b6b9a",
        "cursor": {
          "ref": "7ed9af79-270c-4f79-b76b-88d599da5cf0",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "41ead8a2-da90-4519-b9d4-3166311dce50"
        },
        "item": {
          "id": "4bdeda25-f797-46a6-a87a-e97eff5b6b9a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d527968a-d552-45d1-af84-ed0da371b811",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5a1396-cac8-43c5-ba7e-d482180498d1",
        "cursor": {
          "ref": "a09c87ac-893e-434f-8c7e-ef5952551279",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "14cb3ef4-f062-47b3-bb70-1bb314924b48"
        },
        "item": {
          "id": "ff5a1396-cac8-43c5-ba7e-d482180498d1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6d5f1cec-f6b5-4b8e-a977-abb6f226c3f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ad8e48-bf18-4032-9b46-4bfc5eec2af2",
        "cursor": {
          "ref": "efab1224-e371-4ad5-89cb-aff8fb1f7222",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "13aa52f9-b534-4a30-b2f0-c8e7cc1dcd67"
        },
        "item": {
          "id": "21ad8e48-bf18-4032-9b46-4bfc5eec2af2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d587d316-3593-43d9-a8c0-d0008b4b91e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8244903b-781a-4771-ad55-ffb64e86bd0e",
        "cursor": {
          "ref": "83e94bb1-5fb5-4011-a9ed-1a607a569502",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7fb2e89f-a16b-4eab-950b-229541c9244e"
        },
        "item": {
          "id": "8244903b-781a-4771-ad55-ffb64e86bd0e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c1481a37-7e37-4e52-8b34-e8d7562ee00f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eaaf25b-4f2b-4309-8194-c59f4470a3e6",
        "cursor": {
          "ref": "4cdb20b9-7c8d-40b3-b7d7-db11edb6c065",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "4d62eef9-ed2f-4421-8fdc-cac7302bf9a2"
        },
        "item": {
          "id": "6eaaf25b-4f2b-4309-8194-c59f4470a3e6",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6e19b9c6-1577-4b59-9d38-841cce2a2980",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dba8939-52bc-4d96-95f4-a666ea0edde4",
        "cursor": {
          "ref": "a6af4635-546a-49cd-bca7-4d2f6dfc634c",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "130da5b2-de55-41a4-b357-c7e3d49f3f3d"
        },
        "item": {
          "id": "1dba8939-52bc-4d96-95f4-a666ea0edde4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "cadaf415-7926-4a2d-8433-fc8435b040be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a10e06-c7d0-4c09-8303-27732053cd4c",
        "cursor": {
          "ref": "a4acfbee-747e-4e50-9cb3-4f3727575850",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f10a25d1-28ac-47fc-b367-b20cf0afa104"
        },
        "item": {
          "id": "29a10e06-c7d0-4c09-8303-27732053cd4c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "12249b16-f9b7-40ab-9644-5bdde3dff251",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce45b659-3a9e-4e8c-982d-6af0152240c7",
        "cursor": {
          "ref": "bc93084d-7fae-437b-b025-680854044be2",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "dafed90d-65c8-4328-9069-f111953ba7dd"
        },
        "item": {
          "id": "ce45b659-3a9e-4e8c-982d-6af0152240c7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5151828c-0288-4142-a67a-5dd9362f4afc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440aad9f-647a-4e4f-8fcd-03b4bcf726d2",
        "cursor": {
          "ref": "1331a36d-4f26-4d39-957a-6cc536fd4603",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ab1c479c-63a9-4efb-8eac-18a38b187a07"
        },
        "item": {
          "id": "440aad9f-647a-4e4f-8fcd-03b4bcf726d2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c736dd5b-8611-44fb-ad4c-88d50d25a507",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ca6f62-d757-482e-b327-9d216b36c156",
        "cursor": {
          "ref": "b116bec7-858c-4945-ae22-0431936e41d4",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a41eddb7-122d-4c40-ad21-d9ec9902f974"
        },
        "item": {
          "id": "f2ca6f62-d757-482e-b327-9d216b36c156",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "622916f8-6b25-4f50-aa0d-c6c86e14b468",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18304518-09e4-413c-86fd-fd5772a5b793",
        "cursor": {
          "ref": "93521f9b-8a7c-47e9-9f26-d22e5f00e921",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "90103e2b-f2a8-4d08-a699-7d55566d405f"
        },
        "item": {
          "id": "18304518-09e4-413c-86fd-fd5772a5b793",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7a2f94c7-ca63-48ac-bbd0-8f8531c26016",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07bd7774-f545-49e1-a6fd-d6beabfdb351",
        "cursor": {
          "ref": "68d156e6-3f66-436e-b10c-98198d26c929",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "48ac7ecd-a6aa-4d93-a078-ebc9d57e9a35"
        },
        "item": {
          "id": "07bd7774-f545-49e1-a6fd-d6beabfdb351",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "fc7703b6-0dd8-4de1-ba02-3ff005af9303",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dcd1ba5-212d-4902-ab54-1496049878ff",
        "cursor": {
          "ref": "7ff13b6c-3ff2-4444-a08a-d8163139c006",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "14e84848-2cda-45d1-a761-11aef0103b9a"
        },
        "item": {
          "id": "3dcd1ba5-212d-4902-ab54-1496049878ff",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2e26e660-865c-4e4f-8918-db8484144d07",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f261de2e-63ad-463d-acd7-ef7c0309b89e",
        "cursor": {
          "ref": "442eaaa2-4c52-4361-8304-8b0ca05c88e2",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "312e158a-8619-4b93-943c-c8cb737a50df"
        },
        "item": {
          "id": "f261de2e-63ad-463d-acd7-ef7c0309b89e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "94fd973a-4b26-4505-bdfa-d2e04fece4e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b39c137-88a9-4c54-a257-c8e2c7075369",
        "cursor": {
          "ref": "3cb8a8ef-4995-4065-8d9a-bcb95ce74991",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "28567028-b19e-4b7f-9012-ce1f38ea5d91"
        },
        "item": {
          "id": "1b39c137-88a9-4c54-a257-c8e2c7075369",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "de2cb9d4-743f-4892-98e7-e7d12279934f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7551dbb-df7f-45d1-8b6c-175479863e8d",
        "cursor": {
          "ref": "1c441161-0f1c-4d40-8d13-4a303cff5ef6",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5fb4b742-6a27-4bec-917f-08eed1c9cc4c"
        },
        "item": {
          "id": "d7551dbb-df7f-45d1-8b6c-175479863e8d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1005f99a-ef04-486f-a5f4-d4bd6ccf4326",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f806b1a9-367d-4158-a6b2-9b04823d83ff",
        "cursor": {
          "ref": "81766491-1ba7-4802-ba6c-fcabe1e4dbc8",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2f107568-bc7d-463c-8b9b-2f551ee40326"
        },
        "item": {
          "id": "f806b1a9-367d-4158-a6b2-9b04823d83ff",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ec1ba451-7b6e-474d-b760-4a1251f620dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7d7a44-294e-44e5-9639-38f0e64c3d09",
        "cursor": {
          "ref": "644dfc39-a55b-4f2d-81a5-bba1f3a2e4d6",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c354409b-545f-4621-9b6a-ea88a2a7bf5d"
        },
        "item": {
          "id": "aa7d7a44-294e-44e5-9639-38f0e64c3d09",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "86e2ae6d-f301-47e9-bc6f-e31e2f1734e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3ac450f-19c9-419c-bdf6-0e9d74895d85",
        "cursor": {
          "ref": "e2a47299-f82e-40c9-98fd-00d091bbb7d6",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "82e2ba26-d779-461e-a1f4-472db7fd90fb"
        },
        "item": {
          "id": "b3ac450f-19c9-419c-bdf6-0e9d74895d85",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "135a3f67-6d4d-4788-9ecf-b9ce8a48b084",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44dd360f-d2a5-426f-8668-139e56cbbc1d",
        "cursor": {
          "ref": "634614d2-8298-4db7-b80b-0ec64c13f255",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a0192f68-0f7d-484f-9291-f952a8ecbc47"
        },
        "item": {
          "id": "44dd360f-d2a5-426f-8668-139e56cbbc1d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "666abc5d-8336-45d7-b6db-e0784444935f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fcb2368-fa2d-4eaa-9d07-6e092d8822f5",
        "cursor": {
          "ref": "0b35a516-78a9-48d7-a91e-1bfcffbf7ef7",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e7600b68-a6bf-4594-8328-1e322d5e28a1"
        },
        "item": {
          "id": "6fcb2368-fa2d-4eaa-9d07-6e092d8822f5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b3b170e8-f9f8-4956-ab6b-f376e7843bcb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd95783-3bd0-4cd0-80d6-84064f3cf98b",
        "cursor": {
          "ref": "ff6b5139-bf2a-4cda-94a8-d58e060e0db8",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "14de4d64-53f9-4823-842b-7a7b548f8db3"
        },
        "item": {
          "id": "2cd95783-3bd0-4cd0-80d6-84064f3cf98b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "44bcbcbf-98ce-44e5-bcc5-cd24a47dab08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfce4656-d43c-4d3c-bfcc-0653884a1450",
        "cursor": {
          "ref": "c07d30ef-9283-42e7-a72c-ce69e2cd568c",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5184f56c-1313-4a5e-a793-56e3426b6114"
        },
        "item": {
          "id": "cfce4656-d43c-4d3c-bfcc-0653884a1450",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2f243802-a487-45ea-92d4-8fe72152e31e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 287,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df2b0846-19a4-430c-9438-406233ac0fc4",
        "cursor": {
          "ref": "36ed3314-301c-4317-a9d8-51771b9edf20",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c235f7e5-516e-4182-ab4f-0ab9fa43ac83"
        },
        "item": {
          "id": "df2b0846-19a4-430c-9438-406233ac0fc4",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "826cefc7-35f2-4040-b35c-9866335b88e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c4a56f-a2d8-4401-9a57-271849e22376",
        "cursor": {
          "ref": "162272fe-3373-40a0-8968-68dea8eafd00",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "add38699-6110-4ea1-bc4f-21a4b14fb723"
        },
        "item": {
          "id": "f8c4a56f-a2d8-4401-9a57-271849e22376",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c6a9991e-ae86-4abd-94ae-cf30db145448",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b2001c-3a88-4754-a5b9-2191f14d8aff",
        "cursor": {
          "ref": "b0dd178d-2a19-4937-b32f-613eace69d55",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c540007e-87e0-451f-969e-23a1238f0121"
        },
        "item": {
          "id": "a2b2001c-3a88-4754-a5b9-2191f14d8aff",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5163d7e6-f355-4e1b-85d4-2f851a267565",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a798b61b-ad11-4cf0-91c1-e72cd61e1344",
        "cursor": {
          "ref": "aa92a06d-cd32-428f-92ba-d3669871c53c",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d87ba64d-5b7e-41c6-846f-a12ad2efcf01"
        },
        "item": {
          "id": "a798b61b-ad11-4cf0-91c1-e72cd61e1344",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4852c256-7b78-485d-9fa3-47fbed668d15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850af178-5248-46e0-98a0-c5a9c93b599f",
        "cursor": {
          "ref": "9bfec8bf-1ca7-45a5-a8e2-b4650a9fc90a",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "eb3aa776-97da-494d-8b49-7eb391eafdc4"
        },
        "item": {
          "id": "850af178-5248-46e0-98a0-c5a9c93b599f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "7510e4aa-d508-47c6-8cd1-23b0abfb914b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c91897-a097-4dec-891c-124af396b75d",
        "cursor": {
          "ref": "6f819ac7-40a7-446b-9fb9-a59144204cb3",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e23ff02c-e25f-4430-9ce9-b32f2206b27a"
        },
        "item": {
          "id": "c6c91897-a097-4dec-891c-124af396b75d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ddc6e7d0-0844-4c44-84b6-76b788c2798f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee43befa-62b6-458e-bb77-1efd7e8d1625",
        "cursor": {
          "ref": "11631678-62ad-4f42-8d99-b03bdd51b3bf",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "cf5da8a9-4a8d-4850-bfc9-38fb860f3c38"
        },
        "item": {
          "id": "ee43befa-62b6-458e-bb77-1efd7e8d1625",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9622f9d2-f02f-4476-896a-b72cbc535922",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be45ec3-6ebc-4b9c-b540-d49f9aa65d1f",
        "cursor": {
          "ref": "a59910cf-825c-4f86-9fbf-9f4785a338aa",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "efb9d360-9a24-4114-8c11-6d02ddff7dec"
        },
        "item": {
          "id": "7be45ec3-6ebc-4b9c-b540-d49f9aa65d1f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "dd8655c1-3c94-44a8-8d4e-93a453db53b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89059579-41b7-4e11-b763-93ecf5ede5d3",
        "cursor": {
          "ref": "af44a343-6a46-4b37-bbfd-d3f952531c20",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c4a41a3f-ff20-449f-afe5-b50b18425717"
        },
        "item": {
          "id": "89059579-41b7-4e11-b763-93ecf5ede5d3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ddf01854-11b4-4c76-b2c4-157c594c4ff7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac8a0fa8-899a-4f55-a0c7-840d4db70327",
        "cursor": {
          "ref": "2fe58656-beba-4e1e-b28f-c7977cbea3bf",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "af9cab60-fc27-4289-b7b7-8bec42571411"
        },
        "item": {
          "id": "ac8a0fa8-899a-4f55-a0c7-840d4db70327",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "cf0a015a-b408-42c6-bd9c-0be02f2890af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20561913-5b93-4bcd-8f8f-e1b1904a9ace",
        "cursor": {
          "ref": "b1ef4f64-d958-4eaf-b256-dbb11caa4ad4",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fae11295-f1d2-4158-9ac2-4f219c3181fd"
        },
        "item": {
          "id": "20561913-5b93-4bcd-8f8f-e1b1904a9ace",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "edcde725-b025-47a6-9204-55bb61a7f8ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b2b84f-332d-466a-8ae6-260a7d3d0bdc",
        "cursor": {
          "ref": "923453f4-5783-4fb5-89e1-ab8efe1d34c1",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "637e0364-e36b-4803-b322-5df66eb0c5e1"
        },
        "item": {
          "id": "f6b2b84f-332d-466a-8ae6-260a7d3d0bdc",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8b0f7b48-1147-402f-a024-31d4b0081742",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "529d2847-6594-48c2-bcc0-b3c4574e8dfb",
        "cursor": {
          "ref": "300228ed-dff4-41e4-af64-a41b08b9c9a0",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "049375f5-c201-49fa-a37d-44291c79e973"
        },
        "item": {
          "id": "529d2847-6594-48c2-bcc0-b3c4574e8dfb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7c68cf71-fd9c-4022-a1fb-b866a21347c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38384d34-f9e5-47d8-9004-ea61ec5eebb4",
        "cursor": {
          "ref": "3369374d-f0bb-4376-931a-e8114ffe2537",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c9c0c1f4-0c3f-45bc-b62e-6fd668462091"
        },
        "item": {
          "id": "38384d34-f9e5-47d8-9004-ea61ec5eebb4",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e8692f35-c1bc-4c9d-afb4-da6301a3c8db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f611831-0a3b-4cdd-9ee1-72f73a12726b",
        "cursor": {
          "ref": "512b010e-7f22-4fac-a9af-a885fa5f52b2",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d3e8765e-d8ab-4137-aa24-8b7554b7b6b8"
        },
        "item": {
          "id": "3f611831-0a3b-4cdd-9ee1-72f73a12726b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0b528853-6294-41a0-aeee-485dab736d03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f317a1-ba0d-4ce1-8c72-022189114821",
        "cursor": {
          "ref": "bb5f47c7-c162-49d3-be20-8e5047fd583a",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ba5df41c-b4b5-44af-8c88-a4f43663d7c7"
        },
        "item": {
          "id": "82f317a1-ba0d-4ce1-8c72-022189114821",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a447968c-4bec-4a48-ba69-268487318615",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6cff043-6ef5-4006-a680-78e88248151f",
        "cursor": {
          "ref": "9abea009-5aa1-4fbd-93fd-b9a92b091a31",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "232d5ea4-3af0-4482-8754-88539246e5df"
        },
        "item": {
          "id": "a6cff043-6ef5-4006-a680-78e88248151f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "66776feb-eedd-462e-b4a9-471886db2b25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c649bb-84ca-4dc0-bae9-44e8f21d6fde",
        "cursor": {
          "ref": "7c192d7e-35d7-4099-9be1-aa0da41c3bc1",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ffcbf6bd-e20f-4942-a8e6-a720c81e315c"
        },
        "item": {
          "id": "f9c649bb-84ca-4dc0-bae9-44e8f21d6fde",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8b38f793-cb9f-4f6b-9178-649e6db705e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8aeece-8dd4-4f7f-b37d-0d975d2db965",
        "cursor": {
          "ref": "c224afa3-0580-4ede-ac74-658c832bb3f4",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "863f4e21-555b-4b18-a736-e2d5d36fbd3d"
        },
        "item": {
          "id": "8d8aeece-8dd4-4f7f-b37d-0d975d2db965",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "79e409a5-d116-4c6e-bd36-eb604b0f1afc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7596608-2f5f-4db0-8cd0-f8f529e449d7",
        "cursor": {
          "ref": "1cca6ad9-a248-4664-8841-a6d7fb69cc0a",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "6fcb8b9a-4a94-4a3d-a799-d324cf6603c1"
        },
        "item": {
          "id": "d7596608-2f5f-4db0-8cd0-f8f529e449d7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "978382a6-760e-4182-bb0b-84fbb57066cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4761ade6-1fc1-4d20-8741-32b1ee2ba828",
        "cursor": {
          "ref": "00cbaa8b-807f-4b11-a1f5-ce993430e846",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "aa06b67d-9588-458d-81f9-6cafa2bbf329"
        },
        "item": {
          "id": "4761ade6-1fc1-4d20-8741-32b1ee2ba828",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "7c6f7e3b-bcb6-47f8-b87f-2a94978982c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "791dd5f8-b0d5-4d9a-9c60-cefc8352539d",
        "cursor": {
          "ref": "1a3435bc-d639-4a77-980c-a1b3e9228a14",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "752b9129-fe72-4b9c-862a-79aea4b5bdb4"
        },
        "item": {
          "id": "791dd5f8-b0d5-4d9a-9c60-cefc8352539d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a7911c0c-3aff-486e-87a7-bfc5d6667824",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf3b5c3-532b-4a53-bd3b-b1c05e2cd5c6",
        "cursor": {
          "ref": "d5bf5c34-7f32-4285-b438-411337bce7aa",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5f4cd122-7b90-42e4-a041-e146c1d61649"
        },
        "item": {
          "id": "4cf3b5c3-532b-4a53-bd3b-b1c05e2cd5c6",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "af221877-03c0-4d7e-8833-fec1cc421403",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03687c61-d26d-4474-9d7c-ef211807a31d",
        "cursor": {
          "ref": "e4b73c02-7b17-4498-ac55-9af3d524aeee",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0ad64fd9-70e1-4ebb-a2d4-fae78a66cac0"
        },
        "item": {
          "id": "03687c61-d26d-4474-9d7c-ef211807a31d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "bf844e3e-ab2f-4f25-93f8-10d665895e19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7399ea0b-caab-4c98-b010-b4215b035f7e",
        "cursor": {
          "ref": "5c3cf095-8986-4bb1-be51-b5e034b4ee89",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6068de25-5805-469a-9fa3-e387f6346a34"
        },
        "item": {
          "id": "7399ea0b-caab-4c98-b010-b4215b035f7e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "70a72267-1d88-49e5-b09a-448bf058fbc8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7bf8e0d-82b2-487e-a2be-5bba662ad353",
        "cursor": {
          "ref": "5bebee1d-e3b6-43d8-a3cd-9456157d7058",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6ecea519-601c-447f-ab76-bf6ad4f4a7a9"
        },
        "item": {
          "id": "b7bf8e0d-82b2-487e-a2be-5bba662ad353",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0010274c-04ea-45b3-a603-6ee24a1d6cbe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1bf7b4-45e2-4629-8dd5-778bcb506136",
        "cursor": {
          "ref": "4d903673-42c7-4983-b511-2e5e8cf7a18b",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "14e2ffea-dc04-4042-8cbd-7f805c855bf9"
        },
        "item": {
          "id": "7f1bf7b4-45e2-4629-8dd5-778bcb506136",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5ad273d6-c362-45a9-8d95-09b979216df8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6d4f5b-2dad-4375-b9e7-fa7a40df88a4",
        "cursor": {
          "ref": "03b50e5a-6608-4d3f-93aa-8e9542826e4f",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b8b8f886-1705-4987-828a-598fe88376f9"
        },
        "item": {
          "id": "cb6d4f5b-2dad-4375-b9e7-fa7a40df88a4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "48190aca-181e-499e-91db-0c52987ed757",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c6e5d4-189a-49bf-9c59-79462af895db",
        "cursor": {
          "ref": "89178a5d-d203-4d2d-b504-0b2c3d54b954",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "11947064-d2d8-451f-a930-85eb0ec986e4"
        },
        "item": {
          "id": "42c6e5d4-189a-49bf-9c59-79462af895db",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "90d2350a-c6b0-40c8-8186-f2db7cfd7c78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2917fd21-adec-4ec9-b318-055ee2dbc9db",
        "cursor": {
          "ref": "cb7334eb-79f4-4636-9e53-c6c6f2dd91b7",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e364d5e5-1c04-4217-8825-8ebefbeb4036"
        },
        "item": {
          "id": "2917fd21-adec-4ec9-b318-055ee2dbc9db",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "032785b2-7d16-4b42-bb0a-5a124b00d4c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd03d64-b9ae-40ca-9970-24cd2997dc32",
        "cursor": {
          "ref": "333dbf28-c01b-4cb5-ba22-bc54f6706e9e",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6208683d-1a62-4bb3-b116-9882d7688e5a"
        },
        "item": {
          "id": "6dd03d64-b9ae-40ca-9970-24cd2997dc32",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0a91a324-bd0c-4086-b03e-922007eb4408",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ede21b-f928-4f29-80a9-67848ce1ebf6",
        "cursor": {
          "ref": "2533f0b0-11ee-4ec3-ab6c-00d4d0882912",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c821cc30-a396-4a3c-89aa-031641b00238"
        },
        "item": {
          "id": "76ede21b-f928-4f29-80a9-67848ce1ebf6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cffa7082-3995-411b-9d7e-c149c8c3eea4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc20127-c869-4c4c-b571-a8e4f7a38a2f",
        "cursor": {
          "ref": "2c43c17a-2e77-48e7-96ce-1d152342bcdc",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "851d087a-d9d9-4202-9005-a06ae6644546"
        },
        "item": {
          "id": "abc20127-c869-4c4c-b571-a8e4f7a38a2f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "439efc02-bb9e-4549-9e89-5fc3f5192f30",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f45e73-14a6-4201-ae26-8f385913460e",
        "cursor": {
          "ref": "0fdf6da2-93bd-4d08-969e-bd766eeb9921",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f3cd3cf4-f9cc-4dca-99a1-f3ee019e0c38"
        },
        "item": {
          "id": "49f45e73-14a6-4201-ae26-8f385913460e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8926054c-8bc3-43fd-8c61-d11733ba30aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b2a151-d170-442a-a03f-a2ac442dc7fa",
        "cursor": {
          "ref": "611ad850-c456-4010-adad-95b1e7591c56",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bf0e6eb2-6062-40c9-96e0-949f8439cf6d"
        },
        "item": {
          "id": "15b2a151-d170-442a-a03f-a2ac442dc7fa",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "26b15bb2-afac-423d-8c84-0d67c58eb17a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b0f6261-42c3-4ecb-8fa4-9c9ded64bfad",
        "cursor": {
          "ref": "d1f094e0-beb6-4aa3-8132-97d494b725ef",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "eb1f5baf-6bd7-45b2-a268-cd0e0b1e4458"
        },
        "item": {
          "id": "2b0f6261-42c3-4ecb-8fa4-9c9ded64bfad",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d846cc64-e6dc-4d4d-8b11-4a39ac19c10c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9093a8eb-fe66-4694-82f2-2a66b9adc363",
        "cursor": {
          "ref": "2f4d8868-5560-4028-830a-fc958b1ae947",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4e0ccbae-bc41-404d-8a24-25f064f636b2"
        },
        "item": {
          "id": "9093a8eb-fe66-4694-82f2-2a66b9adc363",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "33e9ca62-b7b5-42ac-ab00-fd6a67cec143",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762afc5d-62e6-48cd-91c6-af4cd5b7b9bd",
        "cursor": {
          "ref": "110e481c-754a-4945-a709-f12e1912667f",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c8af4500-3710-41a6-91cc-b279ae9d8bff"
        },
        "item": {
          "id": "762afc5d-62e6-48cd-91c6-af4cd5b7b9bd",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "cf165265-0a10-4013-a576-5f4716d11f08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f003c8b7-2a87-40c6-8717-114cd397b23f",
        "cursor": {
          "ref": "359eabec-65be-4ff6-b82e-94463a3560ee",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3dae72f8-2eb5-484e-a8af-e4554a924ed7"
        },
        "item": {
          "id": "f003c8b7-2a87-40c6-8717-114cd397b23f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ad466c46-bd5e-45c5-bf5a-e5b32cf545b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38c88684-8318-49b0-9193-1f4abb90ec66",
        "cursor": {
          "ref": "230417e5-a4f4-41da-a738-86121da938da",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "704cb531-1f61-4bc9-a5fa-f50efea136cd"
        },
        "item": {
          "id": "38c88684-8318-49b0-9193-1f4abb90ec66",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "34fa684a-7c14-42b2-a097-cd8ab77b96fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd6afc2-5b6a-4578-83f7-2f0dfcbbbfc7",
        "cursor": {
          "ref": "1e8b62b5-6171-474e-8854-4a7ea0a59e1c",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e2379eb0-5f93-4b70-8539-32d55665c297"
        },
        "item": {
          "id": "7cd6afc2-5b6a-4578-83f7-2f0dfcbbbfc7",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9cdea518-5c03-472e-ac10-b8d7cc2ce242",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0fcbe0d-3df2-431e-b8d6-f5b5674dfabd",
        "cursor": {
          "ref": "c55c9c56-fb29-4240-8b33-9513705679cc",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ae26bf96-4444-4585-adb8-f4efb0c44788"
        },
        "item": {
          "id": "c0fcbe0d-3df2-431e-b8d6-f5b5674dfabd",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "4d1a8a7f-f6ca-4f0e-a9c1-d652dec8492e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "8f9f0e39-1699-49a7-b069-88b2ab25b263",
        "cursor": {
          "ref": "21e40c24-fe42-432d-9e9b-bced6be07bd8",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "423192ee-d4bb-41a1-949f-d4a88394483e"
        },
        "item": {
          "id": "8f9f0e39-1699-49a7-b069-88b2ab25b263",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2c7e7414-147e-430f-9163-37df2cb92a98",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "4557775d-9d8d-4ac7-95fa-849281ddf1af",
        "cursor": {
          "ref": "bbb1d20e-2916-463c-b3e5-7f37aa1e8603",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d860f3be-c302-4cec-a2e8-d5a2691536d9"
        },
        "item": {
          "id": "4557775d-9d8d-4ac7-95fa-849281ddf1af",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "33cdeb98-9559-473a-bff5-de25255f5abf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "b5df3450-48d7-4b1f-bf41-b013aa75a465",
        "cursor": {
          "ref": "d334bfbf-e84a-40e1-bb64-79bba521bfb4",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "934f1afe-365a-4206-ac33-27740f083b9f"
        },
        "item": {
          "id": "b5df3450-48d7-4b1f-bf41-b013aa75a465",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "317c0af5-14f8-4a0f-a2f4-663d55d9fb85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5df3450-48d7-4b1f-bf41-b013aa75a465",
        "cursor": {
          "ref": "d334bfbf-e84a-40e1-bb64-79bba521bfb4",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "934f1afe-365a-4206-ac33-27740f083b9f"
        },
        "item": {
          "id": "b5df3450-48d7-4b1f-bf41-b013aa75a465",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "317c0af5-14f8-4a0f-a2f4-663d55d9fb85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e3d8539-4367-45b5-b73b-7ae72b4b15cb",
        "cursor": {
          "ref": "4b2df317-27c8-474b-92ae-ce7afb697df5",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7c8b129f-1f46-47fb-8a4a-44a5a724b088"
        },
        "item": {
          "id": "1e3d8539-4367-45b5-b73b-7ae72b4b15cb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8e7094c6-9309-4d82-862e-ff845f957a55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb580569-61dd-40fd-8a52-bd552801529c",
        "cursor": {
          "ref": "07495392-947c-41ed-a7d8-06626050a74f",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "50c1ef80-1699-4e3b-b6ac-5e561e971e16"
        },
        "item": {
          "id": "eb580569-61dd-40fd-8a52-bd552801529c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d2f8dd89-f2ab-4704-b607-a7bf50f70bdb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}