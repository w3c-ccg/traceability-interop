{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "23b34a44-2fcb-4f2f-8c97-62197f491012",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1e11ef76-e3a9-43e3-ab6c-52705b3d0f84",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "43d5e2cc-6e5f-4852-8871-a3d8d6ff1b2b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ec47cc3e-999a-407b-b7af-4815881d79e3"
                }
              }
            ]
          },
          {
            "id": "07c430a8-59be-4096-a180-abd29ed0e277",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "39b3ef56-921e-4889-ab47-c50a78c8db1e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "22a1a06d-88b3-4675-99d1-5f911a650cb8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ca20e8c5-14ed-40a0-9568-321e15b78ab9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "28508ae1-5cec-4ad7-be60-cce3dc63d97b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d8c260dd-9535-422f-a233-023a9c1dbe5c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2938309a-c6fa-4d6d-989c-210abd2024c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "00fc969b-ea7e-469c-b88f-b2c0f4d82ba3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "62769e0c-d355-4185-bfae-9f0d8fb915d4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "020dfd81-9565-4578-ab9d-e504c4a5d37d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5797390f-84dc-400c-8304-c985e63ceb53",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf13d67d-8137-4447-86ef-deb1f8eb6ee7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6931f232-a30e-437c-9410-601d01ef5710",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8c9af206-9c3d-454c-9b9e-b15b6258ae33"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f237a2c8-90e2-464d-82e8-a1d4b44dc531",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9e5a615e-13d4-4db8-98b4-22a55a875f57"
            }
          }
        ]
      },
      {
        "id": "12f068d9-a1cf-4df8-9921-fd53187676f5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "576b3060-5123-4f8e-b776-65a140b4031a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3f3ec6da-c1b2-4514-8a9f-ce257de0af89",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "536ec28f-d03e-40be-b81b-4f6e025b4adf",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0629c82-1bb7-494a-9022-8060bb68c0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9c264eb-bca1-4f50-a066-28a792a30d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c98ee2a-86bf-497e-8f30-9f51c44b0580",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a992e4-9409-4bd8-838d-b84d9200c5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4174726d-fc20-4883-92aa-f2f010c52ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1655bd4d-3c22-4e8f-ac2d-641e1e1c9693",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c38afe-325e-4c77-b4fb-627bac6d97b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72e1082e-f9f8-4860-91bb-9cfbd58978c5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cdc39649-cb3d-4bcd-bb12-738dc56470e9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9036e7d4-6bf2-439c-915e-973b6a151c43",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "067f2915-6073-446e-b242-269ac6d1a29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51831efb-234a-4717-9c72-da6578901e9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e183d0e9-1ebf-411f-aa14-836785d8131d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4931f3a-b426-421c-81fd-3f6e7143855c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc67b3f-d6b0-4fd1-b1fa-b1fb15fd10af",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "207e42fd-c489-47ef-9f4a-3cdf48df473c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "620d9323-3d1f-47be-b49d-3eeeea46fab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe83de85-62b4-4459-b662-1ddbf4b0d13e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "ae71d450-72d9-466f-bd73-a07bbee8f665"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f22a9c17-7ce1-4cb2-8c17-ec04e0413e38",
            "name": "Positive Testing",
            "item": [
              {
                "id": "269634df-6f7f-43a3-886b-e91dfcd69441",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b914d612-ff3e-443c-b5c6-b8605e7b1b3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "262f397a-1a2b-484b-83cf-c24c509d8f33"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be2610ab-53b0-403a-8e95-60f77c1c81a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "db21bc0d-e0f8-4237-8aef-abcf7a0ee20b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c9d7c257-f1b2-4ac2-a995-606964ce0b05",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d753ceb2-d7de-4367-a715-efe61307b452"
            }
          }
        ]
      },
      {
        "id": "d06c5f1d-01f1-4521-8c44-9b055358b61f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3a3a3de3-1ed4-495b-81ab-1bdb4ebe325d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "edf5996b-4856-47d4-bc6e-7a23b802564c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "469ca432-1b5b-4b65-b3e5-903b1034cd19",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbb217b-016d-47e6-b263-26e0495042ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d7f6ef0-df49-4831-ac80-5f4b125a72dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b46b9b-1d68-4f0f-8477-69636c0966e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7e1a2e2-e31e-4b74-9dcd-733ce0d6a107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68bab7bd-5f74-4b6d-8faf-8b6929b524b2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0c588b-51a6-400f-abba-6c471d16dd6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18b55bf0-c940-46d6-844a-9e96e4b279f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fff0a94-c65c-4867-afb3-bb8ebf06529c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74c37f5a-3021-4fb4-84ee-5280ffc66d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d13b941-39c6-413c-b012-1b0368d4f597",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1cd096-0c9c-4232-af39-b5eb1351dd29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b55914d9-d263-4ac1-9799-4ecc3bda252e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea17d91c-228c-4172-9463-6ba8a34dd1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6874dfe-9507-4914-9ce1-10b6f176fa99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03050bce-bf09-4dd5-9d77-a7d1656e7151",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19c7b8f-be36-4b55-89d4-341a2f86dd51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34155382-3502-4879-adf6-45799e138463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f93a9e-ea17-469f-94e8-3eceaca31657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "559f21a3-e72a-4214-83f8-ac10230e6b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c092803-0804-44fe-b7b3-6ee2fa4c06a0",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7efa197a-5d8b-4b3e-a093-81e2228cafc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb1afcd2-b2a2-4570-a8a3-0e61be654b6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23aaff0c-5363-43ea-bd7e-c86ab102a36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69a465c8-12ef-41c1-b385-60f7aaaaf24f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605859b8-d7e8-42f2-8a6c-00a55ef234f2",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c673b2f-966e-462e-9b7a-af5f62104524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "376144f5-c475-44b3-93bc-a510348ad76b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c93f3e3-4dc8-4b53-9e7f-c80a8cb5f7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7bc1f39-453f-4f3c-90a5-4e1900c6d18d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a404d4c6-0968-44d5-9a69-279fb793ba04",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a2573b-4f4b-46dc-8f5f-0631d2d2c614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aee1b300-6b2b-4471-b3d0-8a096b188fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a722ea-f4bd-4cd9-8698-4132db68d14b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66b120ed-3b73-4093-b2ff-0ea244294574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26e28367-a91c-4b93-a53d-180dc346d75e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f71a19b-9161-42c8-a56d-f41571929716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87f4375f-acaf-4fbb-8c60-ac92d9d3b630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c75a06e-da00-462b-ae2d-07525786e326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f39b6b4b-85dd-43ec-99ca-6d0f9933e518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddcf0d19-8f79-4409-ac43-00adc3181135",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27a59d2-1d32-4fa7-933a-b2b8997d1976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd67e66e-ca17-4fd2-86c0-36c162774659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9e018e-29d0-48c1-95d1-238b9ca7565b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "235ef54c-8a12-4f2f-b401-375782f139d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ac429d-1d53-415e-94d4-eb99905de1d0",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab80d60d-8286-4732-be2d-5b6cb5b2e208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "176dff5e-9861-43ee-b0e0-6e9552c50be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3dab9c-4b61-4535-99b1-96f21960b30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43bfe0a7-83e8-4eb5-985c-772f91cfc860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbdaa9d8-252a-4546-80d3-6ac88b3fd6b5",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d0c813-9656-4594-86f0-959cb8406d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63088592-4fa6-45cb-99df-0d45757ced8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096d169e-7eaa-475e-a303-bf3af007bc0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9016940-db16-409c-842c-92e18b872121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed63b2a4-2553-4fc6-b156-ca7815f70790",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e54697-a794-48ff-8a2a-a2463f8cd851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "248300dc-87b7-4a31-b574-cfc3efd40ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd46f973-5302-4bf3-bb73-0811a442be0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a466b14-f2ad-4645-b924-178fd56eb192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04146f5b-09d8-42ea-8f7c-58931e7b3118",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2aae021-9995-4b8b-b415-2f434b45d896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4c06377-1a7f-4b8a-b294-79aea5c33161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554ee132-07ea-4242-b670-fc6ed52ef513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46a13a59-3b88-4815-ae53-d3de3510b14c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba410ab-8d3d-41e1-8601-b1225a3494e5",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a8fbe6-3518-46cc-a9e5-1d2a13bf81e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c95a72d3-b9f6-47fa-b7f1-2a2e1c9d9c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cdfdad5-af5b-4f6e-a2ae-acd3939b224f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "832d50c7-8152-41e3-af88-4b375c44edab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3638da98-5878-4af9-b919-0970e2986f9f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3c1834-7185-4cc3-903f-03534708b1a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b486209-72f4-40bf-8d7a-71fdfc8a95a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ed7444-e1f7-4688-b0ad-bbaf940375f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b9bb4b7-c096-4cfd-b35e-78acc0c854b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589c2e39-6383-4ee7-827a-eddd5e0a8a87",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9acee459-e0ef-4cfc-8c52-cd892f23ec61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a966eb-e699-4ae9-b05f-43027ef998f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc293e5-f3e2-4045-91db-726b654a7a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63220673-2573-4469-af5a-eae1b87ffcf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4c1e4d-321d-4be3-a420-9c97f8fb0b1d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc89c73-acbe-4ea1-a9f5-b4caf4dba41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24266d85-75e4-412b-8267-8c37a14cc71c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1f55ff-9032-4fb6-9a21-55ba220fd594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab0d3ca8-ee8a-4973-ab32-db66980dd328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b851c1-67d9-405e-9cb9-2fe8c5784e64",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "881d4877-2eb2-44f2-9749-f7d649ca796e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78fe82fe-ded2-492c-9682-5dfd749a6b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7c15b5-b556-438d-945e-1e3b93d1441d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "53aca96e-254f-4389-a714-b66e2e9a7363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060df9cb-3de1-41f6-a067-f9dcc3b46e41",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2e22e5-7494-41e2-b3f3-c6cef7ff5b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d870f4-0a21-4563-8baf-d9d06ba97942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd20751-7d5b-47b9-9352-7226be798b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "412c2f4d-67bf-4a1f-8dc1-9f5734769850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec1b614-f36b-4d0e-a01b-93e6ac29dfba",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6af337-cedb-4e81-a892-1c445d38f9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29afd590-d78e-4881-a513-a01f7b98dcb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f460a9e-33da-4308-9030-dabf1b2addbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf235f7a-61b9-4b0a-8f2e-fc1f9b96554d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17cf6a17-c657-420a-932c-d0d2896e86ec",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd387512-5f3c-4d7e-a75c-e785d98ba378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82b937b2-392c-4b99-b863-46db03468276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6668ffc2-fc31-48f5-8a61-44eb0fd627b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1aa2245f-7cba-4b63-9cdd-fa67a9200278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5211a67-fa82-4e69-b99a-e7194be0f414",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df8c3d95-f72f-441b-95ac-ddf9df648024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1f7d4c2-262c-4497-980c-d1fa2805cd0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3ddb99-912b-4f46-abfa-a9f9a377e6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4feedbd-6960-41b5-ad8a-92d1c565180d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eabcdc67-4266-4add-bae7-6881480e88d8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1adb498-69b8-46f4-952e-eb45e3d30db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35cc897b-2807-4b99-a129-b2a710b3f88c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aebd42b-35d7-4b0b-8cef-7bdbbb4ef328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb47ffe-562d-4f15-bcad-42f6bd33c61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9444c3f6-a5cd-4bd3-8fd9-adc50cb06882",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ccfbf7f-b393-4d63-8719-8e3656f8405a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01bf33c1-b014-4b9d-9620-27f22f212cac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2de2cab-8a02-45ef-a87e-7106c0070a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ca51c2c-3f53-4b7c-93a5-fb22d5215f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa57990-3fdd-4dfb-b83f-51f2848e86e5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba5111e-29c8-4660-b45d-328d21432e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a82f1a0-b097-4a09-b0d9-4fcf23fa0238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f6aec6-fcc2-4180-84cd-8ec9bbfba8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cfa88546-bb10-4f75-bda9-e17e3728a0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc7d638-0e6f-4442-80ce-37c7d81c0662",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03521a4d-f624-4ec5-b5dd-5a70ebe1a256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35d4a3fe-3e3c-4ab1-98ad-0b3fd89787d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99331e1f-3f57-4315-b488-46af77031414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f23f67-d006-4a22-8ff0-1e3cd5568d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cbd10d7-ec7e-420f-a883-e54814918947",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21dfa092-cbb4-4561-a40b-33bb61a12964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0c10a59-1adb-483a-be30-d0d02dceb8ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1eee59-14e6-4581-bdcb-12b8e3361f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4c01cb4-409f-4225-8521-ec89f243036a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f089c69-d79d-4398-ac6d-2f14385c70c1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa7fd13-2470-48c9-9e48-9488fca60997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c827cf11-edd4-4a9c-bdd1-b9420b6da8c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c381f82b-dd4f-4508-b94c-25392a40f088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d96c8a5b-547c-4ee3-bf35-1c9ed3c9239a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2649aaef-82c7-43f8-9403-0b7bb2d31b69",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b431c346-ae4d-4a37-b55c-164ed3224716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7282c05c-dc59-4148-b251-fde62d34492b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ce977f-7044-4a7d-be53-a14522676491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0b3ce31-3dcf-4c18-84c6-916dc87bc24b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4639f0e5-845d-4e7e-bb2a-7245702faba3",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "382385a6-d2e9-483c-bf8e-de8918c9b070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd294987-84af-43b8-bb4c-c1ab2298f814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98a206b-0830-4f7c-8311-8ce2b20aa436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1aabd900-3ac7-4414-9479-9b79c958f9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1669ab1-6d56-41ea-b2ba-0848d58006ed",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17f512b-878d-4606-8be5-d19ebfc27203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93381b60-e763-46a4-acbb-18b0cd7b2a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560bb8cc-b776-4495-95a7-1faf1bdb7c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "87d91c7c-8e61-4972-b570-4f5c9eef422b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d73495-460c-4892-80a8-5ae30106b476",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1ddbe3-8539-49bb-b6f3-8e7d0e61f7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9da8807-c584-449f-b14b-9896e5d32098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6d3d42-efd0-49d2-b409-d5619d0248ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea45730c-43e6-4595-8f96-225bcc2c8e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3fcd80-ada5-4eef-8c05-d7a5238f96f6",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4fb7e55-c0c2-487f-9244-ace679d01b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6a09b66-a729-4583-9156-f6c5e2e8571d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94b2c0e-5a5c-43bd-a258-267b445bcfe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e9746aa-fd92-4267-b2a3-4250b7a8aeb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5373eacd-7535-4217-9a5a-c79443f03d13",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c3e752-c85d-4eae-bf47-22dbec67ceec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "641fe8be-3840-4644-841c-9ba0410a9cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb29289a-cf1b-4279-b963-fb9e22dd2b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a310197-9e50-4db0-b760-6bd2a95f6555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9afcd77-2b58-4ea3-83ee-7cc903306678",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a911025-77bc-4f19-9469-93d087fe5f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0db0d491-f125-4601-ab0d-ed5f917dceb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa126bf-b10d-4360-90f3-4722579d3739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc202e08-61be-4d0f-aebf-6773ad1c0b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8862f7-5ad6-47a1-aabf-90de1e60e9f4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0360fc40-4381-49ac-9fc5-789ad658921c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30182bef-f4ab-4cc2-83b6-f9905dc2f03d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d5620b-250e-499c-92bb-e5365356ef55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "084be8fb-f6f9-4e28-b909-c2d605f73f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bdeef32-d56a-4908-a182-b5c3e4850683",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c28e73-f99f-46a0-abd7-f72fdb572c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9e99145-2b01-4b82-9935-7c27b8778cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60e6864-dc35-4d77-bd53-bbf9facc5d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c8b88736-8189-4513-b752-69acaa766daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b72ea7-6cbb-4461-807c-0613b558d826",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bddd727-f7f7-4167-b683-fe4fe108f5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75d27883-27f8-4c23-96b4-5f458a3a5e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3f628f-bb09-4cb4-b9bd-47672fa92dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb614b2c-c612-4584-bab7-44b080c59bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6011587-d8c9-4984-8385-c19e9363437a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cfd4b14-f4da-4f71-b41d-96a19e5db517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30defb8e-f68a-4de3-b74d-6fa98e62e3a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0c68b0-c47b-4526-b1f4-4c03b0daa0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef7db5b0-c77a-4399-af5d-caa451063640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f5a746a-2a49-4afb-8a2c-52486bd1d654",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ece9978-eb58-4947-bab3-9e8b5cbe8578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf7647b-3280-4479-9ea2-c57ab2c6d8e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2aa09a4-557b-42f9-9fbc-01ba624a27af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc5f41b-fa16-475e-93ca-4fe8836f683f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4e6a65b-de98-4ac7-8f92-814c8dca873b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbff8fe2-c49d-4d29-b701-7a8c39dab03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1421bf1-1050-44de-81d5-70ae90a78919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6cae283-6917-424f-b6b5-86647371fbf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c70660a-79bf-48a3-9c50-398b34990b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176091df-9a4a-4a09-9146-46d0d5a56567",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4662426-a6d5-4a03-a45a-2b1c3edfe972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0126d87-4749-4081-8036-93d400563d95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ba9ec0-a23e-4afb-8561-e07d4c8a4521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b72c216e-09cd-4a87-a36b-e4393c6c4ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23afdbaf-f083-4aa5-8820-e782fe6c55bd",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbea0d8f-ab8c-453e-8537-61ab13963d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad9c140-4e4a-4e1f-a615-3404165809c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70cdd83-9c7f-41c0-8aeb-13c3385374d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f07dd0e3-9973-4e33-bc65-2cbfed880536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1f4bb3-1a52-4086-aaad-e3e2ccb2bb10",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf9fa31-8c99-4c3c-bac9-2f9443b05bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687cc161-d914-44c4-b4a9-9bb5554fc6c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9601e0ab-0546-4fe3-9dda-053e6e57a615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "57e8618e-5334-4211-964c-c461bf3367ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff09720-0762-45ab-a538-401ed35e8fee",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3c77d3-f737-4a20-a79c-f0537f2c7f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d69ca3e9-3830-4f65-91ba-050307344b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ce4556-8179-4cd2-a3d2-5f8c9f5e3ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7dc220b2-4e7a-443b-ba1f-c1818c57eb38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857c8781-62a1-4ffa-8699-059913ed9d59",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3eafbe-3bbb-495f-befd-e503af7d4396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce2b5f8-a667-4cb3-8af2-6fb36126a456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0264ed-bd6d-4fcf-acfe-1737c6d2ca50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "749bae6b-28f1-4e7c-b7c1-965e1b1434a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d86570c-9e99-4941-a9db-8b9285078c72",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84403224-2777-4d21-b112-e8209fdb46e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377c2d33-f452-47f6-b2ef-aace076ad0e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f944d2-6f3f-4068-9bdc-efc8d72bccca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e3e6e34-6016-4ed4-a06b-ceb198e629e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f97441-6d2e-4792-85ce-5b9d4d444e20",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f2b35e-ca74-42f4-a7cb-9d9ece699819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9157130c-b32e-4328-8299-12b759aa8d1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1086f0d0-b12c-462d-9b4d-4893610e3ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f484648-f2d1-45e3-a7aa-1501837d80fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77be9e57-6991-431b-b4ed-508c552b6b6a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a57c89-03fd-4442-b221-efd81b12c1e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "886998ad-8c89-4c6f-9254-641a5f5e7425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be439840-dee8-4bdd-9cca-1ef2e717f1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "322d64d5-3b15-44e8-bdca-4849a280c432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7908d672-e596-4756-9294-8281cec2240e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c7ea0f-718a-4675-8ebd-58eed7f7f05f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "737ac993-07de-474b-8637-86bace368f7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0327c93f-1fd1-48ed-98e9-324a8816e15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df93617d-43bb-4e55-b5a7-9ea3ef26531b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c25ef0-fa95-4eda-9f3a-9c127424714b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e09f4f4-21f2-4107-ad7d-4d94f8ab6b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9134a384-91b8-41f4-9ec6-f99797669a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d582d9a5-8467-4e66-be81-ab5e56262e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "61c9d19f-24aa-4849-8923-72fbbb2490df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d0d67b-b8e0-4595-bdba-6891a9ed5350",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95fd77c9-268c-4a90-a740-a062f69a2610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d88c242a-3be7-463a-87c3-a1c25c1118fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341acd53-4625-4019-920b-5cd55b7225d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6a26c8af-2b94-40e1-86a1-73a0b675a86a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94025359-884a-46d1-97e5-4d50d13785b7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f80f665-ae08-47db-a8e7-1818d46a6cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "666157c0-0a41-4136-aca0-beda85fb10d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b1da14-16f7-4439-ab6a-7d8108a3a7d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6985a569-9562-4389-9e1d-c0fdb73c7e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9876e23-39a9-4c3c-956f-e7fe322044a4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16fa636-3ec2-4f03-bde4-4b62e9282103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e68bec9-8d94-4d72-834c-216b50177545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2c401d-e750-44f1-aef0-c87fac7c4239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b61ea23b-05e1-4130-9a59-4b581e93ce88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678b2130-2033-4454-9178-54ec82ce28e1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96081dfe-f4a9-4117-911c-474729f53aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea2ee07-6e85-423f-8d49-646c19d6e32f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abcf03f0-8bfb-4f32-bd94-a0fd47c7af99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b021ba4e-09c0-4795-b06f-15414d7b7728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950bd50e-af6b-43af-893c-32a74925bc19",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce66c0bf-387e-418e-bbe3-1091e13946c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54b5c5ac-6057-4ac8-b81b-10c578e245d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d83b3d-9f5f-4ba0-bf11-e90bf577b59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "84a2bc03-c8db-44e1-b29d-c895a0ae0842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f6e0d8-2320-4608-a9e3-c8516588b364",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f61d73-2660-4520-9476-caf2533be8f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97da4763-d791-4b26-872a-c8b933e3afda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834880e5-93ad-40bd-bcf8-7a435c76668f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d793a2d-dc07-4906-9a8b-9082939f2869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2274a2a6-4adf-4ee4-b528-a03dc849d9c9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1a040e-0979-4505-adc3-dac127eb60d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f5d9c55-574d-4e89-8061-c3f2d13b992f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6128472e-2633-4aa6-b6e3-0ece51b89c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "cbd1cbf7-d456-495f-af7b-1ab2c985edb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb724ca5-6e60-4614-97c0-a81eb1d075ea",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c03387-ba40-4d53-8bfd-81db0a201cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e7f18f-e1fb-4ac0-80c4-642a9c36b290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef53e319-7162-4628-b28d-83d7c009de52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "486b15d5-8b3d-4bcf-a6b9-34d874226006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baced0b8-fe60-4a44-a50f-cf8cbc50034b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6994df3-3331-41b0-a54b-e5648b1fab4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a7adc1-b669-4466-802e-d781eaac3870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c301251-cd13-40fe-ab95-8eb416164f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "435faa88-9691-480d-a52b-16d38fa686e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a980e4-586a-45d1-a783-d63d1cffb7f0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "780ada88-8c90-4452-8f82-b70b9fa8b226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4290a73f-339c-4217-88a0-be6a2943609d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c5e1cb-3d50-42bc-8cbc-9ddb4d715139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c218a6cf-b0cc-4325-8b6f-86831ae3adb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57f70b9-21de-4075-a0ec-f98b48848f67",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5576d541-1a89-49a9-8c8f-35fe37e26561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2d2c239-c07c-4d3d-818b-cf19f34a21f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece20663-0169-46df-b333-9eec2ebf6f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a1bbe5a-7cba-4a53-b774-35f7be4af0e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3ef3ef-b731-4dbc-afc9-f11df22ab7d6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "688e88ac-13a9-4de4-92c6-73822626362c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50942079-1b47-4130-8e9b-20aa1269ac2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4bf062-8bc1-4f02-bc61-400e7ccc1512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "568079c6-768a-4944-a14f-da791d3d6103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76af466c-5b65-4f42-95e0-f14b69ad8b1d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d419bf6a-d461-482f-bc1a-5f8aa5b6613c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ddc0e5-787d-4d98-bfa1-aef8aa240963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c4e8a1-7f46-41d4-90eb-bbb7b427712a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5f280b5-e001-4c41-9fdc-e9bd3a814c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfbacee5-6c1c-40f7-b691-61be5eafa6b2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c3484a-df57-4413-aacb-6cad40760fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f0c0d06-05db-4008-9f51-6ebae98d3198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61231472-7388-4a36-b8c4-214483d6964c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "52f6c8bb-8c9e-4675-9030-2c4281a13620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fbc64d-8641-42b4-bbd2-61f9bcfc9002",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1872a9c9-a5ad-43a6-8d7e-ba83093bc2ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2d8fa08-8e33-4b92-9df6-bc4c80b4ca6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0b52a6-1f96-4d9f-bb66-aa4cb9bb4012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85346c4c-de49-4748-bbd1-0deb84b054c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6488e9-07fd-4d14-9067-964a7ee0c10c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1915823c-d217-4c4d-b69f-968eaa47d6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b226531f-5bb8-49f2-8d34-330feb35ae23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3ab414-8e7f-4af9-93e7-c2b59a4b3c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39acb10d-b141-4fb8-8932-02d77e241dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8f0715-85c0-4518-a586-510846a01441",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99656ca-307a-4236-b974-92a9b7a6ac67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a81a7b-dee1-478b-8adb-ef9f152f8e06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ac463f-6375-4fc0-870e-ce840a2dcc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6a42caa-d208-4d50-b30a-b11ed713a0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b4c5b9-bbbd-41df-bf48-7d4915e622d7",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8374926-be04-4a2d-bada-3b0efc9ffeb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8b58f6b-8979-46a0-af76-ae0cc4564d9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573451bf-e576-4017-a9a1-fa58c2eef61b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "064208d0-a662-428a-939c-d46e98085f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1defba-4d62-41e0-b5ed-9625e8c3c101",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25fcebf1-b6af-414d-8853-fb65f8b877bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "953fa6c9-ece9-43b0-ade8-6275be40a5ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad769ab-deec-4fce-89d2-b675923b7d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "593a9f97-fb4c-4095-b18c-a581c6a24218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1fd831-dea6-4d03-a707-0567bab45525",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "443aa7cc-5509-4f26-8aae-d8a765a85fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97486a85-eccf-444d-925b-6e9b35703c14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d9e359-124e-4dc8-976a-800aedb7d1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8628f75-451f-44c3-9f8a-7ede7a4ac834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1e8147-5418-4c56-aa1f-1b3a8138b059",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54392a9d-ce32-4954-986a-81641423ea35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4362b1a6-1301-42d3-9c41-18e4239ca68a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6564afc-14a9-40a1-a2a5-43c1ca1959a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4d77fab-4d43-401f-b580-cab468d37ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9a3a8b-3cf4-4a8d-9504-06efc949abd4",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95f32a6-7a77-470a-9386-c38805b91bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc428275-5b08-4eeb-acfd-a17d8f2c855a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a731c5ce-9959-4b1b-aba3-9984c966d147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c77ed78-7da6-45af-b4af-5d7deec44f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f56d2f3-a0f5-49b1-979e-95b7bdef9df3",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72b0a1c-931f-4174-bcb7-d5764092f97b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c8d4673-e190-4dd1-b386-9261e1c283ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec7aadf-23d7-420a-8dfd-38aa01623979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "36c52271-86f9-43d5-a89f-dd7e8d903f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4975b5b2-ae4b-408b-a55b-1ac3f5f757d7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85bc9170-2453-40a3-8357-a9996358760e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afb30783-43d2-44aa-a753-8f47d9af9a70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d25fa8-4e99-4731-9a69-ed8d41ab3068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "293aa99c-ecf4-4145-b1c1-e349918b9d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ea59ec-8ca8-46e8-81ee-7604c6a784d9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e042047-1b5f-4566-b526-5b80c70046d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1075c85f-1343-4d92-b436-a8147955f37e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2659f1ff-9697-4857-9ae4-81217b4f84af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e6055a42-b7d3-46bf-a6c1-cb086077c24b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a73088f-3769-44e5-884c-b7e32a2b18cf",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a5afc9-06e0-48cd-931a-42cf9189f906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed0fcf8-2bdf-48ef-88d9-5fee64f44242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d597b7ea-57bb-4766-ade3-67a29dcec870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6e649fb-a7cc-4d71-9ec3-37e02d8f40b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae25146-ce0e-46b5-a436-58f843926cbc",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d99cb60-4d83-4a42-8128-7b6c6064fd10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bdae6f3-cb84-4af7-9070-2560b6152f0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8e5274-dd98-41b8-9d64-bf43a0813a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "52f68059-98f0-4ca2-950d-8f6c36055500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15039536-fafc-4198-a68c-c996b5e153fa",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66446e6-ad75-4bbd-a390-b863db27f5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc924a2a-0183-4c6f-a9fa-303d35a2cfbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3dbf7a2-7276-460b-8207-d4cac5905179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c0fcb19-cc5e-4676-8328-7cbde15689c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc82c8a-7356-4fce-a5f8-f54a04e00b88",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14dfccb-dd0b-429b-888c-a333a468e9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7828e1d7-786b-41d7-bc67-19e3e02d999b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db28d4f-ec06-4824-8c32-d1b9792df745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "514a0ab5-20da-4001-825d-d5cfabb08644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b4e725-7170-41e9-a305-e907e351abfe",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec578dc-5a2b-4de4-bcb7-34a9e82b8926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "989a2f5f-627a-404b-baa7-41f845549ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de67928-05c1-4e3f-af0b-40ae02c28846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9daed2b-52ac-40a9-948d-7fe451794702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ee159f-3973-4eba-973e-65b1749adf07",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abae4cb-6262-447a-9528-5a6d40eb3720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa246bdc-ce7d-451f-87ec-684c29b01bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e2f0002-9057-4f9c-9383-2ec2e7ea1e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b6e04507-f9ef-4fb4-a473-2dfc9f4ffc18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e546dc-8930-42c9-8389-c30ad90f2c63",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdee3668-fbe8-446b-92af-9ca536210f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ddc30b3-4c2e-4a9a-b255-432de64a278c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e577e0-463a-46f4-8b92-92368757c7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbf38592-f5e4-42e2-be10-e0bc40eec350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed5c539-94ec-4d14-9613-9d8d963da1f0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "587880a8-7156-42bb-b5bf-38c076afd135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed698624-71d7-4689-a5a2-a1a2d0b30f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841170ee-b20b-4f8f-8e5b-8ea598e3b657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0430619c-ddf7-4ee0-8bcd-d9fcd2130763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfaba89-7238-4f68-a0e4-d8ae25063d8c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b040187-e26c-44a2-8393-608f9ebed0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42dcb7eb-fe0e-4c2a-a003-e521ebe0b9ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb395ec8-936f-44e0-9970-197902cc8312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f2ae557-6b19-4b0f-99f6-9c1301ea94fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7b526f-b36e-43b5-a97d-774b2f258c1c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b06517-ef9a-4775-a89c-4552d199d19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e01674ba-a68e-4508-b64a-1a1598ead264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb286e1-a8d7-4ebf-96b7-57ea05ceaa68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "299b0df5-d1e8-4ea5-ac94-fe759c5bd7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f95f3f-6145-4700-bede-250d2501a767",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b77124-05d2-49aa-9558-98c2145ce6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc36803-ff9b-42c5-acc9-3bd40b07a292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2958d311-553c-47d3-9d92-83a5550a3f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3344e45a-a2dc-4a5e-9e73-cc033e7c10e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262b3373-f34a-4102-8199-c48d798468b9",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69dc8576-c1d8-4500-b21a-8558d227080b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72df14f6-6f74-4d9d-a6ca-a90b0ac8f6d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d633408-6342-48f7-a53b-6fb0d15ee7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "73e816fd-c0d8-4c00-9e32-04e14f42bf3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a72930-26a8-4058-94d4-ba9793373466",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e9419c8-8f58-4b73-8d82-b4bfc7227a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26258ddd-8d0f-492f-bc10-7618ab52bf5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9f15df-b688-4b86-b5e4-c4c2761ed37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a9b8e7e-bf3f-41aa-8fd8-a91b5e4fe6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d390e1f-2ece-4ddc-879b-7b035bbdc6cc",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29af5903-841a-478d-8e82-9bcb4ba8c55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "238b9f0e-3df2-4493-b260-77dfad2aaf96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15a2a22-c297-4c54-b8b5-47c6ea178ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "136d1140-ba2b-4596-8e5f-50e4038e482b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ed3a24-d870-49dd-bed3-abe3736d9ca3",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9204d075-58e4-4eac-b534-ce919d3ccdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7a44b15-2b7f-4e61-a874-115ef8c592d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a268a29-9ada-4e27-a677-eafed1495a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "66df0f31-f3de-487d-a10b-dddf90fbbbf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eda7afa-01a6-44a4-844a-dc9fe6c31d78",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea96656-e5f7-460f-b36f-753bb2a967aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f90c4122-c92c-4a3e-8ce7-d70c53855bf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a9d1f1e-6b83-4b42-9553-94331fdd59b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "794ab337-b871-4ac1-ab31-228b5ab1b11b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7107c9-e9cb-4834-b6dc-890a16f2041d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28fe7f07-0deb-4869-92bf-821ec25a0133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f168b1a5-6673-4fa5-bb3e-36b056471249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3dea50f-4d0b-4b90-9640-23feb6459206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "02be16eb-3ffa-4d34-b9be-28684d906b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128c2026-5aba-46c4-901e-817af8acbc73",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f476718-e6e9-443f-87fa-3581379e581e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f665e690-bcd5-4c8f-b207-75e62a4f64ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5357873f-0580-4e56-a549-f715547a7429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d71321b1-56cd-4ee5-9a11-3bd1e21aa26e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0f4f5020-47eb-49c0-ba2f-d8917014e651",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ccff4df2-138e-479d-922e-2cc647424379",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c631a9-cf6d-4117-a699-a120c6040775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "600d1204-1bb9-4ebe-b3a5-bb8a57cd3dfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad8a4fe4-b877-4be2-a3d6-59f2ca504e37",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "db6a94a6-a347-4233-aa95-2c22ccb2e2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ebb287-de40-4345-a710-08791e70c1b4",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dbaf236-686d-4341-95ee-4b4d12fe2853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0fe4034-122a-425c-9230-7ec942d09126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc9fd16-787a-43d2-af8c-3ad1cd8a66cf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "8046066c-3954-4c05-aad3-2849b6f9794c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89ebc566-5e4d-478c-969e-bf84d582514e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbf55881-1443-4b78-a273-855f2ef1f7e9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed455f73-3e65-4583-bb0d-e2916f2d1817",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0391a6c9-e99e-4c63-90aa-4d7b2967f0b7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b8c54dd4-d6df-47e9-bb32-e98cb9a621d2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c3195ec4-9575-44cc-8a96-619d5fb3a4e6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a78f4580-74df-4f5d-8957-1ac0224c7998",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c3b9100f-9033-4852-b2e3-bfb552070fa1"
                }
              }
            ]
          },
          {
            "id": "2ba919a1-2433-4adc-817b-fa7f3e341148",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2d3d0992-870f-4d8b-982f-93f54e08d287",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ad1f2d0-534c-4284-bc8c-51a3c611a97a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0d0f63ea-6b5a-4c6c-84a5-02521bfab5aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1674f483-a45f-41ab-9d75-49573c70b786",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9bd83298-0d79-4d6b-9bb6-5789259fe4a5"
                    }
                  }
                ]
              },
              {
                "id": "67809944-1666-49da-a080-4cc19bd4f604",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b9dd7c4-9d81-432d-85e9-251ee03506df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "20caac3f-d4f0-475e-ab42-4faac5ae6398"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1f7dd5d-b0c4-4933-b2b0-96a94879e6ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2963d889-319c-4b3f-8cab-ecb424b69b97"
                    }
                  }
                ]
              },
              {
                "id": "e7538fb2-f2d5-41b3-b27c-345c9b3ea640",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "21496721-ddba-4eee-894d-02fe88583680",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "730d48f7-335e-4e4e-9d19-7afbf5176fc6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4c2f7f2-e9d7-4877-bac4-d7d72d750498",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "fdcd2ca8-4a20-4fcc-8e45-c83522588362"
                    }
                  }
                ]
              },
              {
                "id": "85252314-6712-4203-86d2-280c6b4ef0df",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db72a3d9-30d7-4690-b54e-91955210d45e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "569fc84e-7124-4943-8b7c-497ca6093750"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "754c0b7b-c39c-40c3-ae5a-da697e849c4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1846f142-6b85-4744-8753-2170c51ef005"
                    }
                  }
                ]
              },
              {
                "id": "322f74f6-8dd2-4253-88e2-d75519ff0df3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff70f7ba-ab67-4535-99c1-d5b7df4d7f20",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3677c060-8c03-4f4f-ae60-401dae13e090"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82644056-52f9-472a-a266-0b182f2319db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a89c020c-fba8-43a8-aed2-6e63034033eb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0ba9a772-fb48-47d5-98cc-b138321ccb22",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "af277dfc-5ee3-46c8-936f-8c975c8f905f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2318272f-916b-4f52-bee9-6adfdc055ddf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "67754e31-5d20-4c45-bacc-8670fbfebd94"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb9841bd-89c6-4386-9ee4-cb8114774e26",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "461d9c16-a9fe-40e5-852f-6cdaff31ec04"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ed3200c-1c36-4b4a-bdaf-15a736dc976d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3cbfff9-3cdf-4ebd-b3e0-8edab9fdc308"
            }
          }
        ]
      },
      {
        "id": "5d0f1b9c-3b95-4d71-ab1f-57348212d65b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "fb71073d-b0ed-48aa-ae03-7f488cec3fc3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d6812146-ca8e-4c02-a609-1f367a695ea4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f6d4c1b8-c007-4809-8a1c-a42850aecebe",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a5b227-8fab-4e9e-b3cd-30c6c9460590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dfca206-8ef8-4b37-8ec4-205dbbc94f82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4ab603-04b0-4d28-b837-8a4040cc1f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "441f5061-b79c-4303-80b0-b9fe1eda4fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37450a0d-5b6b-45f3-91bc-6ddc36e97977",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2695a03-ca02-4b11-a9f5-17b03647870e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d383363-7d89-4eba-bd16-f4c23ac474bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3dc02a-ecae-4da7-81e9-a011bc83f504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cda94bf-aaef-455e-8b1c-e8520dedee2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506aa3b0-7ab5-4a3a-bde0-1e5ae84ddba9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99dc0339-c771-4896-a01f-9bb5f1b39fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a411bc24-28dc-4580-aed1-f6dcff72721a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1ff762-df65-4aa0-9ae8-26e130874a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df775b62-a602-4f35-b4ff-9bffd835d04e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4587af23-d536-44e9-98df-7d7ad0ed3b4f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7af80a-03bf-493b-931b-592b70e217a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98ad9c47-7d50-463f-b157-103f4b8a751b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbe1f41-3ac8-4a7a-8686-1e7ba9f9aa24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0dc48b7-8ed7-4f8c-bbfb-63300a6e37e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dff9bcb-e16c-4a2c-9eaf-6139d716e807",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3bf994-b54a-49f3-9384-e1f6414944ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f70a2a9-c37b-4fc7-a7d1-483ee6180f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00df2a9d-0a11-4460-b053-5f1c1ba72d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98668c5f-c770-4fa8-8ae4-3cfeeb599bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1cbe9f-907f-4762-a012-ee3f2a2d194a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12babe6b-de47-4925-bff5-23ba9258c81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "734c9820-7164-4bf0-893d-1aad9910f016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793a493d-db0d-45d9-ab81-e3ab351458cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b07a4c5-ee3e-4dce-9dff-ac6fa49d45f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8ba2d7-13cb-4689-a811-d69b65fe086f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caec5f40-cafd-4b81-8f3b-9b015a3c2681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a56abacd-54be-45ba-9a2b-98144e3f5e96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d2de9b-975a-4222-bbfe-cbd411f11e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d00a60c-5f36-451c-aa8d-acb2e3f4088c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80d0c8d-6f27-436a-a57a-17d9d8d6480e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35227644-4872-49fb-be3b-1e183f0a09e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92b0afd1-0ca6-4044-96a3-a7069c72fef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cfa2163-8873-47b1-b629-7f948eb11ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a981d09-2669-4d39-a6b9-5328e5b624f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38bc7493-4d25-40b1-9ca7-9d8b3ec7b242",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62881f93-7a98-4287-8a8f-d3c1e4e16745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ccab24d-527a-4245-ae7d-9caa9097d2db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8019d231-7a73-45c6-8243-2c9b329464b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76da27c1-d215-434e-afa1-ee771a4dc859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d320573-fd0d-4548-bb99-2f53333e9653",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98616527-e4b3-490b-8682-fd1bd0e18d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12e00e8f-140e-4b4c-a292-3f999fd886ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4830baa8-2b3d-4af4-8e46-3e63385399f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2904aa22-651b-47a3-a8e4-7cbd04b358ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207e8e84-6721-4b69-9d3f-d44e7f66047f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb25d7f-1a35-4f22-b96e-3c8eeffa9132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dfdccc8-e50c-4205-9182-c7389238c412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d915dbe1-faf5-4d15-9eae-82f1ee628418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "80ac8cee-8772-46ac-8ab1-2a2167168c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9575e08d-5434-44ce-bf9d-8a391f3019ee",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab6d51a-c4bc-412a-8344-a18a325a1ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71cc7944-df39-4f02-be02-c9f3dbbf7777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc9dfca-52b3-4d76-9ac0-9633b5e04006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9d540489-21d3-4a6a-9ff1-8650362f56d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6020434b-8ff1-4457-9a57-48fa4abbfbb9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "606cecc8-94ac-4f04-88b2-8dca0cc00ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d214aa-2ead-4876-8b1a-82dd2026bfd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a49576d-daed-40c6-9c75-1ae34152e2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aecdecd2-44fa-46cb-8a75-53f9efc1aec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2016ae37-1ef7-4faf-9ed6-4862b09016a4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0aece85-195b-463c-9f86-6aaf86c8cd06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adcdfcca-a8b0-43b2-ad73-f058d8fc867d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11296882-31c2-43c3-9c4f-340d39631804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b271e94-1510-42a8-b43d-d4c7c8fde7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed179ea9-84cd-4c53-aa90-cbf56bfbe4ab",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf7a7a1-7d07-4af8-bee0-46e106207684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d04fb7c8-f967-4b02-a663-f688efcc78c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989e4ac5-797d-4eed-8dd2-3a94a410b9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cb0f353-8e99-4a73-a503-10189fddd6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75807180-7451-4d9c-848e-f0d7d5cfedff",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ca75e6-e274-4fde-9853-487b590de43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e48302b-8600-43af-a99f-871ec509483a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f398f26d-41b5-4bfd-b0d5-6c0ec1f783cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "070f0083-1b0e-4ca1-9035-6973fc2a0371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268f0f52-3466-4248-8894-4833235657e0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040d7114-0a22-4969-9232-342ccf51cfdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bffc81f-fe4f-4994-aa23-e54724c0242f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e371ac87-649d-463b-9871-96043bfc3584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "09a80c2f-4819-4a0b-aab7-6558b5cbc7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8166fa2c-7de3-415e-9ba5-f405588aa3e5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a178c1-1020-4888-8001-a055cd497d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edfa4d40-eb5e-4a26-9c1f-52e512d37648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7932acb4-4cd3-443d-92f1-ed3851f03da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "66eb797c-4b55-456a-9c20-2c23ca18d7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d7758f-0fa1-466a-9c78-38888922d42a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9aad09b-37c8-4b2e-bb01-60fca1cca067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38f94254-1068-42ff-9893-c77b3f80ac5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e6b8cd-472c-4392-8b7e-dff428588e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0927d674-cd41-4cf4-a4fc-f9a2bc75f93a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075e0102-2ecc-48d3-894d-f8641d98c7e2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0c8247-07cf-4aef-aad2-34c743a822f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ca9bb35-51a4-44e2-b766-cf9f28fbd924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4337fd5b-2838-4e08-8193-2291184023b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3746b7c-42ff-42ab-95ed-6e74dc90df46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7825df-6b0d-418d-baa9-52f0030683b4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "714e7db5-1b6f-460f-ad09-3e66965809a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3de6255-1d10-485e-a435-4fc91359bc46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccebd06-ff10-4e4a-8610-4fdfd4382fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "887de691-e977-4373-b5f9-4d01267d0395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c24988-5f96-4982-aa72-b75b4b48453b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb209690-da2f-4238-9f2c-c70db762203f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e7800b8-63f9-4774-8128-b10ebb518350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e87ab7f-7a97-4727-953b-f83d333ad55a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1e0aac4-3bef-4d5b-930d-a37e16556196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2bca491-4a33-418e-b05e-552d19e5d684",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8452e7-e1db-431b-8033-a913eeb18a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "254bdecb-1e8f-4a3a-8865-ca90dbda4502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54640a87-c822-42bb-b39c-6a79feb8947b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10b6e059-2e7b-480c-8dbc-45c02dd54ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add13e2d-5b92-4230-8a12-2039d49c19c3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f3f7f3-22c6-4b1c-a54a-a15fc59b01cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daecfe92-69e7-4554-8101-60c45d89696e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5c68f7-ca4f-48ae-a12d-858d5a863ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae8d69fc-1099-4c16-8b04-cf38108c63e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea1cb91-ac95-492f-83cb-51ff726e23e8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bef006a-9e5a-448b-9a8a-4cf222d31c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cdd8e2c-f090-4e2c-b4c6-ebf55d4583a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c307ad18-2d04-434a-9429-e46664bb6936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0efc2494-df01-4187-9923-07774d831ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3fa40b9-2ec6-4ce9-b897-dcafb828fa6f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ba9e1f-0f24-4ed1-b860-79446603ba03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47681b8d-7623-4fbc-ad02-8a2d11ae0c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8adf40-87d9-4dd0-aa5a-b467183a7160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41e3c7e9-b5f8-40aa-9c5f-38b9e3e6c52f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f52236-c6bd-41f7-930c-30ee43ca14ef",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e6d75b-8089-49b5-ae9d-7ec3e21491a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab912bee-1eca-409c-a7bc-cc73016541d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad4dd06f-bf3e-41ba-92cb-656c80001eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be0356d9-2e58-4b2a-a849-362e6d5bad89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ffb9d89-c3bc-453f-bd34-8fcdd680526b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cbfcc79-cd87-4c89-9d55-c4715549d180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5ef0b43-0878-4ed1-9e6b-20f9ded93c94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a638e53-002d-406c-99fd-8d2c73802f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03ed36ba-fdbe-40cf-bca6-10e5b608c8a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b841f8-c3f6-4bff-ba2f-b730110455f3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c1b6ba-caf1-4888-9826-a76a06fa515a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48d13ca2-687f-4808-8bc2-d9e44096b698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d77eb4c-a464-4bd6-814f-d4a6589df0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1782da58-9f8c-41aa-8252-048f9bf7261f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1975e9-f174-4529-a983-851eee915df1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99c544e-edc1-4365-9bf4-8d1f6d9821ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ceec106-8253-4ba4-aa6f-55dd0f88c0f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fca25c5-c0ca-4c51-ad6c-697423b4b0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "553ba80c-fa4e-4a49-a9df-d02be95721c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e314998f-30f8-4e25-b6d7-9499e28aadcf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7baaeaf-c48e-4f10-9900-2ac9f270a0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b63f58d-8639-4e87-8ef1-0d0be20f249f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3d874a-f4f8-4dc0-9135-2db0a6b5eb76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4a3b4e2-504c-401f-943c-a8281440e10a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56bfffd6-e1af-44e8-a686-006d68e19fd2",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fbb7c63-82d5-47ce-a9f7-437bdfb0e2ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf602aa3-3e97-45d8-abf5-3759c19a1695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4467b4e-24c2-45b8-9288-a50276de7b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8277eef-2af1-4dca-b3c7-5248f2143206"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fdf38e3c-9343-4abf-b98b-62d85f876528",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f306282a-cc13-4b3d-8616-756d5869ae1a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaba0b4d-e5a8-4055-8428-13315d9a54af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76504a0c-07c5-4404-9493-b4d505d5d9cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4c637f-baf2-4a3c-abe4-9357195e600a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2e54951-cc8a-459f-93b9-46f8d53ac28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c7f537-eb59-4a94-a7f3-44760b50ca4f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b7f5de-c29c-4a06-87f7-bca6a5f557ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "061d2097-d7e8-4d40-b6ab-fc7f72a4f10c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f821b4-f99c-40a4-ad18-369dcd625a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96a3e39f-48ca-45b3-afbd-404481d135f3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4693f9ba-98a8-420a-9b3e-8a59ab4ab8b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ea67290-757b-4c86-a8da-f4e04366d721"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ce4ecd0-565a-4dc9-b6f2-7154ce6ba148",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54890f2b-915d-43a4-931e-8fe6481c364d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bcc2bb7a-8188-4d31-b004-8577163aec5a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ce297f1f-0007-448e-8f1b-26cb1c3c85aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8a8eec6-771c-4e1b-a8e5-63a24e7ab5dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ed8a63b8-f799-4182-bb1f-da8c5de5e01a"
            }
          }
        ]
      },
      {
        "id": "adfe96f4-8f46-4410-b235-ffc774a436ae",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "de62b194-225c-4317-8fa2-abeb218e0ec5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "68edb206-9c01-474b-93d9-245f12a78794",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fe1e04d1-e0bd-472d-9cb7-955383c48296",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51d17aa-5a17-4fce-a825-b41b70b014e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28149918-2bac-4e05-9b95-dbc7e5accd15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374e928b-9f24-4c6f-a810-773c6d07012e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f274ce9-eae3-4b67-8e63-f6b79ccd76bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f3acab3-75f2-45e2-971b-a46f4694c822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e5e3f5-fcbb-483a-8952-4d4bd2987697",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036280b1-6369-4c84-a24d-b634ab51af0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e8e9dca-b4e3-425a-8e84-dd999596a015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27226bb3-c665-4d22-8e4f-180888d4f63b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e40496d-553d-4a61-a292-15018a10f3c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a17b5a2-0ef3-47f4-809e-6cf58d5cf4d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60394a0a-bea5-46a5-a3ac-7daf4acc3ab1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52c6abc-1a78-40a9-a5d5-5d25e2f3dea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e488d38a-fffc-4513-8b1a-8d26d61f4970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb14c62-518e-4c5e-a7f3-5d262a3e9dcb",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f48b5b5-3c77-47c2-ad46-6b4bc15b4800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69eff6b-da48-4776-b31c-ec724db587c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676de9d9-c97f-4ee3-bc4e-f1658eeb5843",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3363c8-d80e-4eec-a89a-5bc5256cb169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66e630ba-099c-46d5-bed6-b49ab666ba1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6052546-3c9b-4d40-8db7-830cbae399d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f75b05c-9a49-46ec-82c4-e8a61d70e6e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759a7439-996a-4ded-b82f-53f8adba53f7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1aaf7a2-549e-4136-939a-8bf66683c6af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "596ae6fe-f52d-4bc8-8cd0-75e894e3735c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e334146c-9558-459e-9c13-9d61a69be251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "130e67fa-3ac8-47ee-a204-9ae335cfa745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9635a910-dfef-4efd-a88d-cd915c6cd5f3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dace64ec-6d74-4ab9-a4ee-24ed51898829",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1b9966c-e540-494f-b4e6-fa9328014be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19360b3b-4592-4f54-aa03-a57357e3bb60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf9536b3-22f4-464d-8ca8-2fa4b103eef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beab8842-92f3-484a-9f51-0e7c590e73ef",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be06601c-5e5d-42de-bc57-a53678022b62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05bb0e77-f2b2-4e63-8528-fe89ec82bfc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a906bb2-90c1-47aa-9afe-8fc704e21318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c48176b0-2976-49ef-a15e-be5e85bacaaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569984e3-e871-4252-a3a5-0243f6561e88",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3d708d-a347-4558-a181-89da95d672ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eb4e866-f0ff-44ca-a2c9-d0d4870ec0d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42895d27-9a38-4bb2-ade9-e6e3bcfa4e9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b209e88-80a2-46d5-9199-16394cff59a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2761ba5b-ff65-4603-8a60-8960105b75be",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73188763-bca9-4fad-80fd-1519444ec634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f921803-eb1c-4cf8-9bde-ac20d496b40c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e035d3b8-aef6-46e6-a4fb-c3adf0b0eca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d10785f6-333d-469a-8981-a5d31878a07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7002db-1135-42cb-9685-874a1a382d17",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09728597-3723-487f-bf56-b6b70f5f349c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c51c4c3-a227-4eb6-866a-d1143b00b302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d846798-34bc-4f1b-af52-ea72deaf678a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e27348c-3711-4671-9f5d-897ca58e561e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51145b33-e448-414d-9d67-43734c191b82",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3263226-dec1-4499-b03e-127886a6ac11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d043ecdf-5ca9-496e-a28b-a9e9f88f5230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "859f1fdb-55ba-4c85-b1d6-874d849b5400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2232630c-68b7-44d5-86ca-f610c6a9dfdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c97bbf-e2bf-4872-bda3-9f156c45cbdb",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6059bb3-040b-4797-bf95-7956ed118a93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "252f802e-d2a8-4004-be31-fe6c573e6e46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aea0608-5310-4ce0-a53f-9074e8bae91e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "837dbadd-44e1-4a01-86f5-cc384f72b3a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd2b96f9-75b6-4d34-ae0b-da78b61d4889",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99dbaf4-e8c1-47f4-b084-9dac17907723",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36ad9148-1966-4a00-b1a4-265e8a2d9cb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2542caa-9bb9-4ba2-a105-5badf4ed2cbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe1f24d2-7c0e-4707-b74b-4f76518866a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a4957f-1f7e-40ea-8cdd-a814362d48fa",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42a4910-b675-4c44-8f01-6388d1de508a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2038c727-3eda-4177-911f-8f17b7c538f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25fa71a-c014-4c12-ab3f-40fbac618631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10096580-f569-47b0-895e-2e7fd10f267b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e13127-ada5-47e9-a23b-2d73e544465e",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e38a49-5e97-4a32-9812-94b70df9a727",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b28b94-6ad3-4ab0-bfe6-a878b284cb3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37173fdb-96a0-4c96-bb99-b883b2f03f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e94b1255-2535-43b7-aaeb-c7fdd1b890cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311a0746-ec8d-4b34-8052-c0f69a16a838",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e50a5525-e083-4e74-b58d-4f89e1f3b4c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd533f9-34e7-4f47-9806-689e1f9ba803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca9f99f-aaae-4dfd-b654-a264441a5245",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2a816c-857e-4165-9f67-040f0a42592f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9199835e-4a4e-4b10-8c53-d9d032ddbb06",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68be39cb-157a-4925-8e4f-5b7e4b65eca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8faf094b-6741-431b-b857-b215c6257799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9da66c-4748-4904-86f7-04c6174260ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ce1adb4-d98f-4cd7-80c8-964d4417df66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6620c9-6fd9-4f7b-b3b9-0aabb2b16428",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c84b541-d33e-4be8-bdb7-ea21e8279468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cc4a662-7dfc-4cba-a5ab-aa8f93952d18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "947a51c3-b39e-4250-a291-291b880e2a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80dacde9-5cbe-4e97-bee3-aaa53764828f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd52c3ea-595c-4452-b9b0-7546f2e23261",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b48da6-2277-4557-85bb-716aa166d0e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2dcc30-0ce6-478e-80b5-2d063987325c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7069b518-4e96-4055-80e4-950d56df50f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12ea3a9f-c848-49ed-9938-3545642b17d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "208344a8-cc72-4ef1-a72d-24b25fd33a08",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476370b9-beef-4ba0-955d-372c06810925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1709ad67-9e66-407f-b8a1-efa28823aeb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e83844-a4e5-4c76-9b9d-00df8c811b37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363b865e-3afe-4227-803a-f5b4ecb28c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a700e1ef-517b-4158-9de0-7db92ff7d07e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e9ff85-a1d9-429a-8b40-428b6654024c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "106a1b14-9e4d-44b5-8135-35d94be72a77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85c180a-9bfc-4143-b7f3-4672844c69ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3191b795-9273-401c-8c4a-74938ad1bc90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48847879-a276-4401-a16d-de797146355c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d31afc6-ff04-41ab-a455-93873e3d28b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f645abd4-9d24-45a3-8c84-f5515d03ea89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ef13a1-1797-49f9-b873-858f7cec34b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85270b1a-ba01-49eb-809f-3d1bcf4c135c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef5917f6-a1e9-4194-a2ed-061dbfa75f8f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de340c0d-87ec-4c46-b4e1-61b98ee9b102",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00bd3ed1-0685-4ed8-999a-69d3f9bbf866"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ade0554-d9a4-4ca8-8cc8-f5ccec3eb3b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a06b0083-f1f2-45d0-88a6-36d22c1e5a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7b5d2f-ad99-486b-b3ad-8a35285556a2",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa38dd4-8115-4788-ae29-f893260ad346",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62eee21a-0d5f-422b-ba06-08a022b3b302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c942ce-c5d8-491e-a881-617f47c29532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b24b819e-778e-445d-a80a-c52cff52b54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f618a1b-9ce4-411a-bb1b-bd57919b8ae6",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e84044-7e94-4807-86ae-66c371dc4aa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "820979fa-ec69-4f19-bd6b-2aba2a075a7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3384436-b876-4e16-82c6-92b13fc71850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a073274a-d898-494f-b3b2-24580c2ec9d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2dfed51-99dc-4097-8fe3-8e55aeca665d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69838c08-0146-4a34-b508-ca053720b4bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaf533fe-055d-4527-afd8-962254ba7ca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abef332c-35b6-4a24-8f09-99a04e8b4117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f2b38e-102c-4228-a72b-e8b591e2c03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19dc2800-9f4a-4f13-82fb-c278fa0429e9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8490caf-9177-48da-b5da-f9676cdff4c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3e5cde2-d70c-4d78-b0d6-e56c94cae6bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fefecc41-1f25-4188-9d0b-1118295f9a3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55e07b6e-2938-4848-9b2a-d6681f67a66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6600a1f5-68d7-4773-aec5-32ec2334b398",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8f9375-4ea8-40b5-8d2e-439125e296f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8afa3310-dc3f-4bb7-aecf-1f082fd067a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25a2861-3b46-4a69-a20b-e296b0f56a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65c8113a-9085-43e2-ad0d-f72dd5f0ea80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec0fd4b-6271-4fba-be43-ddfd51e8555a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6505e612-2932-4cab-a087-4e2e89080f0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26ef610e-344c-4590-a970-e9efeaca3bdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "927b160b-7813-4d52-adc1-577234bd816b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e84e72f-fbe1-4d60-bf98-ca49b750726f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97194c23-5a4d-4de6-b0f2-ef425433c69b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddcc68c7-836c-419e-982b-9fc67997057c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efc1ac33-5463-45a4-8811-1907f245c07e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac713c7-f619-4cc8-9b2d-10c075636fe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3be37a2d-8444-4f7e-9675-09528080f138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff33a79-9315-49c3-a4d0-b07f80ea39a1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad35c61c-e661-4e40-a6ba-c6ab1b8f487b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f42e592d-976a-4cd0-9893-d46b5d4bfc9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7cbeb2-85ac-4603-af06-519f1dddefc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bed5f13e-df0d-4ea5-a748-6e52148e0d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38afff3-84c0-4b7b-bedb-20d2bff5f7bf",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a356cf3-ccd0-4547-9825-e6b0b4ccaa55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "554e5d01-f2d9-4077-aa34-7c25d7a89e2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "858b981b-9210-4227-9f20-cfc0a11880da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dda0892-f89a-4953-8667-ccbd0d143c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2349dda0-992f-4313-9840-70964afd30b3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc2a165-1852-4e49-a8e9-dfcd4edac333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55aef5f6-a350-4725-93d9-81e50da3db12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea91e900-968d-4069-85d8-8effdd838fe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18ebdcdd-a166-4f96-9d89-9be9e836f45c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049f2fb4-f7b9-4071-bc6b-0a5495697832",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbbfbf27-2522-446d-af47-f7b06d98f487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2181d408-aa3e-4f22-a59a-73d12ffe7494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3958508e-83c2-4c0d-93ec-3f3ae2de4334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d58054a4-3b83-4204-b863-bbf5b83f66d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3f09d2-773e-49d4-bdc3-3378d4f45b01",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ea42f0-2a4f-41ed-8a2c-c7120f8f75b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15eba9c-57de-4889-8211-7115d3f8b742"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2e1e01-fc62-4972-b656-ceb8879bfa60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d50c6719-3976-45b3-a009-16a42428fd49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e902a7-da18-49f6-80ff-5f2020cf5e3c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c276ff-104a-4f0c-9203-3cb1da6ac8bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "257cda3a-1712-483e-9436-484afa3c80b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e47aca-e5d5-4b73-9103-1dda71002f77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e1a8a39-1de4-46ea-80ac-a19c3f3ce1ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff83fc53-d5ee-49b0-8d82-543566184015",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db78ca86-2289-46b5-aac7-dadcf86373a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad006ba-053a-44cf-a432-6008899a7fce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19faaea4-f7f0-42f3-84bd-8062e9a916a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be38c4f-c409-4bf7-b025-268cfd0e5505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c511c4-d4c8-48ff-a9e3-ba83b8a50697",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074686e5-b880-4b30-9163-07747bea3302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f557a09d-e013-4263-99d3-dddea6e11222"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db1fb76-ea9e-4354-88fc-77b92320e181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0085da94-b8d2-4fb5-8f27-3076bb71a5c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c55c24-2c73-4cfe-aa0a-618e145a8afe",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7cc0085-2784-4484-aec8-2990fb5c8381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d95bab-5008-459b-800a-55c5b6013e70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c89e47a-6a8f-4449-9a16-7fe1929b2872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f7a6520-f9f2-4aa1-aa72-5e6993535ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5bb60d-6724-4fd5-9d60-369de9b09b3e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b0d6e20-f951-4d15-83c4-30c973619606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5ab81dd-0cd7-49cd-a6f7-18f39977d823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69821f6a-b8ef-4c54-9a6e-376900e0fcd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21a3173e-1642-440f-bc6e-f48c23e6dd14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0130349d-69e4-4203-9dff-acb8327e0893",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41065b8f-b64f-43a0-84f2-25e6c9071697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25b0bbe9-ba87-475e-b60b-adb80a32fadc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a61b2d0-bcaa-41d2-a6ee-e3b3da827af2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7222690-b515-41a7-b5fd-d590941b8e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16189388-ba54-4c6b-afb1-4e920dfd3ecf",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7dacc1-22c1-4f64-b9b3-6fdb716a4b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca81513-8960-4ae8-b64a-890486fdbcfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2739fa-9b8a-4b31-a1b4-dbe2f01e6c24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d81691b-5252-444e-8e0c-6bdabc0a1eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f1e034-3b5a-4b1b-b709-5572c04bf175",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b66557-d1cd-46d3-977d-af6e9ade5c52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70986fe2-a915-4bf6-8783-8e3db1802804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cbf613f-7cbd-471a-9fbc-26e71c05c259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fca1dc16-84e0-42fb-951c-0d23d5352d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b522752-d6cc-40e5-a8bb-629c324f8698",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e463696-f284-406d-8b80-9ba1c6a7a843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d6567a3-7fc6-4032-8f92-131a997bf496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec3b74f-002d-4e31-a82f-d7d9f14509bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d996f267-2756-48ef-9c7c-942e850bba3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a494a87c-3b21-4493-b9d3-91a14f8d0987",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536096c6-be23-4fde-b980-647d192b5394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f594f26-cf41-4707-9b5a-fe5d38d40390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb6c4ee-82e3-4837-847e-2c2d21b99d6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1589d21c-f6c1-4e84-94a1-7a2be62d10cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5e608b-87d1-4ac2-bdcb-3401ca14bf47",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735873c6-66aa-4a29-8e9f-bde974448e7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7993df0-71a2-4782-9fdb-fbb41ef3ee9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83a5e98-da9d-4c04-87ee-4f36097b28e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2ab0a51-261e-4a14-9d8e-b0b34e655154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4148492d-50d0-422d-84b0-4456702d698f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b82f8d8-1d1c-4d78-8915-ff0d9c983257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6a3e074-44b1-46a2-a88f-ed7a8b2a0e36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5603af02-d7ac-405e-9e76-1c86bbdd3ffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae18b3c5-b6f1-4641-b8d2-a661b3f83876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e251c5-e3b1-41b4-9ed5-7a5d43633e3a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72650d0-82bb-4869-9164-215fd8c79711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9d5e38c-5b1a-4758-b48d-f87cd1854fbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "469ebb7e-1382-42bf-b9de-37b4edb047d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a810cc49-b43d-4bf6-9c3b-12e01bfab8b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77bf4c61-f590-4cda-ab76-65df681bcf97",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6018f807-38cb-434e-961c-fef9c37f8fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88506e64-7b90-4549-bafe-045acc8c6837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b366fd4-2dd6-476f-a147-613402c7f65b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0de2e4c-3b5a-4cac-b4b3-beeb82e30310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b661b7-eb4e-4a3c-9d4b-ebeb8e28bf1c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46cfdb4-58ec-426b-b2a8-d6cb9c1e6207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9432981-51b5-4da6-a431-2ac4e17cdff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48afb2de-cf37-449c-a43d-5176f41776fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d314d52-96f1-439b-b927-13085c3bddd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ece1cb-a0a3-4f5b-af8c-cd872e7cebf0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4b0424-952c-48aa-8148-549bffc1ad56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7663439-34f6-49d8-97b5-b600fdf8961a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4048af5-7364-4414-8134-fcd5cdb5e75b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5209527c-08e1-44e5-a962-4f4e3e158029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b698d9-4d1f-45af-8df3-aebd17d9bfa2",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85222b12-8727-4bf6-8a52-341f3dfb7711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97363852-67d5-46c0-ad9a-676a639dc202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6daa96a-6e40-4412-b144-5625d9dc359d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a12c00c0-fec9-4907-abbe-8db1a0aad444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a96f737-7133-4a76-99ea-fe90cd08f5ca",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555c53cc-de9f-415d-a1d1-3c2fc95d0e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21fa8337-85e3-45cc-93ea-9a743b37db65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7937dd39-0728-480d-80af-7d84902ddd1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8af4874d-b469-4db3-a2a8-6963ee6de7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42cac9ed-0654-442b-8e92-edd674e277a0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a1f698-7c14-41cc-a70c-aaf296aa0f3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f896b06d-3422-4b37-8ee3-ca3838ed6fa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "804f140e-5271-4d74-a959-fee7d7f14105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86b3a1ef-a36d-49d9-9d2c-c7b996d71c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db7e16f-9185-4ddf-aca3-ddc6176315c0",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f6e886-e5c4-47ec-941e-730da8732ed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7026506d-9580-4b2b-bb11-230220f014e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d864533c-e573-4cdf-b62d-6141d65af874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1334615c-ea69-45fe-bb51-3a94bd5dd2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11648de-1f71-42b6-bb96-93122feb410d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a7c08e-4053-47a2-a200-c1e0e523f948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbd68037-99bb-46bf-b833-b945b0c84039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ddf789-0c04-469b-9439-b81f0764d53d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e94af5c-2cbb-4a2f-b073-bd85f91d4c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7247918f-ffef-4cdd-b25e-3afcc071c231",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b12c856-c3e9-4013-829d-b6d2a8f6340d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de85842c-54e1-42cd-9529-e81830696e6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "631883ef-8256-4106-adf6-b16528ccd8a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac8a607-d84a-478e-ad40-81e2396a63e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "408581ce-be4d-4960-825f-ee0244b08aa0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e4cfd9-05e9-4c11-93f7-b2764d37c4c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ace3982-faed-4e73-94ca-383d5d972003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b16e25b-c174-4087-a85e-4cd81bd53738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca889e8c-ab8d-430a-829d-57a36bab987b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a33dd1b-9717-4464-9b48-38b70a0188b5",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c59ebb-f634-4832-b2c8-7c04223370e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0849c8b-3239-444c-8504-4e106d62a16b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a80fface-fa5e-498f-b0d3-0cc375f081f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec289d1f-5ecd-497d-b04b-20beeff063bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fccc035-7034-4c9c-81f5-34c848bce858",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c22dea7-a491-4d71-963b-340ca9cdd9ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffde00d9-c649-4e35-a152-3376f427df75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e18599a-f3f9-4d36-96fb-67cdf3be437e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "480f1388-0b60-4891-b906-835b0bbdbf2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd7cbdc-ce83-4d3b-b223-79fd20eccedd",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92de7a74-ea41-4174-a9d9-b03063f2f5de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c42cf4a-d16e-4fe5-a4fa-e87ee19458cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd18a4b-5352-48e1-b572-10210c1236ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29bf53b0-c443-430b-b1e1-9fb5f1770302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b7fb4a-5662-4522-b04e-1075ee7910d6",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca809ea-e7ac-401e-9168-a1feaf8d18dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24a687e7-f0eb-4654-a5cf-999c3edb5a02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9843d9ef-03fb-4a15-9694-407e77ba82ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9183f90e-2a7c-4403-aa7b-0037c109ff25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ad4680-0899-49fd-a34c-8a11162f1dd2",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085536bc-d2ea-4fb2-89ea-ad04633b7d62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cade1597-7b57-42f0-9541-580770f621cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62391d15-92a6-4405-a2ca-789d9fdda708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d8812c4-f4da-4833-8863-72c186225fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5155933a-852e-4171-adef-7e25437bcc5d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3755ee-b213-400c-9ecb-fce5d4f9207d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6bbdd8e-8a9f-4de0-b8a7-d65210724e68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dfe5d29-0b22-4fa0-9e87-4d3833f1fe98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "678b1160-ef67-4ddb-9ca0-48acfaef27d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76760d28-813b-4242-8a34-12cf2f93d08b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a709554-1a99-417f-9230-661dcec60279",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92d5deb1-ba2f-46db-bc72-39094144ffe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29174cb6-6789-4875-abfe-d90b3232a12b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8be8808a-5b8e-4c6e-9768-fa7c06ec0342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d034a59-6184-4192-8af2-94be00b30e62",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e624ec-8326-4a35-9987-17761bee19fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8eadeb6a-c27e-4334-9494-f7f9b1551de5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce32a8c-baf1-482b-a066-8a30ea38b797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d03502c1-6d95-4e1f-9d4f-5e898f3b672a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecaecc7d-9807-4e82-92f4-eb0bb3457a0e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06cb927b-694d-44ff-978a-c10209cf87e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a734d08-e793-4fb7-996d-3084b93f66fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "157a2dc7-272e-41f8-99ab-fb0cdd246f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd3334d6-0992-49e8-8c4c-159753cc894d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa88a8a-14eb-43af-8aa3-ce67493d2e69",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a69fba-e08a-4247-9b0e-1a0a53cb7dea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70b78f81-deb1-48c7-9e5c-b5a3175684e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1957cf2c-5708-40d9-83fe-a7c40ccd27d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6a2e732-e2d5-4b2f-a4e2-dc88b6ea16f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445d1e03-18cb-40c5-8173-853116c01d4f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21ed2b1-10ba-4bae-9fde-1dc81f69d759",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d945aa0f-e01c-4174-89be-e311d15b82c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dee4b2d-278c-43ca-a757-47031f5040b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e437cf70-2f4c-4a4e-a89f-2063cd68ac56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c9ca2c-cb7a-4b03-b0a1-615ba211166f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0781ba34-5f52-4aef-abb9-577997461779",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17d99600-2d6d-40ef-bb78-9beee0e54d73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ccd990-aa8e-4139-9d02-9ae0d23ef962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94739910-3b8d-40b9-b362-1f1ebc18b210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05cd738-48ed-4811-94ef-83b93b55a2ba",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15aee744-a717-4de3-9559-1220d1cfd582",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13517ff0-67a1-4d4b-9933-669fbd1e3281"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0befed-a46b-43a6-b262-ac025bca4c30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e95e9b-924d-4424-a222-511d854a54d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c79ae8-ba71-4c4e-9810-8a79a2e8103b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fef184f-ba48-45ce-a4f3-d4659d01ca67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21011e37-08ec-433b-bca5-5b7a338b0c5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bd157c-28fe-4ac1-b027-7dcb5ad7fce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f69c2e1-2174-4b27-8864-b43b3f1e7eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67c6b65-15b3-4cd0-bb04-cfd548253bb7",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95eb42a4-0d41-4a40-a435-47df8e103518",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "023bc426-5a88-4526-8f70-9c7d24508d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "309686a3-3080-49d9-b6de-7be6902a383c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f772e9a5-8c28-4886-9ee6-bd2230b28a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acaa59ac-ddd4-4c6e-a471-b46bd1a00332",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb57372-8638-4ee3-a7aa-0fd5e6c224eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebe139d0-1e5b-45a3-8230-40a9cdd62583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3c1e58-7288-4e64-b2e3-102a94b5055f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e1e90f-4ff9-4a54-9a30-78c112a7f372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf11d0e-fa5a-44fb-9b14-45cfaa1c07eb",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f668027e-41c5-44e8-b457-60330b743210",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26977566-5251-41e3-b081-83d8d915dff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "613a2258-b918-4393-8aee-2bd9f0a7e62f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b757f4-d546-4ee2-9181-1ebef18ab2ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31c97d8-9574-4cf1-a0c6-3cd6c66aa546",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3362aca1-6631-4762-9805-e1dbcd2b07fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f568f92e-de35-451f-a1c3-23aa4763c3e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "870919f6-477f-4957-aea2-2449f3234416",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "858f7c34-9004-4470-8158-ec524769240b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de651c58-c5c7-48b4-9b95-c6a7838d055a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e69b041-6bd7-4362-ad3a-8180e3c1ba8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a101de11-933e-4cdc-900b-4a0bdd99ce3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f147fc-6bde-4c29-8db6-1a36dd038b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a8ae2bb-ccd9-408d-b078-ea2e89bf225c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05a6d77-8902-430b-bc71-3f069dca73f0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a07d11-9f19-4cab-9a6e-aeec30d7e50f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42e230ed-2318-43a5-9fb7-cac599d78c6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35689f46-6c34-4375-a095-0cc48fed8780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bb55367-1bc5-4109-af0b-b8e32531af49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba79d83c-1794-4e85-9c7c-6ea584811f05",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299028a2-6d4f-4955-81c7-96203335734b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fd448e8-a967-4059-8f7b-8f349021fd65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16920379-a33a-48ae-9166-1aff1dcfbef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea0252c2-ae85-4f18-a4b2-8572288f62a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef83c869-2fa4-484f-81f2-9d07211dc41d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c146e288-b029-4bd5-bf3b-bce62055d0ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2196ab7-8d65-4c72-9dcc-85cd6bf6c837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3efd41a3-d03a-42e6-87eb-d7c3f1330a13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "940323ed-c920-49e5-a370-d2c342c3ded5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75413ce8-ca6c-400f-a724-2db0ac5112a4",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2bd7f3-9d4d-4fba-988a-3aaa27799751",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0918dc45-e351-44f0-a14a-7d7b1287ee4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa9b7b8-74c4-41bc-b4ed-175693328684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56276c52-d269-419f-be9f-b6a3c5d6bd92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e87e9c6-ad61-4578-b33d-303f819ec6d0",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5cd2cd6-0864-42a0-84e9-c5ff8c4717f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31037e84-4261-4e2c-b9af-e9daadb107c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "743ac35e-3580-45b7-a8df-38dcd964612c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f8913c-4bf5-4edb-96e9-708cf2b0262a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1665276-15ce-4618-921c-ecbd615a257c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df4b2f9-d2b1-4c66-a669-38d0eac6047b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7af24f21-4f75-4750-9405-9add4a0e62b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9d10b9-2ce7-45fa-940f-a7d715d34e71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbda38c5-50e7-4295-9f8f-8fc19df0436b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9b3be5-493d-4e05-8264-561b32bcde65",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b5639b-5e65-4333-ba89-8afde8650b3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec0e0094-b0e2-4c31-84d0-863419b05b6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1710fe-53d3-4442-a8c3-8bebab76017c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "008b503c-7c9b-425c-b4ea-d692fbf24306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0a36f9-b060-4e54-a588-1ff9917da491",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30b6cc3-8c82-492f-82dd-9d6f199f09cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c14e0f13-bd1e-4a47-9343-18325bb0cea5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "604d5cf6-0b78-4a2f-806a-d8bd455f4ab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef5793b6-1df7-4a37-a58a-f15d51a22250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6736aa49-0d2d-433c-9c15-84165a9e02f2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28bbf48-a92e-439a-9d69-cb40bf12c9aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73e8d4df-d2f5-418e-8547-3a3d712d0a82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3042a363-56c3-48b0-ba19-55aa381055a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "522aff0f-0431-449a-8454-4d595e306d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4dfb5e-324e-477d-ac2b-a4e5d63816b5",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889171ef-f339-4dba-8e7b-b16310d4096a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14f9feab-ee7d-4a88-9849-1fe9b7c0c7fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa84a14b-e8b2-4b53-aa59-6165a5331580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "195c64a7-5160-4381-a4e3-642b5f84b006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9309f5-50b7-4abc-864f-b91f3d100d41",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0406a4c-12f2-4ae5-9aa9-89f839866bd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1e2289a-80d6-4765-bec4-c6fcfde78cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c01c1c-8e16-4bd4-99ec-15065ca8c339",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56d690ca-4f7b-462d-9478-c65bbda5cf4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486da19a-762d-4199-9e88-2b35088723ab",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750ebfa6-8251-406c-80f1-93ff42a98cb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5a8a2a2-875c-4942-b6fa-b4c79a40bd64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b98ba1-d591-4f0e-8b7a-cb2de097d09a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13c292a3-c7a1-4980-b6bc-960591a3fc64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763f57cf-25e3-48d0-833d-961e945a9ee1",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc135094-f513-46df-bcb5-f1ed6177427a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b27cb4b9-2308-489c-9e15-dc731e018bc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd72e517-68d8-4377-a7b0-b273ac751c62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "114a0abb-6be0-46b9-9c01-27ecd6ab8eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f1cdd9-1814-4489-82fe-26b57fd2813a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3369deb-02b4-4020-b340-fae75a4d7a19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8699846-a8c2-4074-b638-f4c093319367"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7335c9bc-1b1b-4276-9614-6d534f199d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7640ac9-3fdf-4005-ad60-bf4539f6113b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8769ec43-fa0a-437f-b965-a2fdd8178a1d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97dfdd2e-f399-4ba9-9678-f42a40cfb903",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c913d2b-1353-477e-b882-ce028d9a8e77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a837a30-d092-499f-8f7c-ebe02fc5627e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8af9b993-0e71-4184-942b-3965166e3887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2b7736-77f5-4808-989b-c4b3a111daf5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d97139-5396-405d-a400-aba5e380c717",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5f485e5-771c-4701-aea9-d21931350789"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68acdbec-b492-4aaa-8bd1-2318ed15207b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "138e8b18-a918-4a38-8a43-9778d35c214d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01aceb8-3cd7-476b-9b51-3da19f23e7b0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf63d3cc-1085-4d13-945f-20b424e62885",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c646161d-e01c-4cc7-8a50-e56f3478da8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b617d7-f506-487a-8c45-416700f34fe3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7de773c0-e7c6-438a-881c-ff5f901ada2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f26d3db-0037-4b71-a115-c55704ed9ab0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9faae1-d37e-41cd-9dad-4d2d95cc72c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8819276-7008-4395-af1f-cb0312a923b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d597a891-66d0-43f2-b2d9-741e1cf6fe8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d02d71ab-1f42-41e2-ab30-4d2137d7fa78"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a84524e9-0208-41f1-899f-17271f48d4ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e9e16f7-10a7-4bb9-a4c7-0069536f339b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6272b23-1f4d-4952-bb1e-f65b3523f706",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9b0a0e9c-fe76-41b6-a163-bd885f5f60a6"
                    }
                  }
                ]
              },
              {
                "id": "4000e3f1-d761-413f-850b-81bec64602be",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d902b1e6-507d-405e-9407-daf4f5070e08",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea3ff39-8df7-43a5-ae01-a8f9bc1ed2d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9cdcf829-1f1a-458c-adef-b83099784b8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfac08c-651b-40be-aab4-8e214e377a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80339ea8-724a-4d58-9a99-4b19c65a3ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d4b5aa-6b09-4c36-8d12-e774896ed7a2",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54a370c-c378-4b51-a76e-5bf3fbed7988",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5efe1236-a525-4d5f-b164-9e80ad805c24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad634e7-5436-4b6d-a2a6-6b989e589a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f475040c-333f-43a2-830d-9164a4825777"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3164eb4b-54c6-4722-b178-7b026decfaed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65878864-99ad-4634-82b0-767bf597f00e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "157c83ae-23e7-4000-9fd4-b86400a1fe06",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d2b3c69-916b-43f7-8843-f5a02af58930"
                    }
                  }
                ]
              },
              {
                "id": "5fffbc67-36af-4f73-92f3-15a3fd0cf898",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6a0ede17-6a20-486e-aec3-f9385b306381",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a6ad4c-da99-4a34-b678-02b60c2acafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "615b2f19-c6d2-4dba-962e-5313ba20e10a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c322c7ec-e04c-4f8d-8eb3-67e37a52de6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15bb8351-0abe-4537-baaf-cee58a24490d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0733aa8d-75d1-464b-9523-057f634b6b7d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0508414e-7301-4a06-afd3-b2dd14d98367",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4964b650-0923-4abd-ad37-ba7bdb9aff71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "00f2c553-b193-409a-b137-4f05dd7111b9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8abe0fa0-56df-4638-af1d-0bfe69949812",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94fb4faf-5e7a-43f0-950c-7f299decff0b"
                    }
                  }
                ]
              },
              {
                "id": "000d43bd-e24b-4957-af03-14451645a5dd",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9e2cf9d-62c0-47d4-9c72-1a1f5bee6686",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "15356299-5ee0-428b-a37e-24ceebb11465"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8af5a781-62b6-4972-9602-2e9826685867",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "326b98a0-c2aa-474b-a23f-affd8747db2a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1cf44ef9-3d43-44b3-8ceb-99c90fdf2ff0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0515fe63-cda1-446f-affe-0f61b7a249f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5a63d0a8-472f-42f5-bec6-d72d8dbdfe15",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "112328e0-da7d-4704-bf50-ad12cd16d544"
            }
          }
        ]
      },
      {
        "id": "68bf2d0f-93f2-4831-bc45-f2f656f72af1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "837e4349-f7b0-4f2d-8664-535c6abc248b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d54dfa0f-a5e2-48c0-b8c8-f39104f80b0f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "edbeb75c-20f3-49d8-86bf-8163f42891d1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf5c0ce-2e1a-4ec3-8c3e-89e7c4b3bbce",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "85cb6d02-152c-4ee3-aa66-0adac0a53fd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5b8e38-87ed-4ceb-887f-cf70beffe1b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "533846f6-17ca-4f43-93a8-f8f5afb97b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0003b3-d505-40fe-a227-865a147f6022",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6ecbd9-2ffc-4e39-885a-6fbf939d16d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3864d616-32e8-4ce3-b7ab-f5d379af3ffc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6cb72be-df4b-4168-8dbc-1683d1ba807d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "523fd7a3-4c2a-4d48-ab23-2bb70c860137"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e74589e-46f6-4b75-aaed-689cdc5d2121",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6003be8-ff56-4589-947e-3fe1b9b2cc03"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a63cc143-1a27-427c-b1d0-bcd1f114d673",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "182b3e08-597b-40a2-960d-edd7726f95ec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "16c13c20-c65e-4c1b-9993-831eb04b8b66",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "64c221e9-71e4-418b-a5d4-8a2533d0ee6c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8f79fc4-dcdd-43a5-81af-cbfd92c3320a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91f4c539-9426-43a5-b986-95af093e08fe"
            }
          }
        ]
      },
      {
        "id": "2fe34022-942e-4fba-8ad4-cd3959be3f0d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b768a769-346a-4185-bd70-d4db7316dfa4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "19b72659-5018-4bd6-829b-cb7a5bf120e0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d5c51128-d26f-49ae-a224-c65f7e2351a1",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce14e722-d27f-4cea-8f51-37c4115d69a7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3f159084-b79e-40c7-83a3-7a549f1bed1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb19154-4619-42af-b169-4ed5e5fa2998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4fef1fa3-c16b-4060-b3e1-6eab9dcff35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3ce75a-a2a3-4826-b91d-a4f3dd9ac606",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be165d22-2f04-40fe-a1aa-4677f108ff86",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e1de61aa-78d1-49bf-aac9-5fff0b5e9a15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d83429-4cef-4bde-873d-999505c3931b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb2abbaa-b236-4975-9c88-f02066571d48"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6e8a852-a55e-41d1-ad45-f143da5027d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4789110b-2daf-4b18-b721-9994fca75962"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a21fe26a-74df-459f-8e1f-d0aefbc58454",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c787663-956d-463a-be33-7527f501e109"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9f3d9d46-183b-4f72-9acf-ea350fa8151f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fa3b6052-4e3f-44f8-87ac-2bc28638605a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cab473e7-d164-48ac-8a6b-0c16ce1c8192",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e0f5837b-6e8d-4a40-a109-cef9662e59a7"
            }
          }
        ]
      },
      {
        "id": "143ffc3d-1309-45bf-a562-d9d67f0d9b48",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7a33c482-0092-4587-b619-24706f5f8119",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dd19c081-1825-49d5-883e-6cb46dd050c9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eca97000-5a87-43c1-aa53-c7e9d9ca888c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698064b1-bf9e-4f2b-b4b4-4ce3c9f72184",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "15b90bcc-e32e-4ade-b8ff-f6a26f5af1b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16d8b07-12cb-40fa-898e-6bf3b1839d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "557d1ec0-e448-44b0-b836-690df1d46100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9b9cd7-68e2-4753-b4b0-be1e7f84eef6",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3980dff7-b2dd-41a6-b295-2dac604701ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "35f1965f-fb31-4b25-ae95-53f498b65a9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "521869ca-1ab5-461d-aa0a-e02e896a6342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb57acd5-b5ec-42b3-9211-436033abe782"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d366d8d9-f277-4a61-8c5b-e6df3bd79458",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32f0799c-0020-45bb-87db-e8a7563d5e33"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "75f3672b-febd-44f1-8f99-75a7056f4124",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba716964-b489-468e-94aa-f85d72f23e4d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da03338b-9957-496c-a430-226ce157b708",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3108010c-da82-411c-b4b7-c535a4d9c5da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "86b32d3a-fd7f-49ed-ae7b-c03479b57611",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3c72dcfa-f9b7-4a6d-a4f1-3a924e0e9c39"
            }
          }
        ]
      },
      {
        "id": "723a0b77-d172-446d-8a64-b923fb54a3b6",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba096a29-1ef7-4420-9efc-1b6a34c98e76",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "36a4e691-bc0b-41e7-8496-1b666e7c31fb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "89e772dc-f358-4e96-8c5b-f6397908bcef",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d927dcc8-8489-4a80-a8c4-72b7c0de97a5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79edfdf0-f102-4867-894f-b42e7cbd37ff",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 133.06106870229016,
      "responseMin": 21,
      "responseMax": 1068,
      "responseSd": 176.7475560246591,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1673656640053,
      "completed": 1673656685685
    },
    "executions": [
      {
        "id": "1e11ef76-e3a9-43e3-ab6c-52705b3d0f84",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0cc4f9d4-7ffe-4d59-98d5-6661d4045576",
          "httpRequestId": "92661c13-63d9-421c-8f5d-f3234885ba01"
        },
        "item": {
          "id": "1e11ef76-e3a9-43e3-ab6c-52705b3d0f84",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "49dbd5b4-b214-4b0b-a718-66bcaaa06c67",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 0
        }
      },
      {
        "id": "07c430a8-59be-4096-a180-abd29ed0e277",
        "cursor": {
          "ref": "0649d0d5-15ff-4921-b032-1629020eee97",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3532da30-045f-46ea-9617-706e8cacbed0"
        },
        "item": {
          "id": "07c430a8-59be-4096-a180-abd29ed0e277",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "813bde60-00bd-49e9-92dc-78e104576bae",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "d8c260dd-9535-422f-a233-023a9c1dbe5c",
        "cursor": {
          "ref": "d2a36227-84e9-480e-85a4-02d30345eeb4",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "721a030a-655b-4886-a3c3-bff8978412ff"
        },
        "item": {
          "id": "d8c260dd-9535-422f-a233-023a9c1dbe5c",
          "name": "did_json"
        },
        "response": {
          "id": "10441017-7f11-42a5-97ad-3cc752b8227e",
          "status": "OK",
          "code": 200,
          "responseTime": 185,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536ec28f-d03e-40be-b81b-4f6e025b4adf",
        "cursor": {
          "ref": "b155bcb1-2079-4954-88a2-5b06cd8acbd3",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "eb2aebb4-a908-4916-a573-182db8197679"
        },
        "item": {
          "id": "536ec28f-d03e-40be-b81b-4f6e025b4adf",
          "name": "did:invalid"
        },
        "response": {
          "id": "dea25f23-30a4-42b8-81ef-60062bf8c0ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536ec28f-d03e-40be-b81b-4f6e025b4adf",
        "cursor": {
          "ref": "b155bcb1-2079-4954-88a2-5b06cd8acbd3",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "eb2aebb4-a908-4916-a573-182db8197679"
        },
        "item": {
          "id": "536ec28f-d03e-40be-b81b-4f6e025b4adf",
          "name": "did:invalid"
        },
        "response": {
          "id": "dea25f23-30a4-42b8-81ef-60062bf8c0ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c98ee2a-86bf-497e-8f30-9f51c44b0580",
        "cursor": {
          "ref": "30a511f4-1c26-4643-854b-1d7190f9b689",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e4a719fe-1c34-4bf8-8db2-5e3a4ff5bc86"
        },
        "item": {
          "id": "9c98ee2a-86bf-497e-8f30-9f51c44b0580",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1a5f1fb2-b7c8-424f-913b-622c873b3ce6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 90,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1655bd4d-3c22-4e8f-ac2d-641e1e1c9693",
        "cursor": {
          "ref": "10da731b-6d64-4d9c-8f98-05d2cb0428b3",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "79f23c9f-5910-4bec-979d-73c547ca6b23"
        },
        "item": {
          "id": "1655bd4d-3c22-4e8f-ac2d-641e1e1c9693",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "06d6ce1f-b691-4bd3-9527-85e037559415",
          "status": "Not Found",
          "code": 404,
          "responseTime": 53,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9036e7d4-6bf2-439c-915e-973b6a151c43",
        "cursor": {
          "ref": "6d6e5c0c-aba8-4b47-bbfe-dc5461e39032",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "dbd7eb0c-7bfa-419d-9705-ae12bb364e91"
        },
        "item": {
          "id": "9036e7d4-6bf2-439c-915e-973b6a151c43",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ecd7363e-45d8-4ad8-98fc-f38087ec59c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc67b3f-d6b0-4fd1-b1fa-b1fb15fd10af",
        "cursor": {
          "ref": "3fba35bb-ef6c-4a74-a72c-7a43a110728d",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2bc7f2ba-db51-44a2-9cd6-426bf6618261"
        },
        "item": {
          "id": "5dc67b3f-d6b0-4fd1-b1fa-b1fb15fd10af",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "16c6c4f0-ebd7-4d18-bfa6-fffae8f41c1e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc67b3f-d6b0-4fd1-b1fa-b1fb15fd10af",
        "cursor": {
          "ref": "3fba35bb-ef6c-4a74-a72c-7a43a110728d",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2bc7f2ba-db51-44a2-9cd6-426bf6618261"
        },
        "item": {
          "id": "5dc67b3f-d6b0-4fd1-b1fa-b1fb15fd10af",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "16c6c4f0-ebd7-4d18-bfa6-fffae8f41c1e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269634df-6f7f-43a3-886b-e91dfcd69441",
        "cursor": {
          "ref": "a25c4f7a-fecb-4d91-b9a6-01b8cc5b3a74",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "df929c82-4d02-47b1-b1ef-3ee707c53769"
        },
        "item": {
          "id": "269634df-6f7f-43a3-886b-e91dfcd69441",
          "name": "identifiers"
        },
        "response": {
          "id": "7fca0480-2730-44ee-b372-4e5f998e7e42",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469ca432-1b5b-4b65-b3e5-903b1034cd19",
        "cursor": {
          "ref": "8ec381c2-f503-48ec-8be0-60e9b699b8cc",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5486b6f7-947b-40c3-b00c-a82747d63b10"
        },
        "item": {
          "id": "469ca432-1b5b-4b65-b3e5-903b1034cd19",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "27bd6a83-e5df-4b64-9af2-2ea7c640515b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469ca432-1b5b-4b65-b3e5-903b1034cd19",
        "cursor": {
          "ref": "8ec381c2-f503-48ec-8be0-60e9b699b8cc",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5486b6f7-947b-40c3-b00c-a82747d63b10"
        },
        "item": {
          "id": "469ca432-1b5b-4b65-b3e5-903b1034cd19",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "27bd6a83-e5df-4b64-9af2-2ea7c640515b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68bab7bd-5f74-4b6d-8faf-8b6929b524b2",
        "cursor": {
          "ref": "807a9b07-1f8e-4519-a9d1-a4a65fdfe2df",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "40d21381-bfe8-4699-b6a3-3525e5eecff9"
        },
        "item": {
          "id": "68bab7bd-5f74-4b6d-8faf-8b6929b524b2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6279dd09-05c8-488c-9009-ee9e98e54fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d13b941-39c6-413c-b012-1b0368d4f597",
        "cursor": {
          "ref": "c78ac75b-959d-4ccf-a164-a98f1c703dfe",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "bc5c6ed0-c2b0-416e-a813-a49df574391d"
        },
        "item": {
          "id": "1d13b941-39c6-413c-b012-1b0368d4f597",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "d97f29a6-ac7b-4408-8a66-1c52cb0e9922",
          "status": "Created",
          "code": 201,
          "responseTime": 1057,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "03050bce-bf09-4dd5-9d77-a7d1656e7151",
        "cursor": {
          "ref": "8f8ac224-5988-42e4-8020-2054890d6cf0",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ae7ce2f8-1441-4685-8e78-57609e13129f"
        },
        "item": {
          "id": "03050bce-bf09-4dd5-9d77-a7d1656e7151",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "25825fc0-0d46-45f6-82b4-d1f0fd75178d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c092803-0804-44fe-b7b3-6ee2fa4c06a0",
        "cursor": {
          "ref": "4c9b9b6f-4a54-4904-b9fa-5743203e8970",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "59c669a3-e649-4474-9b86-8c09e7c060b5"
        },
        "item": {
          "id": "5c092803-0804-44fe-b7b3-6ee2fa4c06a0",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "71ed8540-2fd8-4854-a5a2-4ace2a6534db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605859b8-d7e8-42f2-8a6c-00a55ef234f2",
        "cursor": {
          "ref": "70c64081-582a-441d-bd07-4051e0dcc876",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4f990228-7a36-4c2f-bc96-76fe820a0739"
        },
        "item": {
          "id": "605859b8-d7e8-42f2-8a6c-00a55ef234f2",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "cca9fc41-bb3c-4fcd-a377-f3a6de4df706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a404d4c6-0968-44d5-9a69-279fb793ba04",
        "cursor": {
          "ref": "fca05ccc-3819-4bde-8f66-1160c4532b00",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c024eecc-e434-45c7-8380-ed4ef29bdcbc"
        },
        "item": {
          "id": "a404d4c6-0968-44d5-9a69-279fb793ba04",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0a9ebb02-2e63-41b0-9ce9-3802366e0d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e28367-a91c-4b93-a53d-180dc346d75e",
        "cursor": {
          "ref": "bdbd4f1f-a038-4f00-8837-d024757372bf",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "86a10c4b-4d25-4763-ad8a-bd0843ba10fb"
        },
        "item": {
          "id": "26e28367-a91c-4b93-a53d-180dc346d75e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "bf3ad8b0-b0ea-408f-942e-d9915a3f1e75",
          "status": "Created",
          "code": 201,
          "responseTime": 536,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "ddcf0d19-8f79-4409-ac43-00adc3181135",
        "cursor": {
          "ref": "1bfa526a-093e-40f0-b333-5d920a462357",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8ee2e9ad-b6b9-4f85-b392-a9a5d12dd68e"
        },
        "item": {
          "id": "ddcf0d19-8f79-4409-ac43-00adc3181135",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9aa38f28-f9d8-40c6-9df3-59a0fc6d682e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ac429d-1d53-415e-94d4-eb99905de1d0",
        "cursor": {
          "ref": "0db53a08-b4e4-4914-9d29-178b4d7946c8",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b63cac48-4455-47f4-a7ad-db2a5bd78bc2"
        },
        "item": {
          "id": "98ac429d-1d53-415e-94d4-eb99905de1d0",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6612719b-a40b-4242-b9cb-05a6fa90f41e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbdaa9d8-252a-4546-80d3-6ac88b3fd6b5",
        "cursor": {
          "ref": "7895a568-48f3-4b61-831f-f9cc129678f0",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1e1f8d9a-116f-4e4e-a21c-3c632d508836"
        },
        "item": {
          "id": "bbdaa9d8-252a-4546-80d3-6ac88b3fd6b5",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "82a3140c-2043-4475-895b-b578906491fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed63b2a4-2553-4fc6-b156-ca7815f70790",
        "cursor": {
          "ref": "580f1375-1540-46ca-bd3d-b96d9fa5f7ce",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f4b046ea-3d38-427e-b8e7-5fa8f5c913f2"
        },
        "item": {
          "id": "ed63b2a4-2553-4fc6-b156-ca7815f70790",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c815b671-d031-41ca-87b7-a2000da9adf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04146f5b-09d8-42ea-8f7c-58931e7b3118",
        "cursor": {
          "ref": "5de15e14-8f89-4dfb-a27b-b3cbdd400a41",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6122d54f-5357-406a-b3e5-0d942e7af2a3"
        },
        "item": {
          "id": "04146f5b-09d8-42ea-8f7c-58931e7b3118",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a5f06de1-d7af-4ac1-95e8-98083093da3a",
          "status": "Created",
          "code": 201,
          "responseTime": 525,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "3ba410ab-8d3d-41e1-8601-b1225a3494e5",
        "cursor": {
          "ref": "1d858fe1-685e-4090-8b37-5097ec2d218f",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4b35ffb3-b8a4-47bb-b211-dc063d104381"
        },
        "item": {
          "id": "3ba410ab-8d3d-41e1-8601-b1225a3494e5",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "f4ead898-0118-4d90-85cd-b856978c4739",
          "status": "Created",
          "code": 201,
          "responseTime": 1068,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "3638da98-5878-4af9-b919-0970e2986f9f",
        "cursor": {
          "ref": "107f05d0-77b2-4b43-bc02-407e3075b0c8",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "66b3dadd-0835-478c-ae06-9724ca77b60d"
        },
        "item": {
          "id": "3638da98-5878-4af9-b919-0970e2986f9f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b77b1469-4329-43ba-9eac-0c33662bbed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589c2e39-6383-4ee7-827a-eddd5e0a8a87",
        "cursor": {
          "ref": "c2d11987-09b3-4366-9f01-a7bb1eb80a51",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ebbe3990-f1ea-4441-a5d6-290338c334cf"
        },
        "item": {
          "id": "589c2e39-6383-4ee7-827a-eddd5e0a8a87",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ab110a1c-5550-45d3-8a20-e50a41d49163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa4c1e4d-321d-4be3-a420-9c97f8fb0b1d",
        "cursor": {
          "ref": "10603dc6-ad7d-4770-b2a1-d8140e5725c8",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3750a3a1-9ffe-464c-8d75-7c6c79b4ecf4"
        },
        "item": {
          "id": "fa4c1e4d-321d-4be3-a420-9c97f8fb0b1d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d5aa506e-e124-4b4c-965e-3a01e2fd88fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b851c1-67d9-405e-9cb9-2fe8c5784e64",
        "cursor": {
          "ref": "62844d0c-45c2-4446-ab14-34992655c524",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a0d7eb6d-8b89-446f-872f-b7d9da1922c7"
        },
        "item": {
          "id": "57b851c1-67d9-405e-9cb9-2fe8c5784e64",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7a124f42-44fe-4fc7-b7e1-2ba2eb65339d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "060df9cb-3de1-41f6-a067-f9dcc3b46e41",
        "cursor": {
          "ref": "62ebb62b-bb05-4f37-bb4c-c14e9548beec",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "da06dcca-56fc-4ae4-8398-b1d4881c2f5c"
        },
        "item": {
          "id": "060df9cb-3de1-41f6-a067-f9dcc3b46e41",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "35af493a-170e-47f7-8014-36470c1a2f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec1b614-f36b-4d0e-a01b-93e6ac29dfba",
        "cursor": {
          "ref": "82c35bcb-15af-4466-8b00-341a13fc08ed",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "71b7567e-b5dc-441e-a87a-63980a6c7719"
        },
        "item": {
          "id": "8ec1b614-f36b-4d0e-a01b-93e6ac29dfba",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e3e724b7-8b71-419e-a9e1-e96f050d11e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17cf6a17-c657-420a-932c-d0d2896e86ec",
        "cursor": {
          "ref": "d498aa0c-2d12-4b73-8aaf-6b9c97ca4537",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c26513f1-25ca-4813-a767-e25eab1dcb58"
        },
        "item": {
          "id": "17cf6a17-c657-420a-932c-d0d2896e86ec",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "fd142000-c719-4026-89f3-25447445124b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5211a67-fa82-4e69-b99a-e7194be0f414",
        "cursor": {
          "ref": "f33ed02e-4725-4547-a99f-3afd1473f7ab",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "64696cd7-6c40-4c13-b08c-b35ef036085a"
        },
        "item": {
          "id": "e5211a67-fa82-4e69-b99a-e7194be0f414",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ca1f5872-1311-4422-a0b1-c1966d79e04e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eabcdc67-4266-4add-bae7-6881480e88d8",
        "cursor": {
          "ref": "d8cc8ef3-8305-4cfb-8a5a-1586892900e3",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "468aadb8-b161-44d9-9be9-ea6b28599f2f"
        },
        "item": {
          "id": "eabcdc67-4266-4add-bae7-6881480e88d8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "366bf093-287f-4fa2-9382-53550235b1f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9444c3f6-a5cd-4bd3-8fd9-adc50cb06882",
        "cursor": {
          "ref": "505f6f3a-d754-4792-867d-afd347816707",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c0a697c4-25b5-4e9e-8bdf-2fc3ed244200"
        },
        "item": {
          "id": "9444c3f6-a5cd-4bd3-8fd9-adc50cb06882",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c52dcf68-c29c-4dec-8975-e60a7d249cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa57990-3fdd-4dfb-b83f-51f2848e86e5",
        "cursor": {
          "ref": "6fdd7d47-cc26-4400-82ff-788e87eac854",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "368faf81-6760-4e44-a3d6-19482a29b555"
        },
        "item": {
          "id": "caa57990-3fdd-4dfb-b83f-51f2848e86e5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "180fa7d9-24cd-42ff-92a0-dc855066867f",
          "status": "Created",
          "code": 201,
          "responseTime": 754,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "0bc7d638-0e6f-4442-80ce-37c7d81c0662",
        "cursor": {
          "ref": "9be22dfc-1fb9-4ef7-8c46-ac232c685b5a",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "38324bee-817e-42e6-ad60-5baa2b629ad9"
        },
        "item": {
          "id": "0bc7d638-0e6f-4442-80ce-37c7d81c0662",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0c7b088c-354e-49fb-a7dd-9c62bc68ac7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cbd10d7-ec7e-420f-a883-e54814918947",
        "cursor": {
          "ref": "ab4433f3-5a19-46f0-9b28-b12ee669c528",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "110e9006-cc79-4c64-a759-7fe2ea92b437"
        },
        "item": {
          "id": "5cbd10d7-ec7e-420f-a883-e54814918947",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "164239fb-0f34-4eaa-ad93-ce5075db9f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f089c69-d79d-4398-ac6d-2f14385c70c1",
        "cursor": {
          "ref": "8188fdc8-02d0-4e2c-b13f-b635723c0adf",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cb06a87e-976a-4e0a-b83e-507250ca1f76"
        },
        "item": {
          "id": "7f089c69-d79d-4398-ac6d-2f14385c70c1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "95517904-2bf1-4d40-aa34-9a29a41fa5df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2649aaef-82c7-43f8-9403-0b7bb2d31b69",
        "cursor": {
          "ref": "f027f961-5c3d-4671-9e18-87df83590098",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "02ff8a90-0a8d-40cb-8309-5f44d57976a9"
        },
        "item": {
          "id": "2649aaef-82c7-43f8-9403-0b7bb2d31b69",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5430a75c-9943-4e6a-9ca3-b2a776453a37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4639f0e5-845d-4e7e-bb2a-7245702faba3",
        "cursor": {
          "ref": "7c15bf56-9fdb-4952-965b-b45170ae8d8a",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ef4dd497-7eff-4198-8ca3-15f5cacc4cee"
        },
        "item": {
          "id": "4639f0e5-845d-4e7e-bb2a-7245702faba3",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "cd75d1ae-5e01-4976-9804-63569be614db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1669ab1-6d56-41ea-b2ba-0848d58006ed",
        "cursor": {
          "ref": "65486a53-3726-40e5-b5f3-0df6874142be",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "af7f0723-3f93-4c39-b553-0ba8c36f6de1"
        },
        "item": {
          "id": "d1669ab1-6d56-41ea-b2ba-0848d58006ed",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "43ee1a2b-2ff7-46c7-b887-b91fc243a32b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d73495-460c-4892-80a8-5ae30106b476",
        "cursor": {
          "ref": "29d9751d-16a8-4f51-94ca-854aa642870b",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "858c152d-29ee-4d43-b7a0-078b5b921eaf"
        },
        "item": {
          "id": "a9d73495-460c-4892-80a8-5ae30106b476",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a84851b2-328b-4f28-a11c-d59841194596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3fcd80-ada5-4eef-8c05-d7a5238f96f6",
        "cursor": {
          "ref": "feda63c3-a5f4-4fde-b0d2-ba09b339dc42",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c0bc97f8-3794-4501-adc4-83896ce6526f"
        },
        "item": {
          "id": "4e3fcd80-ada5-4eef-8c05-d7a5238f96f6",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "227cdbd0-05de-4027-83ff-cbcd0b83a868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5373eacd-7535-4217-9a5a-c79443f03d13",
        "cursor": {
          "ref": "fd841422-cb9a-4351-9fb1-72ec9d4d1507",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "bc80069b-3aad-4a58-89bf-7cc38662d88b"
        },
        "item": {
          "id": "5373eacd-7535-4217-9a5a-c79443f03d13",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a47ac58b-37b9-4f01-886f-ea327f8f68c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9afcd77-2b58-4ea3-83ee-7cc903306678",
        "cursor": {
          "ref": "706bd7fb-4b1c-4d5b-84b5-d2651ba61018",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3dc071bf-a180-47be-96bc-6d25bd83b2e9"
        },
        "item": {
          "id": "d9afcd77-2b58-4ea3-83ee-7cc903306678",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5dddcfae-469e-4909-a8eb-54a2b9a79131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8862f7-5ad6-47a1-aabf-90de1e60e9f4",
        "cursor": {
          "ref": "13de9601-12ea-4e15-b94b-0e76e33e6a25",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a4371521-33dc-449d-93da-d532d8569703"
        },
        "item": {
          "id": "db8862f7-5ad6-47a1-aabf-90de1e60e9f4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "58774ac2-d3fa-4f95-9469-ac087b4c93b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bdeef32-d56a-4908-a182-b5c3e4850683",
        "cursor": {
          "ref": "e9ce575c-539e-48c8-9eee-efa8da58838d",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "157d2311-df7c-43e2-8222-8eefad8b8c86"
        },
        "item": {
          "id": "5bdeef32-d56a-4908-a182-b5c3e4850683",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1ce50aac-25ed-412e-863b-bb4459d54e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b72ea7-6cbb-4461-807c-0613b558d826",
        "cursor": {
          "ref": "e85bba61-fa25-4217-9aa1-332be555406e",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4e09452e-519b-4411-9040-ce3dd78c2e15"
        },
        "item": {
          "id": "94b72ea7-6cbb-4461-807c-0613b558d826",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3c932138-3365-4a62-8638-0930c0b10cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 383,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a6011587-d8c9-4984-8385-c19e9363437a",
        "cursor": {
          "ref": "3ab1f2a4-6d74-40b4-8efb-9c0327c1a5dd",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3da6a408-272d-4fd2-ba16-8863fe219543"
        },
        "item": {
          "id": "a6011587-d8c9-4984-8385-c19e9363437a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "38d2c85a-b7d1-4210-b902-d05434e036e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5a746a-2a49-4afb-8a2c-52486bd1d654",
        "cursor": {
          "ref": "876dd3d9-1b2c-41fc-92b8-8c55b2478a26",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b5d19e77-fe56-42a2-8dbb-a2f67005e8a8"
        },
        "item": {
          "id": "9f5a746a-2a49-4afb-8a2c-52486bd1d654",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ea9f62db-ce0c-4887-b958-16997a0d0ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4e6a65b-de98-4ac7-8f92-814c8dca873b",
        "cursor": {
          "ref": "4670b7d5-f3b8-4428-b771-fb9e61b4b567",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bcc79794-3255-4d78-b99a-73aee9433a70"
        },
        "item": {
          "id": "a4e6a65b-de98-4ac7-8f92-814c8dca873b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5acaf615-2eec-45fd-a947-d890deb13fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176091df-9a4a-4a09-9146-46d0d5a56567",
        "cursor": {
          "ref": "8e01e66c-637f-4e80-8b3f-1a7d676bb75f",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "50690812-4873-43e1-a53b-713643d84413"
        },
        "item": {
          "id": "176091df-9a4a-4a09-9146-46d0d5a56567",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "55ec2c84-1550-4947-a696-5389a0436c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23afdbaf-f083-4aa5-8820-e782fe6c55bd",
        "cursor": {
          "ref": "d1671b8b-776f-4917-862b-5e0889d8fb11",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "aafb971b-9aae-4635-a4e6-a5f2760afe20"
        },
        "item": {
          "id": "23afdbaf-f083-4aa5-8820-e782fe6c55bd",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b9b312f3-1dc0-44f4-a0be-a6b4be6059a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1f4bb3-1a52-4086-aaad-e3e2ccb2bb10",
        "cursor": {
          "ref": "1b6164a4-412e-4da3-98e0-5de3519c94bc",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3310aa24-cde6-461a-b67b-396f2f9460f6"
        },
        "item": {
          "id": "8e1f4bb3-1a52-4086-aaad-e3e2ccb2bb10",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8e1942b0-ce2a-48f4-bb99-9d562ac97e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff09720-0762-45ab-a538-401ed35e8fee",
        "cursor": {
          "ref": "651d7b8a-0b70-4675-99fa-47dfe3bad183",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ee450cfb-5a9b-46bb-bb2d-8bc59442be7e"
        },
        "item": {
          "id": "5ff09720-0762-45ab-a538-401ed35e8fee",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ad02f0e6-9697-4087-8a2c-d9ea078fc566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 362,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "857c8781-62a1-4ffa-8699-059913ed9d59",
        "cursor": {
          "ref": "bf6b1567-e540-4689-9f7c-d33b36252281",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "187b91cf-ce35-4bf8-991f-532994fee530"
        },
        "item": {
          "id": "857c8781-62a1-4ffa-8699-059913ed9d59",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7dadf2c2-64f5-484c-ba8c-017ecfe8b259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d86570c-9e99-4941-a9db-8b9285078c72",
        "cursor": {
          "ref": "48adf8a8-d54a-46c8-aae1-7697f6ca8d12",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6e454de2-2aa7-47f6-9b78-01df5eeb8e0e"
        },
        "item": {
          "id": "2d86570c-9e99-4941-a9db-8b9285078c72",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9053e639-2890-4a9f-ba9e-168a858d66c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f97441-6d2e-4792-85ce-5b9d4d444e20",
        "cursor": {
          "ref": "86f28591-0b73-4903-b4ad-6e256aed0d70",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8a1d405e-db6e-413e-9d02-38dacea35847"
        },
        "item": {
          "id": "45f97441-6d2e-4792-85ce-5b9d4d444e20",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "60c22f77-7e8e-49d4-859c-4ee21fe8d912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77be9e57-6991-431b-b4ed-508c552b6b6a",
        "cursor": {
          "ref": "0a155119-a8e3-46ea-9975-7389092df0d7",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "38a8edc0-018c-498e-9ec8-c0b2c143f598"
        },
        "item": {
          "id": "77be9e57-6991-431b-b4ed-508c552b6b6a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "25176264-b135-42b5-8a03-8bf704cfb456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7908d672-e596-4756-9294-8281cec2240e",
        "cursor": {
          "ref": "d7dbb69f-b0c4-4b1b-bc2b-3d563a846f9a",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6880d60a-cd33-48e4-a10f-46fb2203fb4a"
        },
        "item": {
          "id": "7908d672-e596-4756-9294-8281cec2240e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b57d9944-003f-46ff-9bbb-08d5e5d9638b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c25ef0-fa95-4eda-9f3a-9c127424714b",
        "cursor": {
          "ref": "b8ae9f7a-964d-4e44-b23d-72cac2492560",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e1eb7b13-f948-498d-acf8-21803ca0ac5f"
        },
        "item": {
          "id": "c0c25ef0-fa95-4eda-9f3a-9c127424714b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f414f678-f6b1-4622-ba2e-fcbb64860a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d0d67b-b8e0-4595-bdba-6891a9ed5350",
        "cursor": {
          "ref": "ab81c34d-0c31-47b9-93e4-694353f69cf9",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5aa68067-d631-415e-bfdf-67dd37539b06"
        },
        "item": {
          "id": "79d0d67b-b8e0-4595-bdba-6891a9ed5350",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7005ad17-f974-484a-a185-79e05acd95eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94025359-884a-46d1-97e5-4d50d13785b7",
        "cursor": {
          "ref": "a82e6880-dac0-43bb-b875-d3c167274512",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0075d51e-43f3-49c6-a133-28cfefb4bd74"
        },
        "item": {
          "id": "94025359-884a-46d1-97e5-4d50d13785b7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "55e2892d-e6cc-4bc5-94b4-2393f00b02db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9876e23-39a9-4c3c-956f-e7fe322044a4",
        "cursor": {
          "ref": "0218d05c-065b-4a07-b564-503a32ddf1c8",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3b342871-7691-46ed-be95-49a755282b39"
        },
        "item": {
          "id": "b9876e23-39a9-4c3c-956f-e7fe322044a4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "61aa654d-fbcf-4e01-9d43-0f7851add6de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678b2130-2033-4454-9178-54ec82ce28e1",
        "cursor": {
          "ref": "aba456ea-e6f8-4d19-87f5-2c1b4968aea1",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7744ce6a-d0bd-45a2-a9b2-e6a4f6b759d9"
        },
        "item": {
          "id": "678b2130-2033-4454-9178-54ec82ce28e1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "890f51ef-f28a-47d1-a4a9-b92ca3e2cd26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950bd50e-af6b-43af-893c-32a74925bc19",
        "cursor": {
          "ref": "222813ca-ee78-48d3-a431-203b012e5e7e",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2cb73e02-5241-47b4-8de6-966f89c0b962"
        },
        "item": {
          "id": "950bd50e-af6b-43af-893c-32a74925bc19",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "67dd401a-434f-4ba1-8e8b-69121a9b5fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f6e0d8-2320-4608-a9e3-c8516588b364",
        "cursor": {
          "ref": "03c78294-835f-4dc9-ac76-e60de38ca91a",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ab2b284d-9455-48bd-a629-ba755a31abaf"
        },
        "item": {
          "id": "75f6e0d8-2320-4608-a9e3-c8516588b364",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2fdc6ede-b794-4d2a-a42d-07bb2478ebcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2274a2a6-4adf-4ee4-b528-a03dc849d9c9",
        "cursor": {
          "ref": "bd3ed99e-da03-4a00-bc2e-264389257e6f",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "11c9b609-1b27-452b-85bb-6058502e1599"
        },
        "item": {
          "id": "2274a2a6-4adf-4ee4-b528-a03dc849d9c9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f9f33cfc-49ab-419d-a650-2b0406c57eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb724ca5-6e60-4614-97c0-a81eb1d075ea",
        "cursor": {
          "ref": "5f15d793-057a-43fd-91cd-7bb5d0990fc0",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "38bb30b3-6907-40d0-a15c-00ce33c9bfbc"
        },
        "item": {
          "id": "fb724ca5-6e60-4614-97c0-a81eb1d075ea",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b44c22bd-48bf-438e-b756-513d1bcd3bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baced0b8-fe60-4a44-a50f-cf8cbc50034b",
        "cursor": {
          "ref": "f20c6ca6-ec7b-43f4-9eb1-5c94569b3953",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2f085480-d3b6-4b36-9cee-295d44178eeb"
        },
        "item": {
          "id": "baced0b8-fe60-4a44-a50f-cf8cbc50034b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d163fc12-f084-471c-87c8-6dd679c6645b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a980e4-586a-45d1-a783-d63d1cffb7f0",
        "cursor": {
          "ref": "a85b622b-1838-44ee-ba8f-a41d1a272b6f",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "02e78559-5c13-4633-acc1-35acf9ad7f18"
        },
        "item": {
          "id": "a6a980e4-586a-45d1-a783-d63d1cffb7f0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "21ccbb6f-9bb9-46bc-bb3b-9da10151bdac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57f70b9-21de-4075-a0ec-f98b48848f67",
        "cursor": {
          "ref": "c55fd482-6101-4cca-9851-80b568f8a10b",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7ad754ff-1508-4e5c-8091-8c0b9e09dbbb"
        },
        "item": {
          "id": "e57f70b9-21de-4075-a0ec-f98b48848f67",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a390030f-b248-4cd9-a592-1a0c81559702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3ef3ef-b731-4dbc-afc9-f11df22ab7d6",
        "cursor": {
          "ref": "6f6d22a0-3a16-44e2-8127-c16694506128",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ee1f667f-24af-432f-903c-7a5471d0e696"
        },
        "item": {
          "id": "ea3ef3ef-b731-4dbc-afc9-f11df22ab7d6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a69ebff4-df49-4c50-9c4e-2f323835827f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76af466c-5b65-4f42-95e0-f14b69ad8b1d",
        "cursor": {
          "ref": "af2bea42-f1ca-454a-b151-25d4569479cf",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0dcbd82b-b51a-41dc-a4f8-d5c9d2105388"
        },
        "item": {
          "id": "76af466c-5b65-4f42-95e0-f14b69ad8b1d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d22f5c0c-9de8-4fd4-a3ec-a94f8b127d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfbacee5-6c1c-40f7-b691-61be5eafa6b2",
        "cursor": {
          "ref": "7f385ec6-9d30-4273-b16e-1a54dcb898c1",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "05d718f1-a61c-469a-99f5-a03070e4013a"
        },
        "item": {
          "id": "bfbacee5-6c1c-40f7-b691-61be5eafa6b2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b824fb0a-e38c-4156-bd8f-e00515004382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fbc64d-8641-42b4-bbd2-61f9bcfc9002",
        "cursor": {
          "ref": "71822053-aad7-4679-a8c1-b7a61b0d4647",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ee825379-bfd1-439d-843d-94bf150f80e7"
        },
        "item": {
          "id": "73fbc64d-8641-42b4-bbd2-61f9bcfc9002",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e890ec03-0368-47ac-b5c5-febc7fdd2938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6488e9-07fd-4d14-9067-964a7ee0c10c",
        "cursor": {
          "ref": "8634bae1-f682-48d8-baaf-e05e2b059062",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c50d4fbf-f617-434b-b1fe-f75a7eafb524"
        },
        "item": {
          "id": "2d6488e9-07fd-4d14-9067-964a7ee0c10c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e501b660-7831-4bd0-ba76-084e4244349c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8f0715-85c0-4518-a586-510846a01441",
        "cursor": {
          "ref": "f315313a-f790-41cd-a6f2-45ab054a4a4d",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "09d71de3-ee9f-435b-b8ef-002cd554f2fe"
        },
        "item": {
          "id": "0c8f0715-85c0-4518-a586-510846a01441",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e38e865a-cba8-4bf8-b69c-0bfc25e41546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b4c5b9-bbbd-41df-bf48-7d4915e622d7",
        "cursor": {
          "ref": "ca80af0d-6c3d-4d86-b77e-6ec8ba4eeb03",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d635c627-38a9-4e22-ae4d-ca2d98991a4f"
        },
        "item": {
          "id": "53b4c5b9-bbbd-41df-bf48-7d4915e622d7",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7addaf8d-bdd6-43b8-a585-6d62add886a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1defba-4d62-41e0-b5ed-9625e8c3c101",
        "cursor": {
          "ref": "cda37e06-6852-4e51-a854-38e939cf7e81",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f985b56d-6f4c-4212-a64e-d55a261bdb96"
        },
        "item": {
          "id": "8d1defba-4d62-41e0-b5ed-9625e8c3c101",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f3ac0db6-f910-4c62-be02-7ec5cb2cb1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc1fd831-dea6-4d03-a707-0567bab45525",
        "cursor": {
          "ref": "5aa63af9-0eb6-4009-8139-ecf8a63653e1",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ab8fc468-def2-403b-9e53-1f39eb14cd21"
        },
        "item": {
          "id": "dc1fd831-dea6-4d03-a707-0567bab45525",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "65f26128-a27a-49ee-b150-767e1737e74a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba1e8147-5418-4c56-aa1f-1b3a8138b059",
        "cursor": {
          "ref": "5f25ce65-6ecb-4f54-b208-03a67627d452",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "36542bde-2048-403b-81fd-87fe4b9a7007"
        },
        "item": {
          "id": "ba1e8147-5418-4c56-aa1f-1b3a8138b059",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e965f5f8-0a0a-438d-9a5b-d0c0de50ccb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9a3a8b-3cf4-4a8d-9504-06efc949abd4",
        "cursor": {
          "ref": "a341b372-26d7-4902-ab32-ff735d1cd8a6",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e5abb1b2-0b08-47df-8c73-fd27438442be"
        },
        "item": {
          "id": "ba9a3a8b-3cf4-4a8d-9504-06efc949abd4",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "1cbc16a6-dba7-4a37-832f-9a9a3d984d08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f56d2f3-a0f5-49b1-979e-95b7bdef9df3",
        "cursor": {
          "ref": "0cd08216-119e-4565-bbc4-c9ba599adc36",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e8c60346-0c8e-4d54-8bb7-fd4b2d573495"
        },
        "item": {
          "id": "5f56d2f3-a0f5-49b1-979e-95b7bdef9df3",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "219eb871-fa40-4d06-b5f2-9b41414e3dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4975b5b2-ae4b-408b-a55b-1ac3f5f757d7",
        "cursor": {
          "ref": "0753221b-53c3-4367-ac1b-b1767780d38c",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b46e2879-ca37-4daf-821c-29b388898c34"
        },
        "item": {
          "id": "4975b5b2-ae4b-408b-a55b-1ac3f5f757d7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "fc3ef023-49fd-4c37-9dab-74b1969cc987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ea59ec-8ca8-46e8-81ee-7604c6a784d9",
        "cursor": {
          "ref": "a1125808-80bb-4c9e-bcca-ce56a5a2b822",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "42a7d96f-ca2f-4501-94c5-50cec72f77aa"
        },
        "item": {
          "id": "44ea59ec-8ca8-46e8-81ee-7604c6a784d9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "75557b4b-4666-4dd9-9169-86fb9d74e37d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 372,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a73088f-3769-44e5-884c-b7e32a2b18cf",
        "cursor": {
          "ref": "539d5ee7-7c91-4001-9cd4-fe5015d7ff52",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "02af51dd-1b69-4b72-aa1c-7b5242379abf"
        },
        "item": {
          "id": "6a73088f-3769-44e5-884c-b7e32a2b18cf",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f0548f63-656f-45a6-9746-135641561760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae25146-ce0e-46b5-a436-58f843926cbc",
        "cursor": {
          "ref": "e04197d0-659f-4090-95e3-88b621826f7a",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "58d6fdf8-6ee0-42c8-b223-1ce46b5c777f"
        },
        "item": {
          "id": "9ae25146-ce0e-46b5-a436-58f843926cbc",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "22bb5a06-ef0c-4952-9a87-da8c8ebcc518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15039536-fafc-4198-a68c-c996b5e153fa",
        "cursor": {
          "ref": "e93b9957-8b3e-42d9-8783-e2ad8d16c494",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "118a9f01-b619-4f93-b194-28b8ca5cd50e"
        },
        "item": {
          "id": "15039536-fafc-4198-a68c-c996b5e153fa",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "44fdaff1-4f57-42a6-b793-658ef0d82361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc82c8a-7356-4fce-a5f8-f54a04e00b88",
        "cursor": {
          "ref": "58cbdcc5-d80c-410b-bbd4-6dcc7279b1c9",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3d1a3899-69d3-4837-b10d-6f13eaa125bc"
        },
        "item": {
          "id": "bbc82c8a-7356-4fce-a5f8-f54a04e00b88",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "bdecb8e3-68a5-480a-89c7-42f6ee35eb46",
          "status": "Created",
          "code": 201,
          "responseTime": 701,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "56b4e725-7170-41e9-a305-e907e351abfe",
        "cursor": {
          "ref": "007b520e-0382-49d2-9a87-9c72b460f034",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7b95b4e2-dc93-4ca5-a377-cd6006ac2bff"
        },
        "item": {
          "id": "56b4e725-7170-41e9-a305-e907e351abfe",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9f88266e-fcb7-4e5b-86e2-a5a03e25f8fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ee159f-3973-4eba-973e-65b1749adf07",
        "cursor": {
          "ref": "59602fab-948f-4399-95f2-6da6012420fa",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "30b4c04e-3f8e-41a6-96ce-4bc395f472a1"
        },
        "item": {
          "id": "54ee159f-3973-4eba-973e-65b1749adf07",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "cb9d76fb-a69c-451d-851f-4a9f637ac99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e546dc-8930-42c9-8389-c30ad90f2c63",
        "cursor": {
          "ref": "83272aad-592f-4056-bbcb-427e3ec6d1e9",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ba84425a-388f-45de-916e-fbfa767c8242"
        },
        "item": {
          "id": "49e546dc-8930-42c9-8389-c30ad90f2c63",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "22dbbb0e-3ab4-473d-b78f-2716f5fe1eb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed5c539-94ec-4d14-9613-9d8d963da1f0",
        "cursor": {
          "ref": "b165c8da-95a5-44a6-8629-9489b901f1f4",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c6f1eca6-2300-4860-ba23-e35e877538b3"
        },
        "item": {
          "id": "eed5c539-94ec-4d14-9613-9d8d963da1f0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2da3ba40-5d39-496b-a8d7-c704383e4bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcfaba89-7238-4f68-a0e4-d8ae25063d8c",
        "cursor": {
          "ref": "be717037-69d7-4eee-a7c1-805f032e81f1",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ce6eb3cb-9737-4dbc-bd89-ee6ae24ba68c"
        },
        "item": {
          "id": "dcfaba89-7238-4f68-a0e4-d8ae25063d8c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "47ab3f1e-eb22-4b78-932c-5c7543de6f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7b526f-b36e-43b5-a97d-774b2f258c1c",
        "cursor": {
          "ref": "187f8b2e-13ee-4fe0-9574-cee3956ca132",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "315b81c0-4ba6-40b0-b3b4-1ec9cc903ac2"
        },
        "item": {
          "id": "6e7b526f-b36e-43b5-a97d-774b2f258c1c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f924c27c-c1f7-4e0a-afc1-cc0c69c93a7b",
          "status": "Created",
          "code": 201,
          "responseTime": 746,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "90f95f3f-6145-4700-bede-250d2501a767",
        "cursor": {
          "ref": "68df37b9-6fc8-472f-9d30-c2a338735802",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d00ef024-4b8e-4e05-9c01-6dbf6e3f40c2"
        },
        "item": {
          "id": "90f95f3f-6145-4700-bede-250d2501a767",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "14347151-263d-4dc4-9176-74bd39de1e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "262b3373-f34a-4102-8199-c48d798468b9",
        "cursor": {
          "ref": "400c2761-9fae-473c-86f1-d6149da22ca8",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "bd21943a-6823-4141-8ba6-f6b2a2cfaf9d"
        },
        "item": {
          "id": "262b3373-f34a-4102-8199-c48d798468b9",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "12950d29-55c7-4ae7-94d5-0e48a9fd5ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a72930-26a8-4058-94d4-ba9793373466",
        "cursor": {
          "ref": "2f4e818b-8db3-4d22-b504-fc42394dea6d",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ffa5b042-add5-4e0a-bf2e-63163393fc08"
        },
        "item": {
          "id": "02a72930-26a8-4058-94d4-ba9793373466",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c5489a10-5b48-4d36-958e-7d6215fb076a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d390e1f-2ece-4ddc-879b-7b035bbdc6cc",
        "cursor": {
          "ref": "0ff2038d-94c5-4186-a17a-f05fe23c91f2",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "22090047-9d6d-491d-b2b1-6eb0730f192f"
        },
        "item": {
          "id": "5d390e1f-2ece-4ddc-879b-7b035bbdc6cc",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "31abf863-a7c4-490e-b9f8-ecce0d98392c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ed3a24-d870-49dd-bed3-abe3736d9ca3",
        "cursor": {
          "ref": "84026efb-d046-4de6-83ec-29cb26b0ed8f",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ace5eae2-4c8d-4fd6-b7c7-3da22435c168"
        },
        "item": {
          "id": "b6ed3a24-d870-49dd-bed3-abe3736d9ca3",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e32a5417-8580-4712-9fe7-d05c729425ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eda7afa-01a6-44a4-844a-dc9fe6c31d78",
        "cursor": {
          "ref": "ca1267da-87f5-4efe-88ef-3d21879d78e5",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e2258762-6b96-4693-b160-f0b557dda455"
        },
        "item": {
          "id": "9eda7afa-01a6-44a4-844a-dc9fe6c31d78",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "21181acf-7a9e-456e-8a02-952a478701a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7107c9-e9cb-4834-b6dc-890a16f2041d",
        "cursor": {
          "ref": "9bb9902b-886e-478c-8b11-1d454fb0cef0",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "184b6423-5bf9-4f61-bdcc-a650aa954d5f"
        },
        "item": {
          "id": "2f7107c9-e9cb-4834-b6dc-890a16f2041d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c5556680-5812-4013-a1df-eb355b76245b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128c2026-5aba-46c4-901e-817af8acbc73",
        "cursor": {
          "ref": "1d8284e8-0d80-456f-8e0d-c407afb41ae5",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "460b408b-edc7-4240-8496-d6b90cfe151b"
        },
        "item": {
          "id": "128c2026-5aba-46c4-901e-817af8acbc73",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8bd81062-80aa-4ed4-a6bc-44f72086feaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccff4df2-138e-479d-922e-2cc647424379",
        "cursor": {
          "ref": "5362ce53-a12d-43d6-b082-1a90bab374fc",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c3c7e44a-d42c-40a2-a1fc-fa64ee3f5a05"
        },
        "item": {
          "id": "ccff4df2-138e-479d-922e-2cc647424379",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f108b673-d5fc-4b33-be34-66763ac6f9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "72ebb287-de40-4345-a710-08791e70c1b4",
        "cursor": {
          "ref": "d5257cfb-60ea-40df-b38d-50080ed78019",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f34915a4-0b2e-45db-84d7-794168c113db"
        },
        "item": {
          "id": "72ebb287-de40-4345-a710-08791e70c1b4",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "eb2604f6-16c2-45b0-90f2-f30aeb022781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "2d3d0992-870f-4d8b-982f-93f54e08d287",
        "cursor": {
          "ref": "9cd89660-d396-484a-8f6a-cb97b4e9cc4a",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "aa332b5d-05de-4583-b2e6-e052649b9eb9"
        },
        "item": {
          "id": "2d3d0992-870f-4d8b-982f-93f54e08d287",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4a4a5742-6ebf-480f-a22f-d1f8d50346cc",
          "status": "Created",
          "code": 201,
          "responseTime": 707,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "67809944-1666-49da-a080-4cc19bd4f604",
        "cursor": {
          "ref": "939d4b81-82e8-41cb-b44b-0b2e1a1ea1a0",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "acbcbdd5-1ee4-457e-9d0d-a446be6cc63c"
        },
        "item": {
          "id": "67809944-1666-49da-a080-4cc19bd4f604",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1835e244-144a-4225-b1c5-944b129c3279",
          "status": "Created",
          "code": 201,
          "responseTime": 677,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7538fb2-f2d5-41b3-b27c-345c9b3ea640",
        "cursor": {
          "ref": "109c9b9e-6387-4338-ab81-1e8348595a68",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f4805678-3ada-4333-a357-749f6741c111"
        },
        "item": {
          "id": "e7538fb2-f2d5-41b3-b27c-345c9b3ea640",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "13b64e3f-0a37-4bb1-b7f4-c411505af8ba",
          "status": "Created",
          "code": 201,
          "responseTime": 718,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "85252314-6712-4203-86d2-280c6b4ef0df",
        "cursor": {
          "ref": "16a57a4c-56c6-4682-830b-e99fcaacc65d",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "27c2a413-71f7-48aa-9969-76599fc09442"
        },
        "item": {
          "id": "85252314-6712-4203-86d2-280c6b4ef0df",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7df9d1a3-1f51-45ff-b5e0-6df7b23d241e",
          "status": "Created",
          "code": 201,
          "responseTime": 683,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "322f74f6-8dd2-4253-88e2-d75519ff0df3",
        "cursor": {
          "ref": "ef16d314-f109-4c7f-861b-52b8d51ce197",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "dea11386-922a-48ea-8b02-74ce0f6779fc"
        },
        "item": {
          "id": "322f74f6-8dd2-4253-88e2-d75519ff0df3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "07bae566-7f28-4f18-93f6-7bbd570f023b",
          "status": "Created",
          "code": 201,
          "responseTime": 694,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d4c1b8-c007-4809-8a1c-a42850aecebe",
        "cursor": {
          "ref": "6e14b22c-8328-4514-b24d-aff812236bd6",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2b7e966e-5f90-489e-b33a-cc9794d776fb"
        },
        "item": {
          "id": "f6d4c1b8-c007-4809-8a1c-a42850aecebe",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ce081db6-90d7-450e-b69a-d40214ed10a4",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "f6d4c1b8-c007-4809-8a1c-a42850aecebe",
        "cursor": {
          "ref": "6e14b22c-8328-4514-b24d-aff812236bd6",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2b7e966e-5f90-489e-b33a-cc9794d776fb"
        },
        "item": {
          "id": "f6d4c1b8-c007-4809-8a1c-a42850aecebe",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ce081db6-90d7-450e-b69a-d40214ed10a4",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "37450a0d-5b6b-45f3-91bc-6ddc36e97977",
        "cursor": {
          "ref": "a654eda1-8e03-4df0-bf79-f7b45ad8d372",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9c0a7f01-c376-4422-a371-d9f112495d74"
        },
        "item": {
          "id": "37450a0d-5b6b-45f3-91bc-6ddc36e97977",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "381d9afe-e3b1-40e5-b39d-9eec03bbfc30",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "506aa3b0-7ab5-4a3a-bde0-1e5ae84ddba9",
        "cursor": {
          "ref": "795251ae-34d2-43f9-93e5-ca6413763513",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "24aa8d65-893f-421c-b6ee-2e223786dc90"
        },
        "item": {
          "id": "506aa3b0-7ab5-4a3a-bde0-1e5ae84ddba9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a531f807-4237-44cc-af4f-43ffb1d8c110",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "4587af23-d536-44e9-98df-7d7ad0ed3b4f",
        "cursor": {
          "ref": "a5fdea77-6cb5-4d2a-aba5-80aed843f8f0",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "20aebb27-fc6c-4183-aa75-07bc3a49830c"
        },
        "item": {
          "id": "4587af23-d536-44e9-98df-7d7ad0ed3b4f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "04118ea9-f1e5-4e45-a73f-bb075d128c0b",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "9dff9bcb-e16c-4a2c-9eaf-6139d716e807",
        "cursor": {
          "ref": "31c7d6a1-5cc5-411a-9a4f-bc441e59ecba",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a4dc3255-ed54-4bc4-a713-0075c1a58f01"
        },
        "item": {
          "id": "9dff9bcb-e16c-4a2c-9eaf-6139d716e807",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b4b0a9c4-e2ff-4ba0-8621-5f8f58421d6e",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "3a1cbe9f-907f-4762-a012-ee3f2a2d194a",
        "cursor": {
          "ref": "10be9fa0-af17-4152-99dd-963a13bae6c3",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "cce37795-251f-4fe5-ae9d-3b281039ecae"
        },
        "item": {
          "id": "3a1cbe9f-907f-4762-a012-ee3f2a2d194a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "55c8b48f-431e-4a65-b477-487962f672eb",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "aa8ba2d7-13cb-4689-a811-d69b65fe086f",
        "cursor": {
          "ref": "776d42e6-7d3a-472e-9beb-118c64f07607",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7bdd56cd-386a-419c-9706-fab080b0c6f7"
        },
        "item": {
          "id": "aa8ba2d7-13cb-4689-a811-d69b65fe086f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "81ecb15f-e6ab-4cb9-8a62-935e84ef8c9e",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "a80d0c8d-6f27-436a-a57a-17d9d8d6480e",
        "cursor": {
          "ref": "dc0f46ac-0037-4990-b3ca-9bf662c9cf2d",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ba52f11d-246a-4ff4-bba9-b01bce7a2646"
        },
        "item": {
          "id": "a80d0c8d-6f27-436a-a57a-17d9d8d6480e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d7741aa1-bf6f-452b-9cb7-d11e80a5b343",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "38bc7493-4d25-40b1-9ca7-9d8b3ec7b242",
        "cursor": {
          "ref": "91779086-bcb9-4b1f-a501-90949d9a3ca6",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d69d379d-2fe5-4259-be1e-61c6cbb8ef37"
        },
        "item": {
          "id": "38bc7493-4d25-40b1-9ca7-9d8b3ec7b242",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "64078217-6e85-4ec8-a58c-0749f4065cc8",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "1d320573-fd0d-4548-bb99-2f53333e9653",
        "cursor": {
          "ref": "c0dfc996-2af7-43b2-8eee-e085b275535a",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ab7b0c67-2d34-4299-867c-22710a9c5e5b"
        },
        "item": {
          "id": "1d320573-fd0d-4548-bb99-2f53333e9653",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ed0c4062-6b73-4ee3-ad1c-470daf862b83",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "207e8e84-6721-4b69-9d3f-d44e7f66047f",
        "cursor": {
          "ref": "f65b00ac-1453-4aa5-a6ee-161dc7508f37",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9e646076-5501-4830-82b9-8388cbbdbb45"
        },
        "item": {
          "id": "207e8e84-6721-4b69-9d3f-d44e7f66047f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b8889ab9-2c7c-46d5-a12f-ace78b507c9a",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "9575e08d-5434-44ce-bf9d-8a391f3019ee",
        "cursor": {
          "ref": "b265efc9-56f3-4697-bb8f-22ef49e3f3aa",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1ba11740-2735-4b5d-a741-7d03eabf2652"
        },
        "item": {
          "id": "9575e08d-5434-44ce-bf9d-8a391f3019ee",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "32ea787c-de71-4faf-b06d-7895f32215b5",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "6020434b-8ff1-4457-9a57-48fa4abbfbb9",
        "cursor": {
          "ref": "23944b1d-0b5a-40da-ab19-8833d854323d",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fb251ed4-2602-4cf0-93e8-e078243c5426"
        },
        "item": {
          "id": "6020434b-8ff1-4457-9a57-48fa4abbfbb9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b273b8f7-bf1d-490a-855c-deb0fc1ad21c",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "2016ae37-1ef7-4faf-9ed6-4862b09016a4",
        "cursor": {
          "ref": "bf52f683-a3c2-498e-a828-f20a7a981acd",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d3489da2-6906-4ce6-b272-6f0c4d857d2b"
        },
        "item": {
          "id": "2016ae37-1ef7-4faf-9ed6-4862b09016a4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7bbe2359-a4f1-480d-abaa-ecf3c73647b7",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "ed179ea9-84cd-4c53-aa90-cbf56bfbe4ab",
        "cursor": {
          "ref": "944801fe-08df-453f-8041-cf13d7f68f3a",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "432cb06c-3a67-45dc-a20e-7bb10515b40f"
        },
        "item": {
          "id": "ed179ea9-84cd-4c53-aa90-cbf56bfbe4ab",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "847e2363-0923-4a2f-aeea-4d44ac023da6",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "75807180-7451-4d9c-848e-f0d7d5cfedff",
        "cursor": {
          "ref": "bf503ebf-1b28-412b-9db9-a1e700d66bdf",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9c5ade6a-8ec0-4a14-a749-bf770c99f58e"
        },
        "item": {
          "id": "75807180-7451-4d9c-848e-f0d7d5cfedff",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4a90f8dd-62f6-4e8f-84dd-def714ec260d",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "268f0f52-3466-4248-8894-4833235657e0",
        "cursor": {
          "ref": "eceee3e6-c079-40b9-bcb6-de30ca1cebca",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "09b13d3b-58ca-4ea5-8a70-6629e3a846e9"
        },
        "item": {
          "id": "268f0f52-3466-4248-8894-4833235657e0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d36d7864-6d16-437a-bac1-6faa3bf07e16",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "8166fa2c-7de3-415e-9ba5-f405588aa3e5",
        "cursor": {
          "ref": "c4ad3235-65a6-4149-a00c-d4d8db9ffec4",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c7f27191-2a13-4c59-bf38-afd766a42647"
        },
        "item": {
          "id": "8166fa2c-7de3-415e-9ba5-f405588aa3e5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "68478035-e7e3-49a5-afff-51c14ea9ccc1",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "b7d7758f-0fa1-466a-9c78-38888922d42a",
        "cursor": {
          "ref": "4591c289-55d0-418d-a0c2-477ad2333091",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b587d22f-7c20-4953-a72e-70ab6156cc72"
        },
        "item": {
          "id": "b7d7758f-0fa1-466a-9c78-38888922d42a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "92e11ed4-4e5f-4299-b9d1-cc0f5e02a4bc",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "075e0102-2ecc-48d3-894d-f8641d98c7e2",
        "cursor": {
          "ref": "ae8058ca-f279-40ea-83c5-e59e31fc1912",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a719fc07-3c86-42ea-a0e8-5b60be8e9eca"
        },
        "item": {
          "id": "075e0102-2ecc-48d3-894d-f8641d98c7e2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "59706bfb-d810-469e-8d8c-d66fe33f12d1",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "2a7825df-6b0d-418d-baa9-52f0030683b4",
        "cursor": {
          "ref": "dfa834ed-5638-4378-acc6-d7eb33bb19bb",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "31dc15f2-7068-4e65-8fae-7d345fb78ce9"
        },
        "item": {
          "id": "2a7825df-6b0d-418d-baa9-52f0030683b4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d3e451a5-1ee4-437a-b114-d71ff560e585",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "c6c24988-5f96-4982-aa72-b75b4b48453b",
        "cursor": {
          "ref": "f6b25d3c-24a9-4e08-8801-3e9321641019",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "785cc9a6-cc0b-4abe-a1f0-6d8056b65c34"
        },
        "item": {
          "id": "c6c24988-5f96-4982-aa72-b75b4b48453b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "128638a4-5dba-401d-95b3-79d1ce28818d",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "b2bca491-4a33-418e-b05e-552d19e5d684",
        "cursor": {
          "ref": "128bc32e-d4cd-43d3-b285-b6c1dba34777",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "44f1e801-983e-42ed-aa39-d2385eb2fb24"
        },
        "item": {
          "id": "b2bca491-4a33-418e-b05e-552d19e5d684",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "42eab919-a02d-4807-a806-bebb46331220",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "add13e2d-5b92-4230-8a12-2039d49c19c3",
        "cursor": {
          "ref": "60c895de-f6cf-48f7-9f83-ddf813e4a04e",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2a3096e7-bcf1-431b-9079-f80a8c7c0236"
        },
        "item": {
          "id": "add13e2d-5b92-4230-8a12-2039d49c19c3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5eb09cab-47c7-494d-a7ca-1ca8b5503850",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "8ea1cb91-ac95-492f-83cb-51ff726e23e8",
        "cursor": {
          "ref": "c844e296-3df0-4913-a855-1cb3b9f484c6",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c56e9686-2654-4103-adbd-ac7b7fb8f573"
        },
        "item": {
          "id": "8ea1cb91-ac95-492f-83cb-51ff726e23e8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "79997c66-8de3-4641-99b4-dbab7fbce372",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "b3fa40b9-2ec6-4ce9-b897-dcafb828fa6f",
        "cursor": {
          "ref": "d1e2ab21-2aa6-46e8-83cd-b99ab22148fa",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fc27a36e-3e1c-4bf4-8d74-e68a3e83439d"
        },
        "item": {
          "id": "b3fa40b9-2ec6-4ce9-b897-dcafb828fa6f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "45867a67-2444-44da-ad29-5e9f8175703a",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "52f52236-c6bd-41f7-930c-30ee43ca14ef",
        "cursor": {
          "ref": "bcf2e6ac-4324-4620-9cec-b7848d753d15",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4a6f48ab-f4d8-401f-924c-4cd7139e0680"
        },
        "item": {
          "id": "52f52236-c6bd-41f7-930c-30ee43ca14ef",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9c6d3e4d-f9fb-41af-8f9a-c4e1f073517f",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "3ffb9d89-c3bc-453f-bd34-8fcdd680526b",
        "cursor": {
          "ref": "8a141f59-5692-4543-9658-a474ddcc21fd",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "112a46e3-44c3-48f9-a53c-91af8208df65"
        },
        "item": {
          "id": "3ffb9d89-c3bc-453f-bd34-8fcdd680526b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f69c0c4f-c469-402f-ab34-bf779b199114",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "42b841f8-c3f6-4bff-ba2f-b730110455f3",
        "cursor": {
          "ref": "e7894ea9-0b0c-4864-a78e-aefc425f8962",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b115d114-7cf3-4396-a2d7-edc7b4930aa8"
        },
        "item": {
          "id": "42b841f8-c3f6-4bff-ba2f-b730110455f3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c0bdfd33-cf3f-491e-9a60-b5b9aef38870",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "fb1975e9-f174-4529-a983-851eee915df1",
        "cursor": {
          "ref": "3109c91c-2a48-4e41-907e-c121abb6c36f",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7a77be8d-9e41-43a9-8587-edc480a449b4"
        },
        "item": {
          "id": "fb1975e9-f174-4529-a983-851eee915df1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c20d6ba1-92b9-4a2b-bf81-628083b8fe5b",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "e314998f-30f8-4e25-b6d7-9499e28aadcf",
        "cursor": {
          "ref": "c03bdcc8-048e-4a74-bcd5-e3b6d6dd4794",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3b0355ee-6344-41b4-af33-bc48285f2de7"
        },
        "item": {
          "id": "e314998f-30f8-4e25-b6d7-9499e28aadcf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1f651fed-d7e2-45bf-8c25-0a9b38a5a6a6",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "56bfffd6-e1af-44e8-a686-006d68e19fd2",
        "cursor": {
          "ref": "138685d6-bc21-4792-be31-ac0b8d8a2b0c",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e61413f9-ce64-45ad-b2e0-3a00fa7cf715"
        },
        "item": {
          "id": "56bfffd6-e1af-44e8-a686-006d68e19fd2",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6de2c0a6-b4ed-42f6-94e7-dbee5c0f398e",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "f306282a-cc13-4b3d-8616-756d5869ae1a",
        "cursor": {
          "ref": "c21cba36-0040-42b9-bb48-b2b0ad78a638",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1937cb04-91e3-4be4-97ac-ddc82befab1d"
        },
        "item": {
          "id": "f306282a-cc13-4b3d-8616-756d5869ae1a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "73f3c130-98b8-45f9-965d-f9cd8f63488c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c7f537-eb59-4a94-a7f3-44760b50ca4f",
        "cursor": {
          "ref": "a509b0c5-7e3c-4367-a272-3efee23ea274",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e4e84e3a-e5b2-4188-8698-39f855c79a2b"
        },
        "item": {
          "id": "c8c7f537-eb59-4a94-a7f3-44760b50ca4f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "9df69184-d780-4e9f-9cac-c1a2b6e740e6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 48,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1e04d1-e0bd-472d-9cb7-955383c48296",
        "cursor": {
          "ref": "c1ba8ffc-7ab8-46a6-a806-3f62fa0f43d7",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "27f13aa3-7404-48a3-9850-803e0b3c3ba9"
        },
        "item": {
          "id": "fe1e04d1-e0bd-472d-9cb7-955383c48296",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ddf48f36-0033-40cb-9593-64d719c692cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1e04d1-e0bd-472d-9cb7-955383c48296",
        "cursor": {
          "ref": "c1ba8ffc-7ab8-46a6-a806-3f62fa0f43d7",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "27f13aa3-7404-48a3-9850-803e0b3c3ba9"
        },
        "item": {
          "id": "fe1e04d1-e0bd-472d-9cb7-955383c48296",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ddf48f36-0033-40cb-9593-64d719c692cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374e928b-9f24-4c6f-a810-773c6d07012e",
        "cursor": {
          "ref": "50d65f7f-6e3b-4fcc-8710-7a3c0536aee3",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1d70567a-4ee6-44d1-a92a-0810865b6df8"
        },
        "item": {
          "id": "374e928b-9f24-4c6f-a810-773c6d07012e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "acc22db4-57a2-4539-ae12-0f8f0f607797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e5e3f5-fcbb-483a-8952-4d4bd2987697",
        "cursor": {
          "ref": "4538aac9-9db2-43f9-8295-af78802912b5",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3ddb05cf-ec6f-4809-b80c-60702557774a"
        },
        "item": {
          "id": "93e5e3f5-fcbb-483a-8952-4d4bd2987697",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2896643b-b055-4ba4-8db4-cf057ba43f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27226bb3-c665-4d22-8e4f-180888d4f63b",
        "cursor": {
          "ref": "13aafca8-5aca-4ee2-ada3-8073de41020a",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "10e8b9f5-847d-4945-bcc4-ec6c1a762cb8"
        },
        "item": {
          "id": "27226bb3-c665-4d22-8e4f-180888d4f63b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ebfd0442-676e-4565-bca4-61684d6a70f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60394a0a-bea5-46a5-a3ac-7daf4acc3ab1",
        "cursor": {
          "ref": "6306a505-9bf7-433d-88c9-47b7079ca30c",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "63062c64-50b7-4a10-97bd-b765a883e66e"
        },
        "item": {
          "id": "60394a0a-bea5-46a5-a3ac-7daf4acc3ab1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f6090d91-6a24-418f-8bb4-ebeadd648d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb14c62-518e-4c5e-a7f3-5d262a3e9dcb",
        "cursor": {
          "ref": "e61d04d7-58c1-4e12-89ed-3a5de8e0e1c4",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8b207b1f-80c6-4511-8983-e8703718c52d"
        },
        "item": {
          "id": "2bb14c62-518e-4c5e-a7f3-5d262a3e9dcb",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "09d4d756-bde1-4f12-90c1-2c46286b120b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "676de9d9-c97f-4ee3-bc4e-f1658eeb5843",
        "cursor": {
          "ref": "b5fbca27-d581-400b-a691-81f6c008c6b3",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "454da569-6ded-466b-bdee-695171c3759b"
        },
        "item": {
          "id": "676de9d9-c97f-4ee3-bc4e-f1658eeb5843",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e3b18412-772c-4e1e-a92f-0e1ae48aa4d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759a7439-996a-4ded-b82f-53f8adba53f7",
        "cursor": {
          "ref": "5f253c8b-d4c3-4ed0-a266-2d418945f618",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b5cf7b63-4acc-413c-a67d-7b3f4282e858"
        },
        "item": {
          "id": "759a7439-996a-4ded-b82f-53f8adba53f7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fcf15a3a-290d-40e0-9a21-45907c61969e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9635a910-dfef-4efd-a88d-cd915c6cd5f3",
        "cursor": {
          "ref": "5e61c57c-6054-44ed-aaff-3b4319814b3f",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2a9d0027-2433-4463-bf5a-f5f78039a58f"
        },
        "item": {
          "id": "9635a910-dfef-4efd-a88d-cd915c6cd5f3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b250b8d0-874f-419d-9c05-c8372b339393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beab8842-92f3-484a-9f51-0e7c590e73ef",
        "cursor": {
          "ref": "1d7e7b17-6f2a-4799-b622-5350b3f1653d",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "dff854d7-0fb9-40c2-a6ca-6ab4a4229634"
        },
        "item": {
          "id": "beab8842-92f3-484a-9f51-0e7c590e73ef",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "41b24720-7ea3-43c5-a217-060555f59145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569984e3-e871-4252-a3a5-0243f6561e88",
        "cursor": {
          "ref": "fc3147b1-b9bc-4ea7-ad9c-e18612c5e06c",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "89517aa7-ecdf-4bdd-8fff-8cf14bb03599"
        },
        "item": {
          "id": "569984e3-e871-4252-a3a5-0243f6561e88",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "69ba017b-84e7-4df0-b14a-a381bfd1e9df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2761ba5b-ff65-4603-8a60-8960105b75be",
        "cursor": {
          "ref": "d11a5509-198e-47d7-a49c-b273b28a3f5d",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8f1dfd65-3f3a-4a8d-9df5-9dca19150669"
        },
        "item": {
          "id": "2761ba5b-ff65-4603-8a60-8960105b75be",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f2e5ca19-063e-485f-adb1-4f430c4cbdd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7002db-1135-42cb-9685-874a1a382d17",
        "cursor": {
          "ref": "066291ee-e28f-4ee2-80a1-b7607ab3cbed",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "21113cb1-8a33-4f89-b090-e77fb5e0ed61"
        },
        "item": {
          "id": "dc7002db-1135-42cb-9685-874a1a382d17",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3967158d-670d-495e-bd8f-de389c4a5629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51145b33-e448-414d-9d67-43734c191b82",
        "cursor": {
          "ref": "f1baa43f-b4f0-4628-9cee-907969b75d34",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d1881a7e-e945-4299-afc0-4cd74aa7933f"
        },
        "item": {
          "id": "51145b33-e448-414d-9d67-43734c191b82",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f8c30d86-b4ad-4ab6-afc0-4486be8e269c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c97bbf-e2bf-4872-bda3-9f156c45cbdb",
        "cursor": {
          "ref": "a2fef750-5e2f-4ad1-85bb-c036b9e90131",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7ead7071-57da-464d-8e6b-0cd290c6c8e7"
        },
        "item": {
          "id": "99c97bbf-e2bf-4872-bda3-9f156c45cbdb",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9189c871-fae5-4e7e-956c-3123ae181bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd2b96f9-75b6-4d34-ae0b-da78b61d4889",
        "cursor": {
          "ref": "361d05d6-7cdf-43cf-be0e-721cb837e4c3",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9dd9ff98-fa73-4d71-a25b-23224c71b956"
        },
        "item": {
          "id": "bd2b96f9-75b6-4d34-ae0b-da78b61d4889",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b5799fb6-8ab9-472d-bc3a-4d69b4a81fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a4957f-1f7e-40ea-8cdd-a814362d48fa",
        "cursor": {
          "ref": "34d3c967-dc28-4465-bae6-b3e5b88e6da0",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "47790193-cc64-4d8a-a18b-50b655952c6c"
        },
        "item": {
          "id": "83a4957f-1f7e-40ea-8cdd-a814362d48fa",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "bc37ac58-d97a-4622-b56d-66349f312876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e13127-ada5-47e9-a23b-2d73e544465e",
        "cursor": {
          "ref": "48d959af-10e3-468e-93de-64408775c12c",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4a7e6186-3888-4c10-b771-a976fcded624"
        },
        "item": {
          "id": "19e13127-ada5-47e9-a23b-2d73e544465e",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "5873a0b9-d9cd-46be-b5d3-3a930b23697a",
          "status": "OK",
          "code": 200,
          "responseTime": 646,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "311a0746-ec8d-4b34-8052-c0f69a16a838",
        "cursor": {
          "ref": "c608433e-e8b5-49d8-9da1-1e17131b4495",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "acd9779a-5044-4f52-ae39-b167ead558be"
        },
        "item": {
          "id": "311a0746-ec8d-4b34-8052-c0f69a16a838",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0354d75f-c73e-4ee5-8677-3157457e65ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 315,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9199835e-4a4e-4b10-8c53-d9d032ddbb06",
        "cursor": {
          "ref": "218c89f3-25c6-4cf9-abc7-c33ce52d3703",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e80d4dfe-9222-4895-98dd-32049ae5befc"
        },
        "item": {
          "id": "9199835e-4a4e-4b10-8c53-d9d032ddbb06",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e1c01d75-37d7-48b3-96c6-02b9afae201d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 314,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6620c9-6fd9-4f7b-b3b9-0aabb2b16428",
        "cursor": {
          "ref": "669e6744-adaa-407e-bbba-c775744e874f",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "052b9b37-942f-4a44-b180-32cd3335398d"
        },
        "item": {
          "id": "cc6620c9-6fd9-4f7b-b3b9-0aabb2b16428",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "27f48ca3-9175-42ee-bd1d-e15f2d15870a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 303,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd52c3ea-595c-4452-b9b0-7546f2e23261",
        "cursor": {
          "ref": "1b1a9fc5-a242-4ed5-914a-700d4ac167b0",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "68b0738d-eb82-4c5d-a918-af1b82b06209"
        },
        "item": {
          "id": "dd52c3ea-595c-4452-b9b0-7546f2e23261",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7628afa7-10cf-4a06-b0ee-7138860bd052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 317,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "208344a8-cc72-4ef1-a72d-24b25fd33a08",
        "cursor": {
          "ref": "f2b1a3f9-55a2-438e-9014-67a03012fd57",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0ebdaf70-eecb-48a3-8567-f66bfc34f718"
        },
        "item": {
          "id": "208344a8-cc72-4ef1-a72d-24b25fd33a08",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ae3153ce-2806-429f-aa87-eff4d5094b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 310,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a700e1ef-517b-4158-9de0-7db92ff7d07e",
        "cursor": {
          "ref": "4a769b77-3e72-4c56-9acd-370ffcb775d4",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1b95c181-9e25-49d3-a5ad-fba4adf0d221"
        },
        "item": {
          "id": "a700e1ef-517b-4158-9de0-7db92ff7d07e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9e9f9d0f-16b6-4b46-9a8d-0945ff19366b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 309,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48847879-a276-4401-a16d-de797146355c",
        "cursor": {
          "ref": "c37ef6ec-7fc8-4e31-a07a-e2dadce0fbac",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b86b3149-4850-4c06-8827-80c92e1230af"
        },
        "item": {
          "id": "48847879-a276-4401-a16d-de797146355c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "14352fc6-6949-4ef0-a65c-4543d6684118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef5917f6-a1e9-4194-a2ed-061dbfa75f8f",
        "cursor": {
          "ref": "2c7c192e-ce59-48a7-9763-c05d240807b3",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3cb4511c-294d-4ce3-89c5-637c4c947ace"
        },
        "item": {
          "id": "ef5917f6-a1e9-4194-a2ed-061dbfa75f8f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "79600c29-c1f7-44ea-aed6-94506643fb9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7b5d2f-ad99-486b-b3ad-8a35285556a2",
        "cursor": {
          "ref": "0b7fa4c1-2f04-449d-9be5-93740e8031c1",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "648891bc-5062-418b-a78f-c3a3669956ea"
        },
        "item": {
          "id": "6a7b5d2f-ad99-486b-b3ad-8a35285556a2",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "fefd6f24-0e17-49f0-bfe0-2cb7989904cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f618a1b-9ce4-411a-bb1b-bd57919b8ae6",
        "cursor": {
          "ref": "5647cabd-38c6-4c2c-946a-7a76973eaecd",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "bea87b88-6e57-4a32-a5c3-93d728e4ec62"
        },
        "item": {
          "id": "0f618a1b-9ce4-411a-bb1b-bd57919b8ae6",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ba4ba6dc-b227-4249-9531-ea3b4868a837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2dfed51-99dc-4097-8fe3-8e55aeca665d",
        "cursor": {
          "ref": "cd8b6477-69eb-48fb-8ac2-ffa68765bd85",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "be4db7e5-1a27-46e9-b0bf-267414c5b181"
        },
        "item": {
          "id": "a2dfed51-99dc-4097-8fe3-8e55aeca665d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "cf2abc9d-fc24-4c5d-8b45-82d9a1cbf270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19dc2800-9f4a-4f13-82fb-c278fa0429e9",
        "cursor": {
          "ref": "8d1cfc50-f0f7-47f2-9ca4-c66d31fe0b07",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ec3df6db-b02a-49a0-ab87-de45201ce617"
        },
        "item": {
          "id": "19dc2800-9f4a-4f13-82fb-c278fa0429e9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f624f5e4-b7d3-4f5b-a572-379006b8ec9d",
          "status": "OK",
          "code": 200,
          "responseTime": 280,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "6600a1f5-68d7-4773-aec5-32ec2334b398",
        "cursor": {
          "ref": "af399525-0986-49e9-810c-8b880998b537",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "984a11f1-fdab-4b68-8ba7-09e7716e4ac6"
        },
        "item": {
          "id": "6600a1f5-68d7-4773-aec5-32ec2334b398",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d3c9d964-9dae-4f04-816f-55ff52f8e984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec0fd4b-6271-4fba-be43-ddfd51e8555a",
        "cursor": {
          "ref": "00f7964a-1b7d-464a-aa52-d63a5eb6b5da",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7400659b-0c2a-44da-a398-dfdc77e62278"
        },
        "item": {
          "id": "9ec0fd4b-6271-4fba-be43-ddfd51e8555a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "733cc2ec-237e-4837-bd1f-ce18f1c7635c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97194c23-5a4d-4de6-b0f2-ef425433c69b",
        "cursor": {
          "ref": "e1729a62-16df-40d7-bb0e-6c961f551d5c",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7278da91-6868-45b9-a6fb-bcea62199fea"
        },
        "item": {
          "id": "97194c23-5a4d-4de6-b0f2-ef425433c69b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3146ca4b-b55e-49f9-aedf-07cf0dd5157b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff33a79-9315-49c3-a4d0-b07f80ea39a1",
        "cursor": {
          "ref": "3c6282f9-3c7f-467f-bffb-b04869aeaace",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "50977f55-fe88-4910-8e48-6245cbca059e"
        },
        "item": {
          "id": "aff33a79-9315-49c3-a4d0-b07f80ea39a1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8953c61b-fc68-458b-858d-21e0de735027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f38afff3-84c0-4b7b-bedb-20d2bff5f7bf",
        "cursor": {
          "ref": "fc374197-986a-45cc-a3aa-c750a1f6b7b6",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "dbdcd1ed-3af0-4c9e-ab39-b5fd11eebe87"
        },
        "item": {
          "id": "f38afff3-84c0-4b7b-bedb-20d2bff5f7bf",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3bde5ee5-722c-4132-8e5a-d5ce01a59bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2349dda0-992f-4313-9840-70964afd30b3",
        "cursor": {
          "ref": "a8b9c096-9708-48b3-acbb-c233b878c70c",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "74c6aa13-690d-40a1-863b-1d66383ac329"
        },
        "item": {
          "id": "2349dda0-992f-4313-9840-70964afd30b3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "113337e5-1315-4f4e-9295-ae0d99505493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 317,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049f2fb4-f7b9-4071-bc6b-0a5495697832",
        "cursor": {
          "ref": "e3837431-8fe3-4f0e-b202-c86ff0b52383",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "25f9d93d-2d3f-408a-a524-6c71c94a58da"
        },
        "item": {
          "id": "049f2fb4-f7b9-4071-bc6b-0a5495697832",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0c93bafc-d960-4690-bf8c-540a40bb2868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca3f09d2-773e-49d4-bdc3-3378d4f45b01",
        "cursor": {
          "ref": "f6850786-0e3c-4437-b538-202c36985ae1",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "23f38ca5-0491-4f35-a036-3a7c32f58f93"
        },
        "item": {
          "id": "ca3f09d2-773e-49d4-bdc3-3378d4f45b01",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b5fac1e3-6021-4e4d-b979-ac6304f536e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e902a7-da18-49f6-80ff-5f2020cf5e3c",
        "cursor": {
          "ref": "880272cb-e812-4f6c-a13c-5a6caeb761c4",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1d2b64f3-e34e-46d4-bc29-cbd8046d2daf"
        },
        "item": {
          "id": "15e902a7-da18-49f6-80ff-5f2020cf5e3c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "da9a2af5-8681-42aa-95da-2e12470dd974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 323,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff83fc53-d5ee-49b0-8d82-543566184015",
        "cursor": {
          "ref": "f2583e38-f73b-4060-b382-4110eb63b9f8",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a69f0724-d760-4fa5-bf00-f3e4f5e3ab2b"
        },
        "item": {
          "id": "ff83fc53-d5ee-49b0-8d82-543566184015",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6161bf6d-0c17-413d-903c-a1bac3b44079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 378,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c511c4-d4c8-48ff-a9e3-ba83b8a50697",
        "cursor": {
          "ref": "fcf95e93-516b-4ace-833c-0e67f609efa4",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "88117c4f-035a-464f-91d4-b747351427b8"
        },
        "item": {
          "id": "40c511c4-d4c8-48ff-a9e3-ba83b8a50697",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4ac3984b-755e-4ddf-9aab-00a3a75c35bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c55c24-2c73-4cfe-aa0a-618e145a8afe",
        "cursor": {
          "ref": "d88bc794-a81f-472a-b1c5-2ad5895d72b4",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3e1314db-fdff-4dfd-8aa2-db214fcff077"
        },
        "item": {
          "id": "61c55c24-2c73-4cfe-aa0a-618e145a8afe",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a5a45701-b55c-4760-9865-823f6799aca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 315,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5bb60d-6724-4fd5-9d60-369de9b09b3e",
        "cursor": {
          "ref": "24ac872f-65fa-4364-8db8-c3e5ddfa850a",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1efe0674-66b3-4544-8d12-78152a79d84c"
        },
        "item": {
          "id": "9a5bb60d-6724-4fd5-9d60-369de9b09b3e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b4c78d51-e114-46a5-9a97-651144a3dd47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0130349d-69e4-4203-9dff-acb8327e0893",
        "cursor": {
          "ref": "b499f76e-e2d8-46e9-818e-9c4f21fe5e98",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "320275e8-9b03-40e8-a547-712858278c06"
        },
        "item": {
          "id": "0130349d-69e4-4203-9dff-acb8327e0893",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5e947e4c-86f7-44c3-8094-97aedd21b7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 307,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16189388-ba54-4c6b-afb1-4e920dfd3ecf",
        "cursor": {
          "ref": "dd641077-9e88-41b0-b464-e2dd04df3044",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b2a0a814-e267-426b-85c2-17c93b760e04"
        },
        "item": {
          "id": "16189388-ba54-4c6b-afb1-4e920dfd3ecf",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f9f91955-c158-4a84-bace-11aa8cc59fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 312,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f1e034-3b5a-4b1b-b709-5572c04bf175",
        "cursor": {
          "ref": "53f4037c-7e5d-4948-bfa7-c0050c09a610",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1b7043f1-7bda-4390-9278-d835c529fcef"
        },
        "item": {
          "id": "83f1e034-3b5a-4b1b-b709-5572c04bf175",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "61d7d8d1-d4ec-4aa8-bc59-1d2e0cda8e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b522752-d6cc-40e5-a8bb-629c324f8698",
        "cursor": {
          "ref": "4ca9d450-f440-4903-bbf9-e98f68235ee0",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "30fa1a76-acc1-4cfd-803a-eaaeca63889c"
        },
        "item": {
          "id": "9b522752-d6cc-40e5-a8bb-629c324f8698",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "86222626-0b77-4536-9359-8a9d0ef57e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 322,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a494a87c-3b21-4493-b9d3-91a14f8d0987",
        "cursor": {
          "ref": "a8021eeb-9643-44b3-8813-3981574caf33",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "359ae9b3-a87a-403f-823f-0c1488005788"
        },
        "item": {
          "id": "a494a87c-3b21-4493-b9d3-91a14f8d0987",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3b6d4963-5b15-4d87-90f3-ea1d2416b94a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5e608b-87d1-4ac2-bdcb-3401ca14bf47",
        "cursor": {
          "ref": "279197ed-17ac-41cb-80fc-935deb6fc485",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "06426fc9-8993-45ed-a2c8-11a252671b68"
        },
        "item": {
          "id": "6d5e608b-87d1-4ac2-bdcb-3401ca14bf47",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c1c174a9-293a-4bf2-ab00-1cf468bdd3ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 323,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4148492d-50d0-422d-84b0-4456702d698f",
        "cursor": {
          "ref": "51a98218-7527-4a0d-9996-1ffb279af38d",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2c6eb015-2db6-4dd7-a27e-5ef95487e994"
        },
        "item": {
          "id": "4148492d-50d0-422d-84b0-4456702d698f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "921ff617-221f-4ad6-8c51-7c64396b7b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 333,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e251c5-e3b1-41b4-9ed5-7a5d43633e3a",
        "cursor": {
          "ref": "5f470830-72e8-423e-b2eb-cc5fc7c249a3",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f449c586-73b3-42c0-9ed8-9ca8dd4eeedf"
        },
        "item": {
          "id": "b8e251c5-e3b1-41b4-9ed5-7a5d43633e3a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e07133d2-1d9e-41e2-b74c-9dd9b3b7059e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 310,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77bf4c61-f590-4cda-ab76-65df681bcf97",
        "cursor": {
          "ref": "f6b5e7fc-c874-47b8-ae99-4916773a198d",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5883a9f6-9aa7-41b9-99aa-4dc3e62709a7"
        },
        "item": {
          "id": "77bf4c61-f590-4cda-ab76-65df681bcf97",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "8994856c-1b84-43b0-afb7-0c5745bbd65d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 307,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b661b7-eb4e-4a3c-9d4b-ebeb8e28bf1c",
        "cursor": {
          "ref": "688975cb-c123-4c0f-8cea-8d786a5ec1c2",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "599c3283-85d4-44a7-88a2-4621a926bb63"
        },
        "item": {
          "id": "a3b661b7-eb4e-4a3c-9d4b-ebeb8e28bf1c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1dafbbea-989b-48c2-9480-42670c27d7a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 322,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ece1cb-a0a3-4f5b-af8c-cd872e7cebf0",
        "cursor": {
          "ref": "b9e1006f-9e67-4afe-b089-627c69a5b1ac",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6b85676b-16a1-4a6b-93db-b6193783d38e"
        },
        "item": {
          "id": "28ece1cb-a0a3-4f5b-af8c-cd872e7cebf0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "061b5347-d833-45a1-99c0-3bb35fff58fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 306,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b698d9-4d1f-45af-8df3-aebd17d9bfa2",
        "cursor": {
          "ref": "3e008727-8bd7-463f-bfda-76c1324e282c",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "cfea2420-978d-44e5-ae44-262037a5ac0f"
        },
        "item": {
          "id": "76b698d9-4d1f-45af-8df3-aebd17d9bfa2",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c8addebe-6404-4075-af1d-69fd1f650289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a96f737-7133-4a76-99ea-fe90cd08f5ca",
        "cursor": {
          "ref": "3161b0ab-8b36-4e93-a348-0b2d9fcc45df",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e12c71b4-343e-45e8-bd1f-fd3208b3586c"
        },
        "item": {
          "id": "4a96f737-7133-4a76-99ea-fe90cd08f5ca",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4e539403-c431-4556-ba45-815d58a74e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42cac9ed-0654-442b-8e92-edd674e277a0",
        "cursor": {
          "ref": "fa95639f-590e-4a49-97c8-c661faebe9f2",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ba0f3eeb-f206-40e6-af34-22a54a48a76f"
        },
        "item": {
          "id": "42cac9ed-0654-442b-8e92-edd674e277a0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b6076b6d-5c47-407e-872a-fb5619c18723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db7e16f-9185-4ddf-aca3-ddc6176315c0",
        "cursor": {
          "ref": "c7ead208-4918-4a9e-b24c-9f71d5cecb8f",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b00db9df-a582-4357-ac49-728b72703364"
        },
        "item": {
          "id": "0db7e16f-9185-4ddf-aca3-ddc6176315c0",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "617349d6-4db7-4d0e-a838-fee32fb99284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 318,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11648de-1f71-42b6-bb96-93122feb410d",
        "cursor": {
          "ref": "e4b6fb4d-a45f-4758-9661-58b4a3eabf75",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d1db1cba-c4b8-4e3f-a731-39218c2b4b89"
        },
        "item": {
          "id": "b11648de-1f71-42b6-bb96-93122feb410d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4b8018d8-74ee-42ac-a52f-06976ce725ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7247918f-ffef-4cdd-b25e-3afcc071c231",
        "cursor": {
          "ref": "b6bd8785-3bee-411d-9e08-1a32a3f3a94f",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "98b9bcab-ea47-440a-b9b9-09d6cccf11da"
        },
        "item": {
          "id": "7247918f-ffef-4cdd-b25e-3afcc071c231",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9e053679-7b7c-4d4e-b806-2fbd40d8beaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "408581ce-be4d-4960-825f-ee0244b08aa0",
        "cursor": {
          "ref": "0ae2ab7c-69d0-43b0-ad09-4577204c9bcf",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8b304f3c-a6c0-40d8-89e5-d237084e6704"
        },
        "item": {
          "id": "408581ce-be4d-4960-825f-ee0244b08aa0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a4f68c45-2827-4706-bc9f-170a69b875e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a33dd1b-9717-4464-9b48-38b70a0188b5",
        "cursor": {
          "ref": "7963883a-0022-496f-adab-ea72d7f177a0",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "bc801b63-903e-4c09-b379-ae0e28c48693"
        },
        "item": {
          "id": "7a33dd1b-9717-4464-9b48-38b70a0188b5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0a965c02-75f4-4533-978b-3107afb7a9f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fccc035-7034-4c9c-81f5-34c848bce858",
        "cursor": {
          "ref": "84a0a0ac-fc20-40d4-b634-beb435745cdf",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2b064eaf-2463-44b8-b614-fc2584c35d5b"
        },
        "item": {
          "id": "0fccc035-7034-4c9c-81f5-34c848bce858",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "346b741c-a208-4a49-8c37-3d21033dfc17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 350,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd7cbdc-ce83-4d3b-b223-79fd20eccedd",
        "cursor": {
          "ref": "ac3d3169-befc-48a7-b9d6-441febccd110",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d6ab5bcf-4ec9-4ddb-bba7-a1ed97a9fa29"
        },
        "item": {
          "id": "fbd7cbdc-ce83-4d3b-b223-79fd20eccedd",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "bcf2b563-6273-4f27-9e89-8fa145d416f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b7fb4a-5662-4522-b04e-1075ee7910d6",
        "cursor": {
          "ref": "41636fa9-5c8b-44d9-bc59-81e2b71a8b41",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "97699507-09b1-4539-8227-8e7b10fc3187"
        },
        "item": {
          "id": "57b7fb4a-5662-4522-b04e-1075ee7910d6",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f01ee12a-29d7-4181-948f-34dee87dbdf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ad4680-0899-49fd-a34c-8a11162f1dd2",
        "cursor": {
          "ref": "74417bf5-a940-4c72-8ee5-ed53e45d8830",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9bfa6355-d542-4c54-8778-1e507eb023cf"
        },
        "item": {
          "id": "78ad4680-0899-49fd-a34c-8a11162f1dd2",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9c6e1ce3-fa24-435e-9a94-2cf15aa5b7ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5155933a-852e-4171-adef-7e25437bcc5d",
        "cursor": {
          "ref": "d9133f40-e0e4-4d76-a1dc-b2c135b2878a",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "72e66ba7-8c18-4fcf-917a-aa6cfee6b09a"
        },
        "item": {
          "id": "5155933a-852e-4171-adef-7e25437bcc5d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a16590a2-d311-4370-9177-37a7b5d528fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76760d28-813b-4242-8a34-12cf2f93d08b",
        "cursor": {
          "ref": "8488d9ea-4a9f-4304-b2d9-0344ee043e19",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "95a056d8-b2cc-416b-8fd7-dcb163f9c413"
        },
        "item": {
          "id": "76760d28-813b-4242-8a34-12cf2f93d08b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "bda4353d-b0c4-42db-9c50-b85e3a46ab05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d034a59-6184-4192-8af2-94be00b30e62",
        "cursor": {
          "ref": "39c5cb03-1f6a-44be-9eb8-244b6c0b75da",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "01e9216d-2bcb-4622-b568-d5e2ab1b919b"
        },
        "item": {
          "id": "3d034a59-6184-4192-8af2-94be00b30e62",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f216fa46-4e15-4933-bd0a-1ab38e391ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecaecc7d-9807-4e82-92f4-eb0bb3457a0e",
        "cursor": {
          "ref": "fc4be392-cb6c-4c7d-a06b-a64a22376414",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9d80ef4c-ffb1-49ca-814b-71f206785eff"
        },
        "item": {
          "id": "ecaecc7d-9807-4e82-92f4-eb0bb3457a0e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "dbe43712-8a32-4819-9f84-fede8de40dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa88a8a-14eb-43af-8aa3-ce67493d2e69",
        "cursor": {
          "ref": "db3104fa-cd81-4721-af62-8486fd5396a1",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "064efbe3-6dbe-461f-8de7-345c99d4294e"
        },
        "item": {
          "id": "0aa88a8a-14eb-43af-8aa3-ce67493d2e69",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "82ec0e2d-0097-4100-9355-511ba8cef0b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445d1e03-18cb-40c5-8173-853116c01d4f",
        "cursor": {
          "ref": "8e55de3c-7fdf-4d22-8b42-24df0da029d6",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "432e40b7-e99e-408c-a3ba-a5076eaee46c"
        },
        "item": {
          "id": "445d1e03-18cb-40c5-8173-853116c01d4f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6bf6f4aa-91e7-4240-8cda-4dc43ebad06d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c9ca2c-cb7a-4b03-b0a1-615ba211166f",
        "cursor": {
          "ref": "8de5c060-be7f-4e7b-b418-dbda66c45288",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "186deccd-98a7-4c22-b46b-2cefec195ded"
        },
        "item": {
          "id": "37c9ca2c-cb7a-4b03-b0a1-615ba211166f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5524ad4d-ef40-49cd-825d-5e29c9814d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05cd738-48ed-4811-94ef-83b93b55a2ba",
        "cursor": {
          "ref": "19c8e7d8-319e-40bc-8f90-2e20175e2719",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "aef1b4e9-d964-4b70-9542-090f856c0f6d"
        },
        "item": {
          "id": "b05cd738-48ed-4811-94ef-83b93b55a2ba",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2f5c40f3-c851-4857-b2a4-5787a7e42364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c79ae8-ba71-4c4e-9810-8a79a2e8103b",
        "cursor": {
          "ref": "ecd414ab-4cca-4520-8fbe-b4072ec20c6c",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9c257f17-f855-404b-9e5b-9db6e453ae75"
        },
        "item": {
          "id": "c7c79ae8-ba71-4c4e-9810-8a79a2e8103b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "79f86d98-3511-45db-a42c-4b5fb402255d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67c6b65-15b3-4cd0-bb04-cfd548253bb7",
        "cursor": {
          "ref": "6baae6db-6472-45ce-a386-3d305075e6cb",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "edcdd02b-8b20-4092-86dd-115606647d9d"
        },
        "item": {
          "id": "e67c6b65-15b3-4cd0-bb04-cfd548253bb7",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "519d9e4d-da5e-418a-9206-e43063e730d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acaa59ac-ddd4-4c6e-a471-b46bd1a00332",
        "cursor": {
          "ref": "27d65d06-9327-45a4-b623-2b197246c39c",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "98f20b15-4489-4974-ac2b-78f4303dd1f8"
        },
        "item": {
          "id": "acaa59ac-ddd4-4c6e-a471-b46bd1a00332",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e968dc5b-c62a-4b60-9eba-bf51067d7059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf11d0e-fa5a-44fb-9b14-45cfaa1c07eb",
        "cursor": {
          "ref": "d60e06c5-323f-4736-a1ae-a3be94e9e529",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "fbb7f8e7-e863-409f-9332-b5c0377e367e"
        },
        "item": {
          "id": "7bf11d0e-fa5a-44fb-9b14-45cfaa1c07eb",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2e6d732c-d011-4d71-9e80-6efb83576d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31c97d8-9574-4cf1-a0c6-3cd6c66aa546",
        "cursor": {
          "ref": "d850310e-80e0-47ec-acf9-09c4dce80bc6",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "cad080e4-9fba-4689-af3a-0d7460e17838"
        },
        "item": {
          "id": "f31c97d8-9574-4cf1-a0c6-3cd6c66aa546",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "21459739-af7b-481d-8c9e-ccc8c804fa39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de651c58-c5c7-48b4-9b95-c6a7838d055a",
        "cursor": {
          "ref": "f0a8a9fd-b91d-4b64-a097-ce6a974d69ab",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b7ccbd6e-293b-48ad-a29f-a4d3404d00b6"
        },
        "item": {
          "id": "de651c58-c5c7-48b4-9b95-c6a7838d055a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5f557c3d-ab27-41ca-8d2a-0622bd74a736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05a6d77-8902-430b-bc71-3f069dca73f0",
        "cursor": {
          "ref": "ee468f70-3017-4d3d-9e24-ee6d664e5c2b",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d975e2eb-a02e-4123-9470-df9195e5d753"
        },
        "item": {
          "id": "e05a6d77-8902-430b-bc71-3f069dca73f0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "107e76a3-f160-4679-ac41-96d1eb3b5254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba79d83c-1794-4e85-9c7c-6ea584811f05",
        "cursor": {
          "ref": "f48eb0a1-c207-44ed-a7cb-d06e03da827b",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "cfb7d5f1-ebaf-4ed8-b945-24e49699b85d"
        },
        "item": {
          "id": "ba79d83c-1794-4e85-9c7c-6ea584811f05",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "af7d71ba-3dd5-4491-9162-da7b8f7dce82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef83c869-2fa4-484f-81f2-9d07211dc41d",
        "cursor": {
          "ref": "c36b56ef-63f2-4228-b5df-a29484e89517",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3cb1f5cf-f8f9-41e6-9891-b495e8f8b90c"
        },
        "item": {
          "id": "ef83c869-2fa4-484f-81f2-9d07211dc41d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1919dcd9-6e4b-43d1-a11a-731069c4beb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75413ce8-ca6c-400f-a724-2db0ac5112a4",
        "cursor": {
          "ref": "12ef870a-8321-4059-b7f9-036b34717bef",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "36080b10-1977-4e4b-8082-c88ceb22db7c"
        },
        "item": {
          "id": "75413ce8-ca6c-400f-a724-2db0ac5112a4",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9bcced9b-7f3b-44ec-a37b-f1660459411e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e87e9c6-ad61-4578-b33d-303f819ec6d0",
        "cursor": {
          "ref": "7b2d8b99-1a2f-4b37-ab5e-75b3d66c612e",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b17e7655-7365-4ad4-9086-e391db42f0ea"
        },
        "item": {
          "id": "0e87e9c6-ad61-4578-b33d-303f819ec6d0",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e697730d-7c46-4907-8ba9-aa8dd584165f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1665276-15ce-4618-921c-ecbd615a257c",
        "cursor": {
          "ref": "c1c5bcdc-40e1-456f-b79a-87d9051bf286",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "08794d8c-4e5a-4fa0-aa98-0e65941dad77"
        },
        "item": {
          "id": "f1665276-15ce-4618-921c-ecbd615a257c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9577eb95-ef33-47ff-9b88-62241593138c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9b3be5-493d-4e05-8264-561b32bcde65",
        "cursor": {
          "ref": "d80428b3-f416-4dff-b5d9-161b17a6c2fb",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "070f2eae-11a7-41be-b2db-654083249c91"
        },
        "item": {
          "id": "de9b3be5-493d-4e05-8264-561b32bcde65",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "88305667-f2e2-489d-8859-03040145bc5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0a36f9-b060-4e54-a588-1ff9917da491",
        "cursor": {
          "ref": "7ab6e943-36e3-4f07-9ac9-b90f94d9c710",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a01d9700-0a88-49f4-9675-3c41bf294242"
        },
        "item": {
          "id": "6d0a36f9-b060-4e54-a588-1ff9917da491",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5b0eecf2-3283-4549-aac7-560e2172a4eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6736aa49-0d2d-433c-9c15-84165a9e02f2",
        "cursor": {
          "ref": "931f7f48-7dca-4585-8c17-8337da5c6724",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "97e25b47-8877-44ca-9d08-689f0829a0a5"
        },
        "item": {
          "id": "6736aa49-0d2d-433c-9c15-84165a9e02f2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b567c62b-0a76-42ba-a5d8-64369531a12b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4dfb5e-324e-477d-ac2b-a4e5d63816b5",
        "cursor": {
          "ref": "a9bbc911-1bae-4c42-8d34-32fff5e96e21",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a032b889-260d-4016-83a7-00a566d82c33"
        },
        "item": {
          "id": "dd4dfb5e-324e-477d-ac2b-a4e5d63816b5",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7ea86cc3-380f-4af5-ab5e-6e29e0badab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9309f5-50b7-4abc-864f-b91f3d100d41",
        "cursor": {
          "ref": "e28125a0-9c56-4188-8fa2-a7c987b04f63",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "059248ab-e01b-4c53-9df1-ccccdca3d083"
        },
        "item": {
          "id": "ca9309f5-50b7-4abc-864f-b91f3d100d41",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4e31a076-cfc7-4778-b412-0276b009bfbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486da19a-762d-4199-9e88-2b35088723ab",
        "cursor": {
          "ref": "fde55312-ecc7-4321-9b38-04af1bf84dee",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "045d93eb-7ebe-46f9-b1a7-039d05364cb1"
        },
        "item": {
          "id": "486da19a-762d-4199-9e88-2b35088723ab",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "103e43bc-1811-48c8-a01f-b9faa0f6d0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "763f57cf-25e3-48d0-833d-961e945a9ee1",
        "cursor": {
          "ref": "4d90d89d-1b2a-4ff8-9761-8b425b6bc993",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "097d4d23-2b5a-43f0-bf7b-ee2b9616a57f"
        },
        "item": {
          "id": "763f57cf-25e3-48d0-833d-961e945a9ee1",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a501e844-f625-4597-8d22-709db65559eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f1cdd9-1814-4489-82fe-26b57fd2813a",
        "cursor": {
          "ref": "5df6081a-845d-4df0-abd8-a755254cc050",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "20e4226e-3ba1-4160-b0fd-d79149fa17e1"
        },
        "item": {
          "id": "b8f1cdd9-1814-4489-82fe-26b57fd2813a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "be716d76-13fc-45d4-b9cd-769a4e9dfc8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8769ec43-fa0a-437f-b965-a2fdd8178a1d",
        "cursor": {
          "ref": "6ec93459-8009-4139-b1ed-cc26bdf08046",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "780df7b4-72ae-4d4e-8678-6591aa5692a1"
        },
        "item": {
          "id": "8769ec43-fa0a-437f-b965-a2fdd8178a1d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "679a2601-f709-40d5-92e7-f3a5257dfd26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2b7736-77f5-4808-989b-c4b3a111daf5",
        "cursor": {
          "ref": "37b937ea-df16-407b-97ee-6f4e2c0ac500",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "40006297-e049-4b2a-acf1-f75e0f779efa"
        },
        "item": {
          "id": "ee2b7736-77f5-4808-989b-c4b3a111daf5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3df2e8a2-300e-40e2-94ae-02cd854d98a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d01aceb8-3cd7-476b-9b51-3da19f23e7b0",
        "cursor": {
          "ref": "2cacf6a6-7052-4194-a6bf-2c3eb446380d",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ed2ae94e-3b0a-4e8b-a812-f8a41c9f0e29"
        },
        "item": {
          "id": "d01aceb8-3cd7-476b-9b51-3da19f23e7b0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0d39e29d-0ae0-4210-a6ea-fb8116fb5104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f26d3db-0037-4b71-a115-c55704ed9ab0",
        "cursor": {
          "ref": "edeb5c84-4232-4061-8af5-33d13d831756",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e34e8e4a-fcb9-49f2-9058-ea5b816910aa"
        },
        "item": {
          "id": "8f26d3db-0037-4b71-a115-c55704ed9ab0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6ca987a2-8abe-4cc7-8a57-4fa85ca093d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d902b1e6-507d-405e-9407-daf4f5070e08",
        "cursor": {
          "ref": "4b72f13f-400c-45d0-a4fe-5451adfaa967",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "85e8d417-29f9-4647-9495-63431485ae95"
        },
        "item": {
          "id": "d902b1e6-507d-405e-9407-daf4f5070e08",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b006a44a-4abe-40d3-b7a0-6cb4ef4ffbd5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d4b5aa-6b09-4c36-8d12-e774896ed7a2",
        "cursor": {
          "ref": "c820d388-ac7a-4aef-9b4c-eeaeae51d94d",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "67e91825-c7a1-4bc1-b683-a4a519cafe46"
        },
        "item": {
          "id": "65d4b5aa-6b09-4c36-8d12-e774896ed7a2",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "0619c93e-7932-4c21-b481-2bd2320d825d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a0ede17-6a20-486e-aec3-f9385b306381",
        "cursor": {
          "ref": "d25734ed-4d36-4b4c-8fcb-ae0f54cb0559",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "36a9822f-5de0-4de2-9b6b-161eed6d675b"
        },
        "item": {
          "id": "6a0ede17-6a20-486e-aec3-f9385b306381",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f1f7cff1-58a0-45f2-bbc6-c18d128cb940",
          "status": "OK",
          "code": 200,
          "responseTime": 291,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "0508414e-7301-4a06-afd3-b2dd14d98367",
        "cursor": {
          "ref": "72118ff5-3415-452a-8167-4afea9104ce3",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "cc8203cd-a421-4a17-a424-e10efec8bee8"
        },
        "item": {
          "id": "0508414e-7301-4a06-afd3-b2dd14d98367",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e66b925c-b3ab-4c55-91af-673e8358d5f1",
          "status": "OK",
          "code": 200,
          "responseTime": 648,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "000d43bd-e24b-4957-af03-14451645a5dd",
        "cursor": {
          "ref": "8d6d1ec0-5eea-4290-bfa3-e7a01d37f54f",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "08e02e92-8083-4ebb-a817-bb22780f0a80"
        },
        "item": {
          "id": "000d43bd-e24b-4957-af03-14451645a5dd",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a20f917d-1909-4013-9b09-04f104d1bd6e",
          "status": "OK",
          "code": 200,
          "responseTime": 632,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "edbeb75c-20f3-49d8-86bf-8163f42891d1",
        "cursor": {
          "ref": "74f65f76-f2ed-46f8-9543-50922402a992",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "437056d0-a567-4a43-ab6f-7bc936345acb"
        },
        "item": {
          "id": "edbeb75c-20f3-49d8-86bf-8163f42891d1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f22e4b84-3816-45de-9095-f213166ddf0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edbeb75c-20f3-49d8-86bf-8163f42891d1",
        "cursor": {
          "ref": "74f65f76-f2ed-46f8-9543-50922402a992",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "437056d0-a567-4a43-ab6f-7bc936345acb"
        },
        "item": {
          "id": "edbeb75c-20f3-49d8-86bf-8163f42891d1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f22e4b84-3816-45de-9095-f213166ddf0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edbeb75c-20f3-49d8-86bf-8163f42891d1",
        "cursor": {
          "ref": "74f65f76-f2ed-46f8-9543-50922402a992",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "437056d0-a567-4a43-ab6f-7bc936345acb"
        },
        "item": {
          "id": "edbeb75c-20f3-49d8-86bf-8163f42891d1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f22e4b84-3816-45de-9095-f213166ddf0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf0003b3-d505-40fe-a227-865a147f6022",
        "cursor": {
          "ref": "8b2dedbd-d1e1-4a0c-82da-ff535f6a1141",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "bacb9e02-6c8d-4b82-aa43-2bbab25d8ca7"
        },
        "item": {
          "id": "bf0003b3-d505-40fe-a227-865a147f6022",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "054511e8-4007-4da7-a680-d7c29823b85f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 51,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c51128-d26f-49ae-a224-c65f7e2351a1",
        "cursor": {
          "ref": "f75fc658-c187-4ca2-8a4e-d49c406e3af1",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8e804ded-dce6-4550-9ff0-932379bddc1d"
        },
        "item": {
          "id": "d5c51128-d26f-49ae-a224-c65f7e2351a1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3d7a6d17-e04f-4035-9c2f-3ccc5ddddd5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "d5c51128-d26f-49ae-a224-c65f7e2351a1",
        "cursor": {
          "ref": "f75fc658-c187-4ca2-8a4e-d49c406e3af1",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8e804ded-dce6-4550-9ff0-932379bddc1d"
        },
        "item": {
          "id": "d5c51128-d26f-49ae-a224-c65f7e2351a1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3d7a6d17-e04f-4035-9c2f-3ccc5ddddd5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "ed3ce75a-a2a3-4826-b91d-a4f3dd9ac606",
        "cursor": {
          "ref": "05ba0ac2-433b-477d-a998-6617347c7fee",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a7d9865e-0e88-48dd-af66-a5578a8bb1c0"
        },
        "item": {
          "id": "ed3ce75a-a2a3-4826-b91d-a4f3dd9ac606",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "8f094075-a60a-4a28-963f-e7a706c0920c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "eca97000-5a87-43c1-aa53-c7e9d9ca888c",
        "cursor": {
          "ref": "7489056e-53a0-4cd3-a005-f4170bef9083",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "42fe8f2d-0c14-4710-9acb-95a036eecefb"
        },
        "item": {
          "id": "eca97000-5a87-43c1-aa53-c7e9d9ca888c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "565d42e9-a22b-4243-9271-8eb2fa348e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "eca97000-5a87-43c1-aa53-c7e9d9ca888c",
        "cursor": {
          "ref": "7489056e-53a0-4cd3-a005-f4170bef9083",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "42fe8f2d-0c14-4710-9acb-95a036eecefb"
        },
        "item": {
          "id": "eca97000-5a87-43c1-aa53-c7e9d9ca888c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "565d42e9-a22b-4243-9271-8eb2fa348e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "fa9b9cd7-68e2-4753-b4b0-be1e7f84eef6",
        "cursor": {
          "ref": "ee14d93d-2811-40a0-b358-8bf5f39470dd",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "754eb1f8-3a22-4967-aeab-a1445cb8e49d"
        },
        "item": {
          "id": "fa9b9cd7-68e2-4753-b4b0-be1e7f84eef6",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "db74096e-419d-41a5-ac25-133d6241d88c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}