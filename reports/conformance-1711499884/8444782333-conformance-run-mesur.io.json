{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b330dc3b-ff1c-4ff3-abd9-9e2b3c2e549a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f7050b9a-1d67-40cd-a60a-77b420575b6d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f8056b31-5056-43a2-92b2-801246bb4a10",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "45de56c3-eff7-4b22-8df5-7a18747d6bac"
                }
              }
            ]
          },
          {
            "id": "15cdba0b-8006-4560-9fb3-91e40ae00f80",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fc14eb55-1511-4f2a-ae90-f4d3f48c7eae",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5d3f9422-4601-479d-8041-508d75ef8210"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3fa83077-87c2-4f5f-966e-614b9da460ca",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e15ba907-0f13-4a5c-83b7-504c3d16c7d6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "95372e9a-bd87-42e8-b12b-71b06de814d6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "24b2149d-852d-42fa-9762-d86515a7ad4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e8d2c9a3-0912-4d5a-b427-0e7d23a9c5fe"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "723654fe-b25a-47ff-94e7-5c9795fd099b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d9c81168-6ce4-49d1-a1fc-2ebaeee2f420"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4f0bdcf7-bb4b-49de-88e2-a1bdaa8b6bc8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8f007481-3136-41ec-bb02-269053699b07"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b923575-0606-4c34-ab47-a329c81dcc96",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "536f766c-8e14-48ae-a627-b9189bb150f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07f61c7d-20f6-4380-a610-5775230776fd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6f035c0-7359-49f9-9d68-b0f471d5e88a"
            }
          }
        ]
      },
      {
        "id": "98637705-1ded-40e3-8cfc-6e45c0b69b61",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a40256e8-5259-4c0a-aa22-c2f404448b57",
            "name": "Negative Testing",
            "item": [
              {
                "id": "89c71a7f-58dd-4856-9c2c-f7f39a7cf574",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9e6e4995-6ed8-4671-9475-0d4b3dcc944a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e72075-7871-4dcd-83dd-8338006fc42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a9946e6-9a4f-4208-9967-f62463045bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be2be2a-f971-4c84-bd81-27b226f38e30",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2d6acd-f439-4174-bb96-824b0dd4edb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d818c643-3594-4e92-8d1d-20e6aac7fdc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd03907-286b-4fd0-b46c-8fb3eba4aedf",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0877b838-30fb-4fa2-83ad-723a2d1b7e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d38acb7-86d5-46e6-8931-7b3f95e5053a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b8d6bb48-03f1-4773-b47d-f8ee016b34ac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "72553414-bf0e-491c-b52f-76d2ed2fa22a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d22355-31ce-41d5-bb39-50448378f2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1480e218-276f-4b20-a0c3-1ab298cb55bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a6c89c-82d4-4846-8f91-22d87cc9951b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c142af74-9735-4cb6-9e3a-b63ee44d33c2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "45e28302-cb21-4b24-8c4e-71e8e500fc0f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4eae1536-90a5-49b6-ac45-d7d745cb34fe",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d671709-a1d4-4344-9058-37edebe06d29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0812d7c7-30c3-4ee3-9444-638140049f69"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "faca15f7-52ee-4900-9ad2-d32bd2a1f49c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "d054b0c4-1206-43e1-9e6a-d4f553f043ff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ddab0354-2159-4d5a-bfb9-ce16893c4a34",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7f0abf11-25e8-429b-9246-ca36fff960c4"
            }
          }
        ]
      },
      {
        "id": "db1b3f20-ec9b-441e-980b-d5ab4163169f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bf19b67d-b94c-4cdb-b8fd-a1044fe30128",
            "name": "Negative Testing",
            "item": [
              {
                "id": "47773b7c-be69-403a-a10b-4b3364b534c3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6ecaa36f-fbaa-4bbd-9c10-9337e387a7c7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0cae1d-d2a8-483c-9b17-a51f82f0f44a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a514990f-8a4f-4441-8def-3327b8ee9bda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b26f812-e1ea-4e09-ac9c-4e35820f617c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30a93d87-348f-4934-a2b3-6f7c1b6966c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f5239e-9d99-431c-bbd1-786730bed016",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec4a630-4b3e-40e6-b4d1-e8d4d0124e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f20dbf3a-dba1-4d50-98f8-e996a223ec75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9aa90e5-2b07-42e8-a1cd-ea47488e91d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc7140da-115f-4394-b202-87f9b3c5f076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3854c5a5-2376-4ba0-8aa0-466770c104f4",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb17cd55-8915-4f1c-9790-c3d94ec80a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f76772-f29f-413f-9dfa-42ba095b7734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2caa675c-53a8-4aae-894e-67a029f07bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b1f8834-ace5-4a10-9c05-0e39dbeb6299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ede64d0-ac0f-4844-835a-a527b83227cc",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df75553-66a7-48fc-bb57-9b0bc68c44f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "356d64ce-624b-4453-a6aa-dcb783280e42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6fd6f9-b17a-4bc0-ac65-490e68234a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f683e280-2b2c-4255-a5d4-2e7ad5a1b812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5042b1a-bcc8-449b-8243-e67fe831d407",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "558ffdca-d0c1-43b3-95c4-2d3270b136a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8a21a38-e864-44e3-abc1-32fe178fa629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d379e3c-d3e9-43dd-b919-e16778ae27a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d16a9fd0-2b37-427b-94bc-1001f4a7a6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8fa61b3-3843-4489-bf8d-e082f5279daf",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a90db3-da0b-4665-b5eb-06f9d5719b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53ba3165-f68a-47fd-8113-3f72cacb3284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7323fde-d0f9-4803-a1f6-ba98b342d1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "785a191e-935f-4d76-ae5e-5687ae9f7c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5112ef1b-467e-47c5-89a6-c3563bb7d027",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f91e814-909e-4add-8f02-ac33d47e9445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b78844a7-3634-478f-9358-894f0522a6c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e0c69ff-60f3-416f-9d8e-52e2478e6a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "559de5d6-6b49-47be-8848-c20f975b52b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62976aea-37a0-4b71-8002-379991dc16e4",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca21119-06e0-4f3c-b1c3-d49c6187bd84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc861055-01bb-47c5-8ccf-abcc498f8036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d080765-d515-4822-a07a-e84383529ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03147227-dd02-437e-b61b-19c857f58375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172f2430-b7c7-49bb-9de4-ab293341f083",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86723fdd-c4bd-4a6c-929a-edfb49e1a801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7daf8603-412a-4602-8a3b-e6f185a74891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21471cf-30d3-4196-bd9e-7c996a0dff26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc318044-29d2-486b-8e0c-ae5c49e80b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573570cc-57bd-41c1-b841-5f3f6c279b6c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2cf60f4-603a-48e8-93c2-faf349ec71cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7edef6aa-c4ad-46b0-95c8-e34f2f5ba4e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be79ce2-eef9-48b1-aef6-0a0d367d714f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4cbcfd8-761c-4ef5-99f7-6d5b23e9b557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca68205a-3068-4d32-8bdc-d8662181d5d2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "810fc27e-dc49-4c0c-944c-5b16e800e487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a58961a-caaa-47ec-8e00-9fad74889016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9403016-fe8b-4e79-b8ef-40a54fdca05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c9c559e-b9b8-4710-8064-082f9dfc97fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b72ade-76a4-4083-b878-37ca728323bb",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7325df97-baff-42ad-979a-f76022721733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6afde8a3-a94c-461a-b068-0cfaf751b82e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa85c28f-e06a-4e46-bb69-57a462ae15f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54de4bca-2b1c-40b7-8047-e7657e5974e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b0f99a-37f7-4874-9493-07fbf85f930d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de911e24-1b02-483d-a8c0-b63562068660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a403143b-02de-4791-9741-35bdd9421d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31fd725-2e55-4ab2-8950-923ea170434f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec5dee09-c884-4bed-9b38-a7fde1927301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19bb7b65-5478-485e-8c3f-89e143f19dfc",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef954d94-47df-40d8-b2f6-c9061761fc55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42698a30-9743-40d7-a14a-7dcc93c67e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c345f691-c7a0-4265-92bd-9e53e47985a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aec89bae-f67a-42f9-8102-88b49777130f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee86769-3ce1-45dd-9f76-cf365af02403",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1f1437-7af0-4b3b-b710-33bcb67946d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29bd1ee2-182f-4fd9-a7ce-118a6f55d8a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239fcc64-0ea0-4101-906c-6be75a3bb4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bd09cb0-72c0-4532-9e86-fc92e5716eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4705fb25-a289-498a-a643-a99b764d5dad",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59eee92-4b79-4f32-bba9-03705d66bfe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e210ba1-6707-4792-a337-2ec6b95eee46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5240cbb1-4934-4a06-923a-c8428bb23159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bf4e14d-dff2-4698-a0f5-c32ce29d99ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9824bf88-8f16-4467-b041-36543b6238db",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e3c051-ae2a-4272-832b-d7e3b426009b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc5b3c4-23ec-42f1-be8c-8a49c2755798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487e13e0-e466-4079-a77c-899f13ef013c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe799e81-4274-47e4-9a68-67253f895ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d34115-9c97-4892-afcc-8c4a89205f68",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1f0202-e989-493f-9300-dc706968703f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55bbca0c-047b-4d93-b235-95b6420ca6e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19b9cb6-730f-4713-9c4a-bb20e1f0c241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d492bc88-5d5e-4a33-b2bd-efe4f5e52d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad0e5ee-fd8e-4913-ad51-1f3eb023bec9",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7edf6fb7-1a68-4cf4-84a0-0a6978a727c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edeb808e-2885-49fe-999b-8389e33184bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ba5e1f-9afa-4ecc-977c-65a417c334be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b03666ef-eb48-4e99-9de4-fe18368ea06b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee4f61e-247b-41e8-ba47-74fb88747edf",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5741e8c6-a8af-4f2b-ba7c-2a02dc536787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d551d4b1-3bb0-4b7d-9dfd-b9c8c64efff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486cb81a-dd6c-46ac-82ce-ee0cedd8de30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bc709d5-6dd6-4d28-b505-0b7f6c583f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa50313a-b5d7-4904-ac02-3d8800578afd",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "173eadce-2766-4128-9ba1-0f2fae9fcbf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "052af1bc-fe5d-4688-9d09-b5c81a188f82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c6c1a9-28d7-4e0a-9016-ccff3d5eda69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "036bead7-2c72-43fb-81d7-4ae49e8a77b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414f69d5-8cbb-49ef-b30b-a43b035238d2",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7d7dc9-4132-4f67-9dbd-e2ac63a79277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "876f60e2-5d76-40a7-b8ed-05d4a45e938b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee3c90a-bb99-4339-a32e-f31dd793e9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa3719bd-639a-4c9f-b6f9-0d4e3d2692eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de5f5b7-2a4c-448f-8271-22517047a6c9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e77244ce-eb0e-49d2-be48-bbf87c639236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "663d73e0-3e25-44ef-9671-1d0bfef7145e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6741fc3d-857a-40a2-b42d-5f2ef1b89a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ff4ebb5f-3ee1-4851-a340-d1e57d34eb42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5850f19-5e25-46cc-be0a-974b6ea583a4",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e8ee86-303e-4df7-8a40-240a15ec2f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc89e935-1dfa-4878-83a9-5d1ba879fbad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa9a603-63dc-491a-b583-9905cd4ad09d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "65f02312-35e7-4a5d-8856-98ef7fa7a1d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c756f1-f867-4696-b751-f3377ce4fb50",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09406533-dec0-4a1c-ab17-b38a863133da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f4a0ad-ea6d-4738-8c31-c489780ff831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ee6d0a-73a0-4049-b47f-7dfa457225b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce96b5d1-d817-494a-a398-58db348e1752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e9be72-0d67-4deb-b8fb-16859d45994f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7abfd41e-4590-4476-89a3-58839408c73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb25f796-a998-40b8-a4a6-3d5875ec929a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d156b72e-911b-4fd6-a346-f8f7ffb3d728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9111242-b6c7-4a3e-a955-1e26c801ab3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b567989-945b-4b6c-94b2-35b259cae03d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f38198-2258-468d-9176-da8228c75b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8da3fc29-d5f7-4a75-8d40-2d00010d9978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a290091-104d-495f-872d-27d7fbed6695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00a304a4-063f-4101-b522-1d82ca973c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5178d89-fef3-45d0-a744-70d523ab634b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "824aefb8-d58f-4660-9080-a6f90a90966b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2647100d-b0ab-416b-a99f-b6e554e70925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a010715-f213-4d6b-af9d-aab5e9fcd24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "65de069b-b7a7-4de4-85f8-257b4759a621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdfc602-428f-49c5-a898-14d700e7d42a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a932d63c-f567-4889-9d06-7976599d1623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e4d504a-d6e9-4103-bed2-f22e9906cf0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60d0545-4591-41fd-bac5-9dd77834b478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "37be3c00-dde7-48eb-ae17-a395718556b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca2daeb-3c97-4a47-9668-081bd66c1cdd",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9fb5bf7-f700-4a7b-bea7-3953acb90d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4a669cf-6015-4116-9bba-e503ebb0e823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110841fc-b1fe-4258-9299-53329ebc816a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c09085f-461c-48a6-9028-87a3f3e60699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f71f79-7d5c-4ef3-a888-f1f0a53f767e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95a9d7c-dfbb-4cc6-b240-f57c412eda6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e5796b5-7011-4f30-bc61-e1e1b4f545d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c389f968-b603-438e-8a48-32f1d519fe1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "73bc89d0-b511-447a-ada7-5e195abc998f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706958ca-794d-4c23-9aa7-c5ac8b6e491a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c80442e-077f-4fa5-b611-0f397c546a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a6604bd-6950-4823-a3df-103c6921af33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a942fd5-eaf3-4c21-9191-0a05767727f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5619cd4d-566e-46ac-ade8-bf4f584c0737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9041eb90-975e-4426-8cfd-828a25d5890f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a158e9-0065-4762-a4d2-5acc13acb15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d0e60e1-4d6e-458e-88a9-e817f2107e22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09a993a-80e3-4c9f-8650-02176ca232d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1b53c2f-9968-410b-a6ba-ec037bc5fcf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b001331a-1407-442b-b724-60451cb861e2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c94d897-2ef3-4dce-bc80-09dee6bc3558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f899bfc-742d-4be2-acec-bcad8446f2ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18479010-ddff-47bd-a39e-dd161bb39926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c13e4134-9867-4a0b-8554-afc2c053c6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53b2212-d346-49eb-b2cd-e3d07241ea13",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c2091b-cb9e-4769-ac20-7186690f82b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b314c534-8873-4e55-8ae1-ca430a48356c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4d02a3-e0bd-4703-9ced-afe22fce4421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e11ef6e9-ff0b-45f0-8aad-e7fa11e1c019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e73e621-7071-4e3a-9014-c3c6c79f8d41",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "929523d6-12ea-4421-80e4-d4e7ead7e1eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "910bc023-ab91-4a6c-9acc-266ae319d6e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef57dae7-4c29-4c52-94d7-cfca745a6eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59113f80-3b9c-4c6f-8ff2-1703684218f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242ea20d-5125-4db2-ae23-e658217f9dc0",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46165571-357e-48a4-88c1-0df0b786369b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f940c5d-2b36-49ac-86a9-0f7394413d57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f968f2b-601d-4c7e-bffd-0803d406487d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dffb22ea-9472-46d6-8de6-a68596ed8a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ede3d7e-f68b-4788-80ef-c7a2fbe0cfc5",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "931138e8-7b0e-416e-a881-6a44729ed9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc7f39a1-c847-4952-bbc2-c20410c9a1c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd0110e-8b55-475a-9cd4-616c6de675aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c69f786-bb83-4a44-8d94-427846b6df66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3d7b48-46ec-45e1-ada4-277e42dad315",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9701d8-5989-455f-bc0a-586a58667bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a35e828e-3ada-461e-b833-c8016aad7e4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2046760-37cc-4ff8-be56-d8ac30237b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec657150-7f1b-44ce-814e-d11fb7f60a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc34cb24-300d-4b4e-951e-0be75de1163d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d527a0f-e75b-46f5-bec9-47edb6a015e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a8702ef-ec26-4428-b8b7-75ef016f948e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7025dbd0-d4b5-4fe1-aca7-63eee029e9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6259164d-96df-42d8-a532-ca6e743fff77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9cc423a-b211-4768-96ac-fe68ecd2e56b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ba0389-e675-4809-9b85-ba97ea1faf50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea627db9-8563-4ecc-9d52-5fe8391c93ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b05a03-b3b2-43b0-92bd-5d898a6d97b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef93fa66-05cf-4e71-b536-3d60dd14e46d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd4d4cc-5c76-4b54-b41a-6bf80e3d68e8",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba13699-07d7-48bc-8f11-e9669194ab99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a23afd9-3368-45bb-8876-d4436ae6f746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462530af-da59-4822-8c60-7ac7e6b00ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1dc4b233-bf6c-4017-8b68-511ee805ebfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeecbcd8-076e-40d9-ad7a-ee0975205455",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9038d347-89de-40bd-9c23-2f05a5d4b804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef171d79-1445-4fb9-beca-546db835266c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ebcd543-6b76-47e2-88fb-2d1144dc58eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d98b9a8-7413-4e18-90d6-607c21bb0c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec389ef-8247-424e-ace2-3a32596173c0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1fd97fb-13c7-4df0-ab0f-29986c2dcba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74cc9630-8703-467b-8354-8da4e2615d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff3c0d5-336f-4a03-9be9-08c0df8f6403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c952484-62a9-47f0-9eb5-bb571df4e7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303c1f62-2e1d-42a4-a489-d62ad9e8f6a4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13741619-d302-4f04-b096-fa2dc1e28302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b89be74-9562-4490-aa26-965c18bd1228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880ec9b8-dc64-4b6a-9f04-94611ab166ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f468273c-b10b-49c9-802e-37fde58675b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b315e0-9fc1-479e-9324-6d862cd9b8d0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ff1812-9e88-475c-a6eb-9872d9cbc0e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb380ae-1559-4969-8884-6d42e76c06da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488661db-440c-4923-8dce-0837f936482e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "672df56c-699d-4a21-bf2e-971bd8e38439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8617b69d-476b-4b6a-8adc-5b427e2355e8",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2aff5e2-d749-4543-a173-872d0f8c5dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8a3231c-5170-4775-a296-8b7755fc4da1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f9ad8e-eb6f-4178-bc66-924b8c3408fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "56f9b622-c7a7-4cc6-8e67-cb90358289da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb57d6a-4bd0-4d5f-9bc1-fecb65c48389",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad0e965-51b8-4922-9215-bab89ffb295f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa615a4f-8c6e-4212-aeb6-da9bf4408660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc96382e-8ac2-4aca-ba17-5d88cbe62988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98ea7681-df28-4c9e-8ad3-048d9ce099a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717d5b53-bcc9-46d8-b662-f8d5ab4a3c3d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce4c535-acb8-4887-b5d7-16b383c2dccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25ae20da-e775-429e-a6d8-34e6524ea347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a38652-2e64-4029-b042-855c0da7e8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "06fd67d7-5ed3-4113-8c77-af0f4367fd7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3931d74-564f-4c41-a02b-be5d5f5c85f3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7158f7-3e55-484b-b403-440dd9e9bf06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae7ead12-fac6-4e5c-b945-961dcdb14c76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1522f6eb-57b0-4f1a-8487-0d78a403129c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c937bd18-2cf4-4b06-9bee-84516bab0692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194c1e69-0a47-4192-83ae-e6870cbdd493",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe75ed92-a48c-46a8-946e-9e466694657e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a76f7e-433d-4c32-a2ca-8c3945a34dc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a8d8d5-fe48-4409-8eea-2a041545692e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "eefc5e67-6b8a-4db2-8aad-5c871f0a6417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9fb5607-d665-4e9f-bdf4-6ab9f9a325b5",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ee66f0-632b-4a03-9c47-7ac5e5636739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a20d7e6f-ff9e-4357-9622-4518d3ab8260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d87d4e9-db7e-4812-8a23-614c3fb6e964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "64127734-bf42-49f7-9ab3-4150a6aeb139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24f79a8-0325-4889-9b62-28d0f51b99f4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07bd1c5e-6cb9-44a0-b0b4-dc110a1a61f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e604b9d-dda2-4861-9f52-43439caf084d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839da50f-9c7d-4b82-a3f6-a018e7e5f297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca25934-a018-4af0-aeb6-8c3f2f311726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d342a97-2e8a-497d-899a-8337f363eb7a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede99f5c-c6af-43a9-897d-9ae5a4eac117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f073ee8-a878-467a-bf1b-3d902e2ea8ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "262cf1f9-fe8b-4175-8b38-6e8bfc9d2c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bf80f97-06f2-45c7-906b-53a2e2a0ca99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ec3384-ef3a-46b2-8ce5-a2bf9b168c1b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c24a76-b13a-4e02-ab36-8a6bdbb88165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c774bb3e-f7c4-4030-be18-84a0b1f9425f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "537f11ea-5eb2-42ba-b997-695384cf49d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2a0d5a9-252e-46cd-8128-c722997cccba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7046150f-9bc1-487d-a8d5-d0645469b8a6",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b04bcd0-e846-40d0-8809-0abda968b1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d732691a-6bb2-4020-95cf-18c38c89c5de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf34961-c840-4006-a525-b5b9b3a8a7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a3a7d95e-d8f8-48d1-9ccd-c47aaf309c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34f4f13-2f69-4c7f-8740-249d176b2205",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5ef4e4-a549-4614-9a92-65f3cd4d45a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb9e908-9a2d-42cb-91e2-43cc4e8d6997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e515c5b-a48d-444a-92eb-3587a8f32291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f606d97a-292b-4285-888a-a7e4d438e086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ae5215-c060-4abc-914a-74719132f46f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d104d5-2756-42b7-939c-9b69875beade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b786bc1f-2b40-4e1d-b5d4-2ecc9069518f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ec84de-a5ac-43a2-9b34-f583b741b7de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9756316-88ba-4f96-a851-75e16c5b4eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896fcf12-f616-4151-9989-a84c614470b4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9a750c-a34c-46a0-81e8-86ea55fde8c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2e6d178-dc55-4735-b7e4-a6407e6e7e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "991c30c0-79f1-4128-ab84-63f9b18ad479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3f049d4-3448-4c42-a260-bbb66de71ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8f30da-c9e9-46ee-97e1-474ab26e27d2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f188dd0-c6ba-4e24-85dc-54f8fea78f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85bf7042-20b3-41e0-88ec-9c2c538bb429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133e5c2e-4fda-41a5-b1d9-f15026c5aabc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a673648-1c98-4aa1-b1aa-83b7d6876e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f22ff67b-e58b-4d80-a75a-3bef8ce39e04",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9969dab-8967-4401-a148-222fcc67aa2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfb0f0f7-1905-4bed-ad4d-67542eab3c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7bae893-3368-4308-81fb-062a8da9e047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e2a0a8d-4687-432b-b371-2732eed51d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e33796-3ca9-4d8e-aa40-e52ec6acb595",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50a3a21-82c9-439d-8bfc-daa16ef49b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58766a55-7668-4d7e-835c-71e68965e210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a248ee6-b59c-4572-a328-51f48927bc16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d275b10-8dbe-4612-bacc-d00898a480c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00575e81-efcb-40d7-8564-d4a10ef8fe8b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a828923a-46f3-4f45-8714-600c76b7f084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5fd9949-80ef-4c65-9d5e-7257feec6341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0d8f7b-fb94-4648-9b5f-1fe1859b910b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d582fe7f-3f1b-42af-aea5-66065d940201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21293db5-ea21-46d3-ab1f-b5933df89ced",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bde3401-1d65-4440-99c0-8e938d8d815c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f61bb92-c9d7-495e-8e8f-8e9601924479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41d27bf-b42e-4712-882c-46e0ea75f1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "47a2e4cd-c9d4-4df7-91e3-5e2aaca6684a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1c7123-258f-40df-8a3b-afedc34f85c8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1465ee95-877d-4819-89e1-ddbe058550d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87600342-30e7-46d4-92fa-5d46a14188ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67023053-8a5a-4663-89c6-b7fc96ddccc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b94476c3-27a2-4c72-8f1d-001c9ab24369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4b5525-03de-4233-a326-6c5cec726c9f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4d1f1c-c0c7-4ae3-8598-f7caff533231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bff7a98-a8a3-4469-aa4f-aeedc2c1d1ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288afe11-b03c-4bf0-88b8-86f94372e423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3fd9e6f-be88-4b13-b427-b3effdddf48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f05af94b-fc6a-41d0-b664-3aac6542efab",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95323907-cead-472f-93aa-16a3951eab4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c607b410-81b2-4464-9113-15a393ca72d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d015a93-3d79-4dde-ae45-b45ad937896c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4fe7422e-a0d9-4c02-ba1c-c05b266cae24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba89457e-f243-43a4-9171-469f2340aa0c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0dac3d-7b19-4f38-ace8-52ecdebc1450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "620b03fe-c9db-4b1e-91e3-88a270ad16f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962e9cbf-c456-486e-854a-5cb4a2fee70f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ffe39a1-6c32-45ad-996b-ee7fff2a2627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869fcdab-6ac7-490e-8ba4-cd4cf036dacc",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "286b7469-701f-4bd4-959b-cee9551ba130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac61c2ce-c627-4769-b8e2-f4568d646ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b0982c-8f56-4df7-807c-cc54fba71d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "559489b5-3400-407b-a4a8-25e90e2c14a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a2e360-6319-4a8d-b129-b9c90ad43291",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1478ec38-97d8-4fe1-911e-ecc730ef3685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aec4a95c-9efa-4300-8d38-6de9ada384eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475b91db-1fff-4d66-a4f8-ef8292754e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6cc3b26-2cb0-4adc-84a2-cac86c0beb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ebb183-7dc6-42e7-a34b-5a4393ffb479",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f2cef7-3022-438b-9a73-acf461d8f393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad7ea0f9-92c1-4bfe-b17b-755f57fe2544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a06519b-ea80-4d64-ad07-1771d7028b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c13af1d9-a1b6-4003-af2c-0b2c2d3b5f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c66f7c-ee5d-4a06-9d56-1d2ab9334c30",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb74a73-f8cd-4e1e-a9f3-807fc8f87c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f441c64-44a3-438a-8c6a-a05120d448f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5007887d-db46-42dc-992d-1c269eb6ccfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "96f61814-9e9d-459c-956c-3c7c4a5ae442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d452ebf8-f6e8-4b36-a1bd-77cff879f28f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38147ca7-f853-403a-85b9-073ddf1e1e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9058d8e6-ea19-4644-ac02-f026db0d8ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd099c2e-deec-4518-880a-a2c29dbc2915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "42568614-34bd-4a37-94ef-a4f8843278dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f3da9c-164d-4602-a953-6c3ad49b4c27",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e5cd77-9b92-43bb-a28a-0415d988b879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6efa51b9-ecd2-4b76-9597-593c97c79fbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d800d66c-97fe-4a37-a8a9-02ca1f72eb91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3ce6f6fe-2bb0-4734-9c6b-ce9f55551dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f20c23c7-84fb-44ad-a608-287f9f68d6e5",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a7efd7-b59e-4528-8bad-a0a99eceaaef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44cf2f2e-91fb-47e2-8a6e-086089190de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210d4b74-8baf-4ab0-ae1d-e650f59b081b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "06deca56-baf9-4283-808a-0c62cac5adcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a7912d-2a21-48b0-96da-c028908c8217",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "428dc113-5407-4e7e-a400-646f4bf09f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd881382-bbca-44db-a669-de424a1b28d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1649a8-80e3-4539-ab5b-141c9513e320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "180d19ea-0d7f-469b-9c63-1a5b843e1f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e015ba8-eb98-4d5d-949b-5960bd10cb72",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "085a82ed-b6bf-4719-af96-a336d3e78435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "460a88f9-1627-4543-aaca-922e49d0468a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a66c480-7792-4dd7-a57b-b53c01696e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c4439d-aafa-4930-bd0a-8a41d2055687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a7ca2e-d848-4066-9a5e-a3cdbee9bb0b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b96e6bb-81c4-4d00-9704-e51cae270323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f628efe-234f-49ff-ae50-97d0b5445598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335bf2c1-5360-4fed-9361-48de74f00a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c44d09c-265b-4b0a-9f41-3db3d701a24b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0347413a-79a2-4b90-9815-0eac62d566f2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f5444b-5578-4312-9d3b-afe8c7ec198b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "060a728e-ba04-45d0-ac36-e04e77bc706b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a8966c3-b015-4785-b27b-9b5791907f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "66a46e25-670a-4799-ba6f-4219905e8c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e94fed-a75e-4b72-884b-8304027bf779",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dac82f8-4456-45ff-a832-604fafbe2a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d01ed7-92fe-4d81-a538-413e28bc5f85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f0a3f6-5447-4d16-8998-cc2f9456355d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c697441d-c6e5-406a-b2ed-264b124527e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac326b8-c69e-4f98-b75a-63e91b6d00c8",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "983dac39-9b12-4559-8891-2ba1201bf25d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42fde1b0-4bdc-4960-a08d-b662c88e72a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bcb2fdd-5b51-403e-b1b1-ed5209165b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d296228-892c-42ff-b545-49fefd8b03ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c4242e5-8e49-427e-8714-79ea0766e408",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0df88e5-d7ef-4124-b80f-826df8534405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a132b9-84c6-42a4-939a-9f3ad3af342b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd852c31-7289-43a6-9c09-f4cbf3b3a452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e276b7e5-2fb6-4146-aa8a-21cc98ef9963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f526c0-b053-4a22-a4a9-d0a67c200d0a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e95446-ac7c-4d5f-bdf1-db9a05df1437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e0ba7ac-aaae-40dd-a068-a496f9a01352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620d6aca-0403-4281-ba82-7d87b59e36b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff13e9df-f3c7-4486-9a35-ee29df1f17ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fee4093-0cd7-475c-9cce-abfb683b4586",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3a0012-d408-4520-9b5f-0d610a6113df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6c4879-6d87-434a-bd3e-f87f6bc2b805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf13520-c24f-4a8b-8efb-e8f11eae725d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "602a947d-a27f-4212-b794-bee9b4b8f6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7ab5c8-568a-4a05-9f81-c9dec7337bec",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f83fc55-c5bc-40ce-b994-fae45ea131d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59624342-7b85-4907-b918-00c9096f8e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9e079d-ea0c-4e27-a230-4d4c3689df83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "01d30451-5d47-4d31-a626-7ee13d49c717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b25721-78d0-4ef2-a81d-0335bc420dfe",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63bbebf6-a130-436f-b1a2-5e46a23910a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc65de09-93db-4d4d-9c85-b4d88266e817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73bee653-a4eb-45ee-a447-fe03f736a7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3744c53-e0ac-4255-8910-c0b190dfd2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8314862-7761-4c96-9b70-935708fbae57",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9edfc08-2df9-4b5c-9ca4-57765d3f7257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "389a705b-f954-47b8-b365-caa279d993ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1e4066-b78b-4b97-90f2-ec0be54252f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a7fdb0c-4bbd-4698-a838-d56bf9a864b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ce9c2c-4137-4a0b-865d-9f560bfb65d2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35006520-c3b6-4fe4-93f2-e4da57ed9c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b806c80-db38-421d-be91-8a3f18905540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b9f8d89-a81d-4469-922e-76a46db28f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "56b94182-8c0c-4e26-ac6e-81fbb25d6f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c8d7c0-bdac-42ed-9382-cc17e8e33cca",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcd2ce3-f464-4fdf-9c19-3cb69268be51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbb6798d-2174-4bea-93ee-3ca6357d6131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23433e6b-aea4-4a48-93e5-5dcf5e61e7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6470e1f-71c0-4b43-b767-fefef4af2b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba3b8e7-12f6-42cf-8dfb-6af6ddbe1559",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a1ccda-5fd7-4c63-9870-798e2b629abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30610b1a-33c9-4016-bfc7-352bdac01fc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2069c706-9afb-4ac0-8341-1ba0c0c5eed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9443033a-645c-4f78-af37-43e2c6bed2d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861be09e-1139-4652-ac4b-3741d919b54f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "047d3661-f4a3-424b-8d2f-be24db3d3ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8af25ac4-91be-4b17-a46b-5a1983e82f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a98ab88-6e3e-4353-9931-51fdedbadc2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "18c0d07e-d000-4c36-81ad-dbcbcfa5cea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66f2ab4-a6fb-44cc-82f3-052d22c1eead",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6672069-dfbe-4b79-b6f9-9c59fc6b5a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "933cc9a3-db7b-497b-9fee-77310a2a29ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4ff120-7da0-4413-8f93-abfe6a145642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6bab518-1443-44f4-acb8-9cdc42f29dd0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "69c9de09-a4e3-4c46-bb66-69b2607cfd3c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0c8a39a8-9d88-46f7-81f1-5fc1b0cc2c26",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c67c740-9dc5-4d32-8d76-d2aceadb1118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b1463bbf-c686-4c53-9755-27bfd0461ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d59fd9e-298b-4183-b9c8-3b6fd73e375f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37a9b9d5-b97a-4261-a0b1-74deb40aeeed"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27061fb4-cb6f-44d3-bd15-dafc13cad6f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff0c54e0-69b9-429c-85e2-58e6687a3ec3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a42d1c0b-2741-4e85-99a7-e58c1ad420a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0114838-3f53-44a6-9be1-e064b91b0a40"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "382c1176-7fe2-4709-b394-5aacb08592d8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "abdf63a0-a148-40ec-9cde-ca24eeb006fc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "809a06b4-cbc7-4f89-8e2a-d84888d275d6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1c9f7cf2-065b-4d62-8b96-1d703b814803"
                }
              }
            ]
          },
          {
            "id": "8c08e40f-deaf-41b5-8abb-4184ef807bb6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8bdf8337-2cd0-421a-b179-b2ef7ec4b77e",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "ade95496-5a5d-4faf-aca3-0a3fdf194035",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e7aea3-d6d7-4a30-a8b5-2b590f5765bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f2c46ad5-8c28-441b-ace6-2f3a3cab5a03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4278b2e2-18b9-4582-b4a7-becc424d74a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73daff73-a4f3-4350-a09e-992acf678b4a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "00f1196e-74da-4604-bfb6-2202d93d50b4",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f5c7698-fbae-482e-b605-f9bdf9cd2dd8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d52bf054-0298-4ab4-ab32-726282722226"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5eb74854-3908-417d-8b54-abde38358d0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "92cb2b49-b393-4f8a-96ef-8d47608dfd7d"
                    }
                  }
                ]
              },
              {
                "id": "fce7e108-8381-41ce-9a6e-e1499b9407fd",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c18db7e-d953-4c25-b66b-54962dd77bb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b30e291c-0637-4ea0-a8e7-1155d8d8a9f7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d00647a4-bcb5-4c31-9771-6c4e1bab1b0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5752be2d-9962-47f5-8b76-52e2483031ff"
                    }
                  }
                ]
              },
              {
                "id": "a91d7ec6-d732-4229-bd8f-afc11b8dfe90",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5705f4f-7771-4ae5-af7b-3a2d9667bc6a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7590e14-f8f2-435b-bc6e-392e0b1ea0c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92876405-6e97-454d-bb2c-8d4f2f1663a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6a6db166-1f21-4c01-8bcd-af5f71c23488"
                    }
                  }
                ]
              },
              {
                "id": "bc1b8df9-78d4-4e0d-9ed3-4e9e7309086c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "720d54fa-80c6-415e-9fe9-b65b00003553",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ff4c9d0b-995c-43d5-b7a2-4c463f8de7fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31445fba-b06f-4dae-9e30-e2eeb16f90f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6aecae01-0388-4f1f-ac11-114ca7abb718"
                    }
                  }
                ]
              },
              {
                "id": "1aa94f80-c1ab-4a7a-baae-a074cf709027",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c054b89-fb36-46b3-b5ab-7dc04bfbf62a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "952757f5-118f-4bf1-bbbe-3d53c4a74118"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1fcd92c-3a6e-4026-939c-0c402a06236f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "75fc8cf4-2329-4d99-822f-f2117edae8a6"
                    }
                  }
                ]
              },
              {
                "id": "9f29a8f3-f363-4006-be87-4757c4cba761",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0fd7e43b-f71c-4cca-90e2-9768239decc2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "94da066d-0fb9-447d-8077-b10a01166eaa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa237dd0-edfa-46d2-8605-247a3f3afbde",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a201e768-2e2c-4f52-833d-48d28e3d6b07"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2e89be2a-0e9a-4208-bbc6-0f5b2ffa79be",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6aa9ebcd-94ca-483b-90f1-dcc1f3efd21a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c1bc431e-8d14-48d9-8a52-9b8735bb7d16",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8bcea4e2-9c60-4d7c-851d-4f30d63afcc3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79cfe945-9c58-48ba-8e33-a0f9db088774",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ca311f46-cfc4-41af-a0a3-98a99a6cf748"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31a7c13e-ae74-4e51-8c6a-7b07b0a4eb5f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7820f537-3384-4804-8747-f6de1763c568"
            }
          }
        ]
      },
      {
        "id": "316fcc8d-613a-4460-97dd-2c5b595f55e5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "cb583744-0bb2-4839-9c79-5d7264e328ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "99e60158-0f73-487b-aed5-8a7e93573e72",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9a3fdd32-9946-4ec6-9076-b6ea5474d25b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c44ac6-a7c8-400b-87e4-f2f3332ca779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28159457-e629-46d8-8274-973b26dec1df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e83dd1-6848-4d92-b877-8fd32b1e4ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef5ce136-ab93-46a6-816a-6dc69615a404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906bbc57-4bdb-4f7b-9a50-20c134fd3cba",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70192007-0497-44f0-926d-ce343b53ed75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ea4e1d-6598-477d-8aa3-e0302bed2fe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c4ef0b-6345-4d89-868d-82856997ccd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "42029fe4-29c1-499e-ad32-dda506d21bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2aa815-c658-40a1-ad1d-7a3b4f6c1352",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92205b19-6db2-4870-ad43-2a4fbedb1bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b44ed8f-99e0-4b30-abb0-94475422c14d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901bd6a2-0096-4c5f-ae5b-1f36c64b39bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56dba2b6-0d0d-4fe1-9787-42901bee8592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8830b8c-10eb-480f-8fdc-d32cff94f475",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79316396-accb-4a77-9405-49f41b0fa35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7640b9d0-5ca3-42fe-a7e6-f2f77eb016f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3918d3-8236-4a8c-8ef3-aac7fd5e37ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d61dc8d7-8c13-4e0c-b232-6b55674e8fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee197279-835b-493f-ab7d-2f31306a2ea7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d173f48-fd67-411c-aa8f-cab1b714e6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98434473-392f-4934-8d02-a1dd33ee5e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c988d8ea-8b59-4d2f-ae2c-0308dce8aef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8726a12e-66dd-428f-b46c-b1e8b34903b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16fdd76f-979e-4fa1-b2ff-5a476398a656",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9059c8b1-6fad-4c84-8b4f-562858cbc563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ea5d36-9474-4aad-833d-a2a594e7b501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a549c5a7-8604-478f-a202-6b68dd0e5798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "644f855d-94cd-4be1-a727-db350b9f6c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c14af1-b2ed-44be-b3b6-a8df5df55171",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d55272b-722e-44bc-a6db-6f8db26ad8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f596f3f3-04dd-47f6-949e-296e75355444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d206b0-0fa6-4649-9b2c-7d2330fa1fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1410ad7b-5544-4d23-8298-d69fc869c8d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d95f90-9f4d-4e83-9cac-c2b8f5cd6e1a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "614430e9-f176-41d4-b4f6-19c9c8b0ac16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9caad58-ddaa-4104-bb74-e545f7b10c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69807bde-da91-4d0a-b271-00d4ae6ca761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01299695-5020-42c9-9603-35964bb9276a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "113d2fe7-5c09-435c-a169-c0ce2455224e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e29da6-c26a-4768-9b9a-7b90a2887c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cff2ef8b-520e-46d9-8859-71a2b74050cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4907fb6-f597-44fa-be01-6e850cecc39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "182df8c9-df16-4e75-9527-b0687d2799c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b8d625-4cbf-4e79-b6ca-6e413da00102",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc41ab8-9c7c-4238-ae0d-023554680080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10e7cb25-289c-42d5-a008-673b6d9244fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54178fda-079d-4d7b-ae47-fa6cca04a90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd3f94df-f338-42ae-9a7d-a25057470df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d9eddb-ffe5-434b-b526-0510b459c974",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e255fb88-4fcd-4966-a987-18d2f7c0c7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f3063ed-4b20-4279-9d75-1ed6452e5286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d7c6be-d786-43de-bcab-d5d92acc0d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b77db7e8-2fdd-4f7e-93b2-cf526ec333b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1061dae8-7f61-4544-af28-1ca2d4fc9d30",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d05096b-6b87-4826-9670-c3df5169371b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "524353fd-b116-4257-a78a-7cf8219a5039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303d5a85-8c9d-49c4-bbed-eedbb8058caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "00fd7020-4d0a-4032-a7af-6faf4d4b6f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "233c671a-0be0-423d-a78f-83cb4131d319",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "986e83d4-51ff-4686-aea0-85ff9bf5c28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a53d5087-5cb3-456f-9b1c-eb2b54a3f22e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6f6168-9273-48a7-88e2-7874081e1df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5837714-975b-4429-aacd-72548ca75fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b08cc9a-9e17-4f06-a036-81da7029ebf8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e56b62af-aee5-4999-afd9-dff5ed52fd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2499f9d2-a50f-4429-bc91-6eaab7d329a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4135c4ca-c4fd-4afe-947d-47a88f44db2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "99537327-4648-470d-b3cf-5dc5d1c39d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5df0fb-ac04-47bf-abe9-6356a756d2ff",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "660cf448-fd5a-4fe2-9ca8-67afde12a89d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd57f9dd-71c5-4db0-b258-8f2db0af3c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1781ab85-db73-4c9c-bf8c-2ab5f38e74fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f2aa212-1d57-4162-8dab-1719b92a4cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aebeee8e-6cc3-49d1-97ce-3fc2cca022f2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9e227b-0dec-4eb1-bd90-edd660317cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d44440c-f43d-42b4-87f2-01e3c29d65d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97928c3f-8073-4f85-a003-63df1145771a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "84d28774-a2de-497f-8902-dcb0ba0c5c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd350390-506b-4bd6-b06e-0f4c7125a019",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "affb09d1-2a41-4f8e-8d81-021344e01554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c48f856-88cd-403f-af44-cf22945966bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68cf81b-24ea-4dd9-815c-9fb33574720f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "26e4d1b8-0f82-4ca1-991d-d4de964ffa91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f2e78f-03ce-4fd6-9a6f-e442e052bf41",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33101be6-70bf-4ca9-bb78-091f96ddf65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0e7bcca-4033-4ebc-9b10-bb5b0a246857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9839538-b95b-4634-85ea-ae64e5849904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b784a9d-ac52-4e00-a8dd-371edafbe7d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0575d5-0410-4a76-ac61-f2e71e844e45",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41aa829-4de9-4ae6-9885-b35d26d41572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ad9d95a-c174-4edb-a745-2f28bb9da646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05cfbd92-9683-4f38-9ce2-e541b4eb9c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "220a3495-e04f-405f-8f6e-90133c39d3da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8203a4-db30-4d11-ac90-4093cf6659bc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf824f98-e147-4d52-a1ae-9cd7969b2289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60d915ef-a62e-4472-be5d-14fa10963d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1de724-090b-4f98-873d-b252f099574e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b6a45f5-4263-4c40-8e19-5c1ef29184a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120836f6-facf-46e0-a4b5-44c21e584bf8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "659332b3-189b-4d9d-8034-b7ff2016573c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87990e00-1d98-4a7f-826a-da1a2bed6803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd6c315-7195-4772-9659-95d7f46cb3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "109fe8bf-3b1f-47be-b2c7-5d72c6e306f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354c3861-5614-4fe1-a7f1-936d8fe0715e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c721d8de-633c-458a-b972-2cbdb27180b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a709f2-96fb-428e-9b37-b8d65cb66f5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0244c6f-0ee6-423e-987a-468ede04d066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8a27965-04b6-40d2-8cc0-cd82e15a1c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acca2e0a-ef45-4d8d-acf5-267c433e0c7d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "637e9910-82a9-4751-a7a4-6ca0e4159e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b22c2a6-3053-482d-aca5-2721d59aff43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b676d12-8472-45e2-819b-59b6aee5ff4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd094140-f71c-446b-a8f6-3cd22d12a241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e2f9ec-286b-434b-9462-c308079b8152",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4fb89ce-3e52-4b0d-91bc-53a0fd18beb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81f064ba-2ca7-481f-85f0-0327874a0939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7aa4de-ac87-4a0a-b369-755b92abdb19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "526d4104-0e57-4bc9-904d-a9d90f609ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a972f6ad-898b-4170-a673-48a4909dcd50",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38747ee-8d56-4da4-943c-2daa83e11a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1582f0d2-a0f0-4842-87d3-a70870daa009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5413c75-f5f5-4c38-844f-0ccc0171631b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c07ff28-e66b-410c-bd47-1f03b15f1ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6ddc87-f675-4038-9a05-889c51722f9d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f8858b-26bd-4be5-804c-984d13910057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb624dde-1c34-42fe-923b-2d0e48bf93b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8be9e9f-006e-4eec-87e1-7026c83ef7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "364063f0-e661-4df9-ad3e-5bfb7e4c16b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89de434-ecb6-4d48-a757-b1932037e398",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "354a442c-6a7e-4a35-8345-7d8f5c8eb80b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf810e4f-3637-451e-a59f-9dbae0079eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4718e91e-aa2e-4494-9c32-98d10e3c31ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "808ebf68-b00c-4cd3-90bb-00418613a0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540bb1b4-4df9-4e47-95d2-da21cfe582f3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b7e72e-2ad2-4d67-b6ec-e3f55cff1ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eb30496-452b-4f96-8fdf-53b293f19683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311d318d-fbf5-4084-aab0-62c059cb42f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac6278b-36f7-43ff-9e53-e6c6a497b985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcaa7c9-be55-4d5e-8369-260ba85d1293",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e7dd2c-3167-46c3-8300-cd41bd44c20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d69ea51-b0f7-44f4-ad6a-a3ca232e5ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114645f4-b731-4746-916f-7df9dde2f6c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7ba3c48-3b7d-48f5-9760-251c4714f858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c591b401-d9a0-48b2-8ae1-8fb73bb926ea",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0d112d-0b51-420b-8f9a-e70dfb8ddda2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "005c2140-dd94-4478-b062-d00f439b90a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d6f7d3-596d-4cd4-aaa8-beedfa1344c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7d3253c-fa6f-45e4-972a-a462a2a85a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d539987-46fd-4657-a1a5-627327bea1b2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d2886e-b2ca-4c0c-bb68-a75a0cc1dec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "880b6bce-0429-4056-aa31-f9ad8f59405a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a224ce-85a0-4dc6-bb76-02d0b101d530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07ccc602-08b9-4af7-8e58-fe0bb82f9d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dadfd85-4807-42a7-83df-30e645de9e6e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f863e5-11ff-45dc-95c6-caa0ee582fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd5fdf65-0383-4165-a017-4266d1afd70b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8040f05c-36f5-4587-9e9f-97f5355e4a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9bf90e9-a52c-4b28-b427-9e3dd549fccd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "50c7c901-5fcb-4a05-9bc6-92e0da0f05d9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0b85ec89-c6c5-45c7-bfe0-22039e13ea20",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa5851c-6002-4f1b-9acf-7bf6210eed1e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0b17987c-2f6f-448f-b2b3-d33a61933c8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1968f0-6f4b-4921-af67-4a0024fbb540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c0bca51-a6f7-4b0a-9b81-cb6b28c75ebf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0972b518-4a33-4c9a-ab53-8c7b4296158b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0270a584-cf76-44ff-be90-72df04b878ee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0eda6a7-5802-4a02-9f7c-bfda3e30d2b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5654b51f-d334-4577-a857-604d14cf1c2b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "03761270-4705-4843-9723-3ccc3d1a7c8e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "29d32ff3-cfef-48ff-8b00-10fec7b9a2cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69ecb1bb-9205-498c-9d65-5bbab0019603",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2435cdc0-3910-4364-8331-6032142b7dd2"
            }
          }
        ]
      },
      {
        "id": "06a24ab8-a2a3-48de-9ca1-9fd148a6fb8f",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "77bc9e9d-7c38-468d-a74f-cae157a5d177",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fddb95cd-ccca-42c2-a21e-f6d542357530",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "56f61856-40fa-4ee5-a9d5-d80a3c385e79",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a5d054-1bf4-42ac-b05b-ac2f832ad549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e6121f-1a83-42c0-8f22-1e32b8ca6b77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1f58e5-f8cd-4ad6-8b14-8b24d385b1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d895f31d-c57d-44fe-b783-d96a548d4870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608b05f3-39b8-4f20-ba57-0e3a863b70d7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3a4fb0-e7bd-48ac-96b0-54b419a6a9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8494cc6-fba0-479e-a7e1-9726454e0f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c815677-b422-4afb-a672-5763b3375920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc028652-d0f6-49ee-ba39-177f9714653d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991d8869-4d60-4d85-a58b-bd3a64ba1450",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69087db0-d317-4086-82cc-139de049ae03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ef6b1b6-e1d0-4175-9591-db303747a378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6800f0f-264c-4881-9a82-0dae82bb0a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61b36c28-7f09-48fe-920f-31557248ea62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd5f04b-8709-48a6-8523-dbf0d945aeee",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f732a9-ee5b-4899-8dac-847477dbbced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ebb18cd-e8ed-4a56-85c9-9b6578c0f332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3163a277-1973-49de-8148-98170610e991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb18150-0e6f-45cd-9368-e7683da680db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fddc57-3f0a-499d-9097-e4f9f9834ade",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f85bd4-0080-47fb-8f35-3db6cd61b83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "616ea145-dc16-420c-994c-5ca72002517d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6d1baa-6627-43ac-8acd-98521b399f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f5bd43e-4f89-402e-9545-bdb73735116a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f25279-fbcc-4a74-9290-679eb6666c30",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1464f75-fab8-451b-a1df-38e05cdafbf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da87d07-4f00-4cb6-944f-d5f6ba5fd009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f89c1d-9072-4ffe-b7eb-18405cddf940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c913dd32-d85b-4064-a1ab-9f90d4cddc95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b1ea2f-a5aa-4e69-a67b-0725cf02766e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a7a94d-a8e2-4f79-a4af-6adb6b65f81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47da6a9b-76bb-47c7-849a-d09cccaa8fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fbf30c4-cdfe-4c8a-9d68-f9c35e82da26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c20c785-5947-4916-a303-a484d7a4edda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab46ad50-9584-4021-8f5b-7acc601570ce",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8855ebc2-aa68-4a08-9598-6231ee36cd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf47c12f-ad2f-4c3b-a28e-ffc4dffb60ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0fb73ad-55ca-4e17-89cb-1cc7ec143038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab47788-6976-4f0a-91d5-585fb00c3832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5dc84bf-c2d6-49d7-abda-56d5739fa339",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49fd670e-173e-4d3b-9485-8676be77bb34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7544453f-4271-4a47-8f32-144532376191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b7caf3-a83d-4a6a-849f-567a8e01968c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8663f06-298f-49e0-bc96-030efd605b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8fb0ae-afb8-44d7-bc38-67a6047238ad",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d2eceb-f150-47aa-81eb-98cf659368db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91312c32-af67-489e-b6f4-574316184e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c220186-d77b-448c-b5ab-266bce8079c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "218b69f1-4b78-49a5-8567-c086f053d636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90788887-707a-4ad4-9f4f-450e67fccc71",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2850fe4-755e-4a95-9c63-e5ffdd046811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d76d6632-ff1c-458d-9c45-32e2e79861e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9425d179-86cb-4048-8dbb-4540ebb7cc1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ccebf977-cf5e-4802-b0ea-688267582e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ecdb14-71f5-4753-91be-f61aebb7eb45",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc5cc94-1169-489e-a67f-e3e5054e2c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aefcb83-cad9-4cf3-854f-7f399b4b4934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e11b09-8c7c-467f-bbe6-d59440801431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7c86eea5-ac36-4864-bae4-75e8df003b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c4e594-c76b-4ca0-be8f-4eaef0142b43",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "076e8f71-673d-44db-ba29-acfdc9c455e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8730894d-3267-437c-97bd-180d023689f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd93e39b-e276-4d72-9340-a70a774dba87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b84e53ca-e2f9-4af0-a034-df83ca86a3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c5bb7c-2be7-407c-ad1c-ea8586118764",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "940e100a-d7ad-4027-94ea-5f378687a000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d5caf1f-12e5-446c-8140-9d102e1ac441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a650eb13-be3c-47f1-a7f3-2d028ff9b834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4efaa2d-d534-421b-9e28-82a2cfbd20bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e66eb4-7f5c-4448-8ed3-935e0d114525",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c61b662-9e6d-4dad-9688-d8fa89884612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc929573-a96b-4699-82f7-c82f7f69a453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36f0ecd-d372-46c0-8c6d-236ec2e6a34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e39cc280-7b79-4196-baf6-65cc428026c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011040c3-b37c-4732-ac9c-cd817849c893",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d336c159-2960-496c-9120-e95acb36a59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09fc4402-8c90-41de-9829-9b927bc7a4c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc1b0aa-d648-471c-9bb7-2b17fc8440b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb094bad-958f-4276-8b15-697a922cd84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d12d7ce9-424b-4140-8d01-fd7efb7b6423",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01bda00-f52e-4110-9cf2-52e42f554223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4caa4893-b936-457c-94dd-28e3aa2da159"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5359309a-ac17-48d0-b08a-f686d0922fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d50c6c45-f234-4c51-b91f-6993918e9686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb837429-8e06-4a78-a596-f85aa5ada5ce",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdf483e-d498-4a18-924b-7d7388963d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd785696-12a7-434f-988d-5042a0eba394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f3532a-5c4a-4cb5-8969-29b1e20d0eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a010ab5a-dd2f-4366-9334-a77fb520454f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b7d71e-e2d7-4dd3-840a-5235b707a52d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa27e1f7-b5fc-4d38-bfc3-a6bf9ee20a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98e70d07-7721-48bc-960b-97e33dbb4cfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d02a87-cecd-4fc2-9d04-9d9d4415b011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b69d2201-93b7-41c0-9457-a011ecd2a2aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ec3542-75ea-434b-8593-e18b9e308254",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99a2707-70a6-4cdc-9a03-8a776612a3c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f40536d3-a739-4399-a041-79c25f0d8f40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c90894-549e-4cfb-ba71-452578e4c861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8abcd84f-1777-47fe-9bfb-536075ed2aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94c22e8-4f71-4256-93d7-6027433c2366",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa98b2b8-4b3d-4a4f-8a4d-54c3af32a6fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d1e24c-4708-465d-8394-2084edb21981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "375a5fcb-4bdf-42db-b3ca-536e5b877329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52882033-4b11-4343-8640-b70b72d36baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb0f8eb-d515-49fe-8ded-3ee9e52f7978",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1cd413-76a2-4b4b-a70c-430bb9d718ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf22707-2eff-4d13-8df9-739df3757936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79f440d-1ae2-423d-870f-a4f33d537608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4aef4b79-650f-443a-a464-12a8eafbf9cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ce1d03-d234-4076-b0a6-cad5db241d6d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd1ff9b-9b0a-4933-ac68-b6118a0ac2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2723a9db-6943-4a8c-b28d-25103c390693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16038c5d-102f-4774-b810-3303b037d2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "384ecc71-ebfb-471f-98b8-7cb8f4bbd93e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf5e1bd-0044-48f5-b3cc-5a52d8ad4407",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca9aa85-cac2-49a4-88fe-12271858b8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b420f693-5a0a-48bf-8c9f-6cc9b41b8bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6488f540-a225-4080-92b7-375e515d5d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56dc1aaa-4f4e-4fdb-93b8-adeaa1076212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b026a993-a456-4683-90a6-dcc4f77a3a1f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf356d8-53d8-4895-97ed-370bfa13ac82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2643c4a-d2a5-45c1-b05c-4363b726d9be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa1f340-7adf-4dfe-b514-40c82a6c1638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01c9a077-edab-4e91-a2e3-995c756a76fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad57eab-b5b1-424e-aced-b2a117705e51",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a375b22-bbfa-4371-a904-4143cf24164c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5ac9561-2931-4f20-bb65-b25bdf0e8a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e3d9a4-0f3a-4453-888e-801a65fa6e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f1b2b2c-7cd0-4a5c-add4-2720d4a99637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad6b951-0024-4b39-9b71-e900a4defdc9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d2935f-4089-42f2-9386-fc78e4adecfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a68b9ffa-26ee-4ee7-bce9-c99ae44ee147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f34376d5-9dc6-4355-b55d-83a3147b0904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9843052-e9fd-4035-81a6-4088d159ff1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa4fde0-4d1e-4e69-9534-219e6080d152",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4c8bba-61f5-47a8-b95d-f60b4bb79872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c42ad22-313a-4525-9e63-203520da0a6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ffb2d9-68bc-41b3-aca4-6a0dc6cc784a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c07fae4f-edb3-4c2f-abd4-48fb50367b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9ffaee-733f-4cbc-9b46-6e067c2f1a43",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e556f7ac-006e-4478-8ea8-37fd8ac5f930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee6dd83f-0759-42c6-9402-03a0b12df5ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7085ea1-e45c-4337-9dda-949fa2d2e8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6030b54a-56c2-41cd-a125-288af8b1cf7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6091db8e-8aa8-4785-adeb-b6749dfe976c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09776545-1d02-4f47-88fa-09b20abfab72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe3b49ff-6834-455b-932f-0a5cf12e001f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b05230-8d21-4b9e-8876-90c1796c04d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9319c1c-77ad-49b1-9c61-b30738819a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0076fc6-58b2-41a1-b1b1-276b256aef9c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2bdf9a8-1643-444f-a765-1ae9f4215a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5970573c-9e95-479f-b00f-e686b2a3385b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70de76f3-7de8-4176-b516-03037acf60fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "088665d2-8ac2-4ba4-beda-fe7d48e09e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e986b1b-359b-4524-a229-3eb50a9a672f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "547767f6-fa94-4200-8a8b-d3cde92784ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebe811ee-679a-462f-8841-e94241b73742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9402a8d-6af9-4137-ab4a-8fc75aa2ffb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f3a539a-8c7f-4c4c-8e4e-a1bcbdbe63e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d97ac2-365f-4bce-a888-a7fd7fdbd56d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94f0c99-d2e5-4a73-8cb0-508be8cd83f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daf05a63-43e1-4a76-b9a2-d104d917663f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfdea897-1b14-4cc6-a180-af6f3860db5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec149e88-4ca0-4d89-9c5b-accc454f6981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "299e9074-26dc-4410-a1d6-8ead5b844bc5",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23e81f6-1581-4d36-a1b8-6041f4350e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3db2c8b-4df8-4b5e-8198-2c329d11dc62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8680384b-e937-4e7d-8564-c2354f146f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5d913a1-46f4-4a10-bdce-b6f632ef9cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "921c4051-32af-4967-8a37-58abfcff7b28",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c9de44-6f1f-4287-8b71-a314130ba770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d021fc66-5f92-4a07-99df-1777168bc062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b087179b-341d-49b5-8cf9-3558820e5e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d0dab72-c056-43ea-ab25-1fb067689694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d0449e-52fa-4af1-909b-dd03aebf38da",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35696cfb-35ef-474c-9a7e-b0302d582767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "842b5cb9-3186-4adc-94aa-8c9e631085b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d6e489-8acb-4cd8-b6b3-9e3e8cb92493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcc0fb54-5278-42ee-ad38-670549709253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b1b94fb-1e9b-4717-9b38-8f9adb36d616",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5966c7-9ee7-46a1-a881-d2db44791a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4bf750a-2478-49e3-931c-232f6b6a2c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c798470-2323-46ee-8a9a-8d0acea9cb55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2137a57a-71be-40eb-b546-e7d404416639"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "12fe4c79-5720-4214-8d11-05d7843bef04",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "33a9c047-85c9-497a-9c89-d03d8f26039b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4f6459-3382-48ef-81e9-06b89c971776",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3cfbe0ab-7139-48c7-a168-5d4f009abaf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8f047d-d221-4a58-ba2e-6fd5853ab69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4912675-fc94-4b61-bc70-027d0f6b1c6a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5bec7230-70c1-4925-8acf-d0d149ee9c18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5aa166cb-02af-4fc9-b0d0-34e8eaa0dcc5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "33e624b9-d749-4daa-a4a3-29642b54c072",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b78f24dc-27a8-4361-884d-476d454f3da3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8051a8f9-c76b-48f2-b9bd-026f96f8f4e8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cc1fc29e-812c-4228-9274-3f1b57db0e69"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "02856b40-623c-48a2-b313-a7cb28a19fee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "93751389-6211-4084-8b2f-5906645475b0"
            }
          }
        ]
      },
      {
        "id": "ba2a8a36-c5ad-42d5-af8e-5bdc67fbc0c1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "15c7b8ab-c23a-4985-b79a-4a7b8bb1106b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc969e02-1fd5-499f-9303-a8f886b613c2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4cbd9048-3de6-4b13-8166-6982411a8fd1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcea25f4-342b-482c-b5d9-bfa2b9a1595b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92083423-1a1d-4e6a-bd72-7702d0d61c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e457f89-65b1-4b3b-a254-a41c3a392de4",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d665ff-9468-4fed-9e54-0534ab37a044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "064f7e25-0a2f-416e-8b67-7f35a7e7418e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8be0bc2-2264-4515-abc1-43684b4a7246",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2780b5a-82ab-4a08-a2c8-9ef04be8d87e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ca6dae-248a-46a0-8aa5-7044e7b214f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e50bf0-40d3-4b4e-b534-1070af2a06a6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb45db30-6d4d-4824-8719-6d929dadd6d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa3787e-6421-42d8-9cc6-58adda390bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "408c7d66-c8ba-4c59-8433-7004dd25dc15",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d13f821-3945-4090-b37b-8edbac6f5fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4ae2999-bca0-4f1f-bb50-1b3eff050d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d2534a-bd1c-4964-afa9-7711c5dad801",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a01a5d2-6a3b-43a6-acf7-bf1b68e83278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82c067c6-aaac-40e7-9b4b-8f1a732e5b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5824ee4b-b40e-462a-8860-b99259ba4df4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20397af-9198-45cb-8133-236b5b6e0e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66e55746-163d-426b-baff-51d7001f8ec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29c6977-a8da-47b2-8583-401c4e0366eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c3e99bc-3044-46fa-b168-46c00e5e287b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29e46bd-3318-4385-8f16-fd6bd1a35740",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29610508-3714-40c3-9d66-12783025e458",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ad350d2-888c-4548-9fd5-7e1f055e709b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abedf2d-9ffc-46e1-abb2-d372bc9d4911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b76357c-ed50-40d1-968b-0f1c00c9667f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ef4436-fb6b-497a-901c-a1d1c0341be7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e1ccaf-3052-411b-8b25-d3fa8478ba75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cca82c40-c662-4662-8c9f-519d582ae5ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "131e0091-e76c-4bcd-8174-d7791c6e7a10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24ae0436-0d52-4f06-9547-54e245589e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330d5b7b-7e7d-46f1-aab8-5fd76b57a6d4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2eaac4-79a8-4ca4-961a-ae609e4f7546",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6d54505-e3ee-4943-98b6-b35774d819d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36eee54-636e-49ae-8e59-58d2c373fb8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5428f86-79dc-40e8-847a-3afbfad4846c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0400f4f0-c8a1-4d00-b8e1-05e5a17a9c5d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6d9dc4-0e7d-4565-b43a-a5623a000d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d5b0cb5-0076-420c-9974-b722ac634dd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52b161d-9f0a-400a-8e6b-2e6c52e6a96b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "375241e9-7c2b-4282-9d74-8581e25a37f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56587672-c267-4151-bb71-5226eaa83441",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e71a64-18fa-4f2c-9b9b-e80f788515e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4123f747-af63-43a7-995c-53ac83b07dbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20805ffd-b556-409e-839e-c7fcf637f928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e6338a-cdbb-42bf-9e46-c0245a4354f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1372724d-ab78-4922-9ba5-3b4634fc88fe",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd704d65-d87e-476a-b8aa-1dedeb573b1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d85fdfc6-c5d9-4e6c-9098-31408ba6eccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af37b3d9-53d9-455e-aae8-6be020fd022f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc911052-c369-4bcd-a98f-f31a39deda1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d129da2-e7e1-403f-b499-034c826d0ee2",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f43445-1b0f-47aa-8526-3ec98a46638b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b31cc39a-6976-4ada-91cc-b8f5f69afc34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac395698-769f-4967-acf5-c68c445cac03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f48c704-2155-4a28-808a-68a97f32e5ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba49a46-32a4-4ea9-a5e9-b09f735132ea",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56038ec-f327-4fc7-b960-bdf71f9320c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f59813ca-3078-428b-b200-edb63c0021f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd056a5f-d7f5-430c-95e9-62ffd5a4aba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8de55a7-4289-4033-bc52-c314f8d191d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a153f1a-beff-4e6f-9fce-dc7a35868ac3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7883a4-833a-4de3-b624-f8842826454a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eed4f9c3-b875-4be4-b497-9195651a1408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "052ce616-25c2-4990-a349-7289098896e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c68d10b7-1ec0-4e11-b07e-8c5cb3afa83c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed10fd8-2d1e-4997-a256-8e0aace9f752",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8adc0a8-737f-472b-8455-d0c5d6ef13c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e35048-281a-4ff9-8728-2d77b659f51f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d94233d-44df-453b-84c3-50a85981b26b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7916175d-1ba6-487a-a0fc-36de89bec60a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c3b009-0a1d-4645-80a5-7ef070f9e0ba",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa1ea40-5d71-48a2-a71f-e7cb8b4d8d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd65078-2aad-40ac-bb8e-cfc9b1892091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddcf3225-9139-4c86-8a89-631be987964d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30d1bcdd-2b6f-4109-92bd-9f76f1fa7ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72d7207-7e7f-424f-a376-4322184c37fc",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2302a83-f5a0-4025-b2ce-fddae9d0a35d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08e55a1b-b3b7-45a2-b3b6-a6f2c5ce253d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22acbb12-02cf-488f-9853-e9958a53778c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd5f968e-6ad8-46d8-a768-494e43d82150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c793c9a-e106-4d0e-b629-60e815aed44a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3921b0-9013-433b-bf4c-77cc610d5f67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fedd6c9-c455-4042-bb9c-9e622544dee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "044a1f18-2bc2-42d5-b317-0e6030a6a2bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78c9616c-ff00-489a-aa8b-8c46c20409e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca16cb8-2419-482c-a33e-8a87e2ce0dd3",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da02e89-a9f4-4452-991f-951a693be3d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5acfe6f-ef36-4acb-bdbf-316b3ce0991a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5b49ec-4154-4b40-9729-955d9fc33237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa06d33e-95d8-4f62-a200-46c2cf106320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b89aa00-7fad-4e27-a896-73ff2abefcfb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c00c3c-14e1-4ec0-b3d4-7e191c2235eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e84404be-907d-421d-a93a-0c4a1e04b494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a4caa1-4fdb-49c1-9684-ae23afd8c817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87a0701c-ddb2-4698-ab12-eb6a072c3c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7efe92-83df-43ef-80ac-6a75a3e030de",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb9b2ffc-ef75-42ee-aadb-463439ae9fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d74f798f-2b9b-4222-971e-578f6c2d73bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59bb964d-a067-4ed7-8749-11e6dd144525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cf357ce-f1f9-4919-8414-c73a96de62b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45bc7361-51f5-44bd-a9dd-c4b19b36441c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11fbc2a-1ba7-4ff0-96e5-0a7cd7da206b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8924e4f4-b867-4e35-89ae-b9c9bd1c4dbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04abd5c-1e4d-4f23-840a-df3b78e34c2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b71a83-fbd0-4d8f-92d1-ace9a6321d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6364f447-271f-4496-996e-bd1d5bcbc54e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae59d255-8ab9-414d-9461-4930e0889455",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f1c6aff-83e3-4d2f-adea-af8bfc06462b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90bbb0a0-05dd-4c0c-813e-a4b31558afd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "320aa9d2-4922-408c-ac68-067cbd0f3039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "369d1c49-0069-4539-a33e-2485ce3114cc",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fefc3507-25d9-48f2-a149-69c91238ba68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d0fa435-95a2-4718-b6b5-7c48782d9233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c253647-4ddd-4410-b787-2360d1e53ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d426b26e-4267-4903-aace-0f2cf18105c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5926dbc-ff5e-4a88-8177-51ce5ecde87a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb46b8f3-3197-432f-9291-2f3e0a3d47aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a51fd320-61dd-4b93-a519-07b4adc3aab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a535ecee-ac0f-4dc4-895f-f6a51eb859dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b8991a6-1952-4daa-b870-3053d2c78cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9adb5a-8514-4ef0-ad5d-70ea6c217891",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc5ff2a1-6148-4bfb-9c4e-51b879b2a8f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7df03b7-ec81-44ce-b93d-604887961957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a341d3-fb2b-4048-a5f8-4cd4893c8ca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74695822-db43-4ae1-b45e-85591ca7b117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc07567-a378-43fd-ab3d-df551f72f006",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771703b9-9ab0-448d-a433-430c504840c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47c8a373-9da5-489f-99f6-34504648978e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "950835ff-6991-4990-98a6-01771426df7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c235a1-18f7-4136-8d0a-51df93756e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc6c007-e6ab-4074-bb58-49eb7068def4",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca1e806-041b-49da-8419-2cf747b93608",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a235c1f-7709-4031-aff6-3f581e54afe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82bcd69a-4324-403e-9064-3ca5f59742a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d45caa66-5764-47d1-9538-497d55aca9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ccc718-3e73-4630-ac02-52bbd5dc38b5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36de745d-fa4d-493d-b171-3ee3f9c5eaa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be0de690-c89b-482b-8f1e-65ac3411a8c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2ad9a7-9c25-4048-ba47-0d3dc3a66a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c21efc-9e50-4637-88f9-391425537344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3457a6-e73b-4aac-88c2-1e9def238877",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831af2fb-57cb-48b8-b62f-ef414d4c8446",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01ab0867-bfb9-4d19-8b34-73ffffc27151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58839666-6f91-4433-af01-47c0cf1369ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25aec300-907e-45f9-a127-ac378c77b705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6276ec86-3cb1-4d10-bbab-29e26a48aff8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c2b4de-a1d7-42f2-ade1-ca7503625682",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf18419e-92ab-4521-ab8b-2cf44f291981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a0038e-ee9c-46e6-a7ae-7f665ec32607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1c006c0-22be-411a-b2df-c160ac7b4a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8d1f90-bf3b-45c5-a27d-1dcf3238ebcb",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f591ccf2-855f-4054-8bf8-8042d0f5e6b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15e65c7d-fba7-4b53-9dc8-4b7a3c656abc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2866cf16-591b-436a-ab84-fa4208f1bc14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c9325b-60f9-4e14-8a5f-ef039f7e64d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f70dcd-ccbb-497e-9c34-6a776d348fbc",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc29594-6e96-4004-b746-49976921ad70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e24dbfb-a7f0-4dcd-8786-3c8735513882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45838771-c8e9-41bd-92ae-3c3d28eb8459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c21c2fed-6e62-49b1-9091-14a06fde3b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdaedbef-afe5-49fd-a435-2fe296a31b57",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d6f29b-c601-4690-aa94-ca4e8b523869",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21399a17-61b7-4597-bd75-d36b0b9c0064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d002cb43-2638-425a-b616-978866896778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d43c9d8a-d73b-4724-8b71-e8ead93edb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13393ffa-abbf-4c4a-a293-69642a1deaca",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d4f7ff-a6a7-4c83-ba90-bc802be82ea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca93ee36-def4-4e51-9112-e3f1296086f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ab1df7-d735-4356-b803-6fe10aa18c0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f3dbbe6-7828-429c-8dbc-30ac5a7708d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfec3cd-6e4d-4dc8-b329-cacf0aef66df",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6406bd1-4e02-49d4-a98f-49ca55b18b41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a4c26bd-2406-4491-a77b-7adcb4195e06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eddf0c4-673a-46be-9576-e9b50ef86c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cc32a58-ed4e-4487-8012-b1e859b2422e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1d7d2b-7c46-44f7-8a64-1b2c0c86397e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3262a4-c455-48da-96d5-ff36ec9ab473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9141f661-6b42-4f77-aa29-13532826f839"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4e6e3f-8654-4d7d-8e1e-b549611e1462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72df7c10-79e5-4f99-a067-e1d635ec5502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d900f57e-6675-4072-95ac-ea76348cf449",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37d6be6-e0f5-4879-9a63-1ecb78084179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f24e8c-09bf-459d-afa9-2b6c3be90199"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2af4d1d-9ff8-4bd5-96a6-186a7dff9851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c382d71-4277-4866-ac6e-cabe53944017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f029d5e2-3d36-423e-bf5d-d69ed20ebdae",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866e0670-0689-42f8-b59e-180b39cb744f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "424560a0-a5b7-408c-9364-557b389f87b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fdd7f61-8e86-427d-80d8-cb175c12206d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92b19c6e-8ad0-4c37-8a4b-dc74f968533a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdcf3bbf-1979-45fe-8727-2270b3a254b3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5ff931-5edd-4515-9d16-87cc3fcfb362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9972f689-26c8-41f8-9303-20cd68364bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce332d4-f2a9-4c1b-a798-f30503c0768c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd143530-8ae6-4d6e-9af5-b0d18bbc17c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936d7807-bfa5-4bb2-8a10-1cb18088348c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da23907-ad8f-4a16-99d8-45468e5928db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b5992b4-5fc2-4126-acd8-f8d8929d5d93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3f02bf-a72e-4a0b-a68a-879c26149a59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01a0c3cd-d505-4bd4-a25c-784104734d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7badc6-ccc7-432e-aff0-eddb5ee10d3a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edce6089-88a2-47e2-ba97-0f62452a7104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6bd3b20-6abd-4e8b-b494-9ec63aec4c7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3cd94c-5e7a-402d-98a3-d119fc53d8fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b875c381-9b2a-455a-8b37-3ae9dfd4dade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95aad0af-d183-4623-98de-38cb48aec1fe",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1cbc8a1-80bf-44a5-bf8f-b556aa29ec36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a85c738b-635f-42f4-b0af-d457fd2aa643"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a128bb8-3026-4d81-abcf-0bf880d4ee1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90dca66e-4296-492e-a90a-c8c75c0a97d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363c9cbd-fab9-4f91-9dc0-38af26ca33b0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e53117d-0f00-4e08-a71c-24ad5dcde339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5734a5b9-abd8-41a9-bb83-3b13558feb02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5410c3df-7e90-40ea-b0c0-a1665cbbf9bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b660e0-18aa-4807-b44e-ef7092eb5d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a47eba8-c249-44fc-ac83-164ce4c9f99f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16053374-7129-4fff-9e92-c984fae5e453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2117cf11-a1d7-4404-bdd4-c6a596c0ec56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a935a3a-166c-422c-ae68-34b69ec8208e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "454fb2cf-ddc5-4167-8622-dab343ea212a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da15fbfd-d11a-417e-974d-e04b7ede6954",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28bd7223-5ba6-4af0-97a8-185234b32ed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d9e608f-13d3-4839-a2c7-e69eb151ffc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4636ebaa-a2b6-4b41-b76f-9aa66b389dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c350d83-dd5e-46d0-aa4a-cfd8bab6aa68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b9c488-f164-4d62-b530-b49c6a6de525",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a20fb4b8-45a4-46c0-9b3d-73017f8ecda9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcfb09d8-6766-414d-b2cb-1f405c424b0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a7844d-12e7-4b47-8e4b-44d571a5571f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30786bc7-1059-401b-b506-cb2ad7cddb6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f4e55e-8e5d-4b9c-b03b-3a1b9812e209",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfd3468-a2d3-482d-b88d-cbc2778e796f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f1e2c7-d807-42c9-b233-b897c5a1b2c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf2889ab-3acd-4eb3-973e-4f6a1b24773a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed1988d3-ce4c-434e-a1dc-45a2f77423c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c6d255c-499f-41b9-adeb-6cd449c7ab17",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a6a10c-0aa8-4310-8a94-e26a3eccd68c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "239e5fbf-811e-4353-bd65-97d1cc5542db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7ee279-858d-4058-bf84-ccb720acf6b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9b883de-90be-4c42-8c10-459fdb8624d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b55ae86-e549-4f9c-9646-f5864df29760",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448746e8-cc3b-449d-8a31-19e2f3fdde39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4031140-72f9-4c77-89e3-3ce76b05588c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a615d4-2cdd-4d0a-a0a6-cc9022d058dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "406eb235-97d0-4639-9324-1b7e9d089f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac72337-5053-4e91-938a-7a380e34d9e5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b370f747-c001-4613-91df-187557cc4ae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55249e20-7016-494d-975e-32b86376c6ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd68a74-dd26-4559-9d0a-7f282c235a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9367f3aa-8b0d-40d7-b7e9-488d94c6fc2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71bc70da-64da-49dc-8612-e42b1d32e871",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb7eafe-8dc4-4392-8b1d-888ca2710a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a87d56fb-f3a2-417e-8460-a96bb4fdf25e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b604714b-c425-4038-a7b0-13ab1ef04240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "397f4b83-2568-4985-8415-60a403265665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b4151f5-9731-4d94-b469-de3ffdf66dd3",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8e2883-bb7d-4541-807c-f452bb29f4b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e432be4a-a613-4a58-9435-1a524e95c2e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "042f9ced-5acb-474f-a19e-44413d171f2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b40bb9-8ccd-4acf-9a20-70640f04c48e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365f88f2-1ddb-45f0-9ecc-ae0f50149967",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac28e49-0dd5-4b12-a3d8-d7239bfdba1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90cf72fe-b46b-469e-a669-fa0a45d45e88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66976192-4c90-4124-987a-0e4bbdfa0c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33361173-6602-40dc-a3b1-b3086c1b1c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d23299c-9e18-4594-874a-dce27046ad14",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e6f695-a7f8-4cc0-8b29-5d9676a17f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25548762-3d9c-4862-8733-79113c2f0611"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da2030c-165d-4465-942e-a8fcc2bebe61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ddcc2a8-0af6-4dba-887d-6719eb3d5f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423c8835-be65-44b2-a22e-37115216ee1a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708f8340-d88c-4eb1-a558-bcfd1ca35084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9fb0985-878c-42a0-8c76-23ee71697537"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2160d434-ea53-4501-b160-2725420d595f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d013483e-33c3-4e01-99bf-1e4bdedd4956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07eb041d-2d61-4ec2-8cab-f5a948d368ee",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c837379-117a-493b-ace5-590e41620c2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77d18b02-d52a-45cc-9057-b51f3414e39c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91fce35-a977-4723-8682-59588e6decba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e715879-15e2-43a2-b96e-1d9eb914e959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590ec258-cdbc-4866-a47a-bb151756d3dc",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b375e0-9aea-4a58-aedc-438345034845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96c8f6d1-6929-45e3-bec0-f25151756bb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be838899-4e42-44ae-ae2e-c9c6603fbf2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d881e974-d0f7-48c9-9007-f9e52ac8c240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e207ab8-d21c-4615-8bbf-7581b744aa8a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed781646-9cf1-46d7-8107-e54b0e2d413a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e6cefca-e7c4-490a-99ca-cef542ca075b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53464716-4905-4fb7-9af1-07487f8ec556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7c96631-a1c4-40dc-84fe-c848b09299be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30bdc81-65eb-4fd8-b9b4-0e9dbbcc485a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5ccbbe-a4b8-4f06-bc6c-7263380238c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e490030f-40c0-4e14-ab9c-fca60c91f43b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f5f9d2-128e-4d9c-a410-beef16480ab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c89eebfb-ad2f-47dc-bda3-cd0259e7bffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbbfd081-e071-4092-8ec2-16f7a10f9c1a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697bd389-21a2-4a00-b564-6e0386a46a1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eee71d79-f3a8-451d-8874-6dcd83f40e13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49a349e-f2e2-4ae8-9d69-88f6c09d1689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9688226-5e0d-4fab-90c7-62a21e3799ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "198a5293-43ea-4148-9aa7-e1d5506de021",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7edfc6a4-129e-41be-97ff-a0404e112542",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e213a9a-adc9-4fba-a5f9-ebee2ae4d58e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70999e1-421a-4502-a528-44f59146c1d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fb75351-7402-4573-a7f2-f1a4baf56b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973c718a-caf9-46f0-9b1f-9dfe041cee0f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e91764-df41-4783-a383-13f55c6e8cd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51040cce-d6b6-4d26-aa35-268f1d52986a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae34027-7e7a-4e46-a7a6-cb90e052126e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55eb9055-3ea9-4eab-8ce2-464d0989b6e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa8c85a-3b4b-4881-9df0-a9b34b68c9b5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4351800c-0a17-4b08-b7e9-00a6987ce3a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a34ad3cf-c687-4cd8-bef0-c3a9b7926726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "254b2205-0a20-4f6c-8ebd-764b57f732f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c9555b6-d379-471d-848f-a4a6aba9abdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf741fe-8c75-4527-bdb0-643c9a1171f4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b3739c-25ef-4460-94a4-5c1a2f78345e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0533d6b4-6a4c-4785-bba7-1d88ae524dca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd42a99d-5257-44bb-abb5-63c744299eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7065674c-1767-47f0-82bb-52fd10f115e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6523614-2446-406d-8f4d-7ff9f76391b3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782961fc-b645-4aad-b053-ecd582c162e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01d46ece-ed7e-459a-9b7b-6a87674e6f6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c26275b-24e3-47ca-93e0-2ed8573b8111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74f5ff46-6f1f-4851-907e-4368a23081e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297369f8-4490-48b8-b3b1-7b954255ccdb",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a9165a-1df9-4c7d-9679-b3db5946f67b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34b022ba-9f8f-4df3-a70d-c2a963d89464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "370ef9cf-cecd-4e48-8cb4-77e177910c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3482ae34-07d4-420f-9303-c8789870ed96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd36047-2849-47b1-a151-c64c71dcc547",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a57602-5ca2-4012-979e-825a6b3c20ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a662005-8a1a-4f6b-bba4-13e323f19d83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae338095-f794-488b-ac30-a215ecf0e8bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a43c15a-7928-43e6-bfa6-bd532cadea78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e59e707-ceee-4f9d-ac89-7bbb5684d0a7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80677c89-989c-496d-ac8c-383cde12ec03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df4e5ff9-19c2-4bb3-b01e-e22d034147ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c79143-c742-4306-82d2-4b6247cffc00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e510fe49-d6e4-4f08-ab23-0a0b98238a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cac0de8-7eb0-4773-9a2a-9333128c91eb",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79613584-948d-47a5-bf34-10d29a87dfcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf56cceb-b913-4ee2-967f-27f2ab98d2ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "315b062c-4acb-448e-bdc2-acf17d5ef395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b621ade5-9358-4c25-bc9b-820ae1cf9a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "472395f6-7841-4560-9aff-37dca364acde",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9474ecfe-9b1e-4865-837f-1bed56030cc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c87b0c43-9368-4153-9d1c-d7713ebd4632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29d8c31-2779-451f-bda9-e189933ce6e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3091a0f4-c955-41cb-b83f-c69a21d0625e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50eb532c-aece-4fa9-a4a1-c534302a6349",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a072fb-f8b6-474e-9e43-ce3a1fd1fd29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b2dd254-091b-40fc-8feb-2c30b934cd98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec3b577-9480-40f8-b7d8-cf1260324f25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e2bf946-8cdc-4edb-9363-0987e681471f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5160259e-7966-4d01-a7c4-ef6494c7b0a0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60294335-e3e8-424c-8d08-ca97e73914f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f5d92d6-5670-4bbf-8f93-1a0f3f3b1cc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42d568b-633b-404c-9f97-138569fbfc66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6b2909-3c62-4441-add0-ca484ab08e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf680db-73b9-45e2-8523-55a42c50c204",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a3cc98-0005-4c7d-b98e-44335f219f47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21b427cf-2d6e-44bc-a325-6ba073421cc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74696959-57e3-4256-951c-c9bea0b94b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db18f7f-0ea3-4fa5-a162-de45ae4d4dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3d544a-c2e9-461b-87d7-ac26778975da",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ef0206-b138-4b47-b466-1956797793ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83472bb1-59b9-424e-9e51-7fd3976eb921"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac6c8b5-722f-41de-a6a7-59fbfce43399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ba9b513-f894-4f86-a7f9-d0f1e9e023ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295e8a19-1b1f-4792-bf2a-11fd7e7c9950",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47229cd0-b287-4106-b80f-ed0e9d663d50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9847164b-4b0a-4226-8c50-a66df411bb90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "624ac53b-54cf-4d43-b4fc-91dcf9d5411a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d178ca05-eea9-4fa1-9848-abda61c0fef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2503ce2-3eab-461d-8303-1a26e6deace2",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114bd937-6d23-4e1a-b470-330895879b93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "901453cb-ad07-4cd3-bdff-92eae536630d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33aa9005-e3a0-42a7-a0a3-7419817641a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b9c93b-f5c5-48f2-b33d-5f91ee093e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae8c89d-b176-4709-9111-e4edca6a8d3b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416f1d38-f0f3-4d66-ab2b-51b336bb995a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75d0cde4-4441-4895-9d8b-0414845c0016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a12c4ba-d264-46d9-b2aa-12cf826eab22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61cb0f9f-b13d-472d-ba7d-caf4c1ccb537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94394536-ad65-4fb0-8f8f-0f5c6162d211",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710be901-4ad3-4566-ab4e-69a963e2a773",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9e7a6fd-2abc-49c0-9a4b-2f0f509b290c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d756a488-48db-4b2e-9472-a26b5b55f372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc015a64-2702-455c-a4f7-aeed584d2b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc414a7e-9033-489f-9de5-a6204e9d9d34",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222e47b7-7c5a-47a3-8a38-129ae75c2eb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c79dd6b-8e5a-4c0a-ab4d-b59c59c99992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f2da0a-2c8d-4258-afd6-a54e231af74b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4cb73da-b99c-401e-978f-bfda8126d8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebd928a-1343-4a0b-9c69-7644203a24d0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13a8944-71f5-4bad-bd04-09c40fcac904",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6afdfa7-ec84-41e3-8329-109beeb7934c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebee029-b840-4ec1-985e-590c26458502",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb840273-27a1-40df-a5b3-3128310f1ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b84c4ca-ecb5-4d16-93b7-1959807d94f0",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6a2dd3-b17b-4424-b935-ea84f3d4c4c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ddc121c-2cdb-474e-a8cb-60108310e38d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b59e62-c401-4d6b-8ba9-f87d888a3663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cbd06ce-f593-4e49-8378-4cb138f9c14d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e57e00a-8c44-458b-ac57-9d5d3023852b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5df8ce8-8e16-4747-9b0c-99fe02aab403",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a994ebc-519e-4900-8f9b-4ca8cc21a18c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a133a1d9-52b4-4e4b-a94f-6a0a85934356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2519939-1d2f-4330-b367-15a983e1f0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08464ad3-c79b-4b7d-9c9e-ff8928c8cf44",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3907fb-8233-4507-812e-db07c2de4786",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d75d4da8-9ffb-4c27-a9f1-db4228a38f70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "713d3e68-48a4-4a32-830c-07e2ee586677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cca3561c-15ce-4201-b83f-21b33ed61092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0572b44c-c7ce-46d9-bbe1-a498b507db21",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb544549-313e-4d29-8d70-7c78e3970b7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddd35b8a-ac33-48ed-9890-bf5abd4b8d66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "070272fb-54ac-40e6-b786-279142e6c671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21c173d4-14ff-43b2-95b0-1f2f1c775e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0753bec-776c-4762-bebc-83e72dc95cd3",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317be87d-3e70-44b2-9697-f01b18a9c5f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ab2a54f-bb07-4462-b8fa-b6bdf3ebf80a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe807b4-daed-4ae7-9313-79390eafa581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72937e23-71c0-4a6e-9c38-83b11b9a4809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de71e363-62c7-4ec5-b907-11bef674d2c5",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696e8e7f-9f8b-4a4c-a35c-6b9bf5959873",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3c569c0-afa7-4f0f-b49f-57031f707da1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc61d719-55a7-4e70-b372-a1aac77aae2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df54b922-6a21-489b-a0ac-3900c85d2c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5b8b98-2c5a-4e7a-9bd8-602c0401a552",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b635fe4-1c3c-4ed0-8e3b-aa073246915d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60ed73f8-1201-410a-9ee0-e65f76836ff6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a89662-b9fe-453a-8ace-5063ef5fbbfd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "633d9c38-561b-4fc5-85bf-e87f75b80e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "febfbce7-a381-4002-b6bf-daef17a1295a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad9901e4-aa92-49c7-a95e-636d86d56d40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0d5e527-002b-40ba-8bf3-4e271419d70b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a79555c8-56ec-44f6-bd80-62ab27ea8bc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "887c08e0-54b3-4b4d-8821-27c6fe09d84b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ccf851f-598a-4e14-9572-00227ab565f8",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "641ce3bb-b2a7-4ac4-9fed-4237f98e42d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02bff1d6-715e-416d-9608-7f0711b5127c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8240c1-710d-4fdb-b52f-d29b22bfbce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff9dd82-7846-4df7-8c0e-f5f94a23b2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82aef447-0bf2-4b34-8a0d-ddd91858db98",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8f5f6d-1c20-4de9-b5c1-f4503974c093",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e29452cb-da95-40a9-a7ce-eed377c5fa16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5991758e-2fce-471a-8483-e2063a064cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44495c79-54f1-420a-9453-19005e5b3049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78edcafe-67a4-48af-970c-acdef1b45d0f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec36a58-a681-49b1-b85f-a1885dd23be3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c908568a-4229-4bd5-9f50-da3070538831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "374197cb-ad04-41aa-96a8-4e3cec919fea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de6c835f-9f4b-49f9-86bc-6ad24117a66c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007289ae-b265-4383-9039-abcc439ccfae",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6036003-d33d-4fcd-8a1b-fde41a58ac99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0314aa7b-3e14-4ec0-95d3-8b21af703ff5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1caa177-d736-483b-90d1-df1af73e82df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a2f88fe-468b-470a-b3e2-217d39bfdf70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c13aede-0244-4b4a-b675-49a13a7f75a7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64416efd-b37f-455e-8bae-1697a3be6b9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9c56496-5713-48c4-8996-457b11206c2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c357741f-64cc-4180-b7e4-6d02c37907ba",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "031e6803-c60c-4974-8ecc-365d806f8761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e8aad4-342d-42f0-a85a-56c292c519dd",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae7b3cc6-b143-421f-bfaa-4b7b9f879ae4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ee268ef-6bc8-4790-b3f2-fa7854f9ff17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a35d7f-959d-4e3b-8fc9-925a54c64916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e31743a1-dba7-469b-8c23-df2b94b2e6be"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be04f228-07bf-4990-a2ac-53c1754e4a51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d1981ab-abcb-4047-912d-fb248973895f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a45432a-21f7-4e67-a669-ae84dcf2eeeb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d251e103-c38e-4eae-a6e4-34179b013120"
                    }
                  }
                ]
              },
              {
                "id": "2609113c-d400-4f9e-aa7c-7313796f2a72",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6da060f1-eb2a-4560-8374-9304d2ca1cb3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70e3099-ad16-4202-98d0-52e302074c9f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "78548f62-bd69-4e6c-a441-ca0e433c6d68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cfb4b94-0efa-4886-b65b-ca409c31fa90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4da0ed3e-7a8a-47d7-9857-604d62f0faa9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8114868-2c5c-4aad-a688-c2d60ff9460f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8d89689-f008-4646-9d9e-2c7c6cdad18a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e6a751c-d2ea-4f12-ac2d-88e2bb6c6d70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "899953b3-bfa3-4084-aaa0-95e3fd756419"
                    }
                  }
                ]
              },
              {
                "id": "d47c547b-fbf0-47be-b825-b6a36e026f78",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c4ca581e-21d2-4051-982c-f945b21575e7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4275fe-94f3-4ae2-9fa4-477ecc23336b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c4f1bb39-7703-45da-9c8e-84bbcbff9dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7db19eb-26d4-4077-b529-1254d1cc9a0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8c15217-69a2-4fdd-816d-241f2a7aa839"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ee8e5351-39e6-48b1-bb2d-1cc61f0eda9f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "14de2f80-13cd-406f-ac76-a8f5b7c46191",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f63f7f35-33cc-4e1c-b5e5-fd7414c660a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "378523ec-d72c-473b-9ffa-d721fc02758e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca847c4f-62d3-488f-abb9-c9d4dbfc2344",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53dff09e-35cb-45d8-a70f-9757472d7e7f"
                    }
                  }
                ]
              },
              {
                "id": "5632bd43-67b4-4b88-b579-c84c096bbafd",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7385caea-66a9-4ff3-a2e4-9dc492420994",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cfc3b28b-6e61-4397-a6cd-3d3ca490d014"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "426f9135-e488-43bb-a9b7-f1cc50d16493",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9829f7a-859c-4368-9723-5889ffee33ca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "469afa16-8643-46ca-9a55-08736e96de66",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "db4d1450-b33c-42a7-8ab1-3a2541cf22b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "343f6c56-01c9-4dc2-be42-edb91e109344",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "289585cc-3edc-41b3-a3c0-5319e87483cc"
            }
          }
        ]
      },
      {
        "id": "09a6e328-8df9-4b17-bcb4-1354c4f75db1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "2528b757-3f89-4353-a26a-a05da1e926e6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f1a0599-40a2-4989-ace1-20469a3feb9c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "233eeff2-9dfd-4f8b-8e61-1203aef0f36d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14555855-bc5c-43c1-bea5-ccd0a7631bbf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c91caffc-9498-4711-aae3-79e3759ab8a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "204ed74e-bf92-4879-bf5d-cfb6efa93a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7b37e6c-d0e2-45d0-b83c-580e127ec6d9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b517b81-9695-41bb-a1fb-0404848fe176",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83784b13-6695-4e02-a114-d4083000c8ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "86e7596b-a062-466f-a216-b221d4b76956",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ff12882-be29-43fd-92be-e04cb40fe420"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c7569d63-8f37-49e0-8963-1f60cb1cf68c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "680f8d00-80d1-4660-a2a8-bd53124d74df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f6beae8-3002-4d7f-a733-1be30e06900b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6912b438-7559-47d5-917f-d264ddd57385"
            }
          }
        ]
      },
      {
        "id": "b1debc94-db4f-4e45-90a6-493d23f78201",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "35f3034c-1858-4724-a32f-ee90f487d148",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8095f1e4-fd92-481d-bbbd-77c0e3126fb8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "58d194b3-9052-4141-a156-18372a962664",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d73ef52-89f0-4900-8178-c59f4d5c6eca",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe17fd11-66bd-44c0-b1b2-03e9deb1aefc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2e9ff3-96cc-42a1-9931-900c4d84ce94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ee8edd3-b55f-4fdf-abdf-998a373573e0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15d3f7ce-95e8-48a5-8828-940ace60d1a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56e9d86f-9eba-4b64-b682-9b37c8831963"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a31b783-ee63-4ea2-9cae-70280c0a22ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cf94b51-0fe0-42d8-9df1-e27a64446b08"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "33a42ec2-34a2-4715-b322-6b3c0d31477a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fab260e7-05c1-44d9-9dc4-9aa072fad279"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8cfd424-2e4a-4403-8d87-596da01195c5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "db956855-249a-48d2-bc82-baadb72be88a"
            }
          }
        ]
      },
      {
        "id": "0ce34e1a-853b-4baa-af05-7b12c27b0f15",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7ed21822-2867-4d2c-bacd-0cc7c1843714",
            "name": "Negative Testing",
            "item": [
              {
                "id": "151e7cc3-7e86-42d1-b79c-2d8812928189",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5ce3f924-d5a1-494b-958a-32f9a40710d5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb730c7-d237-4522-affa-bf2cb432965e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e19fe23-4693-41fc-a86c-3a667cc17d2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d186cb-e4a5-4dff-90c6-a97a4b5dc57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9e73229-39ff-4b60-9192-19619ff74f2a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67adc73d-e395-428f-93fd-a2906e1c5e19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a265395-8592-436c-a523-b99efea6213f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3105f721-8a04-47d7-8656-3166f9399cb8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7c1a2db-5b48-4cfb-97d5-7644e515e4e4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c0afd61-d956-4ae7-b32b-973e249d7886",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "55917249-fa6b-4d02-a7a1-6a8dacb09050"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d18525fa-2878-4a62-980a-865101f1dbd1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c3e761e6-c9a7-4392-a306-eb986245afcd"
            }
          }
        ]
      },
      {
        "id": "f901e4fb-fd7d-4c8f-b2ab-2e16c13d5a72",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f5013ee-ffa0-47e3-a2aa-79c58353f701",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d84885bd-0299-4665-9adb-dcdd031a658e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "23836bfd-0e79-466d-88f5-349a6033f4b1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00ae05b4-e97e-4945-9854-d28df0beff27",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "21e19a37-ef52-434a-bf29-debd0f03f483",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 295
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 10.828070175438599,
      "responseMin": 6,
      "responseMax": 256,
      "responseSd": 22.696516112482982,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1711499648258,
      "completed": 1711499660308
    },
    "executions": [
      {
        "id": "f7050b9a-1d67-40cd-a60a-77b420575b6d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ea1e8f41-99bc-4b60-a03f-cf0c58b0229c",
          "httpRequestId": "d8c0c67a-7720-4739-ac90-a02b23ff1ac5"
        },
        "item": {
          "id": "f7050b9a-1d67-40cd-a60a-77b420575b6d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d92de661-e64a-4bc3-bf0d-516c93d0f6f3",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 0
        }
      },
      {
        "id": "15cdba0b-8006-4560-9fb3-91e40ae00f80",
        "cursor": {
          "ref": "ae1354e0-66d2-4993-ac47-d9db7431620c",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fc35fbbf-8d60-4789-a261-915c730b338d"
        },
        "item": {
          "id": "15cdba0b-8006-4560-9fb3-91e40ae00f80",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e66f1172-159b-4b65-84e8-09fa756c0939",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "95372e9a-bd87-42e8-b12b-71b06de814d6",
        "cursor": {
          "ref": "3491fdc3-3282-453a-993e-2001b827a8f6",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b14fcb30-5228-473b-95ea-7ae931fd81c5"
        },
        "item": {
          "id": "95372e9a-bd87-42e8-b12b-71b06de814d6",
          "name": "did_json"
        },
        "response": {
          "id": "16ae5a99-4a6e-47ec-9957-d850e633b2ab",
          "status": "OK",
          "code": 200,
          "responseTime": 220,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6e4995-6ed8-4671-9475-0d4b3dcc944a",
        "cursor": {
          "ref": "3251da4d-f0b5-4e91-9958-dc5a184d40d6",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ec1664c9-c800-4fc8-a6d6-6beeb65803ce"
        },
        "item": {
          "id": "9e6e4995-6ed8-4671-9475-0d4b3dcc944a",
          "name": "did:invalid"
        },
        "response": {
          "id": "638f336a-c028-4a8e-9251-def8ad633999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6e4995-6ed8-4671-9475-0d4b3dcc944a",
        "cursor": {
          "ref": "3251da4d-f0b5-4e91-9958-dc5a184d40d6",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ec1664c9-c800-4fc8-a6d6-6beeb65803ce"
        },
        "item": {
          "id": "9e6e4995-6ed8-4671-9475-0d4b3dcc944a",
          "name": "did:invalid"
        },
        "response": {
          "id": "638f336a-c028-4a8e-9251-def8ad633999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be2be2a-f971-4c84-bd81-27b226f38e30",
        "cursor": {
          "ref": "f7d48d5a-25fa-4b7b-a23c-547d161a55b3",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a47be5e7-e6bc-4d57-a676-d01e86f1d801"
        },
        "item": {
          "id": "0be2be2a-f971-4c84-bd81-27b226f38e30",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "03069317-810a-4a8f-be2d-4757eebd4bd3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 90,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd03907-286b-4fd0-b46c-8fb3eba4aedf",
        "cursor": {
          "ref": "f8fc3d2b-2f64-41ce-b7bf-8c81f7894e03",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "252daff3-751b-4933-a1b1-c8cec3b5ff51"
        },
        "item": {
          "id": "0bd03907-286b-4fd0-b46c-8fb3eba4aedf",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "afce2c92-1b1a-4f57-bc1b-095e256673c8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 14,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72553414-bf0e-491c-b52f-76d2ed2fa22a",
        "cursor": {
          "ref": "c1e2fc0b-4956-4a4d-9ceb-2ba762767b40",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4fec0082-feae-453c-b1ba-ba63a77b775d"
        },
        "item": {
          "id": "72553414-bf0e-491c-b52f-76d2ed2fa22a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "139e0f2d-049e-47c5-8123-6be9150b5a82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eae1536-90a5-49b6-ac45-d7d745cb34fe",
        "cursor": {
          "ref": "254bbf46-63de-4971-8414-32d5bcc9685a",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1460230e-d6ae-4ae1-8880-ff77519618f4"
        },
        "item": {
          "id": "4eae1536-90a5-49b6-ac45-d7d745cb34fe",
          "name": "identifiers"
        },
        "response": {
          "id": "f96c83a0-3e48-4171-a417-f32f55ffae1c",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ecaa36f-fbaa-4bbd-9c10-9337e387a7c7",
        "cursor": {
          "ref": "ac1c3726-6a19-492f-8cef-a5d70d563179",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3e5e6f60-475c-43d8-a523-fa4bea5dfbc9"
        },
        "item": {
          "id": "6ecaa36f-fbaa-4bbd-9c10-9337e387a7c7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2b2294a7-fd07-4b6d-b0f1-1fa02fc8c478",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f5239e-9d99-431c-bbd1-786730bed016",
        "cursor": {
          "ref": "96da66ab-2763-4d56-9ac9-72924a548c2f",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cbbeb8d6-ca72-4196-97b8-28b22f378c80"
        },
        "item": {
          "id": "79f5239e-9d99-431c-bbd1-786730bed016",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "29563441-e17e-47bb-9bed-d32424a206c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3854c5a5-2376-4ba0-8aa0-466770c104f4",
        "cursor": {
          "ref": "1b89a360-342a-4e5b-87f6-bd93d5e5e19f",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6130035e-e0ed-4927-807f-bbab9d951e99"
        },
        "item": {
          "id": "3854c5a5-2376-4ba0-8aa0-466770c104f4",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1938aaf2-d7d1-4546-b075-c8dc667f1280",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ede64d0-ac0f-4844-835a-a527b83227cc",
        "cursor": {
          "ref": "02c9531e-dd58-458b-9bc3-c678e883cbf2",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c4650e77-dc7d-4dc5-9f2b-829ff85582ee"
        },
        "item": {
          "id": "8ede64d0-ac0f-4844-835a-a527b83227cc",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c0965aa8-bfde-40f1-a647-8ec47479355b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5042b1a-bcc8-449b-8243-e67fe831d407",
        "cursor": {
          "ref": "e21ce709-8af6-4b89-b335-67c17eeab83f",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d977d8c5-4751-4cd5-be97-706665514c50"
        },
        "item": {
          "id": "b5042b1a-bcc8-449b-8243-e67fe831d407",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8ce3e938-e3c5-4465-b15d-d010ac820a86",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8fa61b3-3843-4489-bf8d-e082f5279daf",
        "cursor": {
          "ref": "48d9b7a4-11a0-4a51-b2be-4795520cfbcf",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cc1b8cfd-f106-4914-a90c-960aaef3f94d"
        },
        "item": {
          "id": "f8fa61b3-3843-4489-bf8d-e082f5279daf",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "19186348-2819-4bbb-86ee-32713d0e9e48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5112ef1b-467e-47c5-89a6-c3563bb7d027",
        "cursor": {
          "ref": "9cff4bf8-f673-46fc-bb47-9bfc00d05f42",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "02f6b75a-be2c-48ca-a639-98122109b7ef"
        },
        "item": {
          "id": "5112ef1b-467e-47c5-89a6-c3563bb7d027",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "65ef3caf-ddb9-4bad-a5b6-2d086b5f7977",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62976aea-37a0-4b71-8002-379991dc16e4",
        "cursor": {
          "ref": "10626c83-48e9-40fe-be29-593961b436cc",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2da0dbfc-0cf3-45f0-9eaa-55e525d0addc"
        },
        "item": {
          "id": "62976aea-37a0-4b71-8002-379991dc16e4",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "790836c9-acc3-41d4-901c-2642f28d3e12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "172f2430-b7c7-49bb-9de4-ab293341f083",
        "cursor": {
          "ref": "20dae262-5cf7-4c54-91ca-3d9dd940e006",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8e17c9c5-1090-49a4-a0bb-06bd26c6b208"
        },
        "item": {
          "id": "172f2430-b7c7-49bb-9de4-ab293341f083",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "556149b6-61fa-476c-8564-833a93b857fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573570cc-57bd-41c1-b841-5f3f6c279b6c",
        "cursor": {
          "ref": "15375af8-b55c-4e35-b813-3356f189195d",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3cb74821-0e5e-42ae-97f5-17af3de0b295"
        },
        "item": {
          "id": "573570cc-57bd-41c1-b841-5f3f6c279b6c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3e6eedd4-b790-44d3-985d-aaa972a537b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca68205a-3068-4d32-8bdc-d8662181d5d2",
        "cursor": {
          "ref": "28f8dcb8-3d2b-4a37-9c38-3e68ed2fbafa",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8bef58c3-36e1-4a03-beeb-6ff65a904051"
        },
        "item": {
          "id": "ca68205a-3068-4d32-8bdc-d8662181d5d2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9062de58-2220-452f-9eb0-7474815f4335",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b72ade-76a4-4083-b878-37ca728323bb",
        "cursor": {
          "ref": "a11b775d-e93b-40b3-8079-a062f3ba0d29",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "77dc2842-967e-42f4-b9bc-817b2877746d"
        },
        "item": {
          "id": "71b72ade-76a4-4083-b878-37ca728323bb",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8aa306a4-29cc-4b17-a647-156bf829c59c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b0f99a-37f7-4874-9493-07fbf85f930d",
        "cursor": {
          "ref": "5b254f10-e959-4444-bfe2-41ab2823f5f0",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "acc62122-a359-434f-9fc1-70fe31813834"
        },
        "item": {
          "id": "90b0f99a-37f7-4874-9493-07fbf85f930d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a63937f4-26b0-4358-b162-efed3ee706f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19bb7b65-5478-485e-8c3f-89e143f19dfc",
        "cursor": {
          "ref": "92f90ba3-2f27-42f8-b7f7-5ad22655200e",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "747cb2e3-36fc-4809-ac77-3e4c88821262"
        },
        "item": {
          "id": "19bb7b65-5478-485e-8c3f-89e143f19dfc",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ab3f28ba-f339-471f-b631-9c7a79e8f434",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee86769-3ce1-45dd-9f76-cf365af02403",
        "cursor": {
          "ref": "9b60c078-96bc-4739-affb-2db649614220",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6ad729df-d7de-4115-8128-bda325112186"
        },
        "item": {
          "id": "eee86769-3ce1-45dd-9f76-cf365af02403",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3e5e8eeb-90e1-47b1-b86b-e5271ca25afc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4705fb25-a289-498a-a643-a99b764d5dad",
        "cursor": {
          "ref": "a6421d0c-7e84-42f2-89f1-8d74fea731a3",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b3463846-71e5-444d-9539-bf6cd940c134"
        },
        "item": {
          "id": "4705fb25-a289-498a-a643-a99b764d5dad",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "edd4359a-cfc2-441c-9f19-b1e291bbce4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9824bf88-8f16-4467-b041-36543b6238db",
        "cursor": {
          "ref": "ca581e78-9e5a-454f-9633-cfe5927b8292",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "489b3097-4166-46a1-b08b-71009545f7d2"
        },
        "item": {
          "id": "9824bf88-8f16-4467-b041-36543b6238db",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "38b6377c-9b1b-406a-a4b0-eb56c8598c88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d34115-9c97-4892-afcc-8c4a89205f68",
        "cursor": {
          "ref": "9ff3a073-df51-4959-af5c-8303af2bda91",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4a412c52-67d7-4976-92f9-228c69d6291e"
        },
        "item": {
          "id": "f4d34115-9c97-4892-afcc-8c4a89205f68",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d9c94e7c-4cd4-4ae9-b1e3-cea08e5f3df3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad0e5ee-fd8e-4913-ad51-1f3eb023bec9",
        "cursor": {
          "ref": "9f5540d5-f13b-474f-8428-0a0dfe20d8ce",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a3254109-6697-4367-9467-97e5c0d8e456"
        },
        "item": {
          "id": "0ad0e5ee-fd8e-4913-ad51-1f3eb023bec9",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "89187bfd-b20d-4ba0-bf8d-f27c997f45b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee4f61e-247b-41e8-ba47-74fb88747edf",
        "cursor": {
          "ref": "08473069-5711-4645-9e9c-bd95fe0c85ca",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c68589bf-37fa-4fda-a6c8-ca110f8f686d"
        },
        "item": {
          "id": "8ee4f61e-247b-41e8-ba47-74fb88747edf",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1ddeba6f-0581-419f-bd85-54373aeef41e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa50313a-b5d7-4904-ac02-3d8800578afd",
        "cursor": {
          "ref": "5d9db7e4-dec5-4341-9e26-4e41cb5e317e",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a3388b61-713f-4da1-bacd-8f9b2ff3e7e6"
        },
        "item": {
          "id": "fa50313a-b5d7-4904-ac02-3d8800578afd",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6023732e-64cf-4627-a3b0-914140e011e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414f69d5-8cbb-49ef-b30b-a43b035238d2",
        "cursor": {
          "ref": "028d1021-a9e6-431e-8588-71d1bc091f85",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1c7f49bd-e76d-497c-866a-b4b4ad0ad708"
        },
        "item": {
          "id": "414f69d5-8cbb-49ef-b30b-a43b035238d2",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8e19a9d5-b2d4-4869-88b5-440a9fa38c36",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de5f5b7-2a4c-448f-8271-22517047a6c9",
        "cursor": {
          "ref": "d28a4c8f-e1d1-4f08-bc45-b02e61f54f62",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "673be2e2-94f1-4a24-a352-171e2c857106"
        },
        "item": {
          "id": "4de5f5b7-2a4c-448f-8271-22517047a6c9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1c16a99a-c0dc-4e85-beb3-f1ba0217473d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5850f19-5e25-46cc-be0a-974b6ea583a4",
        "cursor": {
          "ref": "ed678116-35d8-488a-9a27-38bf70744945",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3bb38658-8b72-40c7-8fcf-01a8c06c3ebf"
        },
        "item": {
          "id": "b5850f19-5e25-46cc-be0a-974b6ea583a4",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "524700d6-e219-48d1-a9d5-6efbb05ade88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c756f1-f867-4696-b751-f3377ce4fb50",
        "cursor": {
          "ref": "262ed7dd-45cd-4949-83fc-114655ea0645",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ed92e9c2-773d-45d6-939c-ea1c4e589eca"
        },
        "item": {
          "id": "40c756f1-f867-4696-b751-f3377ce4fb50",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "bf1b0434-9577-4492-b812-d8fa561e97a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e9be72-0d67-4deb-b8fb-16859d45994f",
        "cursor": {
          "ref": "28b3afad-7b01-4d6e-9de9-098938bbc5d0",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "3ab2ef0c-4dc9-4773-8f96-3a6eac58b041"
        },
        "item": {
          "id": "c4e9be72-0d67-4deb-b8fb-16859d45994f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2091aeb2-86e6-4f9b-b031-8695e00b950a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b567989-945b-4b6c-94b2-35b259cae03d",
        "cursor": {
          "ref": "a83b5467-5faa-4dd9-a46a-2c2457131f50",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "dcb928ea-4da9-4072-aad4-6f23fb68c116"
        },
        "item": {
          "id": "5b567989-945b-4b6c-94b2-35b259cae03d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "88abce7c-62b2-481d-94da-fe645e926c3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5178d89-fef3-45d0-a744-70d523ab634b",
        "cursor": {
          "ref": "72880b67-0cb4-44c0-8fdd-c3268b54eaee",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ed041c05-84fe-4e23-bf05-c0c885623166"
        },
        "item": {
          "id": "e5178d89-fef3-45d0-a744-70d523ab634b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "8d2dae2a-2369-4e20-b9bb-d23fc4bf9ffa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bdfc602-428f-49c5-a898-14d700e7d42a",
        "cursor": {
          "ref": "a45668fc-94c4-49b2-86e4-f57cad03b075",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c280a3bb-c6f5-4ccd-822f-903217879942"
        },
        "item": {
          "id": "0bdfc602-428f-49c5-a898-14d700e7d42a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a3d087de-049b-48c2-97a6-6b77679bbfa1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca2daeb-3c97-4a47-9668-081bd66c1cdd",
        "cursor": {
          "ref": "67dfb5ab-3f46-4b92-a047-7c9f37266886",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "48dc0800-662f-4289-9c0c-cb963b515f23"
        },
        "item": {
          "id": "0ca2daeb-3c97-4a47-9668-081bd66c1cdd",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a8150c7c-4847-47ed-8ac5-8c01b9ac0059",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f71f79-7d5c-4ef3-a888-f1f0a53f767e",
        "cursor": {
          "ref": "466485a8-f41a-4a8b-8648-bc6907f64959",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6ba49449-baf4-4567-a85a-346697033ed1"
        },
        "item": {
          "id": "a8f71f79-7d5c-4ef3-a888-f1f0a53f767e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0d0fcb37-c97e-444b-bf6a-157f15af9254",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706958ca-794d-4c23-9aa7-c5ac8b6e491a",
        "cursor": {
          "ref": "e78162f3-c6d6-400a-9411-068123e2e7d8",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5202e254-70af-4d2a-af29-ce2d9c12ea94"
        },
        "item": {
          "id": "706958ca-794d-4c23-9aa7-c5ac8b6e491a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0085bbe5-ea01-4e73-8e76-8f057734d5df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9041eb90-975e-4426-8cfd-828a25d5890f",
        "cursor": {
          "ref": "50115ce9-dd48-4f04-b750-543f37875a94",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5b907a0c-797c-4841-b138-5e3953e6c155"
        },
        "item": {
          "id": "9041eb90-975e-4426-8cfd-828a25d5890f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c5e3ae34-5dc1-4108-ac71-8f5e372b295a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b001331a-1407-442b-b724-60451cb861e2",
        "cursor": {
          "ref": "37f24bb7-c818-4f26-b364-6d8f552a9f12",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "241dbb27-8e5f-4371-b271-b9f2a876cbc6"
        },
        "item": {
          "id": "b001331a-1407-442b-b724-60451cb861e2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5dbd619b-8e92-4209-befb-b27e9b03535d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53b2212-d346-49eb-b2cd-e3d07241ea13",
        "cursor": {
          "ref": "584aaecc-1619-4306-bd80-a067795bbb6e",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "70c150e6-856d-44f9-bd44-dc21ee0e9f1a"
        },
        "item": {
          "id": "c53b2212-d346-49eb-b2cd-e3d07241ea13",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "77769231-14aa-4c04-9796-f7256f9aa00b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e73e621-7071-4e3a-9014-c3c6c79f8d41",
        "cursor": {
          "ref": "2773f3d7-f48f-457e-8ff0-db9b54e7f365",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ed98b4d2-808e-4c1d-a971-d09026d92838"
        },
        "item": {
          "id": "0e73e621-7071-4e3a-9014-c3c6c79f8d41",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "93b56d75-83ea-4782-8ee6-581363a5150b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242ea20d-5125-4db2-ae23-e658217f9dc0",
        "cursor": {
          "ref": "8d5cca9a-67b3-4c82-a9de-1ce574a58329",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "14559e05-9baa-41d8-95d1-524c80fa8766"
        },
        "item": {
          "id": "242ea20d-5125-4db2-ae23-e658217f9dc0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5ae4fff4-c255-4cb9-8750-4df79b89f354",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ede3d7e-f68b-4788-80ef-c7a2fbe0cfc5",
        "cursor": {
          "ref": "0e8906a7-b6cd-487f-8da9-7fb9ea46d0e1",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "306ed048-dd98-4f0f-945d-257fdd8225fb"
        },
        "item": {
          "id": "7ede3d7e-f68b-4788-80ef-c7a2fbe0cfc5",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8513a19f-d54f-4461-bb55-4de0293a2577",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3d7b48-46ec-45e1-ada4-277e42dad315",
        "cursor": {
          "ref": "ac32c53e-80c9-4b20-91fa-d251cf4b4239",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "aa281cf5-3e0f-437b-ba16-ca47d01ed17a"
        },
        "item": {
          "id": "bd3d7b48-46ec-45e1-ada4-277e42dad315",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "de033f17-210a-425d-9044-54991e9060e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc34cb24-300d-4b4e-951e-0be75de1163d",
        "cursor": {
          "ref": "8a1294d9-38ee-407e-87ad-ee8c354fd171",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7d26a0be-3412-4517-8e24-d870a9f88502"
        },
        "item": {
          "id": "cc34cb24-300d-4b4e-951e-0be75de1163d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "72e7c1b6-ad45-4fe3-917f-4b5250efd6e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9cc423a-b211-4768-96ac-fe68ecd2e56b",
        "cursor": {
          "ref": "bae09c28-0d63-4a41-ae6e-3153037a7544",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "460d3a51-b9e5-4880-a55f-1798aa7c6d6e"
        },
        "item": {
          "id": "c9cc423a-b211-4768-96ac-fe68ecd2e56b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "db3c549f-3e7a-4911-a9b4-ae6f6eab1d93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd4d4cc-5c76-4b54-b41a-6bf80e3d68e8",
        "cursor": {
          "ref": "91ae5dac-9587-4253-b17c-29c304411d43",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e8ea8f55-f6f8-40ed-9a93-5856e53a50e2"
        },
        "item": {
          "id": "ffd4d4cc-5c76-4b54-b41a-6bf80e3d68e8",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8bcf5f09-e1be-491a-8b7e-96c5a85c5abd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeecbcd8-076e-40d9-ad7a-ee0975205455",
        "cursor": {
          "ref": "8a1ca9cd-f712-4fb2-9754-d8fc42c98fb5",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "bc0a2611-7d2e-4ccc-aacf-9adef576dd26"
        },
        "item": {
          "id": "eeecbcd8-076e-40d9-ad7a-ee0975205455",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7196599a-ed81-4ba2-872b-d591c787a081",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec389ef-8247-424e-ace2-3a32596173c0",
        "cursor": {
          "ref": "8ff86171-84f3-4bd0-8583-edacaead4b6d",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1aa47b64-9e6d-4eb6-951d-adac97613549"
        },
        "item": {
          "id": "9ec389ef-8247-424e-ace2-3a32596173c0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cad454ba-2428-4e9a-b495-06fbec9f02cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303c1f62-2e1d-42a4-a489-d62ad9e8f6a4",
        "cursor": {
          "ref": "e297a8b0-b90c-4c81-8960-0c6fb4b638b7",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4a20f048-5baf-4c95-924f-00d07fbcb942"
        },
        "item": {
          "id": "303c1f62-2e1d-42a4-a489-d62ad9e8f6a4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "42e749f6-a4c8-4caa-b4ef-6c2e43f26a0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b315e0-9fc1-479e-9324-6d862cd9b8d0",
        "cursor": {
          "ref": "5e476c41-4852-44ff-9660-f27cf9b957d4",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2cd06d4a-2943-45fe-b906-3302160de5d1"
        },
        "item": {
          "id": "82b315e0-9fc1-479e-9324-6d862cd9b8d0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "88170ea9-cc9f-4088-bc31-e7e95d3a11ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8617b69d-476b-4b6a-8adc-5b427e2355e8",
        "cursor": {
          "ref": "b09f42f9-9559-4d63-95d7-14feba71dcf0",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9cfe7577-5a25-4a89-bd3e-581fd1adc627"
        },
        "item": {
          "id": "8617b69d-476b-4b6a-8adc-5b427e2355e8",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "28f43f47-5338-4cc6-80f9-c437071b26ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb57d6a-4bd0-4d5f-9bc1-fecb65c48389",
        "cursor": {
          "ref": "6532e153-2a82-4411-a705-cede64546114",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "0bee3d0a-540b-44a9-b1d9-07fd02dfd545"
        },
        "item": {
          "id": "1bb57d6a-4bd0-4d5f-9bc1-fecb65c48389",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "02306dfd-1447-4981-9d3a-ca9c42810c9a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717d5b53-bcc9-46d8-b662-f8d5ab4a3c3d",
        "cursor": {
          "ref": "18982cb1-4656-489e-b3fb-2a9cbcc07692",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ab5ebf88-bd10-469b-8a5e-2b6f92595c10"
        },
        "item": {
          "id": "717d5b53-bcc9-46d8-b662-f8d5ab4a3c3d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "28ae6906-41b4-4a49-a989-42d3a6786d0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3931d74-564f-4c41-a02b-be5d5f5c85f3",
        "cursor": {
          "ref": "054a6c69-a53a-484b-ade3-5617c9f7569d",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ce194c06-c373-4386-8f35-1dde7d5ef5d7"
        },
        "item": {
          "id": "e3931d74-564f-4c41-a02b-be5d5f5c85f3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4bc18322-0fb8-46af-9ca9-e31f2086a77d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194c1e69-0a47-4192-83ae-e6870cbdd493",
        "cursor": {
          "ref": "0343e961-886f-48d7-8779-02a40a2cb011",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c278bf4b-f215-4b25-8e0d-3fba55e897b9"
        },
        "item": {
          "id": "194c1e69-0a47-4192-83ae-e6870cbdd493",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1f63e09f-d7cf-467b-aad1-d4dfc0e13a65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9fb5607-d665-4e9f-bdf4-6ab9f9a325b5",
        "cursor": {
          "ref": "c3769aea-5b01-4199-a58b-ab1819e4b046",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0e342d4a-411b-401c-9105-b3a0ce1ab710"
        },
        "item": {
          "id": "f9fb5607-d665-4e9f-bdf4-6ab9f9a325b5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a4022368-4b0e-4e87-92df-ae0bd0a7efde",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24f79a8-0325-4889-9b62-28d0f51b99f4",
        "cursor": {
          "ref": "0e595841-4a99-4a24-aed2-c1f20885a4b4",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1af8c056-b624-4f6d-80fd-b9101064de13"
        },
        "item": {
          "id": "b24f79a8-0325-4889-9b62-28d0f51b99f4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9d324767-92a1-430c-a321-b01fa8a6f9e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d342a97-2e8a-497d-899a-8337f363eb7a",
        "cursor": {
          "ref": "fbe8c517-600d-4641-9f5a-f1d6d3da5eb5",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ec0e64ed-91d5-4a93-b759-be6847fc70de"
        },
        "item": {
          "id": "9d342a97-2e8a-497d-899a-8337f363eb7a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "830b2647-4aae-4c8e-a625-c544ebf7e566",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ec3384-ef3a-46b2-8ce5-a2bf9b168c1b",
        "cursor": {
          "ref": "e9cde64b-4088-42b2-88e5-d1904b83f1a0",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "cce6b816-4f4e-488d-8218-da7e68117724"
        },
        "item": {
          "id": "f1ec3384-ef3a-46b2-8ce5-a2bf9b168c1b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "184c695f-240f-4529-8d03-96ae140a54c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7046150f-9bc1-487d-a8d5-d0645469b8a6",
        "cursor": {
          "ref": "c9abf578-eb88-4c56-85d1-81bf5b90d0c5",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2047d2e4-c067-4148-9804-ce3a42a9b0e4"
        },
        "item": {
          "id": "7046150f-9bc1-487d-a8d5-d0645469b8a6",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "51bf78cc-a067-461b-93d3-50363d12e3e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34f4f13-2f69-4c7f-8740-249d176b2205",
        "cursor": {
          "ref": "1cd768cf-c54d-42dd-911f-b15678c128c2",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "794ee6a8-b69a-4062-a8c1-c453027d18f2"
        },
        "item": {
          "id": "e34f4f13-2f69-4c7f-8740-249d176b2205",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "86bdf7b7-606f-4427-8ef8-c5406d2792b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ae5215-c060-4abc-914a-74719132f46f",
        "cursor": {
          "ref": "6fe7f463-7bc3-44c7-acc0-2b23839e5856",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "345ec64b-955a-49ea-b9a6-a566b66ba9b4"
        },
        "item": {
          "id": "45ae5215-c060-4abc-914a-74719132f46f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e26fd698-edfb-4fa4-9f0c-fd11c812084d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896fcf12-f616-4151-9989-a84c614470b4",
        "cursor": {
          "ref": "5a7d1c2e-cdd1-4dfd-b61b-54d6cb13927f",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9b7794b0-7593-4914-9871-d35f83b09485"
        },
        "item": {
          "id": "896fcf12-f616-4151-9989-a84c614470b4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f453223b-0505-42cc-ae8d-85ae2481366d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb8f30da-c9e9-46ee-97e1-474ab26e27d2",
        "cursor": {
          "ref": "a28a0b56-c7e3-4d6a-90b9-a7f52235fb28",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b93ac9f2-ffdb-4626-86e3-df935009642f"
        },
        "item": {
          "id": "fb8f30da-c9e9-46ee-97e1-474ab26e27d2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8a195118-a66f-4dc7-b12e-3e3ab2659012",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f22ff67b-e58b-4d80-a75a-3bef8ce39e04",
        "cursor": {
          "ref": "e1707960-ce28-48eb-901b-fad773297217",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "33fc5f91-1e9d-4400-9271-ab58a5963966"
        },
        "item": {
          "id": "f22ff67b-e58b-4d80-a75a-3bef8ce39e04",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "619a4041-ccd0-4d2b-aff2-4557cacc5f8a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e33796-3ca9-4d8e-aa40-e52ec6acb595",
        "cursor": {
          "ref": "47ee540e-24e0-4e84-a801-67e7f0bcca0c",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3b99dfea-6cd3-4eb8-81c8-8ee8c46650e8"
        },
        "item": {
          "id": "56e33796-3ca9-4d8e-aa40-e52ec6acb595",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7e7b98f7-0c78-4c59-a53d-10f865dc9969",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00575e81-efcb-40d7-8564-d4a10ef8fe8b",
        "cursor": {
          "ref": "9a6953db-ed07-4b38-bda0-02d21d535f18",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c4558ad2-1f6e-44f2-99d6-cdebb2cc21cc"
        },
        "item": {
          "id": "00575e81-efcb-40d7-8564-d4a10ef8fe8b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "67b33e3b-f205-4487-a559-09fbfba71a6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21293db5-ea21-46d3-ab1f-b5933df89ced",
        "cursor": {
          "ref": "c1178690-0db0-4ede-8c8f-35066d624261",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "68218b44-f0d2-4cd8-9a7e-e4cfbd6fcab6"
        },
        "item": {
          "id": "21293db5-ea21-46d3-ab1f-b5933df89ced",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "eeb3c6c8-9d00-454e-8388-93ce1761c3f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1c7123-258f-40df-8a3b-afedc34f85c8",
        "cursor": {
          "ref": "0227d4b0-8f0e-4b12-94b0-e14d9634313f",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "95a47d57-c491-4583-9d64-4400a9779d2f"
        },
        "item": {
          "id": "ec1c7123-258f-40df-8a3b-afedc34f85c8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4a940ce6-a755-4e77-b936-19c182473e96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4b5525-03de-4233-a326-6c5cec726c9f",
        "cursor": {
          "ref": "8108e836-ffe6-4689-b108-2d68278fc428",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "31ca1549-36bd-4b5d-a89f-23195cc1cab4"
        },
        "item": {
          "id": "2e4b5525-03de-4233-a326-6c5cec726c9f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2ebc820b-2ab7-4993-b1c7-55809c1afd22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f05af94b-fc6a-41d0-b664-3aac6542efab",
        "cursor": {
          "ref": "ac98b66a-c756-4c60-a20a-8711990c5408",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "fb13e845-2852-4f36-9f1f-5095c96abcc6"
        },
        "item": {
          "id": "f05af94b-fc6a-41d0-b664-3aac6542efab",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9bd938a0-f3a6-44f7-a808-1fcb1437b9ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba89457e-f243-43a4-9171-469f2340aa0c",
        "cursor": {
          "ref": "4f03cda6-b134-491a-bb50-23e440c66cfe",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bece92c9-7bf9-4ee1-a301-176cd242655b"
        },
        "item": {
          "id": "ba89457e-f243-43a4-9171-469f2340aa0c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0ebc1c9c-0569-4aee-a49f-f9aac4f0075f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869fcdab-6ac7-490e-8ba4-cd4cf036dacc",
        "cursor": {
          "ref": "02456bc5-64c8-45f3-97b0-bea1942c1b5b",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e12ac6d4-6a08-4408-8558-c1c3a68fcc40"
        },
        "item": {
          "id": "869fcdab-6ac7-490e-8ba4-cd4cf036dacc",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "56759350-6c12-4c5a-9fd3-a2e8ca1991e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a2e360-6319-4a8d-b129-b9c90ad43291",
        "cursor": {
          "ref": "526ed195-8922-4d87-87f7-745501e2af2c",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "02762648-d6c6-4f9b-bbf2-4e8d364c1727"
        },
        "item": {
          "id": "a5a2e360-6319-4a8d-b129-b9c90ad43291",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "623d668c-3ca7-4a86-ab33-d8a6683d533e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ebb183-7dc6-42e7-a34b-5a4393ffb479",
        "cursor": {
          "ref": "abae36d2-96d0-454a-9e97-f870f5443791",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "bbe203c5-fa6e-4d7a-b4d6-2b1dce25b717"
        },
        "item": {
          "id": "47ebb183-7dc6-42e7-a34b-5a4393ffb479",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "4091fbea-0446-4d0f-b03d-a4439f81c247",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c66f7c-ee5d-4a06-9d56-1d2ab9334c30",
        "cursor": {
          "ref": "ddea2770-a467-4042-82a3-6ad548a7e7df",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "db24dbeb-5711-4b38-bde6-0d3b4ceba619"
        },
        "item": {
          "id": "46c66f7c-ee5d-4a06-9d56-1d2ab9334c30",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a4c8f7e4-9597-493c-8fef-15b5d4877a7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d452ebf8-f6e8-4b36-a1bd-77cff879f28f",
        "cursor": {
          "ref": "c0c1aa8a-869f-4a33-9910-bbbd78bc98b3",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f3db4e82-bfe1-46e1-9356-fd7c3a846ff3"
        },
        "item": {
          "id": "d452ebf8-f6e8-4b36-a1bd-77cff879f28f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "fe0c110d-a2fe-415c-aa47-8e14665995d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f3da9c-164d-4602-a953-6c3ad49b4c27",
        "cursor": {
          "ref": "0d8960f5-aa2a-43e4-8ace-bbb0e9e3ba5c",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ea60e3f7-9150-4539-8944-ac1ba7527d73"
        },
        "item": {
          "id": "68f3da9c-164d-4602-a953-6c3ad49b4c27",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "989ae989-15ed-4dab-8f62-3b0acb9e1752",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f20c23c7-84fb-44ad-a608-287f9f68d6e5",
        "cursor": {
          "ref": "0f00f78a-0cfe-44af-bf05-b7cef3ac889b",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "062c46f6-29e0-4cd6-8858-2cc662151006"
        },
        "item": {
          "id": "f20c23c7-84fb-44ad-a608-287f9f68d6e5",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2ceac8fa-10dd-40f3-a4d4-c108ac153e07",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a7912d-2a21-48b0-96da-c028908c8217",
        "cursor": {
          "ref": "e010e6f0-490d-4064-8e67-c892bfa89425",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2c7b5d59-cda1-49c9-87e5-fab46cd77f0d"
        },
        "item": {
          "id": "66a7912d-2a21-48b0-96da-c028908c8217",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a0c90689-34b0-4274-93a9-fa370a739c28",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e015ba8-eb98-4d5d-949b-5960bd10cb72",
        "cursor": {
          "ref": "ad40d874-e1b0-45b8-b9d6-c51e6acb6520",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4a8141d5-57be-4a47-97a8-fbc9517c37d5"
        },
        "item": {
          "id": "3e015ba8-eb98-4d5d-949b-5960bd10cb72",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5d864f33-1ca7-43f1-aa8f-4f156741cc51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a7ca2e-d848-4066-9a5e-a3cdbee9bb0b",
        "cursor": {
          "ref": "0a1edbef-5631-4b10-9df6-d230edd626d7",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f4e9bb6f-7b5e-469b-be14-3548c053f9da"
        },
        "item": {
          "id": "c2a7ca2e-d848-4066-9a5e-a3cdbee9bb0b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "32c46918-55a0-49bd-8d18-a5b16972f941",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0347413a-79a2-4b90-9815-0eac62d566f2",
        "cursor": {
          "ref": "c9d974fd-6ad8-46a8-8339-ba9b47306e7c",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3bd17fc9-877d-43c8-8439-9cd1f730c401"
        },
        "item": {
          "id": "0347413a-79a2-4b90-9815-0eac62d566f2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "85ce6faf-cb9b-4601-8c2d-25c5c59d947a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e94fed-a75e-4b72-884b-8304027bf779",
        "cursor": {
          "ref": "0028e59d-02d5-4b17-ab9f-8e5ad64be918",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "09cfbb01-a37b-4326-b440-0257ffd01f5f"
        },
        "item": {
          "id": "47e94fed-a75e-4b72-884b-8304027bf779",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "22032b9c-03fa-45fd-9e5a-8af589a6093b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac326b8-c69e-4f98-b75a-63e91b6d00c8",
        "cursor": {
          "ref": "8171419c-efb3-4459-bd6a-016418c0d279",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6a7d4300-1de1-45ff-9e9f-a32b8f71c73d"
        },
        "item": {
          "id": "9ac326b8-c69e-4f98-b75a-63e91b6d00c8",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0141151d-d833-4c10-86eb-6dfe3fca84b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c4242e5-8e49-427e-8714-79ea0766e408",
        "cursor": {
          "ref": "b2b08470-3234-46a8-977c-055b95a13fec",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c2b8d36c-5bcf-4144-b613-90c284478e5c"
        },
        "item": {
          "id": "4c4242e5-8e49-427e-8714-79ea0766e408",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "08e9b943-c90c-42fe-86a1-f8a015049205",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f526c0-b053-4a22-a4a9-d0a67c200d0a",
        "cursor": {
          "ref": "fe67ab3b-d0d5-4662-a06c-a11831432577",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "85282c94-769d-4acd-ae52-81bd2f4df946"
        },
        "item": {
          "id": "d2f526c0-b053-4a22-a4a9-d0a67c200d0a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "1e2de7af-d859-4076-8122-693842219d39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fee4093-0cd7-475c-9cce-abfb683b4586",
        "cursor": {
          "ref": "ba8ab067-3f56-46a0-a5a3-43674c5b42d5",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c8fc7e58-07b1-422b-8ef9-7ef13fddcecd"
        },
        "item": {
          "id": "0fee4093-0cd7-475c-9cce-abfb683b4586",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "949aa398-7b6b-4eec-b4cd-96f65ba16a9e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7ab5c8-568a-4a05-9f81-c9dec7337bec",
        "cursor": {
          "ref": "7de1e828-a518-4cb4-94b8-11fccdc76105",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "87cb091a-8649-46b6-a795-8647720b2d24"
        },
        "item": {
          "id": "7b7ab5c8-568a-4a05-9f81-c9dec7337bec",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "bb07961d-8725-4ca5-80db-2b0e233a1dda",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b25721-78d0-4ef2-a81d-0335bc420dfe",
        "cursor": {
          "ref": "864f90ce-fe8a-4e61-8e28-3fe1720c4f24",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "bce4546a-bb7c-42e4-ab2e-63e2fb71c383"
        },
        "item": {
          "id": "a7b25721-78d0-4ef2-a81d-0335bc420dfe",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e2575ef2-6e8e-42dc-bdb8-ae84bd32ea9c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8314862-7761-4c96-9b70-935708fbae57",
        "cursor": {
          "ref": "e7c8b770-bf00-41a9-9f63-9f5241470725",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "24e5a2a9-ef85-4392-b36d-f757a3f8b10c"
        },
        "item": {
          "id": "f8314862-7761-4c96-9b70-935708fbae57",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1c990c3b-8e67-44a2-8893-b09720eda69b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ce9c2c-4137-4a0b-865d-9f560bfb65d2",
        "cursor": {
          "ref": "0e2e1c2b-e9c7-4f73-b2a2-0e5e3e0db0d3",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4079c83d-743d-484d-b94c-e62c01a442b9"
        },
        "item": {
          "id": "b8ce9c2c-4137-4a0b-865d-9f560bfb65d2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "26ed2f3c-1256-4884-abab-cdc68b77ae90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c8d7c0-bdac-42ed-9382-cc17e8e33cca",
        "cursor": {
          "ref": "d697797f-5e58-4738-89a3-5c56df34d3f4",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9115fc52-3751-4289-905e-72fced06e021"
        },
        "item": {
          "id": "69c8d7c0-bdac-42ed-9382-cc17e8e33cca",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b5b9f6dd-fb3d-48b0-85ff-718e6e555bea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba3b8e7-12f6-42cf-8dfb-6af6ddbe1559",
        "cursor": {
          "ref": "1622bc66-e8ad-4fe2-b952-1077424212f5",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "083d392f-31f5-40c4-bf77-cd07471ded89"
        },
        "item": {
          "id": "aba3b8e7-12f6-42cf-8dfb-6af6ddbe1559",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4ac7a5aa-06bc-4813-aecf-4cef9984a045",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861be09e-1139-4652-ac4b-3741d919b54f",
        "cursor": {
          "ref": "f59b8ef3-7d83-4faf-8d21-ce3f678ed2c3",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "41680a66-4fef-4b7d-9020-64fbbb7fc638"
        },
        "item": {
          "id": "861be09e-1139-4652-ac4b-3741d919b54f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ddcce41c-e9ce-4268-9004-583d2e0f13c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66f2ab4-a6fb-44cc-82f3-052d22c1eead",
        "cursor": {
          "ref": "c38f2e08-576c-4be6-b1d5-6e267b2a3599",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "62b601fa-7913-4e6d-9576-2afe765f012d"
        },
        "item": {
          "id": "f66f2ab4-a6fb-44cc-82f3-052d22c1eead",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "5fa2da28-a009-4c19-8468-a9baf789dfea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8a39a8-9d88-46f7-81f1-5fc1b0cc2c26",
        "cursor": {
          "ref": "58bc04e2-2b18-4587-88c8-a6fd4db27cf2",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2f0ac868-814a-4c1d-917f-821b3a15c134"
        },
        "item": {
          "id": "0c8a39a8-9d88-46f7-81f1-5fc1b0cc2c26",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1687f321-8d72-4d3f-8cf4-79b639256acb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade95496-5a5d-4faf-aca3-0a3fdf194035",
        "cursor": {
          "ref": "d2e1d138-fa79-4057-93c7-8f8286247208",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6d8e622b-c74e-471e-9789-d4a8a6dd1c0d"
        },
        "item": {
          "id": "ade95496-5a5d-4faf-aca3-0a3fdf194035",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "3caa85d3-b936-431c-8c87-1c3d2641f505",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "00f1196e-74da-4604-bfb6-2202d93d50b4",
        "cursor": {
          "ref": "e4ba960d-12dd-417a-83a2-9e3138b2123d",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f7229882-e908-4c61-8cce-ce5faf313fb5"
        },
        "item": {
          "id": "00f1196e-74da-4604-bfb6-2202d93d50b4",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c70d3d9b-712f-49e9-80de-0fd1cd64b941",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 176,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "fce7e108-8381-41ce-9a6e-e1499b9407fd",
        "cursor": {
          "ref": "dc09b34e-1112-434f-8fe5-2f937954e438",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "26b00b6a-632e-45af-8ed0-dc513636615e"
        },
        "item": {
          "id": "fce7e108-8381-41ce-9a6e-e1499b9407fd",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ccd4affb-b4e7-4f20-8053-9766f6e8f356",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "a91d7ec6-d732-4229-bd8f-afc11b8dfe90",
        "cursor": {
          "ref": "a36be5df-84ae-4401-824b-975f0e259b26",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4b9fb238-a17f-4255-a0a8-942e6d90eda9"
        },
        "item": {
          "id": "a91d7ec6-d732-4229-bd8f-afc11b8dfe90",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "65e00484-1c73-4bb8-8bc2-5fadd140b83d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "bc1b8df9-78d4-4e0d-9ed3-4e9e7309086c",
        "cursor": {
          "ref": "a0f86753-11ce-4ce1-bca7-0195ed024108",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "87a146f4-fee9-472a-a09b-3b42af41a336"
        },
        "item": {
          "id": "bc1b8df9-78d4-4e0d-9ed3-4e9e7309086c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4da5ecc0-490c-4395-bc16-f54d6ad1c60b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "1aa94f80-c1ab-4a7a-baae-a074cf709027",
        "cursor": {
          "ref": "d81ece05-e9f4-4d36-9404-80ea4401d025",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "306d3d35-3292-4549-94fc-76d79ee18781"
        },
        "item": {
          "id": "1aa94f80-c1ab-4a7a-baae-a074cf709027",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4179b2dd-afe2-461d-becd-600453d68c5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9f29a8f3-f363-4006-be87-4757c4cba761",
        "cursor": {
          "ref": "718300f0-587d-4db7-9a41-0216b8a9d270",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "41259290-8170-48bb-8b16-8894e346d5a4"
        },
        "item": {
          "id": "9f29a8f3-f363-4006-be87-4757c4cba761",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7e4d10e8-2f9d-4332-92c5-847805a3ca16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "9a3fdd32-9946-4ec6-9076-b6ea5474d25b",
        "cursor": {
          "ref": "01eba1ea-156f-458c-82f4-bc04dd8b1a8d",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2c80b1f7-15e0-4c99-b85a-a07ade6ba072"
        },
        "item": {
          "id": "9a3fdd32-9946-4ec6-9076-b6ea5474d25b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0fad4141-fc5c-4e93-883f-981aae5dc95d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "906bbc57-4bdb-4f7b-9a50-20c134fd3cba",
        "cursor": {
          "ref": "a497b08e-3461-4f2a-bef2-787ca659269d",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2eed38b7-386f-4ff0-af65-ada211426ace"
        },
        "item": {
          "id": "906bbc57-4bdb-4f7b-9a50-20c134fd3cba",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "156767f0-d9b8-4a3b-9655-f5dd732f650e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2aa815-c658-40a1-ad1d-7a3b4f6c1352",
        "cursor": {
          "ref": "02896d3b-a0ce-4aee-8803-137b67cd9377",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "133f9b28-543a-4f6d-b9dc-5c5f99b04aa3"
        },
        "item": {
          "id": "7c2aa815-c658-40a1-ad1d-7a3b4f6c1352",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1197eab3-222a-495b-bcb9-17c5caee5abb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8830b8c-10eb-480f-8fdc-d32cff94f475",
        "cursor": {
          "ref": "2dc84f88-30ac-4295-afe5-d214a4acfcfe",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fe353cdc-8370-4d44-99c4-f9f7a4de246b"
        },
        "item": {
          "id": "d8830b8c-10eb-480f-8fdc-d32cff94f475",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "51861bad-4313-435b-9078-61f80c53f56a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee197279-835b-493f-ab7d-2f31306a2ea7",
        "cursor": {
          "ref": "ba97befa-9e91-4ab9-94a9-4d859ac77f41",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c17c722c-4179-4ce2-9841-94c9b294cc24"
        },
        "item": {
          "id": "ee197279-835b-493f-ab7d-2f31306a2ea7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a0f1baa3-6e49-4db6-a455-4df6b42fbba3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16fdd76f-979e-4fa1-b2ff-5a476398a656",
        "cursor": {
          "ref": "1c0af46a-c4ad-4904-8b35-c67fee362f5e",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "aa2f54c7-73ca-47e4-b38b-10456061c2e7"
        },
        "item": {
          "id": "16fdd76f-979e-4fa1-b2ff-5a476398a656",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7699b6d4-b7ad-4952-b01a-0016060d23c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c14af1-b2ed-44be-b3b6-a8df5df55171",
        "cursor": {
          "ref": "4738d6a9-0109-40fd-9295-c3b2e7b4b252",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4aa1f33e-e812-469f-b486-f9572b81f340"
        },
        "item": {
          "id": "27c14af1-b2ed-44be-b3b6-a8df5df55171",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ae2e128d-42a6-4cfa-aaec-4fd45cac1022",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d95f90-9f4d-4e83-9cac-c2b8f5cd6e1a",
        "cursor": {
          "ref": "204ec4bf-bf32-47bd-8b28-dc0726bba6b0",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "fc0c05b0-6e62-4b6f-9260-fc6e59accee6"
        },
        "item": {
          "id": "e5d95f90-9f4d-4e83-9cac-c2b8f5cd6e1a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b5e3e700-5220-442d-9a03-55ffc6fa82c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "113d2fe7-5c09-435c-a169-c0ce2455224e",
        "cursor": {
          "ref": "20d0bca2-e9f6-4742-9539-d9113d0b03cd",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "47c1b519-a19b-4e0e-8eb8-60192cd075a4"
        },
        "item": {
          "id": "113d2fe7-5c09-435c-a169-c0ce2455224e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f55540e1-455d-433b-bf65-a10ea3433b71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b8d625-4cbf-4e79-b6ca-6e413da00102",
        "cursor": {
          "ref": "9ba0f8d1-6b38-4e53-a36f-982d118703a5",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "82afae9d-2667-47d0-bf9e-78439b77bb69"
        },
        "item": {
          "id": "70b8d625-4cbf-4e79-b6ca-6e413da00102",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "aedce4ac-ff93-4da0-970f-4ea71ae37044",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d9eddb-ffe5-434b-b526-0510b459c974",
        "cursor": {
          "ref": "3ab5651b-8836-4d99-ab28-50e918b32ad7",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4a61ea3d-360c-47fe-b62b-88b365be42e0"
        },
        "item": {
          "id": "85d9eddb-ffe5-434b-b526-0510b459c974",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e9bd3bca-72a4-47f0-8aab-0b3754501317",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1061dae8-7f61-4544-af28-1ca2d4fc9d30",
        "cursor": {
          "ref": "10cb4ed8-9dc8-4350-b066-be8ce86199ba",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "837d8e42-c589-4fe4-9c53-6b400c0e6c8d"
        },
        "item": {
          "id": "1061dae8-7f61-4544-af28-1ca2d4fc9d30",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "35d8f90b-e8c6-465e-b85a-700664652216",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "233c671a-0be0-423d-a78f-83cb4131d319",
        "cursor": {
          "ref": "76d1bd85-8095-43f8-a82a-84380e672c4b",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9469681d-858b-4002-8ba7-fe8147f5d73e"
        },
        "item": {
          "id": "233c671a-0be0-423d-a78f-83cb4131d319",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0160b780-8060-458d-bde0-eff678c8f668",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b08cc9a-9e17-4f06-a036-81da7029ebf8",
        "cursor": {
          "ref": "381d39a7-153a-43fb-953d-b3957439d726",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7683e914-c4e6-4823-8a75-c13bacdc26d4"
        },
        "item": {
          "id": "4b08cc9a-9e17-4f06-a036-81da7029ebf8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a4b55773-a932-4f57-b217-c91046a7054a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a5df0fb-ac04-47bf-abe9-6356a756d2ff",
        "cursor": {
          "ref": "b9fb979d-c03d-4819-b062-d698b9370682",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "918390c1-0c86-4cea-b7a1-5a3fc8f1d016"
        },
        "item": {
          "id": "4a5df0fb-ac04-47bf-abe9-6356a756d2ff",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ba9d329b-08fd-498e-a139-1a9f4ce1a26f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aebeee8e-6cc3-49d1-97ce-3fc2cca022f2",
        "cursor": {
          "ref": "058f46e6-2822-47c8-abff-b000a9fdb573",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "edaf8396-3acf-4649-ae9f-0a6babeccf66"
        },
        "item": {
          "id": "aebeee8e-6cc3-49d1-97ce-3fc2cca022f2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f93692a8-c578-48e9-a4d8-dfdfd49f631d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd350390-506b-4bd6-b06e-0f4c7125a019",
        "cursor": {
          "ref": "7ce6b952-9fbe-428e-abdf-662d9df8dfd3",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c28db595-3587-435d-9ccf-c34acaf7e94f"
        },
        "item": {
          "id": "bd350390-506b-4bd6-b06e-0f4c7125a019",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e25a8118-382b-4e2f-b484-52c11afd0863",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f2e78f-03ce-4fd6-9a6f-e442e052bf41",
        "cursor": {
          "ref": "08045edd-0b40-4b50-a402-97513d328f1a",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9851d66c-fc34-4083-afc4-ab02f0570d93"
        },
        "item": {
          "id": "b6f2e78f-03ce-4fd6-9a6f-e442e052bf41",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8cf38b68-54b4-462e-9baa-b18ecb4e7aff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d0575d5-0410-4a76-ac61-f2e71e844e45",
        "cursor": {
          "ref": "98215e54-b6cc-4f07-8f5e-b7ea53ed8db0",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ecf4a21c-6624-48cd-a830-22f84adfa96c"
        },
        "item": {
          "id": "5d0575d5-0410-4a76-ac61-f2e71e844e45",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fe0a9e7a-c039-49d5-ae5a-562c7fd56221",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8203a4-db30-4d11-ac90-4093cf6659bc",
        "cursor": {
          "ref": "6654e36d-5a91-454a-942d-32086eb7eb72",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8d95c732-a2b4-427e-a529-1fc8ce4288ae"
        },
        "item": {
          "id": "bb8203a4-db30-4d11-ac90-4093cf6659bc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "373974f5-12c2-4427-8860-aa4f90e17df2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120836f6-facf-46e0-a4b5-44c21e584bf8",
        "cursor": {
          "ref": "85fdd1cf-5d87-4096-9680-6ac538838197",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2f99cde5-3fae-4be5-b459-9dfa10daa9a3"
        },
        "item": {
          "id": "120836f6-facf-46e0-a4b5-44c21e584bf8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c8a874d3-a076-4727-b9dd-4e8f3dbec39f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354c3861-5614-4fe1-a7f1-936d8fe0715e",
        "cursor": {
          "ref": "fdac5afa-9bf7-499e-a4a7-4c1693dbefc0",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7f4ea3a9-952c-4693-8e33-3eeeb2f72496"
        },
        "item": {
          "id": "354c3861-5614-4fe1-a7f1-936d8fe0715e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8344a069-658f-431b-8da7-e64fd61b4ff8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acca2e0a-ef45-4d8d-acf5-267c433e0c7d",
        "cursor": {
          "ref": "7ccf50e7-33f6-4604-94cd-158568265ddc",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1a77ae47-6b30-45f3-9f7a-2fe22d45056f"
        },
        "item": {
          "id": "acca2e0a-ef45-4d8d-acf5-267c433e0c7d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "90324683-9522-49ca-a022-c3875aaea6c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e2f9ec-286b-434b-9462-c308079b8152",
        "cursor": {
          "ref": "f023bac5-52ab-4f9d-9b8f-9a596f8e7aba",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "1c191ffb-4e62-44e9-a52f-290fbab2b5af"
        },
        "item": {
          "id": "a7e2f9ec-286b-434b-9462-c308079b8152",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e8f95e92-1dfb-461d-872c-313bd10ef4db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a972f6ad-898b-4170-a673-48a4909dcd50",
        "cursor": {
          "ref": "5183f6c8-b8cf-457b-9aa4-1f6024e0ff3a",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "60163dac-f76f-434e-8485-f8413c4ab144"
        },
        "item": {
          "id": "a972f6ad-898b-4170-a673-48a4909dcd50",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c0f1c43e-f98c-4f9f-b81c-15516a839db5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6ddc87-f675-4038-9a05-889c51722f9d",
        "cursor": {
          "ref": "18a51507-87d1-4ea6-878e-9a704e751047",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7a4b496f-2e7e-4e03-8e49-ba7645192a24"
        },
        "item": {
          "id": "fa6ddc87-f675-4038-9a05-889c51722f9d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f7caa594-d541-42c2-8cbe-40b385a21d0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89de434-ecb6-4d48-a757-b1932037e398",
        "cursor": {
          "ref": "bbf359ba-9466-4dd7-80e2-ba8acd0a00d4",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5273aa7f-0b5e-4c4f-8dde-bf57ae0a4cd5"
        },
        "item": {
          "id": "e89de434-ecb6-4d48-a757-b1932037e398",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "035a4d22-fde3-4337-8142-37e97e8cbed4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540bb1b4-4df9-4e47-95d2-da21cfe582f3",
        "cursor": {
          "ref": "f250a06d-11ca-4c27-bf16-bbd56b763a03",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a3d33577-9dbe-4800-b10c-806898bef98d"
        },
        "item": {
          "id": "540bb1b4-4df9-4e47-95d2-da21cfe582f3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a8462f6b-5c09-457b-b8fa-39bcfb23c38f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcaa7c9-be55-4d5e-8369-260ba85d1293",
        "cursor": {
          "ref": "4905d6a2-13d4-40af-a8fc-f00ddc5c6c85",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "07efb530-a2d3-4268-8cd0-37bee9a667b5"
        },
        "item": {
          "id": "dbcaa7c9-be55-4d5e-8369-260ba85d1293",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "adc05012-d777-40fc-aa26-b73183ce406a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c591b401-d9a0-48b2-8ae1-8fb73bb926ea",
        "cursor": {
          "ref": "27245d64-a1c7-4301-8b01-3ee608289d33",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "348b66d2-4467-497d-bb4b-5befcd551325"
        },
        "item": {
          "id": "c591b401-d9a0-48b2-8ae1-8fb73bb926ea",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ecfe5336-e6e3-4604-95de-1912a5efaad8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d539987-46fd-4657-a1a5-627327bea1b2",
        "cursor": {
          "ref": "f1b92bda-c750-4848-aa6b-a713e27dab1e",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c129665a-7ddc-4a72-8594-2ba06e31b15c"
        },
        "item": {
          "id": "1d539987-46fd-4657-a1a5-627327bea1b2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d6de8cf1-6590-4c17-84da-fb99c2b0c907",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dadfd85-4807-42a7-83df-30e645de9e6e",
        "cursor": {
          "ref": "48718bf4-ec90-48c5-b28d-15733c16ea06",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "53d0b5ba-7c73-4a8c-aff3-499d71257b3d"
        },
        "item": {
          "id": "0dadfd85-4807-42a7-83df-30e645de9e6e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "07fac46a-30ea-4baa-9cab-a250ca2e675f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b85ec89-c6c5-45c7-bfe0-22039e13ea20",
        "cursor": {
          "ref": "b77a2b25-9f72-4590-bb84-cffaad473ab9",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3913bd79-67f4-4ced-b68c-3151d74f1c17"
        },
        "item": {
          "id": "0b85ec89-c6c5-45c7-bfe0-22039e13ea20",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "33ddff90-bd4a-4f32-a039-e1c3870d7117",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f61856-40fa-4ee5-a9d5-d80a3c385e79",
        "cursor": {
          "ref": "f2cdcf31-3ea7-43f0-8cce-c1be26501dc9",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "26bff25b-8bbb-47e7-b9ee-2ebba782a74b"
        },
        "item": {
          "id": "56f61856-40fa-4ee5-a9d5-d80a3c385e79",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f429022d-2b0a-427b-96a8-4c47acf2e2ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608b05f3-39b8-4f20-ba57-0e3a863b70d7",
        "cursor": {
          "ref": "6b111f21-3aa5-42fe-a435-fdbeb515d5cd",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7df78b4e-35c9-4fa2-b2fb-4173dfeede88"
        },
        "item": {
          "id": "608b05f3-39b8-4f20-ba57-0e3a863b70d7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "42a7ea5b-c01f-4b4d-b9d5-4bc18bf1188e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991d8869-4d60-4d85-a58b-bd3a64ba1450",
        "cursor": {
          "ref": "f777a332-17a6-4b65-b27e-59f38428eeb9",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a13b6e21-f0a3-41dc-8fc7-ebf7c7c51179"
        },
        "item": {
          "id": "991d8869-4d60-4d85-a58b-bd3a64ba1450",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "85df9208-6880-4646-939b-68772b5c3034",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd5f04b-8709-48a6-8523-dbf0d945aeee",
        "cursor": {
          "ref": "ec0e2c20-a3e1-4e19-9d6e-79d5fff8000d",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "04485e6e-a56d-450e-9b50-3324151418eb"
        },
        "item": {
          "id": "ecd5f04b-8709-48a6-8523-dbf0d945aeee",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0b711060-a398-4a9c-9d1d-66ff53ad7e21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39fddc57-3f0a-499d-9097-e4f9f9834ade",
        "cursor": {
          "ref": "d5b466a8-d52b-4c47-a96e-3028bc989da7",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e475df88-da81-4599-809d-619ae88dbe9f"
        },
        "item": {
          "id": "39fddc57-3f0a-499d-9097-e4f9f9834ade",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "985cd2ee-e723-45c0-97f0-ff473e7d9c4e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f25279-fbcc-4a74-9290-679eb6666c30",
        "cursor": {
          "ref": "f5414d24-d2cd-4e24-b46c-513df333bfce",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "93e63e25-15fd-4e5f-8021-0dee3644c006"
        },
        "item": {
          "id": "c2f25279-fbcc-4a74-9290-679eb6666c30",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "25de1468-dd79-4dcb-bebb-add40dc334de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b1ea2f-a5aa-4e69-a67b-0725cf02766e",
        "cursor": {
          "ref": "15d67613-8f56-47be-bc49-5aa6c6d7f78a",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d87b0b8b-4f9e-4d0f-81be-d1dee2592d71"
        },
        "item": {
          "id": "99b1ea2f-a5aa-4e69-a67b-0725cf02766e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3044795c-2b13-4f3c-9769-96d608581fbe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab46ad50-9584-4021-8f5b-7acc601570ce",
        "cursor": {
          "ref": "b17bf167-7cd4-4d62-b9e5-f5f4e225d702",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "49964b9d-97a1-453c-b055-bad996bec6ee"
        },
        "item": {
          "id": "ab46ad50-9584-4021-8f5b-7acc601570ce",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "10f3cb23-49eb-4077-a518-8a6412c2854d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5dc84bf-c2d6-49d7-abda-56d5739fa339",
        "cursor": {
          "ref": "3adf9834-8f51-4061-8c9e-44f817aed640",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ed3e8116-07bc-4b90-ab0b-98e79712838b"
        },
        "item": {
          "id": "c5dc84bf-c2d6-49d7-abda-56d5739fa339",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "36ab8a64-6386-4e8f-9ba7-5872d15c2535",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e8fb0ae-afb8-44d7-bc38-67a6047238ad",
        "cursor": {
          "ref": "1c51bdfc-5494-4871-9ba6-0ca30401e772",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c1fc5e72-bfba-4218-a151-cf00b2087906"
        },
        "item": {
          "id": "1e8fb0ae-afb8-44d7-bc38-67a6047238ad",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "03312810-3127-4e32-8dd4-86c893f5dfe0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90788887-707a-4ad4-9f4f-450e67fccc71",
        "cursor": {
          "ref": "a51b5766-c9e6-4efe-a203-1954ea0c370e",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "cdfc6969-6973-454f-bbc0-6200434bbe0b"
        },
        "item": {
          "id": "90788887-707a-4ad4-9f4f-450e67fccc71",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7344929d-5def-4911-9f54-dd4662070c3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ecdb14-71f5-4753-91be-f61aebb7eb45",
        "cursor": {
          "ref": "c08d78f0-5254-4fba-b8ba-5db89665997e",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "39b75724-f743-4de0-951b-9ec4c3ad9753"
        },
        "item": {
          "id": "97ecdb14-71f5-4753-91be-f61aebb7eb45",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2073e30a-edc5-4591-825d-b17d3754baec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c4e594-c76b-4ca0-be8f-4eaef0142b43",
        "cursor": {
          "ref": "cbf998cb-8024-481d-bb11-5586f243752b",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a70506e6-cf46-4403-bc6a-561f218da991"
        },
        "item": {
          "id": "01c4e594-c76b-4ca0-be8f-4eaef0142b43",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e56f70df-6374-4e48-b26d-96c7b2ff0bb9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c5bb7c-2be7-407c-ad1c-ea8586118764",
        "cursor": {
          "ref": "57b818bb-bc73-436e-8d05-ce6fba5290c0",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1a05ecfe-fa6c-402a-88ae-1f04b3f6bd0c"
        },
        "item": {
          "id": "69c5bb7c-2be7-407c-ad1c-ea8586118764",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c50e391d-9164-4d6e-b204-181961decf92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e66eb4-7f5c-4448-8ed3-935e0d114525",
        "cursor": {
          "ref": "a2145930-8458-4b88-b5a9-53ba3c68575e",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "39332642-37f7-4aeb-ab29-8409cd30f883"
        },
        "item": {
          "id": "f8e66eb4-7f5c-4448-8ed3-935e0d114525",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4c2a0a89-5529-4577-afd5-827893eadc57",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011040c3-b37c-4732-ac9c-cd817849c893",
        "cursor": {
          "ref": "da79586f-b475-4d66-8727-ae5dfc56960d",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "bd3b5c61-6310-4489-9d28-8861999da43d"
        },
        "item": {
          "id": "011040c3-b37c-4732-ac9c-cd817849c893",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "939ca5fa-2abc-4ffd-a457-debd0b7c1c3d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d12d7ce9-424b-4140-8d01-fd7efb7b6423",
        "cursor": {
          "ref": "caef551a-9520-4559-b827-0f133290d28f",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c5fe4342-f528-4826-9e67-ecce674500f4"
        },
        "item": {
          "id": "d12d7ce9-424b-4140-8d01-fd7efb7b6423",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0ea91c59-d5e3-4c5f-8001-42b8a29de22a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb837429-8e06-4a78-a596-f85aa5ada5ce",
        "cursor": {
          "ref": "eba6cc4e-f7b1-4e00-8b33-3638a3b4f64c",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f0a60643-c622-4242-84e7-781d1b26798b"
        },
        "item": {
          "id": "eb837429-8e06-4a78-a596-f85aa5ada5ce",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "15e4a4c3-740a-4a04-abd5-c3d2eb81b2df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b7d71e-e2d7-4dd3-840a-5235b707a52d",
        "cursor": {
          "ref": "9e476bdd-69a8-47a3-964c-5526983179af",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6b27af88-1c14-4b96-94bf-ab1d92ebf1e2"
        },
        "item": {
          "id": "57b7d71e-e2d7-4dd3-840a-5235b707a52d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "215db09b-d1ed-4785-9d56-e0842ed0054a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ec3542-75ea-434b-8593-e18b9e308254",
        "cursor": {
          "ref": "84728d56-cef4-4c12-bb9a-84472cbb94a0",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "73644a19-4e8c-4261-ac12-63ec27e24420"
        },
        "item": {
          "id": "42ec3542-75ea-434b-8593-e18b9e308254",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "570a9382-bc1b-4c27-a660-d165cf3dbef3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94c22e8-4f71-4256-93d7-6027433c2366",
        "cursor": {
          "ref": "14574001-9075-4440-aea9-97e884ac706e",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e4fed898-ff31-4fc6-9351-53753907ca0c"
        },
        "item": {
          "id": "e94c22e8-4f71-4256-93d7-6027433c2366",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2295f9ec-da84-4b1c-b901-d8d565602c75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb0f8eb-d515-49fe-8ded-3ee9e52f7978",
        "cursor": {
          "ref": "b94ecb76-2dd4-4a55-89ce-cc9dab6fd79b",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5a065a07-1172-4817-a1ee-5dc093902dbd"
        },
        "item": {
          "id": "dcb0f8eb-d515-49fe-8ded-3ee9e52f7978",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b63ae04f-7c1f-4208-af76-85ecbe0a8be0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ce1d03-d234-4076-b0a6-cad5db241d6d",
        "cursor": {
          "ref": "1e35bea4-533b-4590-a089-2c998c11d773",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "5a1c1c79-f8e0-4eb5-8890-9bebb9a00d36"
        },
        "item": {
          "id": "a2ce1d03-d234-4076-b0a6-cad5db241d6d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "86caf204-ccd0-4835-8875-f3ec128a8dfe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf5e1bd-0044-48f5-b3cc-5a52d8ad4407",
        "cursor": {
          "ref": "948716c8-c32a-4a56-9efc-66422e3da3f5",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "efce5e01-19f2-47f0-86c0-23850d9ea4cb"
        },
        "item": {
          "id": "bdf5e1bd-0044-48f5-b3cc-5a52d8ad4407",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "95938ef5-d42e-4a2d-9312-1772f0c6a095",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b026a993-a456-4683-90a6-dcc4f77a3a1f",
        "cursor": {
          "ref": "03a3e09f-3c75-4714-9a8e-e64634f9edf6",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d627bbcf-b1ce-4df9-80ac-2c5522e9e2ac"
        },
        "item": {
          "id": "b026a993-a456-4683-90a6-dcc4f77a3a1f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "630b56b8-34cf-4d57-a065-6027652b84e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad57eab-b5b1-424e-aced-b2a117705e51",
        "cursor": {
          "ref": "18453fff-6bb3-4409-8e02-85c6e0fa0709",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "28902a0f-c974-409b-9ac8-daf138fcc623"
        },
        "item": {
          "id": "bad57eab-b5b1-424e-aced-b2a117705e51",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f67a54b0-4dc8-4bfb-a39d-cef8700e12bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad6b951-0024-4b39-9b71-e900a4defdc9",
        "cursor": {
          "ref": "05e4acdb-aeaf-4623-bd64-fca8ee68869e",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ef5fa371-2cf6-47c2-94f4-4b2e81c7d767"
        },
        "item": {
          "id": "9ad6b951-0024-4b39-9b71-e900a4defdc9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "dabcb9ad-49e8-4427-adb7-6f913264ae31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa4fde0-4d1e-4e69-9534-219e6080d152",
        "cursor": {
          "ref": "f81c67cf-e7af-48a8-9fbb-54fd4c2581db",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "50c90c72-cef6-4bb8-a179-3a56fb430f55"
        },
        "item": {
          "id": "1fa4fde0-4d1e-4e69-9534-219e6080d152",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d25a3e8c-a6f8-49c0-a887-f57bf251bb42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a9ffaee-733f-4cbc-9b46-6e067c2f1a43",
        "cursor": {
          "ref": "f2140ab1-4bdf-4b9c-8f93-13b9acfa1d6b",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5280252d-b320-411e-a62a-597d20ecaad7"
        },
        "item": {
          "id": "7a9ffaee-733f-4cbc-9b46-6e067c2f1a43",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5b8a130f-33b4-493e-a65f-dfaea9b00d7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6091db8e-8aa8-4785-adeb-b6749dfe976c",
        "cursor": {
          "ref": "50d69451-7995-47e3-a0cb-31428ab2fb51",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7adddaed-9357-4bf4-9d38-804adefde40b"
        },
        "item": {
          "id": "6091db8e-8aa8-4785-adeb-b6749dfe976c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1520b2b7-b319-4b2e-bc61-e543a9200712",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0076fc6-58b2-41a1-b1b1-276b256aef9c",
        "cursor": {
          "ref": "1e056eb5-3050-4a01-b7d5-737463d88066",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3f0a677b-484c-42c3-90ca-6d3ddf87bc57"
        },
        "item": {
          "id": "a0076fc6-58b2-41a1-b1b1-276b256aef9c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f4da22fe-2bfe-4e96-9657-85423df8021d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e986b1b-359b-4524-a229-3eb50a9a672f",
        "cursor": {
          "ref": "4ff4da70-b90e-419c-8ecf-b32efcef47db",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9c9c0017-f480-471c-95f9-0ffa6d6ac6c3"
        },
        "item": {
          "id": "0e986b1b-359b-4524-a229-3eb50a9a672f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "12340150-a9f3-466d-ae84-2a79442a1842",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d97ac2-365f-4bce-a888-a7fd7fdbd56d",
        "cursor": {
          "ref": "2b3cac6c-6da4-46d5-9fba-dbaddd980f5b",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "752c063d-c68c-46b7-937d-81c9d7a25412"
        },
        "item": {
          "id": "61d97ac2-365f-4bce-a888-a7fd7fdbd56d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "2926b3ea-2af9-4ebe-9e8c-b31dc342cefe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "299e9074-26dc-4410-a1d6-8ead5b844bc5",
        "cursor": {
          "ref": "ebd2af32-5353-4403-96d9-2c5b4d669100",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7d962109-dcce-40ef-896f-fc69ee85cf00"
        },
        "item": {
          "id": "299e9074-26dc-4410-a1d6-8ead5b844bc5",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "82f8aa1c-c9e3-45d7-85b3-a67e71005ef9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "921c4051-32af-4967-8a37-58abfcff7b28",
        "cursor": {
          "ref": "c88904e0-9574-4da7-a59d-f2134ef219c2",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "48942296-2a40-4b17-88e0-11e7c57f3b88"
        },
        "item": {
          "id": "921c4051-32af-4967-8a37-58abfcff7b28",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "d07aff2a-3917-4148-901b-4d9ba92aa801",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d0449e-52fa-4af1-909b-dd03aebf38da",
        "cursor": {
          "ref": "d7b764dd-0aca-4def-af23-ebe0621eff77",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "781feea1-9fbb-4d8b-802f-56a21d3d27ec"
        },
        "item": {
          "id": "21d0449e-52fa-4af1-909b-dd03aebf38da",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "eb742415-a2a4-4075-a18b-ca217c0d42b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b1b94fb-1e9b-4717-9b38-8f9adb36d616",
        "cursor": {
          "ref": "1b93499e-0a4f-44d5-9b5c-9c385a5d760c",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "102e7f5f-de8d-452f-99ea-091ce60e7ba9"
        },
        "item": {
          "id": "5b1b94fb-1e9b-4717-9b38-8f9adb36d616",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "259924fa-70a2-44c3-bc6c-df6954d9db4b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a9c047-85c9-497a-9c89-d03d8f26039b",
        "cursor": {
          "ref": "8c0cf1d4-97a4-4ea0-a029-f3f065ed5e8f",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9b89978a-59a2-4a88-8f32-e69242ed9e83"
        },
        "item": {
          "id": "33a9c047-85c9-497a-9c89-d03d8f26039b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2029d6ab-4bb9-4872-80f6-9fd0fdc0f0b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cbd9048-3de6-4b13-8166-6982411a8fd1",
        "cursor": {
          "ref": "7db67944-3438-4c79-83d5-f958f58463b0",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7f7a5d3a-3243-4e87-979e-ac4e8f05d814"
        },
        "item": {
          "id": "4cbd9048-3de6-4b13-8166-6982411a8fd1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4ac17b37-6bc1-488b-a951-1561a1f6e278",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e457f89-65b1-4b3b-a254-a41c3a392de4",
        "cursor": {
          "ref": "de30277b-ce9c-48b1-b120-7ebef6b5b870",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5800072f-88f1-455b-9f66-852e4c77efe3"
        },
        "item": {
          "id": "0e457f89-65b1-4b3b-a254-a41c3a392de4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "08ce5040-015f-4c8a-8ccc-07b06d0caed7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8be0bc2-2264-4515-abc1-43684b4a7246",
        "cursor": {
          "ref": "553a7497-6fcd-4b89-9a1a-8e6ad619549d",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a2080f9b-064f-49e5-bf1b-ab9efdfe334c"
        },
        "item": {
          "id": "c8be0bc2-2264-4515-abc1-43684b4a7246",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "12b88ff6-3736-43b7-886d-41a367ef6c65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 12,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e50bf0-40d3-4b4e-b534-1070af2a06a6",
        "cursor": {
          "ref": "e5905565-3b50-42d5-bb88-0af4b33fe680",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f9444b7c-cdff-49fa-ad0e-ae8242b16222"
        },
        "item": {
          "id": "56e50bf0-40d3-4b4e-b534-1070af2a06a6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0319b6a0-97d9-41ef-93e3-f5ce560da252",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "408c7d66-c8ba-4c59-8433-7004dd25dc15",
        "cursor": {
          "ref": "85a796b6-b491-453f-a7d4-11bb99cf0951",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4a98601a-ed23-414d-b0a5-9f0da487e7eb"
        },
        "item": {
          "id": "408c7d66-c8ba-4c59-8433-7004dd25dc15",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6e414df1-2017-4c87-9101-3222860e0ca8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d2534a-bd1c-4964-afa9-7711c5dad801",
        "cursor": {
          "ref": "19b775fc-8ee3-48c0-9a6c-04da703eec74",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7bb43609-bbeb-4a09-9e34-60c41f90f7e0"
        },
        "item": {
          "id": "75d2534a-bd1c-4964-afa9-7711c5dad801",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f47fffb7-e440-4fb2-ac54-b291b131e453",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5824ee4b-b40e-462a-8860-b99259ba4df4",
        "cursor": {
          "ref": "92fb8c46-89e9-4c37-aac0-5fea1a8ccfb5",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6528fb85-5d22-4f73-929c-cfac6f2d7b37"
        },
        "item": {
          "id": "5824ee4b-b40e-462a-8860-b99259ba4df4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "661c3ebd-3587-4ad7-b9ef-b3f8051798e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29e46bd-3318-4385-8f16-fd6bd1a35740",
        "cursor": {
          "ref": "14188276-9add-42f9-b119-e61e6548351f",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6a43eda4-e559-498b-99df-599593b102d7"
        },
        "item": {
          "id": "e29e46bd-3318-4385-8f16-fd6bd1a35740",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c5a05886-7198-4d28-bba6-448b940a5c6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ef4436-fb6b-497a-901c-a1d1c0341be7",
        "cursor": {
          "ref": "11d757a1-4ffc-4b80-9a70-fe47ab667686",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b67d8ae7-9131-485a-9e53-3d00c9beda10"
        },
        "item": {
          "id": "32ef4436-fb6b-497a-901c-a1d1c0341be7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "45c2a952-a58b-45ff-8567-b1926a92873f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "330d5b7b-7e7d-46f1-aab8-5fd76b57a6d4",
        "cursor": {
          "ref": "fe47a8aa-1f60-4ed2-a5be-4cfe4068fe2d",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d90c7324-7eea-4d8e-9d4f-4a93cd827650"
        },
        "item": {
          "id": "330d5b7b-7e7d-46f1-aab8-5fd76b57a6d4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7b5a2b4d-42e4-4bb9-9129-2ae8ea9973ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0400f4f0-c8a1-4d00-b8e1-05e5a17a9c5d",
        "cursor": {
          "ref": "f8bd12ea-0135-4a56-bd3a-206415df93f5",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9c50194e-5b17-4cb1-8685-ac199978574d"
        },
        "item": {
          "id": "0400f4f0-c8a1-4d00-b8e1-05e5a17a9c5d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "aa53c2cf-c1ac-4166-88ad-9a1c8e28b7eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56587672-c267-4151-bb71-5226eaa83441",
        "cursor": {
          "ref": "bd32fae2-1f83-4940-9f15-466a9fc2ca86",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6353222f-8f46-41f2-8627-8522c5cf5a95"
        },
        "item": {
          "id": "56587672-c267-4151-bb71-5226eaa83441",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "33f49933-92ba-4581-95f6-dc0043b4febd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1372724d-ab78-4922-9ba5-3b4634fc88fe",
        "cursor": {
          "ref": "1d2b9d23-5a36-442e-9059-3b72fae3874e",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9de1dd19-e497-455f-adc2-53b7c1dca5f2"
        },
        "item": {
          "id": "1372724d-ab78-4922-9ba5-3b4634fc88fe",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0d3587a2-a6cf-41df-85d3-046b20ae302c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d129da2-e7e1-403f-b499-034c826d0ee2",
        "cursor": {
          "ref": "336e7c97-fcdc-42d6-acce-08c7a6b226ef",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4192caf1-502c-4ce7-9b95-2f6e2867d73a"
        },
        "item": {
          "id": "9d129da2-e7e1-403f-b499-034c826d0ee2",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d1b31438-a016-404a-bddc-61bcc08a13ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba49a46-32a4-4ea9-a5e9-b09f735132ea",
        "cursor": {
          "ref": "bc24452b-70f6-43cf-a805-69d47af42cbe",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "701512c4-ba19-4438-81dc-1f43f0797c20"
        },
        "item": {
          "id": "8ba49a46-32a4-4ea9-a5e9-b09f735132ea",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e1ba8107-d801-4efa-a603-3bab8ae0ff3b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a153f1a-beff-4e6f-9fce-dc7a35868ac3",
        "cursor": {
          "ref": "5e7cd9c3-4f1b-494d-be57-0865e78634c2",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "53a2d090-9978-400a-b1be-e1a9b49fd75d"
        },
        "item": {
          "id": "1a153f1a-beff-4e6f-9fce-dc7a35868ac3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9c287f47-6e34-4a0e-b845-1e7664484148",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed10fd8-2d1e-4997-a256-8e0aace9f752",
        "cursor": {
          "ref": "709f707d-1e30-4c4e-90b3-84141ec6acc9",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d052b393-d5b6-4207-88f5-e56fe280a5e6"
        },
        "item": {
          "id": "2ed10fd8-2d1e-4997-a256-8e0aace9f752",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ebdbab20-d93d-4b77-bf18-2559932ca442",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c3b009-0a1d-4645-80a5-7ef070f9e0ba",
        "cursor": {
          "ref": "ad3f9f38-f698-4195-9a0f-52f941a154d4",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3b0114cf-84f9-42cf-88e4-db5021325154"
        },
        "item": {
          "id": "97c3b009-0a1d-4645-80a5-7ef070f9e0ba",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "14ad90c2-2b06-47d3-aa31-b5a0763e413d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72d7207-7e7f-424f-a376-4322184c37fc",
        "cursor": {
          "ref": "e1f9becb-c703-4c61-91e3-b43c850fd828",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "040e3fde-92f1-4a4e-affc-eaa3c84ac5e0"
        },
        "item": {
          "id": "c72d7207-7e7f-424f-a376-4322184c37fc",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9c2d9c56-54e5-4641-8139-fa65f59036ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c793c9a-e106-4d0e-b629-60e815aed44a",
        "cursor": {
          "ref": "6d649042-461e-4814-a39a-8d9fe516341f",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3f8fd63b-2339-42d7-8b83-c1da989b8e1b"
        },
        "item": {
          "id": "3c793c9a-e106-4d0e-b629-60e815aed44a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ef3bfadd-6bf0-4d67-887f-ed552d7997d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca16cb8-2419-482c-a33e-8a87e2ce0dd3",
        "cursor": {
          "ref": "e0cfffde-8467-4682-a5cd-4e8bc3924d22",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ec975a4e-1a65-40e6-9797-20f9f849d445"
        },
        "item": {
          "id": "eca16cb8-2419-482c-a33e-8a87e2ce0dd3",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "143e989b-758c-41d6-bb00-aa5ba91d2e07",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b89aa00-7fad-4e27-a896-73ff2abefcfb",
        "cursor": {
          "ref": "71e09e1d-41c4-4517-9b71-bec4c2899080",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ac84b724-be63-4962-a549-aa8e24b69106"
        },
        "item": {
          "id": "7b89aa00-7fad-4e27-a896-73ff2abefcfb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "fe381a70-2301-412b-80c3-d8a5764f58e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7efe92-83df-43ef-80ac-6a75a3e030de",
        "cursor": {
          "ref": "b1d504ad-64e9-4431-a223-74e96d3a3449",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "859eb650-6b3f-4302-be5a-1f6f1292f5c1"
        },
        "item": {
          "id": "6a7efe92-83df-43ef-80ac-6a75a3e030de",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "783458b9-31df-49e0-b144-c66d02f96c62",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45bc7361-51f5-44bd-a9dd-c4b19b36441c",
        "cursor": {
          "ref": "4a117b5f-c656-4058-98d7-79a4016ffc75",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ec9b0ee1-f668-47f1-95d5-f045ff071b9f"
        },
        "item": {
          "id": "45bc7361-51f5-44bd-a9dd-c4b19b36441c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "651c5713-f7bb-4285-85d7-d18de0bad629",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6364f447-271f-4496-996e-bd1d5bcbc54e",
        "cursor": {
          "ref": "f560e88e-ac5a-4973-a7f0-00f852cf839f",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b1c507be-830f-4900-8bb6-2b08f8bd2a97"
        },
        "item": {
          "id": "6364f447-271f-4496-996e-bd1d5bcbc54e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "dc692cd3-e1bd-4c08-99dd-54a775cba934",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "369d1c49-0069-4539-a33e-2485ce3114cc",
        "cursor": {
          "ref": "ac8b1a0d-9b73-4519-be57-fc59dd8739a6",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "95d2b3b9-3670-4031-ab19-8a5f2a67d751"
        },
        "item": {
          "id": "369d1c49-0069-4539-a33e-2485ce3114cc",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "51925207-9dba-4d54-94b1-32b5a726a6bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5926dbc-ff5e-4a88-8177-51ce5ecde87a",
        "cursor": {
          "ref": "6d6895e5-9b4f-4d5a-87f2-220579bfcdf9",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1ab14f6f-be6f-4de8-975b-87391fb375bd"
        },
        "item": {
          "id": "d5926dbc-ff5e-4a88-8177-51ce5ecde87a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0ecfa4ed-56f4-48e6-bbe0-0c6ec304f162",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9adb5a-8514-4ef0-ad5d-70ea6c217891",
        "cursor": {
          "ref": "2e9dc5dd-cbc7-4fd2-97ce-9e5637aac79e",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5834d0c4-a25f-409d-a145-963f7e3295e1"
        },
        "item": {
          "id": "7d9adb5a-8514-4ef0-ad5d-70ea6c217891",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9c656aeb-0485-4cf9-ac17-4961c8c343c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc07567-a378-43fd-ab3d-df551f72f006",
        "cursor": {
          "ref": "57ea2154-2dda-4366-ba69-fe9187d0674a",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "186cc4f2-701f-4373-85bc-9b5d343c179e"
        },
        "item": {
          "id": "ddc07567-a378-43fd-ab3d-df551f72f006",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3b219f2d-67ed-44a9-b92b-20f7a10422a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc6c007-e6ab-4074-bb58-49eb7068def4",
        "cursor": {
          "ref": "ac1e38ea-c851-46e0-8317-6a1aef00e060",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8b4b15fe-8f0e-4d2b-af64-69a9461310d3"
        },
        "item": {
          "id": "8cc6c007-e6ab-4074-bb58-49eb7068def4",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a69d3c92-6fd6-427d-9951-844971181997",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ccc718-3e73-4630-ac02-52bbd5dc38b5",
        "cursor": {
          "ref": "bf9ebee7-1f7c-464e-bd24-44b7adf9744e",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "ebcc69a3-9dd3-4aa8-b40c-f3ea1fbc6486"
        },
        "item": {
          "id": "70ccc718-3e73-4630-ac02-52bbd5dc38b5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "38a44ba6-22d6-431a-9ff1-a4918f4da42c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3457a6-e73b-4aac-88c2-1e9def238877",
        "cursor": {
          "ref": "a6c285a0-2f85-4155-99e9-941ae00d0bf5",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "831e77e7-e57d-4881-856e-86c8796b6bf3"
        },
        "item": {
          "id": "3b3457a6-e73b-4aac-88c2-1e9def238877",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "801aff6c-2edb-48d2-b622-f2879704528a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6276ec86-3cb1-4d10-bbab-29e26a48aff8",
        "cursor": {
          "ref": "45e90326-dcce-42ce-aced-8582d44760fa",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1d627cc6-9883-449a-8a1b-e32cad38adf0"
        },
        "item": {
          "id": "6276ec86-3cb1-4d10-bbab-29e26a48aff8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a8924a38-467a-4395-a4c8-c77a0bd6c968",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8d1f90-bf3b-45c5-a27d-1dcf3238ebcb",
        "cursor": {
          "ref": "a1c14668-2d40-4673-9d8c-22a3f5f92220",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d1ae602e-54f5-41e9-9a37-567979bf5bd8"
        },
        "item": {
          "id": "6a8d1f90-bf3b-45c5-a27d-1dcf3238ebcb",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2f3a2502-02d5-44f5-9f7e-0a5a58aedb5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f70dcd-ccbb-497e-9c34-6a776d348fbc",
        "cursor": {
          "ref": "97e9c914-7968-422c-87a7-edc0dca56c28",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5b27bc87-f138-404d-8e3e-f2478b4a1777"
        },
        "item": {
          "id": "37f70dcd-ccbb-497e-9c34-6a776d348fbc",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f933ec0e-e0c8-4d68-9409-b42d690686f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdaedbef-afe5-49fd-a435-2fe296a31b57",
        "cursor": {
          "ref": "5962984f-ec1b-44ce-b08b-0f9bf8a8ef0c",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "204de2dc-e5b9-46c3-8089-4df75d0a845c"
        },
        "item": {
          "id": "bdaedbef-afe5-49fd-a435-2fe296a31b57",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b2827076-9e20-4495-9eba-6f76ffa68e8b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13393ffa-abbf-4c4a-a293-69642a1deaca",
        "cursor": {
          "ref": "35ecb9b2-881e-4a87-971f-feab3dc1b93f",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b1433ef9-cd74-4255-8c8f-a0023846734f"
        },
        "item": {
          "id": "13393ffa-abbf-4c4a-a293-69642a1deaca",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8d40a89b-437e-4ec8-9d86-7620f006ce57",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfec3cd-6e4d-4dc8-b329-cacf0aef66df",
        "cursor": {
          "ref": "4e2cdc11-65dc-41c3-ab67-69cf31993c64",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "29a1abb3-0810-4d45-ac14-f7772c7ac80e"
        },
        "item": {
          "id": "3bfec3cd-6e4d-4dc8-b329-cacf0aef66df",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b211097f-ba9e-48ae-b9ae-20967e8530da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1d7d2b-7c46-44f7-8a64-1b2c0c86397e",
        "cursor": {
          "ref": "7b6639f4-fe57-4e93-a518-f77cd6fd6b1f",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "571cd249-ab6e-4f68-9261-b426b986eb34"
        },
        "item": {
          "id": "8d1d7d2b-7c46-44f7-8a64-1b2c0c86397e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4c435fec-c6a1-45d3-8500-b208397ec2d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d900f57e-6675-4072-95ac-ea76348cf449",
        "cursor": {
          "ref": "bd72f606-8654-4b9d-93bb-b493975ca095",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "236b0054-0995-4ed3-9c3d-fa05f494f4c5"
        },
        "item": {
          "id": "d900f57e-6675-4072-95ac-ea76348cf449",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0c7c29f5-5029-49bb-b523-63461c49abba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f029d5e2-3d36-423e-bf5d-d69ed20ebdae",
        "cursor": {
          "ref": "1e607b6e-cd2e-45ae-b1c6-352967c8d65b",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9011bc4b-332d-4e1c-a660-4b6c2f21f1f9"
        },
        "item": {
          "id": "f029d5e2-3d36-423e-bf5d-d69ed20ebdae",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c522710a-b338-401f-ac4a-6b47a267d1a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdcf3bbf-1979-45fe-8727-2270b3a254b3",
        "cursor": {
          "ref": "2062cee7-4e01-4af5-bd34-56ae0c9145b9",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "610a0181-716c-4bb7-a0e9-e4b26d1f0183"
        },
        "item": {
          "id": "cdcf3bbf-1979-45fe-8727-2270b3a254b3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7c064b98-2a3f-4016-8c67-a2de5e80c610",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936d7807-bfa5-4bb2-8a10-1cb18088348c",
        "cursor": {
          "ref": "7e17f612-dc1d-4aa2-8f85-7b8fac12ef58",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ef9058c2-ca3c-4960-a45a-22e26869451c"
        },
        "item": {
          "id": "936d7807-bfa5-4bb2-8a10-1cb18088348c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "cb97799c-cd4a-4f51-8921-5ecd99e165c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7badc6-ccc7-432e-aff0-eddb5ee10d3a",
        "cursor": {
          "ref": "819fd36f-e07d-4085-83d9-2adcd7d8d4f6",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d3788957-1787-47e1-8acc-d0a2b5f7263b"
        },
        "item": {
          "id": "ed7badc6-ccc7-432e-aff0-eddb5ee10d3a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ffc02d87-9382-4ca0-9f3b-ff5b553a2821",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95aad0af-d183-4623-98de-38cb48aec1fe",
        "cursor": {
          "ref": "eeb6c34d-e9e9-4823-9e0f-c8f6a6a2319d",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "36192801-5206-4d08-b32c-ef2912388d0f"
        },
        "item": {
          "id": "95aad0af-d183-4623-98de-38cb48aec1fe",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "23bf831a-f67d-494f-8954-f878882f9573",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363c9cbd-fab9-4f91-9dc0-38af26ca33b0",
        "cursor": {
          "ref": "9ad49b8f-bfa0-4dbc-bca0-832d7f61232b",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "55acf627-58e1-474a-9b14-5834baebb41b"
        },
        "item": {
          "id": "363c9cbd-fab9-4f91-9dc0-38af26ca33b0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "81c2a441-df09-4445-a551-e2d1e3ddfe69",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a47eba8-c249-44fc-ac83-164ce4c9f99f",
        "cursor": {
          "ref": "186261e8-4452-4205-89da-3edea2d3ebe1",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5ab3325a-2ace-49f8-86da-8f886999e69e"
        },
        "item": {
          "id": "9a47eba8-c249-44fc-ac83-164ce4c9f99f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "51130bf9-f4b9-40b8-a1f4-053d52dbccc6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da15fbfd-d11a-417e-974d-e04b7ede6954",
        "cursor": {
          "ref": "6ec6a6bf-0d2c-4805-a064-e4fd722a9e01",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c376f3ff-ff04-45b2-aa85-4fa140c8427b"
        },
        "item": {
          "id": "da15fbfd-d11a-417e-974d-e04b7ede6954",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1ba2416f-84f5-417d-9510-307bdd4f494b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b9c488-f164-4d62-b530-b49c6a6de525",
        "cursor": {
          "ref": "0bc22314-14d1-45d7-8fc4-33d5b5b192e8",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0803e9f0-e497-4309-b50c-a6760718d235"
        },
        "item": {
          "id": "56b9c488-f164-4d62-b530-b49c6a6de525",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a91a5bbb-e12c-4f99-8745-68ba8edf5705",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f4e55e-8e5d-4b9c-b03b-3a1b9812e209",
        "cursor": {
          "ref": "ba2774ec-d65e-428d-adc9-c163676118f5",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5e7ecdcc-05a7-474d-8725-bcbb663e3222"
        },
        "item": {
          "id": "b1f4e55e-8e5d-4b9c-b03b-3a1b9812e209",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "10ebf38a-f415-44dc-8246-fbc9f6aefe72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c6d255c-499f-41b9-adeb-6cd449c7ab17",
        "cursor": {
          "ref": "3558017e-488b-47f7-ad93-11a42841e920",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a182f15b-bd14-4c27-9d5b-ba1bb4d6ee38"
        },
        "item": {
          "id": "7c6d255c-499f-41b9-adeb-6cd449c7ab17",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2e80f987-5646-459e-a1f4-e93253f5ebf2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b55ae86-e549-4f9c-9646-f5864df29760",
        "cursor": {
          "ref": "ce96c5bd-3711-4bd1-ba6a-b2e705c240ad",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "15fa733b-7992-4591-8d49-b6b2094c488d"
        },
        "item": {
          "id": "1b55ae86-e549-4f9c-9646-f5864df29760",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "389063f5-f9fe-45d3-97fe-3b957b197611",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac72337-5053-4e91-938a-7a380e34d9e5",
        "cursor": {
          "ref": "9a3839c2-dc5d-4e35-b23c-34d2c56d8986",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d91858fb-c939-4310-94f9-a9ee6ba65c19"
        },
        "item": {
          "id": "4ac72337-5053-4e91-938a-7a380e34d9e5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d19ff851-f38b-480d-819f-54cc9ee739e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71bc70da-64da-49dc-8612-e42b1d32e871",
        "cursor": {
          "ref": "f3525413-af21-4598-b4c5-85d627818e04",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "023305bd-1585-40bd-b213-37d90999fae3"
        },
        "item": {
          "id": "71bc70da-64da-49dc-8612-e42b1d32e871",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0cd7948e-032e-454e-9440-34f0e5542a8b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b4151f5-9731-4d94-b469-de3ffdf66dd3",
        "cursor": {
          "ref": "5900bfe2-dd5e-4bf7-8772-7ec5509f0e92",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5799c780-d3bd-491b-8e5c-53853b6446ad"
        },
        "item": {
          "id": "1b4151f5-9731-4d94-b469-de3ffdf66dd3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6a582f2c-e0f9-454c-8364-21c2a9994071",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365f88f2-1ddb-45f0-9ecc-ae0f50149967",
        "cursor": {
          "ref": "5d9038f9-ee74-42a2-a490-2fd4fe2dd923",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "692e3d60-9937-4b95-a09a-c81aed5bcb45"
        },
        "item": {
          "id": "365f88f2-1ddb-45f0-9ecc-ae0f50149967",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9abfa259-72b3-4522-9aa6-5e5c9df1b87d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d23299c-9e18-4594-874a-dce27046ad14",
        "cursor": {
          "ref": "4bed399c-af76-4405-b6b7-0d9ac8d27909",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "33da7774-dc3f-4e39-9271-39824a8a9ec9"
        },
        "item": {
          "id": "3d23299c-9e18-4594-874a-dce27046ad14",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9a5e4d85-2846-45af-b5a4-85e9a6089ffd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "423c8835-be65-44b2-a22e-37115216ee1a",
        "cursor": {
          "ref": "bacee519-8760-4d3c-90a0-e5b10231a8ae",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6f11ef62-d211-479f-953f-e036a796f2ea"
        },
        "item": {
          "id": "423c8835-be65-44b2-a22e-37115216ee1a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "377fb7c9-27aa-4ca8-9932-1e2b3faa8462",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07eb041d-2d61-4ec2-8cab-f5a948d368ee",
        "cursor": {
          "ref": "d8386782-2e9a-452f-8f68-1f5f000b8933",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "64b6422e-d8d4-44d1-9f9d-3a03151bc46c"
        },
        "item": {
          "id": "07eb041d-2d61-4ec2-8cab-f5a948d368ee",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "149fed99-a01e-4a95-a276-7c4139770f55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590ec258-cdbc-4866-a47a-bb151756d3dc",
        "cursor": {
          "ref": "cc456cb4-3ca3-4e52-85a1-98e2149e84d2",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5332aecd-1961-4f45-9a65-d280c195413f"
        },
        "item": {
          "id": "590ec258-cdbc-4866-a47a-bb151756d3dc",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0d299dd3-d20a-4bfc-af0d-5e1b63c95e66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e207ab8-d21c-4615-8bbf-7581b744aa8a",
        "cursor": {
          "ref": "b01d268f-a899-42bf-98f0-e875700eb8e2",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "55b51c66-03d4-4fb2-ac9e-1883290b149b"
        },
        "item": {
          "id": "0e207ab8-d21c-4615-8bbf-7581b744aa8a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e2003ac2-0722-4a88-ac61-42a9542deafb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a30bdc81-65eb-4fd8-b9b4-0e9dbbcc485a",
        "cursor": {
          "ref": "4728788c-07ce-42f9-addb-bfe7f7a54d59",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "47cb4f38-8bd4-45dd-b476-3d5df075beac"
        },
        "item": {
          "id": "a30bdc81-65eb-4fd8-b9b4-0e9dbbcc485a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a0299d58-dfa0-49a9-bf9a-a6daf5918397",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbfd081-e071-4092-8ec2-16f7a10f9c1a",
        "cursor": {
          "ref": "7f9c0b78-9ba6-467c-ad8a-c1d70ad37b0b",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3ceda737-3e6e-4196-9a13-ec3101657ab0"
        },
        "item": {
          "id": "cbbfd081-e071-4092-8ec2-16f7a10f9c1a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6de79d2d-a9ec-4116-8931-43e260fadf03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "198a5293-43ea-4148-9aa7-e1d5506de021",
        "cursor": {
          "ref": "cd1c0a75-3ab3-40a4-9eff-120974d77b2a",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9a48b315-830b-445c-941b-6087fd6671e9"
        },
        "item": {
          "id": "198a5293-43ea-4148-9aa7-e1d5506de021",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7c5f0d86-d9eb-43a6-9e4d-7e268f70acd4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973c718a-caf9-46f0-9b1f-9dfe041cee0f",
        "cursor": {
          "ref": "ad8f1150-9e1e-4c50-a1a7-dae5bf6f1950",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8564b010-0a2d-4f8b-8f62-ddf2d3890bc1"
        },
        "item": {
          "id": "973c718a-caf9-46f0-9b1f-9dfe041cee0f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "24893026-66cc-40f0-b762-5b77e57c6680",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa8c85a-3b4b-4881-9df0-a9b34b68c9b5",
        "cursor": {
          "ref": "44dda13e-3b6b-4d6e-baff-231361ffdfc2",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4f612841-74c9-49b1-abe7-93304af693e3"
        },
        "item": {
          "id": "baa8c85a-3b4b-4881-9df0-a9b34b68c9b5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "3bb180e6-9fa7-48b5-b608-ff96f274acdd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf741fe-8c75-4527-bdb0-643c9a1171f4",
        "cursor": {
          "ref": "0b79b371-f324-4ff8-8384-3dd3e7a1e919",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b5f942c2-16d9-45a8-b8c9-b7e77bb44fdb"
        },
        "item": {
          "id": "7cf741fe-8c75-4527-bdb0-643c9a1171f4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5eb86c60-775b-4093-88f2-5804b92f27b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6523614-2446-406d-8f4d-7ff9f76391b3",
        "cursor": {
          "ref": "f557e131-bf93-4b62-a499-018e014358ec",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0fe94bed-abdb-4d5a-b647-b68b2eea0d84"
        },
        "item": {
          "id": "a6523614-2446-406d-8f4d-7ff9f76391b3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "39df0d4c-d94a-492d-a86d-aaeaa44b25f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297369f8-4490-48b8-b3b1-7b954255ccdb",
        "cursor": {
          "ref": "223fed31-af77-44de-9018-0071b414b358",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4a60a9d2-cac4-488c-8a82-2f6c6784fc62"
        },
        "item": {
          "id": "297369f8-4490-48b8-b3b1-7b954255ccdb",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ad4c3c0d-95ee-4201-a03d-ff02ea45f1c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd36047-2849-47b1-a151-c64c71dcc547",
        "cursor": {
          "ref": "902fd7b0-5750-4f13-99a2-d198b079cb9e",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8c47dad4-2613-41c2-94e9-b1b6951b14c8"
        },
        "item": {
          "id": "cfd36047-2849-47b1-a151-c64c71dcc547",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "76ec2ed1-920b-4d4e-bf60-74cb77b11187",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e59e707-ceee-4f9d-ac89-7bbb5684d0a7",
        "cursor": {
          "ref": "c055862c-3439-4b5e-af77-17cedda30d53",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "60232486-23a2-46e0-8f8a-d3a1d8fdcf88"
        },
        "item": {
          "id": "5e59e707-ceee-4f9d-ac89-7bbb5684d0a7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "95db5b21-648f-4068-88c0-76eb4306923c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cac0de8-7eb0-4773-9a2a-9333128c91eb",
        "cursor": {
          "ref": "37c3c0c1-31f1-438b-9263-4f51ac0c19d2",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "7156c20c-4f6a-4e66-b2ed-1231287c6394"
        },
        "item": {
          "id": "5cac0de8-7eb0-4773-9a2a-9333128c91eb",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9f94ebe3-a5d2-4b41-ae4b-31533ae70e3d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "472395f6-7841-4560-9aff-37dca364acde",
        "cursor": {
          "ref": "430a310d-67dc-417f-a333-9b53763d361a",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8bcffd19-3a6f-4212-b01a-b18254568b22"
        },
        "item": {
          "id": "472395f6-7841-4560-9aff-37dca364acde",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "492e1b79-0233-4e9f-8ce0-478297fe7319",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50eb532c-aece-4fa9-a4a1-c534302a6349",
        "cursor": {
          "ref": "efd988db-29b6-437b-a6f1-be56a88ee81c",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "2511fee9-4b5d-4417-b17a-b8a8504185bc"
        },
        "item": {
          "id": "50eb532c-aece-4fa9-a4a1-c534302a6349",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b4688558-6362-4d1a-a18f-2aa7298ac978",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5160259e-7966-4d01-a7c4-ef6494c7b0a0",
        "cursor": {
          "ref": "1d3924e8-4ee4-4821-a04f-9840d4d6ca22",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "7af2052d-d448-4e08-a23a-83d6988c5fb6"
        },
        "item": {
          "id": "5160259e-7966-4d01-a7c4-ef6494c7b0a0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b032df20-8fc7-4c93-b3e2-b9724625ee90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf680db-73b9-45e2-8523-55a42c50c204",
        "cursor": {
          "ref": "acdd6b11-ea69-4927-877e-be602cae9917",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "ae39bc16-50cb-434d-88c2-2bccd33f2c80"
        },
        "item": {
          "id": "baf680db-73b9-45e2-8523-55a42c50c204",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "29ea8ef2-66c8-4d96-bebc-28329d760c76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3d544a-c2e9-461b-87d7-ac26778975da",
        "cursor": {
          "ref": "5c6ba8f9-849d-470d-b1df-5e16a1813de6",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "cc308aed-14ab-46d1-8fce-1a68392776fa"
        },
        "item": {
          "id": "fd3d544a-c2e9-461b-87d7-ac26778975da",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "32beede8-0296-45ee-8d57-203bc50c5536",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "295e8a19-1b1f-4792-bf2a-11fd7e7c9950",
        "cursor": {
          "ref": "b7c3e602-0a39-4293-9526-a68752b3207b",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "9485f28d-0971-4552-bd27-5c325da6f403"
        },
        "item": {
          "id": "295e8a19-1b1f-4792-bf2a-11fd7e7c9950",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "41569ec3-2a8d-4590-8d98-5a05cc38d8fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2503ce2-3eab-461d-8303-1a26e6deace2",
        "cursor": {
          "ref": "8f6dae92-80e6-419c-a4b6-714fda78c0e9",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "4e520b8a-6e3c-426d-9d42-09719e2f64b8"
        },
        "item": {
          "id": "d2503ce2-3eab-461d-8303-1a26e6deace2",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "80ee2435-b2e8-4129-b491-057bf9be1521",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae8c89d-b176-4709-9111-e4edca6a8d3b",
        "cursor": {
          "ref": "79c68a99-8be2-4cad-b8e4-546818fb3850",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "720036c7-b714-4303-8940-f52e7337bfa0"
        },
        "item": {
          "id": "bae8c89d-b176-4709-9111-e4edca6a8d3b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f572ebf4-10ff-4c5d-bfb8-122d09553cd8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94394536-ad65-4fb0-8f8f-0f5c6162d211",
        "cursor": {
          "ref": "098eb46d-b508-40a8-8884-9936350dc0ce",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "fec216f1-ebde-496c-adae-7a9b24260418"
        },
        "item": {
          "id": "94394536-ad65-4fb0-8f8f-0f5c6162d211",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a0309819-1df6-42cd-91a7-ad4d8dbb77b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc414a7e-9033-489f-9de5-a6204e9d9d34",
        "cursor": {
          "ref": "dca18580-d93f-4253-9d3c-a80f60ae2479",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "33f95685-c386-48f1-86a0-e13bbc12b6e4"
        },
        "item": {
          "id": "dc414a7e-9033-489f-9de5-a6204e9d9d34",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7dbb7c63-141d-4cb9-ad01-45542e7d5c01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ebd928a-1343-4a0b-9c69-7644203a24d0",
        "cursor": {
          "ref": "31a0928d-e60f-4b8d-b34c-778c0acd5113",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "617743ef-6e0d-4896-89a4-dcec45875963"
        },
        "item": {
          "id": "1ebd928a-1343-4a0b-9c69-7644203a24d0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "fb303a33-34e6-4bf1-a69a-f3b69c0123de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b84c4ca-ecb5-4d16-93b7-1959807d94f0",
        "cursor": {
          "ref": "b74257cc-958d-4aa4-a5f7-f18fbcc993d3",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "5d2c1289-2777-485d-9834-87ce744b21e1"
        },
        "item": {
          "id": "8b84c4ca-ecb5-4d16-93b7-1959807d94f0",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e4d88770-23aa-4ad1-884d-3006ebc283ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e57e00a-8c44-458b-ac57-9d5d3023852b",
        "cursor": {
          "ref": "e85f1efd-ef53-48a4-a4f4-4198e2a8a91b",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "0299aeb8-f73d-4064-9c4a-267ec162e551"
        },
        "item": {
          "id": "2e57e00a-8c44-458b-ac57-9d5d3023852b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "05c18980-afc6-4023-a23f-84b7a9d6a09f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08464ad3-c79b-4b7d-9c9e-ff8928c8cf44",
        "cursor": {
          "ref": "4b388587-7446-4212-94d9-12e4a9cf395b",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "679d28ea-f8f6-4a3f-9da9-aad8c45ed19f"
        },
        "item": {
          "id": "08464ad3-c79b-4b7d-9c9e-ff8928c8cf44",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1946be2c-836d-415a-985c-db859ba98ba6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0572b44c-c7ce-46d9-bbe1-a498b507db21",
        "cursor": {
          "ref": "38333fb3-6db2-420e-8982-ad157f026a06",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "e0a9fde8-fa26-4b7c-9f5e-b9bc12d4e7e1"
        },
        "item": {
          "id": "0572b44c-c7ce-46d9-bbe1-a498b507db21",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0d9a99cd-6f19-4413-b50d-df1712c79835",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0753bec-776c-4762-bebc-83e72dc95cd3",
        "cursor": {
          "ref": "b95077d2-f6eb-4ec8-ac86-499207da7c7a",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "34eeb711-b5e2-40d0-9f08-a5863604dcec"
        },
        "item": {
          "id": "d0753bec-776c-4762-bebc-83e72dc95cd3",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4d6a42da-6df9-4d46-835c-2de89d9363bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de71e363-62c7-4ec5-b907-11bef674d2c5",
        "cursor": {
          "ref": "dd2cb935-8733-44b8-926f-5b76c2a88990",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "f64ed60e-496d-421c-9ce7-5a64b0f3f11c"
        },
        "item": {
          "id": "de71e363-62c7-4ec5-b907-11bef674d2c5",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6375b3c6-181c-458b-a995-ae926811db1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5b8b98-2c5a-4e7a-9bd8-602c0401a552",
        "cursor": {
          "ref": "f0a16502-6b78-46c5-8e63-5f3f32c8cf74",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "4a2a6125-d990-47a0-9af3-aa74970d3164"
        },
        "item": {
          "id": "ec5b8b98-2c5a-4e7a-9bd8-602c0401a552",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b9a45976-521d-49dc-9d21-ddf90eaa8097",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "febfbce7-a381-4002-b6bf-daef17a1295a",
        "cursor": {
          "ref": "677a8b09-9ee2-46fd-b5aa-bdb3a536a798",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "f75ec944-20bd-4c02-96b8-4fbec31fa3ea"
        },
        "item": {
          "id": "febfbce7-a381-4002-b6bf-daef17a1295a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "bd511f0a-6acc-4d74-b174-11d1ec73f2ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ccf851f-598a-4e14-9572-00227ab565f8",
        "cursor": {
          "ref": "1a98403e-b771-49dd-8982-af43e76f576f",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "fedd0b85-dbe0-4637-a634-a25c7604498b"
        },
        "item": {
          "id": "9ccf851f-598a-4e14-9572-00227ab565f8",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3f0a0ce8-bdb9-46d6-930f-e8f3b6556253",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82aef447-0bf2-4b34-8a0d-ddd91858db98",
        "cursor": {
          "ref": "f29ebb46-6b12-41fe-83ee-122cc16eb3a1",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "47c8a8e8-3269-40df-9942-a72b6043cd58"
        },
        "item": {
          "id": "82aef447-0bf2-4b34-8a0d-ddd91858db98",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "03f15311-184b-4621-943f-e30b1ab6d2b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78edcafe-67a4-48af-970c-acdef1b45d0f",
        "cursor": {
          "ref": "9be2eb08-baa4-49c7-8c42-082580a979d1",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "49e54069-3da5-48ba-b6fe-cb3a32bfdac2"
        },
        "item": {
          "id": "78edcafe-67a4-48af-970c-acdef1b45d0f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d5f5368f-84b7-49aa-8abc-20d0da2f843b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "007289ae-b265-4383-9039-abcc439ccfae",
        "cursor": {
          "ref": "fe01ef3f-5a6c-4252-b639-903a88fed6af",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "2e8d1e5e-6da2-4fa6-a8d8-34c1f2d5b903"
        },
        "item": {
          "id": "007289ae-b265-4383-9039-abcc439ccfae",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5e07f703-d3dc-4e96-b73a-14c789a8f45f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c13aede-0244-4b4a-b675-49a13a7f75a7",
        "cursor": {
          "ref": "326957a9-e152-452e-9d0b-ce0083f06a56",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "1044ee87-a1d5-4de9-8368-55634e706be7"
        },
        "item": {
          "id": "9c13aede-0244-4b4a-b675-49a13a7f75a7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5bc630d1-e5a6-4049-b3a1-b3f49150b13a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79e8aad4-342d-42f0-a85a-56c292c519dd",
        "cursor": {
          "ref": "bc1b2589-d4c6-4283-84eb-68b0cdd131bd",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "1488c9eb-909a-47d7-bf31-16043ec016ee"
        },
        "item": {
          "id": "79e8aad4-342d-42f0-a85a-56c292c519dd",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0c40bdd5-281f-4bec-b4ae-c49ec69e5233",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da060f1-eb2a-4560-8374-9304d2ca1cb3",
        "cursor": {
          "ref": "b9fdd5d1-656b-4ffb-b246-4f71044c35bd",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "098d00c1-45d6-497f-a2c4-baa2693c0000"
        },
        "item": {
          "id": "6da060f1-eb2a-4560-8374-9304d2ca1cb3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b4ffcc2c-182b-4cb3-b9c6-2661db30ddd1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ca581e-21d2-4051-982c-f945b21575e7",
        "cursor": {
          "ref": "fbad702d-f201-4545-bc77-29a72ace4d85",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "570072fb-8fe9-480a-9385-f2997afd3781"
        },
        "item": {
          "id": "c4ca581e-21d2-4051-982c-f945b21575e7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "626a83b5-11ea-4f16-b6c8-96b2e3c6ec25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "14de2f80-13cd-406f-ac76-a8f5b7c46191",
        "cursor": {
          "ref": "1ac3c438-4072-478a-b8c9-a0716c3157a0",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "2052359b-c141-4ba3-9db2-2f200909ac38"
        },
        "item": {
          "id": "14de2f80-13cd-406f-ac76-a8f5b7c46191",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c97cef29-cbe3-45a3-b40e-dc6f5eecec83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "5632bd43-67b4-4b88-b579-c84c096bbafd",
        "cursor": {
          "ref": "fe1848b1-c200-49e8-a01d-0f0e1b7585b7",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f312ca62-da6f-479d-a6a4-696c03632695"
        },
        "item": {
          "id": "5632bd43-67b4-4b88-b579-c84c096bbafd",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "45debf8d-e7f3-4383-abc2-2d53a8ffa4ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "233eeff2-9dfd-4f8b-8e61-1203aef0f36d",
        "cursor": {
          "ref": "9cfcf08d-69dd-48a0-82dd-2ec1dc98a21c",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "389040a1-5f56-47b8-9423-d4f3943a3eac"
        },
        "item": {
          "id": "233eeff2-9dfd-4f8b-8e61-1203aef0f36d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b51aa0e3-86b1-44b4-b6e3-9b3d9e32d12a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "233eeff2-9dfd-4f8b-8e61-1203aef0f36d",
        "cursor": {
          "ref": "9cfcf08d-69dd-48a0-82dd-2ec1dc98a21c",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "389040a1-5f56-47b8-9423-d4f3943a3eac"
        },
        "item": {
          "id": "233eeff2-9dfd-4f8b-8e61-1203aef0f36d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b51aa0e3-86b1-44b4-b6e3-9b3d9e32d12a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d194b3-9052-4141-a156-18372a962664",
        "cursor": {
          "ref": "144d2f54-61e3-4c31-8645-ce3dc57dc710",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "5002ff98-61af-4708-b765-9d8882d632b0"
        },
        "item": {
          "id": "58d194b3-9052-4141-a156-18372a962664",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b8430d08-04a1-47a7-8e96-65018bb12059",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce3f924-d5a1-494b-958a-32f9a40710d5",
        "cursor": {
          "ref": "0fbb2171-c195-4cec-8ca4-ac7d26e7e7d8",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "af0a9559-3fd8-4921-8a87-044cfb86f357"
        },
        "item": {
          "id": "5ce3f924-d5a1-494b-958a-32f9a40710d5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "533705b3-c115-404c-a1b9-8410f52b39bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:283)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}