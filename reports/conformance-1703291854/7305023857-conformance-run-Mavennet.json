{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "06aaba06-3c7c-48cd-86ff-57b380483bd3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "025e81c0-c4af-4d3e-b926-640130326280",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d887a4b6-fe90-45f8-81e4-60b92dc1c3e4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "58707541-c8fd-4ae3-95fa-726de27c0e54"
                }
              }
            ]
          },
          {
            "id": "ec3e3776-b869-4204-8d19-7b3df95f2c98",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f33a03a0-10b5-4bf0-b23c-3717fc789295",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ace65e91-b9f2-4137-b81d-333d2f22f0ba"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5b860aec-c71c-46b8-beca-86c6b599b317",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b40ca8e6-1c09-4603-8933-2a787c4063fe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "269d9462-caa7-4805-9a52-8fd43a32ec79",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbacfc62-e811-4872-86ec-d00fa4857c8f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "100c3138-cf71-4657-8707-09ed55e155c2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "676a98fd-b168-4374-9d21-fe6172d0123a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "01f91ff4-b435-4958-8305-f0b7c0d51b15"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "79c33b47-cd25-42a1-a71c-d168b0542f68",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8ed0b4f4-1b86-44cb-8329-b4917211bd7f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea7d5dfe-d707-4d2f-865a-e49da8b352c5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ba709061-7f14-44aa-bed2-8c99eedc5267"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "17ba23c1-f0da-48b0-8f38-50ec475686e1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30bfb5dc-4f27-4a55-8868-204c33f7e1cc"
            }
          }
        ]
      },
      {
        "id": "965bc82b-f084-4456-a0d1-a8b06a55f125",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7a13cf48-f810-4418-92df-c7e250ff3185",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ded32d51-f962-49fe-991c-96095d2defb3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3b58133c-ec47-432a-8c0c-6b6f95ef8fbc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "870e5414-7db5-4df2-8c6e-3371f6939f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54147d66-ccb5-47ab-8b92-d6971b24c809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371ae677-b32d-4bf5-8c61-58e4f2169a24",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5f1cbd-3c65-46f4-9ce3-adeec9f40f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5513f9e6-9e8f-49e6-bd34-4cbf46cc4807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255c5757-7f9d-4f05-83f9-eae26a71704f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e6d0de-d6c8-46b7-85e5-5a339c89591c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34bfe355-7af0-400c-800f-80105e126579"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ea38f3eb-d8b5-4b5f-863d-929b1d68fef4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fab6334a-8f64-4dd9-b61f-f6a4967dd4be",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec64f3a3-192e-4a16-a113-d863f6fd3636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0ee6dd6-7a12-4ec9-a20b-b9d1694e3b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77f202b-b8d8-4fa1-b0d5-73d4b2e48d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a8803f-3c3f-48fd-9469-cca7e24209a5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cbcb1b18-66dc-4675-8e85-4ad4ad83d326",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9646417a-c361-4ece-a50d-4c9617010e21",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3731ac2-fa5e-428a-a7f7-1bc3b8820056",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3049d743-a52b-4bdb-b583-f8e107068337"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d353e608-c887-4c2d-9005-0b5c60512225",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "2898936f-12bc-4cb6-817e-275f855123b7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "885ea456-3e4a-45d3-9b11-b04b6ef5e99e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe199f9b-5dba-41ae-a5e3-3df38d8e8f26"
            }
          }
        ]
      },
      {
        "id": "257a558c-bdcf-4bb7-a2a8-5cab55c07183",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "61574133-3c90-46f9-880f-b0b568fb83a6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7932c52c-20a1-470a-b4c7-8470f8146244",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "905546f7-1e0c-483f-b671-ddd5a5751fcc",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c70977-0c1c-4407-aaed-28c558c421ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c251826d-11dd-4bce-ad2b-15211a2deb39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc66e20-5430-493d-9655-8a7627fa581a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8711a0f5-45a7-4dbc-919f-9efd2e00779c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f29dbc-6017-48f6-af49-fc487df9fc1d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23ed239-d632-43a2-b6f9-582227c6755d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9556b9cd-e121-480c-99c3-009561cc04dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c51f7f-4379-434e-b4ad-befe60f3beed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90e8d7f2-e312-40f2-aafc-9386d3afaab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21418548-ac0b-4670-9407-3225f80a385a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85361d9-cac8-4675-93c1-08f0668ec24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6637d079-3433-479a-90ae-e7e06927df17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fad4ec5-be73-4e84-b8b5-b42b3da37a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "410c698c-a5f6-434f-a2e8-e7c5decbbecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec36e6df-5350-43c9-aee2-1eb1a7908306",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "440a90a3-0926-4138-9e52-0fc8fed33ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c06f77d-5572-47f5-b029-76d110feba24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59dad3a1-70c5-489b-a8e6-faefc73a7829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b467ccc-9e17-4360-8ea9-42133d64087a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e6bee8-b4b1-4a33-a593-6a7653dd14f7",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe02469c-6ac9-4235-9312-3aa1a5c125be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab578516-039f-49ce-888e-dfc7836b56ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14d77f0-55f8-42a4-88b2-a88e0277e6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a55125a-c199-4b6d-8cf3-83f1bcbc6c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5a4c0a-08ba-46a7-a56f-7d552f491f59",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24960304-7c6e-4fa2-8438-630209cc8faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7d65107-3ec5-4f77-8788-b06fbf328481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7821687d-440a-40c3-93ae-24377dfed0f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a54e96d7-dde7-42c4-8909-b8324e559b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5542cfc6-dcbf-454f-bd88-93d608b5f7d8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9280dabd-114b-4806-b7b6-c129a23ebb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80b272c7-a632-495c-86d7-9c2f948af4f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5674465f-b33a-4992-9be8-add063842658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3d94dc1-79a8-4c09-9ab9-5593dd67d967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f0a4d2a-cd31-43aa-9e6c-4761c472a99b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69cd242b-05e4-4531-862b-f86072200736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2f9e5c8-3afc-440b-bd27-be84367f3e3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26f5eac9-32e6-41f7-b3dd-d509541c8cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "449242be-deca-416f-9d20-1b167c089e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c156b5a6-112f-40e5-8561-b66bd788fa29",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "464df7e6-9a61-4ae2-b989-a6b58ec0e466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dddcc528-78e4-4fc0-a2b2-e265d1718a9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc1e5159-0791-47c7-9ad5-c8a8c0656411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27363a3c-c417-4d51-9138-f0910510bde5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11119802-50f1-4cd5-97eb-8f916e3b3992",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41caa8a0-ae95-41c5-b492-2851c8a38dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e59ec32b-72af-4df0-9c9f-1f3166ace8b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68634bba-fb32-45c3-ad3a-98c7127fc872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2c5d024-111c-440f-a3ed-a2833abf1cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895b6d64-d4e5-4179-be4b-cfa26562f661",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbc2b8f-d6d4-463d-93b1-d2fa8f0b2b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85fdc2d2-e0c4-4d89-bf09-44a670609f29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6e78f5-1b6f-4673-9b25-f469fcea00d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e32ad1d0-0f90-480e-8416-51144e80e827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2686971-eef5-4a44-ab93-1e7d30e5d673",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87bf498c-c13a-4b59-a2f5-bf5a6d357ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b736773d-2ed7-4fd5-9cc0-9101c56b812b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f948bdd7-738d-41ee-b7e6-a0afde6a1955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e7912c3-6bc8-4709-9a28-226486247925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1cc7abc-c5b6-4055-aba6-301d5e6eaebe",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c3d2f5-d020-4d7d-b8dd-ea0a148fce82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b652227-0675-4b0e-ba5c-ad6455c7fa20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c100727-d6b0-4322-a72d-7a13391ced06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e150f75-4173-4a14-8bb0-9e58807023f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27c731a-557a-4b5f-8c57-a0e53757e8f1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "973e97e9-9f40-4b78-9d36-75fd41ae6c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58dd8b82-181f-456f-ad9c-25fe544b199e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2980195d-5226-4124-af3e-5427dcfad6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "962e153c-9d30-4252-bf1b-43902dbcf06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc43c59-a171-4a5e-afdf-5fd5eefb9d27",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5345e5-e250-4bf9-b1d2-d224d7b5911e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81f8a372-c2ea-4dcd-99bc-182d940dd605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b27da6-68fd-4871-a1c6-86b21651f05f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96204263-1a0b-4628-b784-cd0c9759b0bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32a557d-5bce-4212-86f5-437b3cba7c8c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36fee865-d274-4d22-9096-a101a57f2ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb924526-3d8e-4d24-965b-28430e9543d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aec835d-38f4-4e0b-9106-bf6498e5d687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e14300f-81f0-446c-95be-6c28a1b49b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0115762-10ed-451f-8f3d-bbe35a6e3c4b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b748fb3-e389-4aaa-b1f1-21d07867d787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c2f2c15-3b9e-4cf1-98d6-b5039444f66a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea4e8f4-eb56-4884-b7ad-42ef9aa533fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "246fdbc2-0882-4e0f-82df-c3202df555b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0771ace-e17d-4948-96bb-b344bf7f5f9d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea63151-97b1-426b-9a5e-162dbc799cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23a1bea1-8673-4fa1-a69f-14dbc73c8b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c10c3a2-7eaf-41ab-adea-1353b46197ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "117caa5c-95a1-4671-a8cb-7d4079b14e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0c2ca0-c8b9-4681-82e6-4fabd47deb6d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a2af536-903f-4131-a6f4-41e7d5fad1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "add2a909-ba6f-4ba0-9f5b-812f5137724c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70896a15-325f-4fe2-8e65-a64801e884be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0cddc4e-ba79-44c4-a862-097b615e1a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "441186be-c760-41be-b45f-b90403fcf0a8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a8f09b-ba94-4c9a-87c3-542428c2636b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f33b4a0f-f8ae-4bd8-9148-9e92fc36e926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221f5e5a-0843-46c5-8cb5-8f0ccf4fc002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d01d969-81b5-4de8-81a9-7530d7cbde82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a195210d-8d94-4151-92a0-e2a53055d556",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3ce129-6102-4bbe-a01c-8cc00a886e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c90a9a8a-b023-46ae-86a7-7c2bd21aa6c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dccf3110-9eab-445c-a7ea-746241dc089b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "756c8599-74ec-428f-a4ab-6759007cec23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22ae1c0-11cf-40bd-af3b-9f0401652e7e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5652b8-39e3-455f-ad68-b26b404340f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd272a67-39e7-42a1-952f-ec840a60523b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af09d63-7118-4b02-8f0f-4fe8bf5d19b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0371ffbc-9e1f-4f1f-9fc8-50aa00a1535b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8ba96b-676f-44b7-bc29-efed260b828b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "709a3316-ded1-429f-b827-c8d1bb61a862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c718655-ac0f-484c-a620-4ba02f2f6ee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64491cca-b25d-43ba-ac6e-45e749d7ca0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "08f0e8fd-fd55-4f72-93e5-2b71d4a0a9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad79dc12-7bf1-4af5-84f1-5147de07d4ad",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0086954-9148-4308-9ddc-819455305a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a31d8fb-0f76-4e49-aa4c-1756f36b0627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b09504-987f-4b6d-ac65-da6c5add5a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b2b4fe4-cd6c-485a-bbbf-15b8d59c1133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee7e35a-74fd-4355-8236-2a1ab972bd62",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf870c7c-b9b6-4d69-a7b9-82970eb777ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042b99c3-225e-4817-b848-d61f2a4ddb87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35fc7624-1e65-424f-b049-96763bcd8fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bad06515-bf24-4590-9fa9-58adf33d3147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4ffa06-fb3d-4e1a-9858-3b9636281a42",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c404a2a8-18f4-4cd3-9e20-44fbb0ae6a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a47161d4-ccf8-4cb5-a19e-35b802b7f868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a8067fc-9584-4a0a-a04e-a3465f20cc3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04180f99-4d1e-4d6d-b9ef-1155b6808563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b65f71-fe35-4d0b-b78e-9aa5de23b6c2",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30413fe-dc1c-4add-9e60-668616ad1307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2c902b2-ad20-43c1-8008-e7e7b3ad580a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5c102c-d35b-41b5-8886-a1f1651cb76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6827257-4f4d-44ad-8267-b44a24964d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f22fd45f-2466-46c4-b17e-9390b50145c7",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a17fd1-014a-4a81-b3e5-ceaa2228b950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e35858-ccd9-42db-8618-d909bc0950df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364fc0ec-6eba-4536-b9b5-7e188334e63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c51d7b1-c7d3-48ea-af68-e419f8c6f4bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd95ebd-db49-49f3-893e-5b9a45283717",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d221aa-dd6c-4fff-8fb6-73730bcfc2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6391d4b8-c564-4cef-9fa0-f86113dbdbec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f151c31-7fb2-4208-b293-ae028686e104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6da17ef4-eb0f-4279-aca1-d23edebe18e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d51decd-b2a8-4664-9f27-ff5447af7f39",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac0d5b2-d9c3-4596-8612-44c896aa8d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05b1eb94-4e3e-4b1f-b589-76f532559e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0987b27-05c4-4cc4-b302-6598f41b4bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0148669c-79fe-4c74-a794-389298625065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50f0352-136a-4d82-b5b0-419384f47237",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9f746a-2e7f-46b0-9592-57b230be6431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58cafa7b-5991-454e-b66d-6ff42956cb0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4614e5ee-8db5-4bde-8f1c-ad4d3ec701a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "86fd7e3e-b4a0-412b-8aae-5c7a3f6f7788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07042337-5a7f-49f1-b1e9-b5460ed1d55d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ead85b-1620-484f-bca4-5f4605df97a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d8ed03-1374-4d80-b5db-882b110ecba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d02c9af-dba5-41cb-83e6-1113d673b8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bcead29-08f7-468a-b7a5-70abb430786c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62396e70-16da-4718-9642-a3881f4eb93e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f998cba-e7fd-482b-9f1a-9e2434618fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd88680-a210-40e5-8019-2bb26e0fe708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c463d792-d8dc-430c-afa0-85e7493b7223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6accbf7c-87eb-40b3-8c46-e4de9495bcf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf942ea-4d64-4ada-ad70-1d8d67441471",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a290a0-4232-4e51-ba97-bf4d4df0e15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25e68097-99dc-480e-a72a-79fd49d390e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c15aef-283e-43cd-8e2c-0f7f75d25c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea8fd122-3530-4321-9a6c-14dd3efcbe04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab29e77f-0714-4c5e-9649-205afd751185",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84c3474-4711-41ce-b8c1-c4c4ce9a46e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f20ad5de-5af4-4c79-be75-27ab100112d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6571351-61e7-445e-8de0-07b21002fbde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "72db8b56-9354-49e3-9644-6e8a01fe08ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a273caf-cdf6-451a-8487-9561dbe1bed2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f08f89f-ac6a-4094-b40c-b33508b44dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a7fb9ca-6c3f-4a8c-9ceb-8cd2a9257584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80cb9c26-508c-4643-a1db-887ee7decec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21e22d41-5e91-47bf-9e4c-625f4b407504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6eac697-747e-4291-9df8-d5cf8846eb14",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32838323-28e4-41ce-a0c0-a12110a62880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c28162-405e-4b04-9fee-e2f867f682e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed8946e-ea99-403d-a259-3a025a9b7959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b392da11-a114-46b7-b52a-a6526823e472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2cc25e-ed7e-4b9f-929d-ec5c32f5233d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f456ea-bc30-4fd2-a6db-b91f65b829b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff0287e1-7df3-4ef8-a7fd-27c43688a6a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8debdcf-602b-4b5f-be7d-f6f66a109f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "261894ce-7efe-4017-8a00-438959ffc0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c20995e-d625-4ea8-8e19-797609bc642d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb063c1-e7a1-4912-9ca8-23af6ddfa1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d355652b-5e11-4e32-837e-81365228ddc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725020e8-9b15-4d54-a69f-b07459c82051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "aedbd479-6371-414e-97ef-d45b2853654e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a152bb9-5ba3-4d56-8705-1b5b5cd7e80d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "044ebdf3-1b77-404e-8e12-fa47fbed3534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beab860b-4d2d-4b2d-b696-13f3a29a0030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6813d253-38a7-489f-bdc3-5e76999a0fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1799dfa1-efaf-446b-bcfe-48f29e20fbd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb0c8eb-f7ea-4910-b1db-40ca15d80922",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38844ec-7a4f-43e5-a2ee-2599cda3f283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c4108c-3787-4884-b58d-ff4e5bff11f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1828381e-15d1-4a48-ba8a-ebb8f488a326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "30533aec-d70b-42fd-8ed2-004c966071ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1f72bf-b708-4056-8040-d3868ed7b4f3",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b3d08f8-32f6-4b64-8014-11db8e6de91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "805575c9-4532-40fe-8fdd-6ef913a5b7f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbef3b19-b933-43ac-9809-21d5aab50596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "726fc39e-56a5-4817-a1df-06f8badda396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca2b57c-a407-4bf6-9658-01dee93de249",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68118ed3-ea73-49fd-b23b-2fd88790bf26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cf1e36d-45e4-4f4c-b4d7-e4f60204d2bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3fd27e-e5be-4bb6-9cb3-59f8d092d5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5104ead3-fd14-4e42-8bcc-c91d02c29a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b625a73-5733-4600-bdeb-3c4cc1557593",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57fcadea-c5f1-49e4-a26c-641ef781e15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0583f8e3-fefc-4ee3-aac2-8690a58de53a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de74d820-3d42-4e0c-9bb9-99e2b560d407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4da9bda-6ac0-4e93-a611-2d17b2ec89e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8decdca-9e19-4d15-be2d-692fc936a731",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a983fed4-373c-4d07-932e-adcf1cfea215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad9314da-794e-471a-ad44-d1b3d793349f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4518d9f-c3d3-4b6f-b9d7-61c9ca22abfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d9740c5-01d1-4469-9780-10401ff7094e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce14314-1e8e-48ce-a507-44e17374e841",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b36192f-57a3-4bc6-9fbb-de00336d9e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89725478-7244-444b-a2c0-40d770b0ad09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa08b0e-af4d-4c1f-b802-0c03c87f0262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5767928c-be4d-4eee-bc17-7a450ecb38bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc6d7e0-ffca-4458-8911-544725fe1fd3",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "089a2ab3-2da2-47c6-9b7e-e0ef7293d65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "268feb3b-76e7-45da-814e-172120873dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc293d09-17d6-434b-8611-c741bf160ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "59528bf5-57e8-4e25-bee3-cb58db1fc952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444462d6-3e62-4ba1-ad47-ca214002b672",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7110317d-9d6f-4520-a51d-5b83ab58cab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40fc4174-0fc1-479b-857d-83c15a5507db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8a3c52-4a08-4557-ae36-34a596d74a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "981006d9-ef14-4dad-b93b-d75dcb4c9741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57580fb0-b4eb-49fb-bc44-ab61857173be",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c125138-7a1b-4205-aaa6-d8b062380a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f87830-70b6-46f4-bea6-8503381d5318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed79498-94fc-445a-af0d-a0c40b589fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f01089f3-0c0f-4adb-9e9d-069f43e09c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f91d82b-b611-4339-9a02-ecfcfb003257",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd7c1bc-f7b7-4428-9851-212dc9735c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee59adfe-ba44-4cee-a2f2-3d4beca999b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8954172-2f2f-4b33-bef6-103f0c7284f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "415bfb35-c867-4955-b969-1dd717489045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f48041-b0a5-4a07-b551-fa4e5b96af4a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc560a34-0a1e-42b0-ac9c-5c406de00d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2144821-d756-4f3b-973e-13424713d69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a49e26f-2fa3-4f06-8727-fb6d0542ab22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc8560e-151b-41f6-8364-0a4f46d28ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0eaf83-c23d-4c8c-82f7-667c308ce015",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7bd89a-dd49-48e1-be38-20576dc006ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc6ded33-c2be-45fc-919f-75a0dd5ea964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f2f38f-8e58-44cf-a293-6fa34c5ad3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9729e50c-f66e-4459-8192-226936346703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cc353a-3572-463e-9808-d90098960599",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e1e36e-f946-4149-b048-339d0557d038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aca1d57c-fbd6-4896-ac3e-e6efdd935cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf987107-e000-48a4-abad-77161b9f7b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98dd1421-96f5-4f27-97fb-ae957cc1501b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9909a08b-541e-4120-9252-7c709d28dd4f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c72827-d167-45c7-8b22-d149eccf54ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce1c5d01-2bb4-468b-8cfe-bfd493c35990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40460e79-a287-4680-81ec-e541046af6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "03a9d45b-0459-4e52-8d77-5e111c57b610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a276e6-c5bf-4a7f-b5a4-bbc3309cf311",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeedd1c9-2c48-4d87-967d-de47df20a2e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d279fe7-12b7-4683-8572-ecdb5a109e35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0eb20b-1e0f-4fba-9917-51235050963c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffe3297d-9d3e-4235-b36a-21b2cdded7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32fbbe92-fc59-4c80-bade-a0e4342f5a4a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d288f6-d250-482c-a1fd-143345c36a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3801d0ec-237c-4dc1-bbd5-ac22c4a49615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97fb2688-3ffb-467e-bfe1-7003bc7111d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "39135b71-8b65-4182-8d6f-61348052295b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226f1915-265c-4a54-90b3-ed06346dbd7b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df74e002-87e9-46a7-9dcd-4f659344f6b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d7c3e0a-7d0d-4260-b7fb-da283e89e28f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea016d7-17e7-4b1f-b979-d00aaf3134ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0dcef380-1847-4939-bf26-e7e647e2effd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b068464d-edf4-4385-89d6-c0ce6678a596",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e92762d-c571-4796-a2ad-d5e4edd65838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8dca2a0-a5bb-41d8-99f4-cc82360d1b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3fddc0-a59f-45df-bce0-769d414f70ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f305b257-6fef-47a6-bed2-0eda04aac636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c30cd13-3047-4568-ab39-c89b1b1a2590",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51fdc4ef-573a-41f6-b78a-86d589bf760d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1803692d-0f6b-45df-8a59-20b813c470b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98154cc-0964-4a55-b71a-229e4303ed45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9120948-cc8e-40e8-b0c5-9fc1578d4fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b56c2d-1626-48ea-a8a1-bc72a31933e0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9adaa39-4ca1-4f82-9758-9c1acfab8434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ae25d78-a388-4be6-a8a7-f1d2e82b92e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc785419-4bf3-4620-a8b0-b5d155f08caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfca21a0-84ea-4189-8e90-74ca4ac51e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b826b79-eff7-40c0-a360-4fc40776f302",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef7ccf3-fa79-42f4-ab19-aace48a20488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53d2a343-4fe9-4827-bca1-a07c531b2e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5204a7ec-15b3-479c-9cb2-3a2aa5bdc6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c941db67-1785-4b09-b459-98a736508c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1338ee-830f-4aba-a64f-9fb72532285b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae9747fa-71ec-4572-bd20-40b45e212c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f43ff21-9080-4844-a042-ffecb9996619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1228143-4c69-43a5-804b-f31adbfe2167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bd6acc2-9c88-4b60-8cf0-95c77f7e7853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731d4789-50b1-449d-9bdd-13eed3f79ad6",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcae41c1-a1c9-40d7-83a4-8cf713e03997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a525026-29b4-4335-a806-42eae71092a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4ef94f-fde3-4b34-a57a-11a2541204be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca8cafc9-f08b-4481-8417-48f712e6230b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8362ba-2cf6-4c89-81e0-4db92d618687",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f72d3da-a0bd-41cb-b571-02619c2566dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ed7494e-df40-4f51-856f-e40d5a839fa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3172f79-64d0-4f5a-a67c-18e3b5873ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d43d4a23-3e5e-4b20-90d8-95c713cef878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dfd95df-8106-47af-aa55-496911ac2091",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f7fe85f-fb65-4d7c-a6d9-ee06bc65c7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6d2b0d2-1b83-452f-9464-3e73e11f67dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79c4430-00fc-4065-b938-c5675d10d317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa48281f-650d-4be3-acdb-c23f70dd43b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297638ae-37bb-4d3d-ba15-277e1972b0f1",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60613e4d-916a-4daf-95c5-6f5f234e0af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50cf66e7-9967-493f-a0a8-6adeec423b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80753e8-d8f8-43f5-a114-020479c26899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "36411e52-b502-45a9-8c35-ecdfe4feca70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b15a59-88c4-49d1-8af3-b614f9c28e3d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6e7546-2def-4d29-a90d-fdbafb273aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0171e94-d5fe-4759-9a4c-5027c75d5c13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986a3a1b-03f3-49ab-8af2-78c24f9f3f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3229f2a6-d539-462f-91c0-9b877bd5dce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf6d542-42b7-469f-92c1-dc90ff7cd2f8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1f7172-5fd2-477b-abdd-01ce87728248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bcf5174-24a2-4378-b345-906323b63d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adfc3ca8-5ec4-4449-af88-3234ee8a28ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0faeffdb-fe6d-4b0e-a62d-cbf756dff2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25d4968-cd68-433b-8e50-8a7f60945b32",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e317404d-14e5-4b9c-976a-f5088a6592ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49245366-8158-475e-a9b3-acd4e695a584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0853781d-f51e-47b5-9726-2fd9554574b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0b26dc1-a3e0-4800-8668-d01ee888d420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3888bd4c-7058-4df2-bc5d-ab7ce5f3d615",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7860f4-befe-4751-b30a-802f4e7d06f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e817566f-cb8d-4175-ba63-94775ed2e351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d553c55b-7ae1-4bf7-b8b8-61fb0f2b8f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5bf08d1-7f8b-445e-a48c-ddb0257311bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f9e367-2846-40e8-b272-8b44fa2f53ad",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94946d64-fc45-459d-ae35-e4f675cf751b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03659eee-4c1d-4c6e-8cd5-487314ac8482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4620ca6-f86d-405a-841e-173e1149859f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc3030d1-c356-4d26-b3a9-94d37cedaa9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf1a5b1-4c96-4f4c-a435-205ab30d76be",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa59487-af9a-4f0c-9c83-952eda7a60ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ede002d4-b209-45ac-a99c-e00c80f6e325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58706582-115d-4fe2-85c0-5b107d6fa126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60a590cb-06ef-448a-8495-37bb74705a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6e9390-b423-4d6e-93ae-91e1ea8c8121",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ea8a35-902d-4dff-825d-ecefcac384bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "790b16e6-dd22-4056-b8a4-cb313407e86d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b7ec2e-eaf2-4fcf-8011-1cbfd1c5bf55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb89da6b-d9fb-41cc-be34-c3117b6af22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "635b4098-3810-4424-8caa-64064b580b66",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c82da1-910b-4fd9-af21-27188382c17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52717d3a-d428-4f35-b544-2fabcf8f24a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c6cb15-4db4-4e9a-864e-fcae523313e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9ab97006-9957-49d2-a1da-662c9c8206fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7518607-569f-4bb1-b2c4-3aad44f0336f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25045cd3-bd2f-4b99-b266-2245613ff812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ca412a9-c7e8-4b43-98d3-a425a0542520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820abfe1-08ad-487d-b22c-6c46803886c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a38eb98a-90a2-4668-9621-3ac5872fcee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee185b9c-febf-4c6a-980f-a074447ef031",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf178df0-b068-43ea-9bd1-3700196cdf9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9859ec8-8e7c-45ad-a15b-e6c99a70a742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64617ee4-01b9-429c-9dc0-a675692d5003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a735aaf-bca3-4520-89d1-ac38ac889f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a96e9c-e00e-4f7e-a8b3-ac17f1286594",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e723c27-64ef-4154-909a-a589d5072a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2efd3a9d-0599-4894-9a8c-b659bc01f139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2e72f2-d6fd-40ec-a186-bafcd420f23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aaa5efeb-7792-4096-a6de-57ebc5dd4c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14de1d9-dae3-486f-b29b-e40e8eb2f344",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f82648-883a-4fe4-bf75-b5d283135240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f861949-3e8b-44f2-9ad4-f953063c8745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c710698-6b98-4ff3-8067-f01efa0d9d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "007e1461-09ec-437c-b51d-784370457b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6418f0-e80a-4997-836b-f7eddc96e386",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4eb96b-bfbe-43bb-b85e-9b3177028d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99784ffe-6425-4cbe-bcf3-99a3968f97d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a592b4b1-bc30-4ca1-9d2d-5963df917ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "38c599d9-eb60-4b86-8fac-68a79d392407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aabab881-66d1-43a4-9358-c483c08e0113",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64f1680-feef-4c5f-bf92-b258b1797ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "599fc881-61b2-4f5b-a866-628ca53912d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0573ac87-38b0-4858-a065-f14c76626a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "47ae1dc4-d073-41b7-a2ad-ce206a8e93a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a90cd1d-ad70-4f97-96ec-885d325a314d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03608af-6bef-46d5-a930-cd443be107cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed3adc5-e734-441a-b086-67731bb577f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a38d14a-28e6-49ed-9e4b-fbda2a4f9df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e1b87b5-ffc8-4db3-b956-a72d50ec4165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282bbcbc-86e3-4fd9-b53e-7ff38fdbf146",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4766c861-36a2-4b29-a48c-664a1d5cded2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c671ca71-a827-43a8-bd0f-5cb6d1706f74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d06fc6-d2af-4936-8340-a6bdc40b4cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "22082fb4-e1e3-4840-83da-b7f1992df78d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176d1f01-c8d3-49f3-8acd-63fbbdc24ee8",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fdeec0b-4356-4f60-b812-3b18e1743155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf39040-3a4a-409e-8562-18ef4bc8979d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79cca91-412a-4cec-9122-04bc2f77dfb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "35e88d5b-1a5b-4411-b389-1065d4ff06f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a4ee106-87ad-43fd-98ea-058868003d55",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c9c443-069c-475e-b3ce-9e1d0aa1b278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc533873-196c-47cd-88d3-a47edc95ef3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d25361-e8b9-4984-bb53-8a3de1d5bedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fe32785-d7fb-4f47-b34c-614d84d75aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a78337f-caa7-46b9-b108-888d35ee08b8",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "731128a0-0442-4a59-85c9-0482ae5da7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ecfe33-51bf-4dd3-a8e5-c494e3ff1673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dfce4f7-bbca-4643-9c8b-3933ab6c0d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c04bb13f-e7f4-4f8e-a4dd-bc0ad19cdcb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92fdd928-6d44-4f47-8610-e38ee1275684",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1e5868-1cd4-4886-9d89-acb2accf8b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad65f78-ea1e-462b-bbf0-248c6d6d4a3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbcee933-964b-403f-9998-3aa9b69831f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "489c5432-90b2-46d8-8984-77791f127a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8ba263-a1ce-45a8-b932-8cbc49deea41",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb04c94-a956-448f-b223-844bf1296f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d92f835-e2e3-42bf-9c9e-179901657646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e044437-3b1a-4c3e-a54b-071118697661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "253feaec-cb07-42df-a8b3-a504f677a1cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148cfb65-656d-41bd-8c66-0a8c1946c57c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8795be3e-e622-47ea-b854-5eeb1c793f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a78092-4a8b-4d62-ab0f-48bd4db408e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d78294-b642-4639-9244-87c6902a41c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e986747a-091e-4e66-989b-fb6b3dbbe68f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43ebd5b-cdb3-4cc1-b7b1-8fee315464ae",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80046d4b-01a7-49ad-a3ea-5d6aed1d8bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b193938-1778-4d7b-9ce3-5fda11c0f50d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1e95c9-f5ba-4d87-adc3-3aed2f0f29dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "42000c4f-ee5a-440b-bc1c-38fe2e9055f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca305e4c-99fb-4c20-88df-c1ecbcaebb56",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44a99d5-953f-49ea-9cd2-c643fa0466d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0610908-f413-485d-91af-1ab5a46a4991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed73607a-7b22-4ce7-92e2-d1be974e5443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3afd315e-d8cb-4ba7-a330-73964c713563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63b4a0a-984f-4d5e-9214-40e66bc5251d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e73d623-b626-4638-a5fd-b6ffdd2874df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c00a912-4a2d-4ce5-9b3b-9c737f811692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57e3f8d-a5df-4cbd-93e5-2f055d00761c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8895c695-9a98-4348-ae33-179d29d38d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7dc1ab9-c0e4-4624-8a21-012f6b1a43e7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ecc8ff-a4aa-40bf-9434-3982c28cd785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0b5dc8a1-f4a1-4b44-a593-e47d150e40cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf4fb42-545e-4b15-9dfa-06f3a12a470a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "31a52582-9290-47a4-89cd-e86b2df17c2b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aafa765a-4600-48c1-a5b8-432d83ecc7cc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "97a3d6c9-aba4-47a4-a25d-e96015e07893",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8ad1cd-4289-4fd2-a920-0a06bf872975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4b0f322-ec0e-4510-a315-fb89ad4c5978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f78d99-9f74-4257-a03e-c3d2449aaa74",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e427bb4-7327-469a-87ab-e90a1989e224"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cbd52bf-bbd3-41e9-a60b-9adcef103871",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1c92e13-7eca-45c7-8612-426ea779bd4f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a956e0c6-4a6d-4106-beaf-b80b8d8fbe38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "549daa30-ff28-4848-9421-6abca52616ac"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "14a77651-340f-43c6-9206-83596dda5fa9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ae60abd3-ae45-4071-b2a8-f0104affb595"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "87e9115e-35b0-43b2-bd62-20adf8da43f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "06ccdefc-0961-4e70-83c6-6cb482894eb5"
                }
              }
            ]
          },
          {
            "id": "ba48dd13-e75b-425b-a230-369a0ff3fcb7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "57fbd04c-d494-44bc-af0d-5571cc874bf8",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "21f4bd61-c2b3-4901-abcd-408831fdd9b7",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a7b85c-659e-4630-abb0-9b54517a169f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "45fdef62-6cf9-46c2-90a7-f974e8295b53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7397a584-a8e9-4ba5-92bc-11628568c1ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f25dc1d-a011-424f-b2bd-0ac689310fe2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c7c1d617-99a4-4f3d-ab55-e9b1239febc2",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aabf3205-4aac-4781-a0f5-662f97652f98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1d19d3f-2b1d-4390-88f4-aee3d2cf6b52"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b1bd899-f85d-46b2-a75f-863d15c5d206",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1a9dab3e-9655-4bf4-a312-955502dc1578"
                    }
                  }
                ]
              },
              {
                "id": "e4d24d47-54e4-43a0-bb31-ecc6fbfb2fad",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9722b69b-04e6-4bee-a7c4-ea4eecb533f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c4047ae5-b406-4d55-aad7-aa4ebfc83ad7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5130fdda-ede9-4917-b463-c784a955882c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "69f1c42b-b2f2-422a-9438-8c5101192978"
                    }
                  }
                ]
              },
              {
                "id": "8a8f0106-2e31-42bd-a5d3-f245ccc6b99b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3d56479-8b5e-4ae7-ac6f-920129453090",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "098935bc-f348-42e6-b592-da6993be493a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1dce476a-6740-4bc0-811e-85fdd4983082",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f4503cc8-5c2d-4d38-bbf4-c294403a24c3"
                    }
                  }
                ]
              },
              {
                "id": "0485932b-c750-4129-93d5-cd26d62c8947",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "314d005e-4899-4bd5-9772-765d7cead7db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d862bc33-c435-4e66-8feb-c751ebeb29ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfe3ac7c-94a4-46d5-b087-d8a0df6e2724",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "28e7f0c9-8e01-4eae-ade5-3c61255a460d"
                    }
                  }
                ]
              },
              {
                "id": "c083b8d7-ad84-4c84-8f1f-675a7fb62baa",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "468332f1-64f5-4368-b2ac-7deefd08c5b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "150ccd0e-c4e1-4127-bc75-d19c308b0bc9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00c7e525-9260-4f59-838e-6e984c675bc7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7ee554f0-4511-42de-8e58-20e0a7d0deaa"
                    }
                  }
                ]
              },
              {
                "id": "2b709c3e-e3ea-4eed-bd5e-347e7289550c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ec95ab5-71a1-4a81-b648-c3bc5dfc5492",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc222e5e-e3af-4302-9d41-2dd87ea080a1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8119d117-6f1d-473b-a89a-fd2714bee3ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d2747952-66ce-415d-b583-51fc9dcd1edc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e39b5fae-21e5-4b5e-a329-339ce954fce4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5830007d-e301-41b9-afa7-09f21c91cfa2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6c1e8f38-4768-4f48-8445-0604e53cc994",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e8753158-8fdc-42e7-b5d0-a1fe14fa675c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "61b32559-a6d1-448a-bf14-a09b3163508e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "606eed9f-fe59-47b8-8ed0-0ef37967e12e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6752a757-f545-489c-a2d5-456f80b7dda2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "106bc3ef-290c-428e-91c2-24d17fe31060"
            }
          }
        ]
      },
      {
        "id": "98565ef2-cefe-4e17-b948-f5cb9f3d68c0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4ff22732-2e1b-4959-af8e-1518d707c698",
            "name": "Negative Testing",
            "item": [
              {
                "id": "53fcb411-c945-446d-8779-e3daa284e284",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "db2c3002-097b-4b49-afe3-4b89768d7d4a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e2dd4f7-fbe5-4cd2-ae52-5402bf983f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34834c39-0278-4446-9c06-6a984355fc80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b5de32-e953-4a4e-ac08-5ebf18dfd5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d8fcd0f-843c-4e0c-9402-0229752d03ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f8cb94-352f-4569-a16a-39086f8a60c2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f686bd-21d5-4f3b-8786-efcf87dc4cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96a149a3-e471-41ed-8e2a-f0dae943604c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d764a0-0f50-418c-b259-40b9bd0effc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b770c7d-1953-4504-8e8e-231e2e80a722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a9069e-2c95-49b8-8b20-d87bd3cf22a7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080033ec-54b5-4897-92b2-77de383ab248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cfc95a4-4539-4037-833a-5b9e3a2d6967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba370a35-6946-4749-a143-45b462ab6d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48e12377-8fef-4f34-9c3a-f670e951c402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02cee26-3451-46bb-aa76-f7a52937bbbf",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9f07eb-6862-4bf4-9529-5aeb42970123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f50ea96-fc63-441a-9a3c-5c302ce75de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2295c8-2631-4390-adee-9689aea6f142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "edb047e0-2b28-4c18-af79-316d58d35c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910ec468-a93a-431a-b167-c3783c8a216f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66e5441-344d-494f-9277-d34e638405fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd1d946-512e-4075-b6a6-3df579a1dd29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09078896-e256-4df5-a554-bc73c0d1e017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e9ff805-3a97-4e59-932b-be10aba1060e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25aad7b1-8c30-4627-b785-851b6b3eced9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9342b54-02d6-425d-9f0f-054dfd4c72ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf5938a-4d6b-4114-a762-0ecc0ab167e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "371947cd-9522-434d-b203-7fdffbf9e5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "22a7c898-4544-4577-912f-6f202c89e660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "517f66d3-1cde-4942-87b4-6864e8a318f2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4e8ad7-02e1-43e0-9dfa-01fc9e56e97c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "317bb772-68b8-45d9-a792-5eed10660510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade87f2a-d9bb-41c2-b3f3-09761ecb45f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d66592e-9bd2-44a5-9b94-2e50590c6350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2efe87-c27e-4161-885f-f8a97774a82a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d79a5e8-3dc6-4b1d-95d1-4998e9dc428f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfd73920-2dac-4c07-a8ba-a35ba75d9c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a51b31-56f3-46d0-bc48-f96cdcba7b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1d7e777-0ee1-4618-b5eb-56f8b2133edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91e28d6-8859-4bb5-a1c8-0ae5385d4f89",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c8d1cb-b7e8-4041-ba12-a1d1c2bc1e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc0615c0-8e2e-4900-92ff-303bbd60102c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a993a3e-b60a-4238-9f25-8904bec5c915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e52e60-c773-4dc4-b98d-8adeb8b3de14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89a1585-f138-4ce7-ac70-ed2e2a54ca62",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743e4f77-51ae-40fb-b104-fd7483bf4b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95cada89-339e-49da-85b1-f4f30ee7f7f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e6453f-5340-4e89-a5c5-e2b991e6e020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "30a13bf3-0621-4475-bdb9-adfed4002372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43997789-bf48-4f34-b818-3c3a576ac400",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9cbb83-0436-4068-a276-935bfe5997e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46da4550-b2d6-4cf1-897d-812115a3af07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8af371-16ec-43cf-9cd5-f92b03a29dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "794f312d-15fd-4589-8ee8-64b6bccb5380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5113559-ed8c-41a5-b24f-24a194e25724",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78c1985-2cbc-45fa-ab85-6ab1f870b97c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fabe738-1b55-4d5a-b5ef-b2a313aadc7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9311aec6-3313-4e79-a1f2-9414a0f721e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "90fa4906-5163-4c69-afad-f60bd304b1cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6524e0-6be6-432b-aa12-dd129fe0ebc0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb73693-ad0a-4c2e-9687-233e19ff2be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e604c62-d3b4-4825-b4d8-5dadc5e44e15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d91a77c-0f38-470e-bb9c-58cbed2045d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e761274c-3157-412e-88ec-dc7c21490fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f85344-615c-418d-942e-5cead723e7e9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "908318fe-8e0d-4138-ad23-13fb3420482b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b527972-3b97-4c85-b152-9f69d3e3f14a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c276f9c4-e4af-4b0e-b1c6-450f82f1cc41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "96000633-02f8-49b9-ab71-76e4bbb7d375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fdce506-0a0f-4589-bce9-9214ae438012",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0fd3d1a-abfd-4a13-9c39-3c3e37924693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dd3673b-667f-4768-81c2-d243d25b412a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cabd5249-0fc4-49f2-b41c-ffb674a62c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b93bc76b-9931-4719-ab79-00915da9df85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaef4093-3111-43f5-9307-c039b9f91729",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3726f3-f9f5-4285-842b-7931871266b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a52f9bde-09df-4541-8883-af7c4f774ce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ada9056-9d26-4970-bfd2-e949ef3b4598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddaa6254-8e14-4e45-839f-f0269de1f706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee250c9e-80d7-4d45-af3e-b42acbc77164",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "182c4176-f163-47e9-88ac-3edd39fe0a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee43f487-e304-4988-b354-aa257dfb52a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e813e36b-4979-4352-9755-5d36ff4ab3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9694967a-2159-40de-b8d7-97dec6ba89b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43bc48d-59e3-49fc-89b1-cc4f4c5b02af",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd4961b-ac80-4bc8-b2b3-c1a4d991fd97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3387c036-ea80-4145-b3ac-ea6efaef1aa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60315e06-02c5-41f9-84d4-c6873cb21dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d92ebc2-76df-4f3f-b15b-1e2b1b231e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04867999-e381-4653-a23a-767cab2b3fa5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1e640c-eb68-4577-86c5-71af467c19be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b2bd066-7e5f-46ef-b8af-b1ac455f645e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f53718-3c12-4242-ac48-70c67141edd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f79eb833-9af1-4e34-9687-39af69c4c60b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670a6674-7ec3-4c01-9f23-92f570d7bfb7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88f0841-0e61-46a9-a2a8-0b4141595ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abba1431-245f-47ce-9af5-547f908e3adc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f8970d-0d16-471d-8df0-495644b1668c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2cfe00a-3728-47a7-8ac3-6d47a733f7f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30277ce8-7c74-476e-a7dc-f3e071e5cd3e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e38bc1b-02a7-4add-950d-2d77a8b19613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2066ea10-22ef-407d-b6d9-ddba883cfc5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725a6b0f-0220-4610-8c51-516baad10e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46162426-0f79-498a-a414-35261387a284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b9ee08-f322-445d-9220-f4a49da1a65c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbcd77c-bcfb-413f-93e6-ebe3e083ee8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42fb76f2-49c4-481c-8f3d-605f5602002f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bbb6fe9-285e-4fa2-b94c-e337ef45ac83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d30e67e1-2bfa-4ad7-800f-ae39d0a52062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57536202-4465-43ef-972c-254f032e1a35",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b47aa29-f800-468e-9b56-b027c184949c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb009de2-585c-4945-840b-075388d1047e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a010a866-1d2b-49b9-9a43-e29575329d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a14f1c99-89ad-4ebe-90c5-fb088d9f80a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c59c07-c78c-4367-bb88-d8c15f2e5b26",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47efb86f-a08c-47ad-8ab5-9c56cc877277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd00304f-2526-48ee-9a19-eb9130ca3794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ac39f2-57c1-4f46-8896-2251ea245251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc367ec-4bfc-4ca1-b16d-c4a7434f9846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b86639-a2ca-4584-b9e9-f3bb72938c28",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf12e29f-69eb-467c-8083-2e1979927257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a595841a-1387-41e2-ae99-46a3f029d81e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67a4533-bdd6-45d6-a8eb-b524a4b3f47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4c605af-4941-4447-8368-7b5b27dcbdc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450d6cad-9bd1-48ee-bbcf-bd8a0136d4cc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9010bec-3dc3-4879-a10f-bd827c988151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7c31948-007a-46c3-9064-b26d685578f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ef41d1-4e4c-49ab-a5ad-0512021b4769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b4f1fa-b061-41f1-a6c5-bebb3b94236d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7d1726-da2f-415c-aa56-fb1cbbe9e4c3",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "058dd784-c456-447b-b298-0ba53ed31576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9575dd27-7670-4b6e-bab9-4a050508147d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84cf727-c855-4588-9213-2b1780efca91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f16d6f3a-29e6-42bd-a659-1730fcc5db74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adde02c1-61ab-4c8a-9801-4cf575804eed",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "271418ef-1cc0-4486-ae75-4e65c78ada9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56839a71-c5e7-4daf-a5a8-d3226842c4f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bf34e2-8bb5-43f4-8c1f-fa658eea619a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd0f98f3-83ec-4aa8-8588-42cc497a995d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbb40a8-cb9b-488b-86a3-e10cc3e0cb95",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "163455f5-569c-4c7e-b1cc-d710472fd807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b84f76e-e17a-4ddb-8b6c-1279a1a6c1e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3644784d-b050-4ad8-8266-6e39876f224b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c908ad5f-fcff-48c8-bd6b-f9df665e9a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7fa9af-3043-4498-8d47-f67a73b18b82",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "007f8036-1d41-4bb6-9406-13e31a97bcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c9d964-b1d9-45b6-9e4c-3206f137c88d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7554d9a1-7c7f-46ba-8d65-9989c3c8d6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0f78f65-45b6-4d69-86e2-d4bfe7c84748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4a1acf-5fb7-4d7e-acec-3eb067cda060",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64854f64-25d0-451f-96a8-98fdb70c6714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9efea67e-55ce-46f5-853f-101e0076898e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d49c5f-b17b-4f5d-9b45-7ae7bdfeffff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f8335a7-aa88-4979-8b2f-370af3d27876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00743432-5332-40ff-a397-5a770a9cca32",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0ea0b2-8626-414e-aab1-96b591aad19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a6c58ec-8a03-4132-87f0-e62e73b2a80e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a1ee5b-349a-4d8c-87d1-552e83c0dcd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b2a4fa9-0ad2-43bf-b103-3ab3e8a71a87"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eb4a0333-b218-4b66-8ba5-75db3d9b6c1d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d54c5871-3334-4860-9315-10bea1e9b386",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576e35cc-e767-412d-9afe-13428dbc1560",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f7076639-3d43-43b0-b4b1-7e203110c4f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da5a126-6dce-4ad2-8965-4a39a92e35df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3fe66ce-2eb5-43a1-81be-b284288fd164"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9271c26d-2dc7-40ce-b568-debdbdbd4e3f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddcbbe24-2b61-4d9a-b1a9-3605ded23f1d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee2ca33c-a867-4602-aceb-f1dd17907992",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60c4c643-502d-4aa4-ab5b-228ba5901294"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b9fa526f-95b9-420a-a5d5-5ad61727606b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a98ba16d-4888-4505-a49a-ea63b9e11da4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c4dfbfee-96bc-4f09-a410-4f96fba2ba86",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e328bdb-3a78-49c2-a1ab-4b2c61951ed3"
            }
          }
        ]
      },
      {
        "id": "5d4061bf-51f2-4088-b641-70700653efbe",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "73603e5b-1731-449c-974e-bacb4551147c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d73be704-ad4f-465f-9df2-136ab5014422",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9e0a00f9-8f5f-4856-ae24-0ee791106cb5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ca2e3c-5446-4146-b766-25a699277bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64793d08-9904-4f20-925c-9c5d74a5cdb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097085ba-388b-42fb-99f4-af2075fbb2b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "beb1fd03-9cb4-4559-8891-40d7bfc38eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf41348-c804-415e-8c76-b892e0d2e671",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f13d0b35-7177-4342-844d-6966eaaa4762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3203da9f-2159-4517-a1ed-b0f06a67f13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313842dc-c6c5-4708-afdb-323e28c10269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b2e2756-35b9-44f6-89d9-f2d886421bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf632fa2-ae24-45c9-bcd0-36d5f7d57e32",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf67d63-bb57-4043-8bc1-ae145662abee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "372252e2-0d50-4ef7-a200-ca3c02e59aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b5a6ac4-bef1-44f4-ac5b-a13183bd7a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "357a6033-0b21-42e6-a294-bb4c5abddc06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "700c8672-a537-4a60-ac12-d70d69e122e8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33b3aab-799f-4d09-a91d-d17e0bfb944b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37296c90-b1e9-4cb1-af45-c2023fe41b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546e28e6-d346-4922-9352-6c1826d0c096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "29dd8b95-5018-4951-a0ac-cb35b4026665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c33aa6-7827-4975-84ca-ea776f20bd17",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "776208db-7f59-4a36-8c1c-f7419a0f0adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26f843c5-85d6-42dc-be32-a9502feb03dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98c3764-6626-4e65-b601-fd622aac28ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "375d02ee-872c-43cc-950c-9ae1ae4f566e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8353adab-f2a7-465c-9bda-6aed323d015d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aab6731-5f2d-4ef9-bf12-8b29bf32bb7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "608a8810-5d9e-49d7-af82-d5236dcbd672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3cae4d-cc34-45e6-9954-867552618ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cfb11f51-ad92-4d08-b122-37a33dc73edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5001561-9752-43a5-80ab-76e6db2726d2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d17386-16cd-4c37-8be8-0ba2d19abae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79917b96-5855-4bd1-8d87-1fcad9b418b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a803dfcd-5892-463a-9170-eeac2ae766a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "69629a8c-00c0-4beb-865a-efc953aa5173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92740045-baf7-4771-991a-36e0b07240b5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "099da6dd-ee30-4856-bcfc-bcdd6ce8f19a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5647b27d-3b72-495d-970c-2dad90014e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6648025-5a38-42e1-b802-6faab772425a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4ebffdf-c465-40eb-a93a-86d122b1877b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ae2eba-9708-4bbe-b5ff-7963198d3b8f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3460246-b657-4ca0-9e4d-8d75fe7fc103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b54ea6b-8f00-4639-aad4-a5e3e19c5f82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158ccdc2-d125-415a-9334-af415175fcff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5528a27f-c42d-48f5-93af-1897a81035ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e81d8428-7919-4550-b345-d915ed714ff8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b998f04-c97d-40e9-bc15-f2767ec19a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c615b218-fe94-488a-9072-0d8cd6cbaa16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf97358-567d-44e6-a762-7613e05ddd07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f3c8f4c-0c4c-4ae5-a9a3-cf19920c115e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6da76e-bcc3-4db1-aeef-1eabee4e9d9c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b4f8fc-e624-4949-a4f4-2006b3a1f71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1209a65-6179-40da-b87f-dc1454bb9678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782a2379-ab22-45a7-ba05-abe046248cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "df838dce-4074-4000-afe4-236f76d8c769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ed3223-d507-40d8-a6ea-cea936ce1eaa",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e91c71-ee73-41a2-96c5-a99fd5ffa562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bec90cf-6301-486e-a7de-db3efb7338e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350fb430-6ff5-476f-80f9-8c7e41f5280d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b5bf2881-bfb9-4352-80c3-198106d7787e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f110aca-21db-48c7-a622-5750239f8a5d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5566220-2232-414b-ac91-cd211e7e8e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5aeeb9d-a2be-4425-b544-2afae33d9902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6226e9e2-73ce-4561-8302-b0e51a10ba46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "123c4a0a-64d2-4156-b39f-a3b2bdf36a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baef7df5-3df0-4ead-b7e0-f426b283c0e9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4363adb-42b1-4ee7-a510-b94ddadb3b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d839027d-2a16-47b8-83f2-f3f0d66341ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d28c64c-234a-4d25-ad3a-b976178cdc71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e384f99-9254-4851-bf76-488e74dbcc02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6db93d9-f150-409a-bf7d-70c1e698fdd1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd19d010-c40e-4d60-a512-738aa3c64efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "243dca1a-a55c-4f00-a70b-5adab1062c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae4098f-f16d-4af5-8e31-688947ff3696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "beaaf1d5-1572-4820-8398-e8037b91cdce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb3560cd-a379-4590-b576-68d3ae6f80ca",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c95165-f273-467a-b684-fdcda8d1a539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "870e4694-4887-4a41-8f49-865b2e17585f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db23e2b-204f-4621-a45b-68caebc10f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "74e8cd8d-7862-4f16-ab9e-5d91da2331dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd73d6f6-50ca-4871-a8d1-7833b3c9afbe",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ccf7d82-70fe-45b7-9d39-5ab248e54190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a631148-bcf8-484f-8f7d-c5ba931223e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2e2909-784f-4d88-b644-c90e776266f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e69f2e2c-13e7-4437-8326-d894215265c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965442ff-d86d-448c-b6b2-b70c1d10148b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e824cde7-4df1-4da2-96bc-da7644e68968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe94228e-80a1-4c34-ac42-0d5b62ec404e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ce0acb-0526-412f-b82a-1ac91aae92b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "93417e11-a188-4922-a4aa-099296a0481d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072896e2-e6e3-4be9-967d-ed5bcc8b6b5c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de5e859-f293-49cb-bd81-5f236b619ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd308de-5f5e-4d6a-8971-adab45b699c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb44c48-3415-4ec6-9566-f0ae9a879040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84a74419-bdf9-44a7-bd6e-c55f281264b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3061eb0e-7a97-4784-b5c3-263bc55475b6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d87c249-38f2-4571-8dcf-5374ef9a16a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84cebf34-01c2-4453-b194-cd31f0b80b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "726ea23f-c987-4b63-bef3-857aff297faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e72fdc9-6424-49f9-af41-06bcc0590d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320928b7-31e7-4775-84c1-0a80fbb35cb1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18a9f3f-3526-47a4-be61-b5ffc44e98de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f2d781f-0cac-4cbc-982e-2a20f0b0ba16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a6118a-ea84-4619-ab45-266f9c1326f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d145f2bf-9fee-4f23-bad8-eca28ebf1f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb404a7b-2e11-44a8-905b-abd5d001e126",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "583b7caa-0d10-4d9a-a601-02739d6b05b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35759f98-97e4-4e4d-836f-5fb717c556ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4cc64e-efee-4cf5-9a09-456fac47470d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7797021-aba0-48f1-962c-c7429962e3c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4964cc-37f0-4870-8024-d28522b9aaa6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ce33e7-53df-4c29-8393-d706a058af79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5089fb3-efda-4d7f-9e04-e887c721fa0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1391bc-7a1b-47c9-8db6-7604bf564e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc88e341-0d32-417c-850f-0e7c1f8df9e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69bb1d10-0d87-4df1-a0ed-23a2f2cd90af",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4fc8c8-afc2-4dcd-b87d-ceb16200179b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27acf4cf-f49f-4c02-9fbf-b3e6c12ef2e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3839761-602a-4f47-bbf2-0d9ca39eba8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98898eec-20e3-4d0b-88f2-73ea9adc7161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8811135e-a59e-4e18-a6db-096375c0df4d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2265dcc4-7534-4454-a73d-003e0b9f1f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc6bec17-e70d-4d3e-94e2-f264f174a664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9257a939-002f-4703-b3a8-c2fa6027343e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "543172b4-2149-49df-a2a0-7734dd1c55e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29aa04f3-2407-4abc-95b9-79102b08271c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f372bbef-203e-47ca-a688-10f4586000d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfe49b24-09d8-4db8-a01e-62a626375460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ff659b-9a3d-411f-840e-d4d5b16e3daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c24228b-92c7-4a3d-8ac9-3108547b6066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4452d5b-2141-4c2f-9cf6-5f5eac4c8b2b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1442d16-6dcc-4f70-b596-c1261cac0afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b684860-1438-49be-bf63-6c3271c5a8fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06eaddfb-7c95-4916-af2e-bb1c8e6d0fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9591c9a5-9f93-4d51-acdc-5b15add2c5d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099baf26-932a-4a71-95b3-2de5261cf021",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7f83da-0bbb-4c98-ba13-8112db1c58c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04108609-a943-4429-9c81-5efbd2bb1606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad7090d-1424-4770-bb8a-4e73109018b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35ce0b46-a3df-4ba1-bac0-5697712a67e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3bf7d93-6433-47d6-a585-b3c6f0d7155a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a957293c-7896-41cf-8845-d1d8c2b4f2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "357b59ac-1281-42df-a609-7f11ab099c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f097dec-8e07-44d6-bc91-a2bd43855873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb4a0843-736d-4672-a210-c910d6fb982c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17daf1ff-2803-418e-ba37-0384a4fb0f1b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9393a3b-fddf-4666-8efd-1b3dc2b131f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a725d860-c422-4f91-8613-17fce43fb094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47aec1e9-4520-4911-84be-5ffb959032d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a75860d5-c060-46eb-bf21-545a83d47925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f2aa4e-7cf8-4812-868d-089b8e22ea17",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "231aa4d6-2ce9-4333-815a-8c0e3d133213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fba19a73-8e79-46db-9f39-90f8fa8b01ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16615df-5bb0-467a-a9bf-993d67b7e553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13956db3-8b6a-4e71-b163-b02f699fbefd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d41e885-e616-472f-b47a-d9f8944bdbfe",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a32f85-70a2-4ae7-a2d1-eeb7899d31df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e38708f9-04ff-4736-a93d-b7cacd3d03f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a676b77-2e41-48f8-b706-664bd9966f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b881854-ae53-4a25-8028-adf6ab667811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb97f3db-a34c-4133-a093-72098b513ac9",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc60893e-da41-4d96-aa4f-54f44ba39f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7c4815-6f38-4425-8b2a-62dc8cd041b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1c3427-0b44-44ac-8a42-881d355c8912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d87bdb04-2e07-4f69-9594-5e21819f8e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "558e4284-50e1-4fbb-9508-683d8e711772",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a36af208-978e-4fa5-a817-1b5a8547a12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afb0f8b2-b94e-41c8-9824-fc16c75a3d0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f9f525-abde-4dac-a993-6de4f8e8df46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25fc6a29-730e-4e52-bc7c-1eceb33f3155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f598df-0716-4fa0-a93a-6f255513666c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2eae5ab-7eb2-4090-a5ce-c040738f7bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dec0bb39-4d11-4bfc-b41c-95a37d65d880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073bdda3-7107-4dc2-bee0-fd97b711a8be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f6935a-b87a-4bb7-b9b0-e52a5b31dd11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea50495c-4d0a-40e1-b0a4-5091f0ab6a8f",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea8d8f3-90cf-41b8-b69a-e1a8747bf5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d34ee30b-24b4-419f-8031-b40c3826226b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b62ec4-f15c-4ddf-8aaa-236c4c193cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fea61942-6320-421b-b00e-f036892189a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1c8deb-6a41-441a-98f4-057c35c50de7",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d635d4c-319b-4e09-8306-6d7ea961629a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d19c7c11-1ec6-4562-90f6-fa17d8a08f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec67409a-f096-4166-a614-cc07ce8610a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4a0842c-cd1b-48ca-b403-1c684b3ade99"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d2265cb2-287c-4f89-a1e8-2a423638259c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "12dc8b4f-8742-4325-99b9-48231d501e38",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394ea7a5-c55f-4a53-bda6-bfcf78381b1b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "30cefbad-c7c4-419b-b8b7-e4f349550d3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "733a99a0-1bea-4954-9513-e8745ee1e487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d62ceb2-22c7-4866-bf77-e5acb0df4d4e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da2a4c7e-289c-4edd-bff3-fed8814b4309",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be1ca224-639f-4e3b-892e-4a993d096ea6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ce69715-3d10-4b75-a729-b7dd8fbfb3d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e1e68bc-c96d-4a01-abf2-c5154109e377"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "49fd5fee-d02e-4d7a-ab07-df9365eb20aa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "acc7832b-e7f5-490a-958b-24b366f96b90"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f10915e2-8b05-4d4c-a92a-68b480b91112",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "666722d5-6b73-4c70-a569-f3b4830568c1"
            }
          }
        ]
      },
      {
        "id": "c63fdc0e-0dd2-432b-a75a-a835792383fa",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "60a93a48-2885-4240-89a8-d8b78fb189cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6eb9bf54-eabf-4cf0-996c-2bfd4014123d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8432e476-81d5-4712-872d-ecb8b1cbbb75",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e52af9-9013-4ec9-90f5-ae25701723b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "400fc89b-3823-4dd7-a9d4-d731a1d1c567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747b3f8e-3f88-4195-baa8-b22624aad19e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbea8604-e89e-4417-ad31-5702e08e1310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a8b7b0f-bfaf-4abd-a75f-add33d3a3790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24ce981-d9c5-4250-bc7d-68478fec3a44",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8f22f7-1ada-4ca3-ad9e-9fbb814104b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b89fbfc5-8efe-45e3-828d-2f0ab238f47e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad677739-0cf5-4499-9f98-c9e1a5b98602",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a0f23f-d0cb-4220-9ba1-3b5c27c317d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4dc44f2-5793-4761-b8ec-2cc3d90f9749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f098f818-58cd-485a-a9d0-1687514cb179",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2955c072-e3ed-4231-85dd-51e9b1028284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6fe10ac-fd88-4f2f-b809-383ecd97e32c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4dca19-770b-4bf1-9d56-0b83dfca2e19",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1da6eff-ab38-485d-be06-54cd7bdf2071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00eab50e-2176-44a8-9a6a-8b2c328b728a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491b5080-6f92-498b-a98a-5f1a2bab8c85",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a059e6-31fd-4901-b1e8-59d82fdf3b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06bdf84c-feaa-4d5e-89c7-43e188783308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "489f76e9-6675-4582-ad50-9e508b8ad4f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a79950f-e9c5-4795-9104-33549802ab67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e0cc87-5419-45a2-8f34-d37e02e5a529",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed79bfb-02f0-4208-8b83-a77de8e38775",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb2aa2fa-3f63-4381-940a-48ed2fe989c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a985a48-8091-495c-9f02-4c350ffda8c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83175303-cc2c-4670-bbec-26cc5ede9515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f64bd7-c6d9-4967-9a4c-04de1d7706e8",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a70d68-bfbe-4701-9e06-ada50db90bf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38c0f77a-2489-4921-9fd4-87691ee27fb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f68b05-757e-495f-94fb-776250601d47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706805fa-afdb-4f74-b40a-c032e509fe77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ba2603-087c-48d6-95d6-cc540dcbd1b0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee172787-1920-4b48-a167-e75ed5c66666",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60c9c7a8-16fb-4e45-88db-99f5c580946a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5f3025-c844-40a9-86a3-bbc38dd694c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95691b8d-902c-4a22-8023-8a3d1dd9b1e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b66a760-01c2-4852-bdfd-09b4a4151ae1",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266e4881-155c-4d70-8fbb-12e4b5fb5392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32878835-f652-4a91-ac64-6b45016984f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ebcae65-0c8a-42b2-95ec-ed132e2a43e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf09344-dc90-4815-836a-03cb5f202e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc37e9c6-3bfe-4595-a849-2e41a48e5175",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bcbd813-1f8d-41a0-9d7f-aec26b87d381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba40925c-f587-422a-b21e-2945736d794e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6699fb6f-cf67-475a-80f1-eb58e6d6ce8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a908b215-718d-4473-8082-9ccef7727bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29202eb-f9a2-494d-a43f-a1704610e052",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb64a1ca-831e-407a-93f0-cb98464ede87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d32cf2e1-1118-487d-be9d-9ef29043d0d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80b9871-ad68-4d64-a54f-e7cf06ba3442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e400b095-1ad4-48fa-9c13-d3140be7bf6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b9fced7-9b8b-4670-93a7-70f05fa40a82",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec97957e-d98d-42e4-90a6-c4e4352630a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "953d73d8-8894-4ec0-9272-6e267a6c6a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78efc120-c843-467d-a885-511b73cf5e19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5425f0d6-a096-4f54-bbc9-3565ed5d06bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a959c7eb-15f8-405b-a883-e303e2f9c666",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436ad3e7-ccf4-4149-a6b8-8d5c4f36e4ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "906d1429-cafa-4248-8dce-043999a725e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e48a16-7c45-4abd-bb2d-32fb83edee3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5635a9da-b06f-47b7-8904-96ea77f07fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea001332-7081-4ee0-9243-36746235ebfc",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48ca77c-5794-4809-a016-bf3ad3a482b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bc2e33c-6202-4b3c-b33e-b7c767289cea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fd1096-50ea-42f4-8051-958613f7cb24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d258f65-f97c-4745-8370-0e7b2e669cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19cd3eb-638d-4396-a8b9-fa3a8eb68848",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "478a7102-961d-4938-ad62-cde6a0b620d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3773575b-522e-4a56-a143-710252404db7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1263cfb-fafb-43bb-b174-03f90b722a2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8363c0b7-05fd-4dc3-bef6-10560a099318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba51ce7-7d04-4ffe-bdfe-888d69dec252",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7a6b93-92de-4879-8a47-b5afafa879bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4452e149-405b-47ab-b645-0455179cda3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eadf9792-6d35-4d35-830e-0422b3ce9898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e85e713e-6ffd-44ac-8bd3-d69e4cff0895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7fd28f-61aa-4d4a-9bdc-b3e8c4f83001",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1456aa02-5105-4be4-bb24-2460a5f05bcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d069c2-b5b2-49db-8094-f91f8cf7a34f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34be9e8f-ea38-4bfc-9a98-037e34a23763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b1f17b7-d261-4d85-b82f-c521be292b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc7ad06-0ac7-4c11-a888-a320f0dcf8d2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e27dca-bd4b-4067-b753-03174471c89b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48697ef-6ac0-4c37-8c4f-8da9cc275c96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3099e87-02cb-4c65-a6e7-82c1f021f511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcfd5a24-a058-4f11-8d83-23ecd532491b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dbd9b1b-fbee-4627-806e-def60f1ffa11",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39544c89-772e-44ea-8850-ad0825203846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bf05f34-242e-4d46-8b1a-37793322449a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d983bc3-7bbb-470b-bdb5-c1faecdb7753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96dfe74c-0c08-4c04-872f-a3074c04411d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7113e33d-00bd-4fe9-a20f-0d2bc0669bf2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154ccbf9-bbdb-4334-adea-a6608fdf14b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0ae5955-5218-468d-a0f8-f5a2d2f91fc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17a789a-6eae-479e-acd6-3b1e5ba9c056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e47ce4d-a7bd-484c-bbc6-72e1888b97e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fecfd381-1471-441c-a091-38820d3fe081",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298a86bb-0b1f-4317-954b-32e55039f61e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8883cc77-f4e1-4278-b4a1-c65d9ddb70d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "776322aa-4892-47a4-9eb9-fb75e09612d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cfd9f1d-0ad5-42fe-a2b6-f84646bdd1eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3de3ed3-7406-477e-9282-bd5e34888e43",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9080c7a5-c9f9-4dce-aa82-688600b5135d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f30b868-939c-47ea-8668-860bfbbd1bc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc9626e-2ec4-4075-b8a4-4c86daba6a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4e987e3-0ad9-40eb-97b9-3c70645fb069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b76d4d76-e990-4f2e-a3ff-78b9635ed186",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7912310-09c8-4437-b003-ebacedc4ede7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb93c157-ab49-451a-be5e-f46ff7a124d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5b2c6f-fb3e-4892-82b4-8d8950f09888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d72dd9-448d-426e-9b50-b1eebadfb8b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65aca0f-0d39-467e-bb48-13b15c015ca1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3435ec8-7d3d-46c1-86c0-1e06b554940c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c657904f-e852-4f21-b34c-f2b78fc1df47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "272a7f7b-cf64-49fc-87e3-262214a4c978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd3ecf85-c22a-4546-9dcb-e36e25a0dfd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719c4b24-5fe7-40f4-95de-5cb08683c8f3",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e493f41-0d48-4653-b6af-5b5889a1fde7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "166e72da-befe-46af-985b-51795e02bba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82408341-73d8-4ed7-af23-8e911e116506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c7ebbf-92f2-4fe6-a607-1a34f383c6db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b258d10-d036-468f-ae73-36cd08c8ae93",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d426a1-f029-4137-9047-e0cc3487e9be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3116f999-e325-4721-93b9-2f652e132b46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac86c514-16b2-4aa6-a48f-bb74e772699c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504143e3-ba2a-436a-864f-a5906a7017f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8460ce93-253c-41d1-9d04-c40e9a661182",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b26c42-fc9d-4e41-8a95-371aba3ef9be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63ee8f3c-28bf-4e74-90a5-1eef593c3c29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed33a514-0e89-49b6-b08f-8e4a43029467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a05076e-43b9-438d-bf48-0e6bf11c8183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837a4e1c-80f5-44ba-9f72-32ce07ebb869",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a8f5f4-8cdf-4158-b68d-de2231cc11a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1787b93d-4c1b-44a2-82eb-c77d66f318a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8f8bf5-f60c-4305-b326-7895ed369a0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f462ae5-5418-42e4-85fe-95aeb59a91db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ee2722-1b6c-48c7-bdd0-cac3c76913b0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d05416d-c41f-44b4-90f7-cd76535bb347",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1127dbeb-e765-4699-b5ce-df526ecad9b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac1e2b9-d005-48e0-bb49-1b6f80049db1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baeca1e1-433d-47cd-bc44-c4d3a02f10a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27364b2c-48e1-41c1-80ee-5f1a6c751240",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7787f8-9953-4d66-9769-4aa246cd3419",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45aa8c52-a770-40d9-b97a-c6b84f768cfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d849eadf-6e8c-4b87-8735-b6cc96905639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c83f077-67b9-4c87-9189-8019267f7dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "313ef61a-3b9a-4c27-b69e-3a0a3fa1d15e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0845fc-17ce-4501-bdfc-5a97e3e9396f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8eb6c48e-b3f0-41c0-b2be-f6d6323587f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9a9443-ccad-4590-ba59-69cbe1608335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08466ec3-5a70-49ff-8636-6d6f2cf6a8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "134e6673-1d49-49fb-a728-da90003d542d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5795702-713f-4f25-8d1b-aa5c4a972ccc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c75a2073-4a7e-4043-b8dd-48473c2baa80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9301db9e-c933-433c-8961-9dfb399930ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa05b2c2-4045-494c-adce-ffeebf8cface"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4909b565-6dd6-4687-a7a2-2700c48844ab",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b0536f-79b8-4bdc-ba03-51be4145f8c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c75497e-1a18-426c-befe-26635bd8d77c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "391ddd05-b51f-483b-b4c4-4e21a109fafa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d293ede-d67e-495d-8826-e1ca3e951f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10355452-7500-458e-85e6-dc59e8216f0e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62da1778-126d-48e0-afc6-e9c92f4e7a9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "752c69a9-4c0d-4542-bacd-afcd59ce6284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a8d4a0-2fc8-4b15-a500-c5a6e193d82b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45117bf-dc3e-45f8-9820-8a56fa844475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efb08b4-673d-4d3f-8ffa-ece0736d8007",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da689d3-1dd4-4d77-960f-794cacddd49f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34c4976e-99ff-45f1-9314-cb0448df2ef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f5126b-35f7-4138-8b78-4390beb5cc00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63514902-c67f-4ba1-9303-a9d4fc8781cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e09e8953-0960-43a3-9578-e5c2b04c6294",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "513c562f-3011-47e9-8e30-de497daeeadb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59a7bd45-2e11-4708-b66b-ef1723e2686a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8900b9c6-bc6a-4e0e-8dde-46c517f334f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c0b36b-b028-44d7-b9f3-f5665d4fb91d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b81555-72c9-4fb4-ae12-60b0ccd19448",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a774f74-ab71-4ac9-9022-5fdc66346eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fefd3be-edf8-49f2-863b-808f192df7e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf90bf2a-1467-434f-839c-90fabf00d432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8309a0be-3923-42a8-8197-b8c404441939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e8093c-4ca5-4942-adaf-01b10aba3722",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c0bf6d-9d3c-4581-bc15-d2a3ed067479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04508a5e-3375-41f5-89ed-603199b5c317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9001097-16b8-4341-83db-6daf07687bce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0baa0e2b-044b-41d2-8a2f-19e93c7079e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bad5527-9973-47a9-b52d-927eeda684c1",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff43b071-da2d-42e1-b3c7-29f4d624dca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb14bff1-f06e-4b35-97d7-05cd809d4db4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ea0372-063c-4e62-adaa-99b8f432ccab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58258345-14e5-4de4-8f90-5f138daf16d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c769342-74ac-4118-ad1c-ccc19a079d4e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31afdfd4-1c87-405c-a20a-6e2dc0e2a5c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d80cc6d-7814-418c-b6f6-93d4b29e63cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4900060-9caf-414d-a11e-627ab49691ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40bd96b5-df8a-4b4d-801a-70a4a50ef9de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660be269-6bbf-4e38-8d2e-51dc0628d380",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0984ad2c-5fd3-4f37-9451-70cfc345c220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "145cd812-8125-439b-80f9-47858b88737d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddba87c-2bc2-4d1c-9b6e-b55314d047d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9da50c4a-d37b-4a0f-9cd8-dc5dd1a93885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37735c4-c31a-405b-9f92-00702a652a32",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87add3af-c04f-4c13-b568-cc9c6769f44a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c6cdce6-0190-4887-ae89-8aafcee6a80d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd2d41a-37e3-4f6b-b1ec-8e762bc66adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f4674f-24f4-4232-af7b-dc56a84f362b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6323ac1d-43d0-4787-ab2a-61f646103fb8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412b5bc8-3d07-40c2-bee0-b8e2e90b9976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d058964-7913-416a-9b3d-4f26ba36df39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2724387c-a5f7-4be8-8d4e-2b14876b3686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36bebd47-b1ea-4737-bd05-2ad31d942836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec5c0ff-894e-43f0-a86a-bfdbdf97bb79",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1440c9-4b1f-469c-8206-1fc0d1435949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5f4d8a7-26eb-4224-af5b-370416a4a042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d0669d6-eeba-4a6d-a75a-809470786dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e244392-bd59-45f2-8989-09a314c2c5c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7dc61f2-c584-48c3-90e0-91d3458d6bd8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855e3bae-27b5-4b90-a07d-b1695a54cedf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8930fa3e-67c3-4d93-8466-86e85d0d51ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7aecb0-8fa2-4127-9a81-a70a51b22c3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877db3c7-4f43-4b4b-a0fb-bd2222551aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652146b1-22f9-43f5-9ca3-e899bb0199e1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff565ca4-c008-4a4d-a33c-575eebd7fa4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b3de227-f333-40c5-8d96-b564a3dae4b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63232f57-9a09-4b31-a16f-c2dc64711ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a386029-6e47-47d7-bfe8-435f665142d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e74e2aa-3235-4232-9b14-8a4fb215ce27",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022d9475-de96-49d7-a29b-d920b426e8cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0604e03-f17a-4032-b76c-2faac216f049"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49636399-cc2f-44f9-b133-51f7c999f7a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80e6920f-87ab-47c2-8edf-a831cf8f8155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977e1dda-eaa4-4bac-aaf7-1e5873967304",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ae2ba1-ac36-4c89-8491-81ff3df03f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b830598b-157f-4082-8cf1-ac356114db11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4836022c-38c6-46e4-a12b-f528d6a6e486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5339aabf-4bfe-44d9-8d48-bc41dc7ef856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f0643fc-b77e-4573-b58b-8f75df6ee586",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d9f3ff-366f-439c-8bf3-5856541e78c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a800d2e3-8187-4ab4-804a-131597e06753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eefafde8-0f66-4ef9-85ed-35ead590a717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ecc90b4-e2ff-4939-8a74-8feb539eb91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b16a154-be47-40bf-80b6-7475ca37f6c3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81d72c2-e6d3-4ddc-acc9-edf042b88807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48be19e0-653f-4f6f-82fd-0ade1213bb24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec9a6418-3d4d-43c8-b474-8e8e93d9c15d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d4f6198-6a19-4043-819f-2eb550d716e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04168565-4453-4dda-ba1f-889a6d35de8c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb77ffc7-99fd-4538-8a51-859d4ea18015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e07aafea-ac9e-4214-ac19-811ec69a41e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c173627c-de58-44b2-9d5c-326c372d9585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f61415fc-6092-4566-b8bb-487cd96a5b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8038a9ec-4db7-4f11-bf6c-ae65172ed830",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2581d8ef-675b-4bd0-b159-e4a20557dc40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73ce51d-f3e0-4a43-921b-ecaf43fac5e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9516b9d3-cabc-4a48-9340-73c9c1669f20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "761d57ee-c1e9-4c45-9cc2-85aef5969f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d26f10-b24a-405d-b13f-6b8fe55bed56",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7962b3e5-1d5e-4931-bb97-97ee497ba539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69abc579-c90b-4e86-b54c-1846871b749d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1c78d2-d242-491f-bb6a-b3170f1a8d7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c9f7323-4bbb-4478-99ef-876a9a58bbd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b96cd0-5776-4d87-8d00-26f535ab6250",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c648da5d-646f-4c8e-93f1-18e1612da16a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db493f7-a356-4274-97a4-588bf332a4f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e84a4c7-662e-4d20-bbbd-3c81c6bcafc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24ff2a93-654b-484d-b662-bd87cd1e386c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f7740ad-7f8c-415f-983b-b88a64dc280f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a65923-a80b-4f84-a03f-bd9e58c7412f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed58b722-f992-4aa7-81f8-2cf64f65b648"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41950baf-8b12-40fb-8449-e2e6ff69a892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9b01576-3a41-40ff-8cea-f1a05892bc0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88cff5a0-eaa1-405f-95c2-bf08af7a9971",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a529a14-5981-40fd-94e1-7bd491762ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1baf5207-a83a-4777-9593-39b357b976af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4250677-de1c-4e9e-a692-9b6c8f202f4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f040f577-d173-4b44-8161-4d80f82fc58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb9e6aa-02ef-463f-9ef5-3b688e590579",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ac04d2-ae16-40fa-af98-db6b519bfd4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e667d87a-c068-47c3-9bc5-465e759fa551"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee98452d-a49a-4fd3-8414-3f5188d57bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ace6ca5-4d10-4fdb-b3e0-637bce3d7467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a58457f-2f12-48be-aa14-8c98b16facc2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb7efc7-10a7-4507-af26-aa2f2c30492c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e15a80cc-6d60-4022-97d6-3ad3f4616baf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e4aae3-6add-4537-bcd0-cf88b7490055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b3d6fa-dda7-4ae6-afd1-7c82bf1c6809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b3378c-111c-49b8-af1a-0963e3b09a9f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f788df85-2ebd-4ae1-936b-941bdf66f03a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9985d3bf-6e47-4444-bc6c-5aa37277510e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0d7673-6aa2-4291-bbfb-5d0b6cb0d722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502ac807-01c6-4582-af53-1b419ddc2759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aeaa5bd-17d6-4a7e-9b24-227ff74da638",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462857dd-1221-43b8-8989-8d06fe730006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f77dd1-fc34-4fee-b8d8-9b099f8e5141"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7894095d-fe58-4895-b6bc-cbc70b2df38d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a2a525-bd68-46e7-b6ec-c22d9e2a84ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c817046-36b6-48cb-a918-395dc6036e17",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38eaf90f-07b0-4fe8-bbd2-97c0b0f2f07b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1551eb9-a8ba-4846-815c-f2ca47484273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2156716-b79c-4702-a867-e1dd463da48e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d35efe0c-2eb0-41c4-8697-3e0f79fe582c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91b12a3-0a33-4ac3-a65d-672ef1f95edf",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ccc689-cc80-4457-9b4f-7b9584a97f8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f94d150-99cf-4b6d-b5ad-686635b6fb69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23995177-c8be-40a1-9d6f-3e80cec13b9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dd4bb6a-b47a-4030-932e-35aa8329386e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b549c8f1-77ec-4e1a-bb07-c39300cac44d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0cef7c1-b594-4709-8ab0-10632cdac4bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b60d751e-fa0c-4c44-85f1-fc502a9090ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1aff91-59a0-4072-be91-fac99b82b88f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "572070d8-5ae9-4084-813e-8f524a9e4d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc54396-c5a5-45c5-bf33-cc74f8f5d6bc",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bffb325e-0345-4e2a-9e2b-7a1769b557b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f2eb331-9ae8-4f5b-9510-b8033761f471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79e672a-a7da-4442-a066-639579408762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da38b499-76c5-4acf-bfa8-4f38c7a9dda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c328f019-ee6b-4eac-ba55-5d2c4d766596",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0b94a4-9b33-461f-86e6-a3eb7f3c6e19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e304233c-bf5d-4289-b9f0-198fa26e3b45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2b5c27-da62-47df-a84b-df42c0cf9064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7068e647-1cfb-4c96-9c4f-30a297cf53c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7f8af7-f436-431f-84a3-0a264038d485",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b624f26-5848-48ca-93dc-4fef99b99abe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36241e9d-c320-4a86-8f54-95ccb3624935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "962cc03f-c355-4d0b-bf9e-de10b19ae1f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e628641-03f1-4d40-97b4-fcc3df0e4274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fde02f0-ceb7-4c83-8841-2f557b80f91f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffad6f21-d0d1-4bea-804e-ff08c01dca00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a11b9c21-12e3-43bf-9630-5e7c84e6792c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "461995c1-68c1-4c8b-8257-9b996ef94c98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa6b2d12-8d5c-4c6e-86e7-682ffe48f24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "442bc4b9-2aab-4f50-b4b0-1a7a827263ab",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0138b99-cc80-4f13-a9ee-caff40799e00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c0b0aa8-7797-4b24-9b84-35714927a687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0f4215-b628-4c4c-9f45-94844cb7343b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf6b4ac7-864a-4fb4-9cbc-cd33334b4ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5a8ed3-5afc-4a6c-9555-38104a1df2f4",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac4047f-cac4-4279-b4bd-773221cab0ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24312d35-683a-43dd-8165-2a0c021e5683"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c714a1-6b6b-4e4f-9b27-fef992324c83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb4b8762-9d37-4071-aabe-b6cba9de193b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a60c2eb-d5bd-4049-b4c4-d23aee881ea8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ae7d72-52a5-407f-bb7f-2e0f228ca753",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8f2213e-5e6d-4da5-87c1-ebcf82a3513f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae8742b-7c5a-4ffc-9eda-e70c55383f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1966d2e-9eb2-495f-9518-36f353de478d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a05b2c2-9ced-4005-b9c0-89241cbb7927",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea4bbad-f4ee-4cd2-b6bc-b87c5931a59d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "647affbe-a44f-41a3-a033-642931bab723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ceb3d6-900f-48a5-9791-be461fb39fbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d2ee17-9644-448f-bf5d-898493a627d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe9e9ca-67b0-4466-a5d5-38f74176895b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003bbbcd-4067-4f48-82ae-b266433c2aae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9bd83aa-567a-49bf-8cf7-9d5996a2c037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be72de9-38b1-479d-bfc3-e5b9e69c8058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ff4c47b-99f9-41df-a668-0a153d4a799f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce86639e-169d-4dcc-98ed-e55d8a208a98",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60cbb2bc-e52c-4613-b0d6-5e4f4c46876a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43cbd732-1d94-4e99-a379-791909a9469d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8290d595-d50d-4dcb-9796-f90286313b82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15fa9a27-d7c5-46b2-a03d-ebde94adce7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7392436-1f39-4bd8-a5f9-ea1ab680c652",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7945feab-250d-447e-91c3-0b8b6a6a4bff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d45a657-da70-486e-935f-a11bc14e3472"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea5246a-0850-4b16-b25e-5f617877e4af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "327b561a-f2ac-40b9-ae3a-e883d9e0606c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b352771-20b8-403a-88ab-57dd88ed3f72",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10944e2-0f5b-4db3-a691-55c87b49c921",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81c5770a-e936-40f0-b591-e27104330c38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f400db-428d-48c8-b8d9-99cf9bcfae06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "533045a0-9d12-4f10-8896-7cf934f3db8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b937fae-2e4c-40f6-b1fc-5cdd5229eb81",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2391ec3-c9c2-4d45-96d8-e56acda0444f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08a03078-6b2d-46d4-9541-d75bb417a125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4390b92-dab0-4e57-b2c8-c755dffec6d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86a7f386-2886-4a20-85c3-abecccd9cc32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61b0609-c10d-47e8-b97e-cb7c8ea0e40c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d3dea4-9a1e-4837-8572-c54b4f67e35c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fdf6c00-4313-493e-b0e6-aa5a1af82a5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d82ad67-c754-414c-a67d-a71c5ff87acc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28194605-ef09-4af5-af37-f1cf392e3bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfaa1c4-122c-49fb-a02e-3ae51e3c262e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f0ef4a-a984-495d-a9fa-0e19db49094b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc2fb7cd-f563-491d-a111-b1bb243e9ba3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed13e672-699c-41b6-b1f4-372783ec4499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52831c74-9c2e-442f-98c3-0bb18721c0c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb5c45f8-a770-49a7-bfaf-9e0d9e74fe98",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2d9d60-a162-4542-812c-47721c88989d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a0bb6b4-e742-4029-bdd4-be6247a6f5f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a7d96d6-36c0-4b4c-ada3-3043fc305f2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c5992a-9504-4fc6-ba9b-01ff9303ac05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec6e327-f1fb-4cca-aefd-b46770487933",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b08646-f0a7-4df9-a76f-9557162fa818",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6323c57-ce33-4212-8628-45baada1e59d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "163716dd-e613-414c-8c65-7eb24e91da0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a5400ad-4424-47a6-ba9e-eea81f9d8c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4de8655-667d-4bfc-ba71-4ae97d4b777d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4dce1a-1983-4653-b13b-258fd8b3c84d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8023cf26-7d93-4bdc-9505-32dee291ff5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "175fb2ad-0e6e-40d8-a3c5-3572b1b1383b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3313dec6-48ad-4f01-9516-cf76c1d402a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50ac2c7-316e-47fb-9fcd-c577acdb7876",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f47246b-f702-440b-a897-1222c1cec2e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbe58330-8472-4336-bf4c-8e4754788a70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1621956-7cc4-4b28-a7c7-0ecb09e8f97f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc3a1b7f-ad35-4ad5-98ad-f7b448e5a095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebafe51-52eb-47ab-8c3e-615b5d0978a8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15d7fc29-4843-42a1-987c-2f97e3f8d97a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "544e8374-4d38-4026-a439-ca5a9580792e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1088844e-da3c-41f2-8228-02b4d76c3d32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61050211-9f13-4df5-a4c6-43ef6fd7f03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92bc3a8-9b95-4833-ba6f-9b28c1cfa662",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46e2771-8bbd-484f-a20d-3037c5383bb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97416f6b-a7b0-4381-8f17-af23f2619a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d014b496-38c1-4205-bd25-0d2f36bb4105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c93053ab-be5e-448d-8f57-45d682baeaca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c0f8f8-88eb-441d-be91-a4c21a4b0603",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55397e7b-aec8-471a-aff6-f6e1c71ce726",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de9c3b5f-13a5-4683-89e6-313f876361f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26778e7-0b04-42c3-8924-972171371eb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf10fda-dfe9-4fa2-a639-42c6aeedebc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13aa462d-c9c7-49e5-9590-3b6a916e87c9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43092e66-ae92-4bf4-ac10-b82f232e1727",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7012027d-8493-4e28-9938-68ca950d50af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de24349-af26-4f2b-9845-4e86774a5586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09df9fb4-c085-4328-a17b-13e024dde761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a8d67f-ef47-4e7b-b92e-2934efc47f42",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09573b39-9138-4c6e-97e2-3c5e2f7b5c0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed5dcb3e-003c-4c5b-8bae-ff7d7c28ce14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdfd4a06-3c6e-4093-b13a-691e6deae331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9923009-56ef-4073-b13a-6a2cb77a1501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255695c7-1be6-4a8f-a66c-f1fb6e3e92ac",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e313da-7cc4-405f-a5e4-af5fa04a9a91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b55ca282-fab2-464d-ad60-6fd63b38f7fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb42d590-110f-4c5c-9076-bc3e61561cab",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b2a5e80-6fdc-4cd7-a647-7521692d3b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42704806-3edb-4464-b182-e11b0f3e5d25",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cccc506-fcee-4d34-b7f1-81c11ef4e824",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab870b50-f05e-4070-b9dc-65bff2fcf896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef2d6a6-4b8f-492b-8b87-0a24769a82a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb425cb5-b5c3-4b91-87fe-21679a762461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fdfc356-6d28-486d-902e-43130f0a9931",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c92ca9d5-04b2-41c5-87be-be0dc46c0fd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1af26fb-bd66-49a2-bc1f-b05141d73f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb45cf1-8055-4091-ac4f-151866b83ba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e6a3110-50ad-4427-924f-bdb5bca451e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c4e39d-d5ae-4e11-a79f-168f4b59b7dc",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28609896-2ba9-4adf-a066-b2aeb32cf8c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2fe918a-0c32-482c-b127-f5c58891ba4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33adeeb8-18bf-464f-a170-b553a3f1467c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93a65364-0af9-4488-af2f-5ffdb10bcf8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a51925-3cbc-4b46-a974-299ef720ed34",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46da868-7753-4ef6-98c8-2256e857e47f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15d2e752-57fd-4071-8507-69fa2d18a6c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9428397f-adb9-45f9-ae48-4252b36d7f3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12abacca-a91e-44fe-88ef-c8ce978ccab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6e4bab-e75c-4f49-86d8-3327fd6503c6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313e54c5-7355-43a1-a15a-b57c5d7c5e0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f460bbbf-6f1c-4711-b8df-e16f91d54c98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa1635c-09d3-4ad7-95aa-d9f574afaf57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fbf4725-87ee-4b1f-9ab0-5b3e76186cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44af2488-28fb-4d27-9aaa-8052c0e8872f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2594e365-f409-4625-b93d-cc2cded49017",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1546865e-0325-4266-ac06-b7ec5fc1f32e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a8661d-5f71-4fb8-bbbb-45625c5fb17d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22cc6016-3195-4659-8192-99fdf4e884dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c26ba27-8e80-473c-a777-691eaf228855",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb9b9bf4-555e-4650-bc6d-29ac05acc241",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f698e09-33d7-4686-aa1d-b7101bbfc3ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "293ffa2f-b0de-4869-b7bc-a855fbcea94a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbcda81a-d3ef-4c39-9015-23882f8a382d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a9b77df-d24b-42c9-a9b9-60ef6b187844",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a613bda2-db3d-4d58-bcb4-9b59ea0e8440"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e1d3c54-4959-451a-a8c7-57152d4296b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0827a821-4deb-4ca4-9d71-9b01c48e7052"
                    }
                  }
                ]
              },
              {
                "id": "28c51867-4592-4d63-8d45-6989a90ec760",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7e9e4fce-1fa1-45a3-82cf-a18c4d55ce64",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1914390-a1d2-4ca8-9578-2f093f4d8fb1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "883a533a-d38d-4f33-ab36-691c56cba28f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1369b22-c300-4599-b845-b2cc60c087be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4660c779-3dc6-428c-a0c9-8424aad7088d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bee3873d-e1c3-42ff-b0ba-4f6cffa84e0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "178bb4b1-94eb-480b-886a-8eb08b40bd77"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "01b524ab-58ba-4b1a-9b05-8f81dd8125f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "009cfa39-3a93-493c-9190-b9d73d5aaca0"
                    }
                  }
                ]
              },
              {
                "id": "d55cd45e-1ba0-4c95-b0c5-5794a317d869",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6899637a-2493-49bf-aac3-26c48128e43d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56c4ca2-bbbc-4a36-a89c-073a7287a63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d4155e41-c845-46db-b7b1-3e74d3839af4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363b73ee-462f-4fe0-bd1d-bd1a3cf2ef2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44e90249-2bea-4108-ab10-35ab46514d2f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e0e25098-393e-425b-b9d2-7f617ceff7f2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "197ce2c1-fb06-4788-b8f8-e43a6726f1da",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "96ca6c18-1c0c-4339-9d60-c14f03444d86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9433f44c-3da0-4806-a6d9-5d2f167ad6be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8dd99017-c9d2-4d21-9741-62475ce6cdae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f22b7faf-a366-4c50-8b54-b97322d2ce47"
                    }
                  }
                ]
              },
              {
                "id": "90c9589d-0ffe-4f5a-8bdc-0f5e3991c55d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be1b6c29-bb42-4d62-ac70-2e8a942bff3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6248f1c7-7f26-4623-ba65-e4fe1c9df276"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec384f1c-f455-44e2-9cd9-95f66a35060d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7caf55e-d69a-4226-b72c-2186066ff89c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c7d7ae9-4d4e-4ea5-8eb8-4f62e2c07598",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5b214a77-763a-4ecf-828e-3692cce69d83"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "075de4cc-2e14-4180-be6e-c2e1179a6433",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e75e9461-c8eb-440a-a85f-f62fdf62c1cf"
            }
          }
        ]
      },
      {
        "id": "aac5bad7-ec02-47f8-96a6-0ae0e58e3367",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f21e57bd-3fc5-48da-a3e2-d259afe39049",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c57e37b8-a7b4-4352-ad2b-c73568c477bb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5d5d892c-bdca-4086-8118-65f2f747649c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb14b4b-6109-44f5-857c-f5a21c822f60",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "68483673-ad40-43f9-8068-14dd8a126dbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f5b4d8-d890-4103-ac41-3029aa447b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1792866a-3bcd-4232-a4ca-2878e0aedd2e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d83c0bd9-196e-482a-8c23-442d0244a8c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03fd1222-e04a-466f-b340-c5860ed615e1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "22ad179f-cf09-4aec-85b0-dca093a7163d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81c8a2fb-0bff-460c-8b41-3a1662947893"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "65ee01af-158f-4276-8aca-415127b58dd8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e08abff3-895f-452a-b4b7-cd0ef5bc34aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13d0e14a-eed5-45e7-97b2-a95a506b16de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b947c67a-7c2b-4e59-bd5b-a85585093a6b"
            }
          }
        ]
      },
      {
        "id": "d0fdea17-2dc3-41e5-8da1-42aa047adc14",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b87a4140-f7ac-4593-9709-bee1033db46d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c1cd63b-fca8-452f-961d-27bbb49b2c0d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f0faf358-1640-46ab-8947-d0bb23b4a8f6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581158ae-b415-4238-a991-37609091d691",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12502ae0-67aa-48a8-b2ce-3826d5723a1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f9453a-59b8-4f58-b405-c41d6d92bb79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3000d2f-179e-47a8-b919-53f4237feae6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2f7f110-f5b6-431e-a325-05a41bb30f7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c95b2350-21ea-466f-8a07-18d84853d791"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc83f826-e5f5-41aa-be7b-f7bd13c6929d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58394af9-ae1e-42b1-a9e3-b41ac1732871"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b7c909c-f394-4aa5-abae-0968c4bb6044",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "873c89ed-d58d-43e1-a62e-45ddba54722c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "135ee5c5-fcbc-48bf-976e-1e8450be40ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "06d79d80-c6fd-438a-8132-800cf051ecb8"
            }
          }
        ]
      },
      {
        "id": "53480d5d-c35c-4238-adef-58c922920794",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "839b97e9-ba4e-4fb8-ad9f-fb18f4985cab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1d92b118-2ab3-487f-a8cd-c1d000d678b6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0e0f7292-62cc-4fe8-84bb-e8aa14e0be96",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b70e1f-b300-4351-865f-18ce0e030792",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3d734a9-3ae3-47ef-baf7-1859324d45d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7993e986-b503-42a1-ae91-7239a0f9ad7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0787a319-880d-4e79-9acc-e29a0cafccea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa960bae-184d-48f3-ab9b-f28225b2f599",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43645e91-fa58-420b-b02f-abf8bc3d5272"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e4c890d-ea3b-4d4e-99eb-cd5ea14b74b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1edd1933-474a-4e3a-bb54-bd59e6240dcd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b93cd0f-8de1-4460-b21b-4954343a1b78",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "69e00e91-4a12-479d-a2d6-750510a7bce3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e5f93236-9794-45b5-b6e0-d9fa8caf1d8d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3d7c378d-5866-46fc-9983-dd8aea21847f"
            }
          }
        ]
      },
      {
        "id": "8f52a770-919c-470f-bd57-d9d9ed24ba45",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d7e885c-2752-4d64-815f-6d00ef647a0d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cefd325b-1a99-43c5-9f54-db0dc7d14f81",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6b703c7c-6ff5-4906-a168-7e3594dd6345",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0032e31-a051-484c-a89c-d08a8ee26eae",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f6f9b19-cb5c-4d99-a9eb-c1e368170167",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 68.00701754385967,
      "responseMin": 10,
      "responseMax": 513,
      "responseSd": 75.5679776691138,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1703291632890,
      "completed": 1703291661595
    },
    "executions": [
      {
        "id": "025e81c0-c4af-4d3e-b926-640130326280",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "deb9db45-4c7f-4388-a846-93ee12efb27d",
          "httpRequestId": "2c67b33d-b720-41e8-bc7c-17e021219df0"
        },
        "item": {
          "id": "025e81c0-c4af-4d3e-b926-640130326280",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a9724033-1f54-4001-b47e-c2f0a8e626e3",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "ec3e3776-b869-4204-8d19-7b3df95f2c98",
        "cursor": {
          "ref": "422a383c-e0da-41a9-b289-89d7926d7693",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4e874245-ff5c-4daf-b259-92010ee4ff88"
        },
        "item": {
          "id": "ec3e3776-b869-4204-8d19-7b3df95f2c98",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "44d11ed6-b0e0-4573-bb91-ffe0797d7736",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "269d9462-caa7-4805-9a52-8fd43a32ec79",
        "cursor": {
          "ref": "b0844ee3-f0ce-41a5-85a8-19625c296788",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a07341af-10e6-4f11-9c2b-0f2d9602ea1d"
        },
        "item": {
          "id": "269d9462-caa7-4805-9a52-8fd43a32ec79",
          "name": "did_json"
        },
        "response": {
          "id": "4a825d0e-6dbc-4192-9e1a-7f7db6293fda",
          "status": "OK",
          "code": 200,
          "responseTime": 420,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b58133c-ec47-432a-8c0c-6b6f95ef8fbc",
        "cursor": {
          "ref": "cfdce50c-e1a2-43f3-a105-0c0e2845b6fd",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "17df15bb-acf1-460e-81ab-e4ed5a101e15"
        },
        "item": {
          "id": "3b58133c-ec47-432a-8c0c-6b6f95ef8fbc",
          "name": "did:invalid"
        },
        "response": {
          "id": "43163138-d1d7-4807-a85f-5b39febcf75b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b58133c-ec47-432a-8c0c-6b6f95ef8fbc",
        "cursor": {
          "ref": "cfdce50c-e1a2-43f3-a105-0c0e2845b6fd",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "17df15bb-acf1-460e-81ab-e4ed5a101e15"
        },
        "item": {
          "id": "3b58133c-ec47-432a-8c0c-6b6f95ef8fbc",
          "name": "did:invalid"
        },
        "response": {
          "id": "43163138-d1d7-4807-a85f-5b39febcf75b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371ae677-b32d-4bf5-8c61-58e4f2169a24",
        "cursor": {
          "ref": "eefa0244-614f-4cf9-a2b6-5b3b85f70907",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "44af82a0-0856-49e0-ba33-d4a71af94ea3"
        },
        "item": {
          "id": "371ae677-b32d-4bf5-8c61-58e4f2169a24",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f0210049-5329-49f6-8a43-af48a19b7d28",
          "status": "Not Found",
          "code": 404,
          "responseTime": 162,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255c5757-7f9d-4f05-83f9-eae26a71704f",
        "cursor": {
          "ref": "36025f22-6551-4396-9870-3052c4ffc725",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bb81a09a-c93a-4f1a-9caf-96abb20a4472"
        },
        "item": {
          "id": "255c5757-7f9d-4f05-83f9-eae26a71704f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0abf0ff1-f10f-46fa-b56d-cd8b7ea73c27",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab6334a-8f64-4dd9-b61f-f6a4967dd4be",
        "cursor": {
          "ref": "05b7c80b-d584-4ccd-b26a-dfe54a74a2af",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ffa286c4-2534-466f-9ad9-1922538a7fbd"
        },
        "item": {
          "id": "fab6334a-8f64-4dd9-b61f-f6a4967dd4be",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "63cf1b74-1ef6-40fa-91f9-9dce6a2e0d4a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9646417a-c361-4ece-a50d-4c9617010e21",
        "cursor": {
          "ref": "1f2cce75-c1e2-4d94-ba83-1370924c0962",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0d3debf5-a566-4529-b609-b3281ff289ce"
        },
        "item": {
          "id": "9646417a-c361-4ece-a50d-4c9617010e21",
          "name": "identifiers"
        },
        "response": {
          "id": "a2fda2fc-efb2-48a7-8739-8407f2adacfd",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905546f7-1e0c-483f-b671-ddd5a5751fcc",
        "cursor": {
          "ref": "19decbca-3890-4f52-8d1a-2c9ace1eb46b",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "bd3f5ebf-8433-4b08-8a9c-9cb52e739521"
        },
        "item": {
          "id": "905546f7-1e0c-483f-b671-ddd5a5751fcc",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6f5896c1-b502-453d-868e-d422f879e871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f29dbc-6017-48f6-af49-fc487df9fc1d",
        "cursor": {
          "ref": "d91beb20-7b6c-4692-83fe-b73c8d066f73",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "512d0a69-7d3b-42ee-9d01-d937d32ae26d"
        },
        "item": {
          "id": "a8f29dbc-6017-48f6-af49-fc487df9fc1d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4c92baad-13af-4f74-9727-e71a0c61b0ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21418548-ac0b-4670-9407-3225f80a385a",
        "cursor": {
          "ref": "e8ff0faa-2e41-40e9-bddd-fac4fd67d582",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "54913612-4c4c-436b-ba7b-520281f620e6"
        },
        "item": {
          "id": "21418548-ac0b-4670-9407-3225f80a385a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1ccb0728-e521-419b-819d-3f062337c71d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec36e6df-5350-43c9-aee2-1eb1a7908306",
        "cursor": {
          "ref": "c29f4d02-9f8a-4a69-8486-1d8a62390c91",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3677b737-798e-4135-baba-a9bd0594de8c"
        },
        "item": {
          "id": "ec36e6df-5350-43c9-aee2-1eb1a7908306",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "67468d54-1c4c-499e-a3bb-6e0bcefbf2ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e6bee8-b4b1-4a33-a593-6a7653dd14f7",
        "cursor": {
          "ref": "08b09865-0609-44c0-8e13-4efcee6033b0",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "de3fafdb-5733-4b69-a6b3-65931f9c970b"
        },
        "item": {
          "id": "21e6bee8-b4b1-4a33-a593-6a7653dd14f7",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0e3c7d69-489a-439d-842e-df9e8fd29f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5a4c0a-08ba-46a7-a56f-7d552f491f59",
        "cursor": {
          "ref": "dbd13244-9da1-4933-b90b-b419b15840bb",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e208f41b-b4d7-4cb3-b109-11581b029791"
        },
        "item": {
          "id": "7c5a4c0a-08ba-46a7-a56f-7d552f491f59",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3ab20526-bffc-42ba-8fbb-9516041260d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5542cfc6-dcbf-454f-bd88-93d608b5f7d8",
        "cursor": {
          "ref": "206e0d83-730e-479d-bd10-60b0b7363024",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c402d4f3-9719-4166-9def-cddc799261a4"
        },
        "item": {
          "id": "5542cfc6-dcbf-454f-bd88-93d608b5f7d8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "98be2428-12be-4796-b263-6537edaa5f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f0a4d2a-cd31-43aa-9e6c-4761c472a99b",
        "cursor": {
          "ref": "6df0d058-9ddc-4d9c-9737-eccfd2fd4936",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d4d4354d-fb49-40ea-bc30-0a9e67d78945"
        },
        "item": {
          "id": "2f0a4d2a-cd31-43aa-9e6c-4761c472a99b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "fc263032-60ff-4d15-ae82-f512b4a716df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c156b5a6-112f-40e5-8561-b66bd788fa29",
        "cursor": {
          "ref": "01c0a666-9cf2-4b56-a5c9-9e9fa2b775a8",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8018eb46-127e-4481-8feb-e4be6c966012"
        },
        "item": {
          "id": "c156b5a6-112f-40e5-8561-b66bd788fa29",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "9c7034bf-33fc-4171-80e7-abe6dfbba60b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11119802-50f1-4cd5-97eb-8f916e3b3992",
        "cursor": {
          "ref": "3152b770-6bac-4f6b-b655-eea4a3d9af00",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9406d67b-575b-4bb2-94fb-37ad4f20a32f"
        },
        "item": {
          "id": "11119802-50f1-4cd5-97eb-8f916e3b3992",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3458682b-d81f-4fb2-b875-23a73827e542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895b6d64-d4e5-4179-be4b-cfa26562f661",
        "cursor": {
          "ref": "83c92aab-cdf5-41cb-a684-54a736034f9c",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2b6578b4-e97a-4364-a183-0f779cb7449d"
        },
        "item": {
          "id": "895b6d64-d4e5-4179-be4b-cfa26562f661",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "977f7d38-e0b0-4cf2-baa3-9dfd096d7d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2686971-eef5-4a44-ab93-1e7d30e5d673",
        "cursor": {
          "ref": "bf30cd95-9a0d-428b-94c4-bd0159f85eba",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b0951ef5-287d-4f3a-b8a9-33db3d1e840b"
        },
        "item": {
          "id": "a2686971-eef5-4a44-ab93-1e7d30e5d673",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "67019b14-35f6-49ed-898d-9e0bdcb1938f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1cc7abc-c5b6-4055-aba6-301d5e6eaebe",
        "cursor": {
          "ref": "e77d4ee4-28fe-496f-aa2d-f8c399765064",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "fb4baae5-ed67-4029-87a5-f7f6b9c3391b"
        },
        "item": {
          "id": "f1cc7abc-c5b6-4055-aba6-301d5e6eaebe",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "feb2d9b0-c544-4680-bc2c-e17e9779084c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27c731a-557a-4b5f-8c57-a0e53757e8f1",
        "cursor": {
          "ref": "a2f14907-95cc-46c9-a39d-ba686150b97c",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bd76c28d-c9c5-4003-b41c-2d648de9e72c"
        },
        "item": {
          "id": "c27c731a-557a-4b5f-8c57-a0e53757e8f1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "44cdb234-5f67-4e83-8a73-6022cb6deed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc43c59-a171-4a5e-afdf-5fd5eefb9d27",
        "cursor": {
          "ref": "b7c3ecb1-9c4e-46f3-bcb3-4ebb79b0b318",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6e63b285-a074-4be7-bdfe-556ec892dd89"
        },
        "item": {
          "id": "8fc43c59-a171-4a5e-afdf-5fd5eefb9d27",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "834adedc-0cf0-46b1-8558-524e68456947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32a557d-5bce-4212-86f5-437b3cba7c8c",
        "cursor": {
          "ref": "50dbf0ca-f681-48e5-87fc-51d65f795069",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f6dcd89e-2bb9-4940-be42-4ca89c3ebbd2"
        },
        "item": {
          "id": "f32a557d-5bce-4212-86f5-437b3cba7c8c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "73699457-25a3-4348-b608-4fc4b4fa96e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0115762-10ed-451f-8f3d-bbe35a6e3c4b",
        "cursor": {
          "ref": "8c0a7eef-a8d5-4a6e-980d-81fd785b43d0",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "15134400-31ac-402c-af93-0f15c96404ba"
        },
        "item": {
          "id": "d0115762-10ed-451f-8f3d-bbe35a6e3c4b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "33e55c90-dc32-4aa0-8a19-a166f483dbf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0771ace-e17d-4948-96bb-b344bf7f5f9d",
        "cursor": {
          "ref": "febf535a-4882-4279-a562-ef01b43a6684",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ae0c0aa7-97e1-4531-b828-b7d94cf9a354"
        },
        "item": {
          "id": "c0771ace-e17d-4948-96bb-b344bf7f5f9d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "dbbb6839-2018-4904-bfde-641c269b0741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0c2ca0-c8b9-4681-82e6-4fabd47deb6d",
        "cursor": {
          "ref": "6ac59064-f4db-4900-9ef6-0931ef6c9b0f",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "be61c427-f414-4a4f-8520-493297ff31c2"
        },
        "item": {
          "id": "7c0c2ca0-c8b9-4681-82e6-4fabd47deb6d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "da646db5-a590-4b0e-86e6-3e3f709d4180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "441186be-c760-41be-b45f-b90403fcf0a8",
        "cursor": {
          "ref": "8de4131f-2b6d-46a8-a580-02374c6795f8",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6dee3b9e-1527-4187-9cec-63769c04c292"
        },
        "item": {
          "id": "441186be-c760-41be-b45f-b90403fcf0a8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "617292fe-68b2-43f6-83e1-0e244bf179d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a195210d-8d94-4151-92a0-e2a53055d556",
        "cursor": {
          "ref": "4141b383-8ce8-41ae-8441-cef656f87813",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2438c9dd-64dd-4808-b877-3a17bcc4d20e"
        },
        "item": {
          "id": "a195210d-8d94-4151-92a0-e2a53055d556",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2c21fd6b-1df6-49f6-a34b-47cf11385a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22ae1c0-11cf-40bd-af3b-9f0401652e7e",
        "cursor": {
          "ref": "87aa1a98-8a23-4442-a8fd-074ffa88cb1b",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4cc22c07-04d7-48f4-b0ef-a5be8994672b"
        },
        "item": {
          "id": "e22ae1c0-11cf-40bd-af3b-9f0401652e7e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f923efbd-6c83-452b-91bb-196730467829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8ba96b-676f-44b7-bc29-efed260b828b",
        "cursor": {
          "ref": "3c13bb54-e222-4fd3-8e12-5179f8442897",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bbb46eb2-aa76-4346-9eed-314c938e0c0a"
        },
        "item": {
          "id": "6f8ba96b-676f-44b7-bc29-efed260b828b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e1f2413a-2a34-48b0-8ca4-f676825c75be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad79dc12-7bf1-4af5-84f1-5147de07d4ad",
        "cursor": {
          "ref": "261c25e2-a0c6-4b2f-b37c-9b891b52d997",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fa5ec536-3ee1-48af-a86b-bc8f6ce9ebb4"
        },
        "item": {
          "id": "ad79dc12-7bf1-4af5-84f1-5147de07d4ad",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6ee00055-4b02-435e-a584-d27b9c90c86c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee7e35a-74fd-4355-8236-2a1ab972bd62",
        "cursor": {
          "ref": "abe6412a-4ad0-4465-8961-2c0db465a4a0",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ff003f4f-3a4d-4abd-826d-98010ba305e5"
        },
        "item": {
          "id": "eee7e35a-74fd-4355-8236-2a1ab972bd62",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1a7f2f43-0494-4b10-82a6-23f639d5618d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4ffa06-fb3d-4e1a-9858-3b9636281a42",
        "cursor": {
          "ref": "1f8b4e42-f659-499e-b756-307c41b32734",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "18ea92b1-b4cf-4cb3-a6b9-da96c216759a"
        },
        "item": {
          "id": "af4ffa06-fb3d-4e1a-9858-3b9636281a42",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "18b7da40-b434-4c67-80a9-35eb1e4abca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b65f71-fe35-4d0b-b78e-9aa5de23b6c2",
        "cursor": {
          "ref": "931aaeaa-c631-439c-bc00-12f5c1a8a783",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1593ebe7-e425-4f51-921d-612763859db6"
        },
        "item": {
          "id": "95b65f71-fe35-4d0b-b78e-9aa5de23b6c2",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b9842a7b-0e6a-4fef-bb83-ef71dfcbcee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f22fd45f-2466-46c4-b17e-9390b50145c7",
        "cursor": {
          "ref": "b67b421d-0f36-4819-b556-55f187a24696",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "83d4e246-44a8-42a3-849c-b0223c2d6bb4"
        },
        "item": {
          "id": "f22fd45f-2466-46c4-b17e-9390b50145c7",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f66695a3-f974-480a-b179-0edcf7088406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dd95ebd-db49-49f3-893e-5b9a45283717",
        "cursor": {
          "ref": "a1f31e92-18eb-4c23-8501-66bb6e96d236",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2a72800d-1afd-4b9b-92db-c5f62c87942f"
        },
        "item": {
          "id": "1dd95ebd-db49-49f3-893e-5b9a45283717",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "5ae68cce-7fb5-44fa-8466-0a3239f5b4ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d51decd-b2a8-4664-9f27-ff5447af7f39",
        "cursor": {
          "ref": "9643d307-5da8-478c-9bfe-32f32e6d74f1",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4d27d68d-2a07-41fd-8cd8-c243527486a4"
        },
        "item": {
          "id": "5d51decd-b2a8-4664-9f27-ff5447af7f39",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "48502957-0f5d-47d0-8454-01b715d93388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b50f0352-136a-4d82-b5b0-419384f47237",
        "cursor": {
          "ref": "2ba2e468-2cca-4055-868c-46f3d8d4ec7f",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e85ad9ad-da0d-4d56-a8bc-784d93cbc2e4"
        },
        "item": {
          "id": "b50f0352-136a-4d82-b5b0-419384f47237",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0a0d311c-2f80-49f8-8dca-4476d9754c03",
          "status": "Created",
          "code": 201,
          "responseTime": 513,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "07042337-5a7f-49f1-b1e9-b5460ed1d55d",
        "cursor": {
          "ref": "fe46782b-ccf5-4285-b34b-872b74399cef",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "86decec2-80d7-408f-a99e-8b0c5113c8bf"
        },
        "item": {
          "id": "07042337-5a7f-49f1-b1e9-b5460ed1d55d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5ca10662-eae2-4aba-bf47-5bd0ce423309",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "62396e70-16da-4718-9642-a3881f4eb93e",
        "cursor": {
          "ref": "f06b646d-1bd8-4229-9c23-bb74dc7e9fd4",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e915702f-c948-48b5-b4e2-7a00da8288c2"
        },
        "item": {
          "id": "62396e70-16da-4718-9642-a3881f4eb93e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1ab5536c-b398-4f13-9556-2e2bc5450a9e",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "fcf942ea-4d64-4ada-ad70-1d8d67441471",
        "cursor": {
          "ref": "56625eac-b884-45a0-b419-8935618d9309",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2eb6d071-b9ce-498f-8a6f-27e8d76c6f49"
        },
        "item": {
          "id": "fcf942ea-4d64-4ada-ad70-1d8d67441471",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5060cab2-b82a-42f8-9098-9cd29efface3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab29e77f-0714-4c5e-9649-205afd751185",
        "cursor": {
          "ref": "7b52f3a1-992d-4d23-8a24-d99ffda0111a",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "209f36ae-5bf6-458c-baf9-373ef2fd0843"
        },
        "item": {
          "id": "ab29e77f-0714-4c5e-9649-205afd751185",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9135c3fd-5428-47db-98b0-7fc5b45262f3",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8a273caf-cdf6-451a-8487-9561dbe1bed2",
        "cursor": {
          "ref": "b008a4ef-967b-4ba5-b034-f7e0dc791ac0",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d6043a53-3645-4e4d-bf7e-dfed59f52759"
        },
        "item": {
          "id": "8a273caf-cdf6-451a-8487-9561dbe1bed2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "16ddab40-026d-4e14-bc06-b252362da92e",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b6eac697-747e-4291-9df8-d5cf8846eb14",
        "cursor": {
          "ref": "ed626760-0f38-42c6-b63e-0ca1d7184c8c",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d472d114-cf08-4acf-8c1e-48442a5ae0b0"
        },
        "item": {
          "id": "b6eac697-747e-4291-9df8-d5cf8846eb14",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0591a4a3-6e6b-4737-a227-5b9aa3e6bb31",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0d2cc25e-ed7e-4b9f-929d-ec5c32f5233d",
        "cursor": {
          "ref": "90c9d68b-5606-4891-aaea-59c53ca29420",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "fc1652ef-05c6-4f7c-8580-97aaaca81cfd"
        },
        "item": {
          "id": "0d2cc25e-ed7e-4b9f-929d-ec5c32f5233d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7dae43e8-9909-4794-8758-06227375245e",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8c20995e-d625-4ea8-8e19-797609bc642d",
        "cursor": {
          "ref": "31f74360-3db7-4ee8-94d4-d3da55fa8372",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "821425c3-54d0-434a-b2ac-915e1bc36267"
        },
        "item": {
          "id": "8c20995e-d625-4ea8-8e19-797609bc642d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d2d801f8-ccec-4d8c-90d3-1e7d40de7231",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "5a152bb9-5ba3-4d56-8705-1b5b5cd7e80d",
        "cursor": {
          "ref": "cc4c52d0-66eb-490f-808a-a25ebee2b8ad",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ebc90ecf-a34f-463a-a7bc-7de64254237e"
        },
        "item": {
          "id": "5a152bb9-5ba3-4d56-8705-1b5b5cd7e80d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "89c6b9bd-a071-4506-b44e-5bdb1fab9c6e",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7cb0c8eb-f7ea-4910-b1db-40ca15d80922",
        "cursor": {
          "ref": "7896182d-41b5-4d60-a84f-ab53503d9254",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f9ed3b23-1d2b-45cf-a0b4-405be301866e"
        },
        "item": {
          "id": "7cb0c8eb-f7ea-4910-b1db-40ca15d80922",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "069b06e4-6866-4a1e-b5d2-882a9d18b859",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "3a1f72bf-b708-4056-8040-d3868ed7b4f3",
        "cursor": {
          "ref": "aa21a569-dae3-4e17-b6e7-29d54ab4fb25",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f141f142-b722-4e2e-b24c-25721a037dbc"
        },
        "item": {
          "id": "3a1f72bf-b708-4056-8040-d3868ed7b4f3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c95a4b2d-578f-4b08-b21f-68f1940c33e0",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "eca2b57c-a407-4bf6-9658-01dee93de249",
        "cursor": {
          "ref": "42ba98a5-f7d8-406d-a152-8d60cb3f5958",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1f6668a4-1c87-4f25-82f3-7ebd11cde2ca"
        },
        "item": {
          "id": "eca2b57c-a407-4bf6-9658-01dee93de249",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "90bd8f9b-2d5e-4e40-bd17-66211f70e133",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9b625a73-5733-4600-bdeb-3c4cc1557593",
        "cursor": {
          "ref": "4318b3ca-01f0-47b0-9d03-be4517ec23ae",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "310bb56c-11ea-419a-89f3-ae546d8c8ff2"
        },
        "item": {
          "id": "9b625a73-5733-4600-bdeb-3c4cc1557593",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8dad8987-575d-45f4-b758-b9f1489862e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8decdca-9e19-4d15-be2d-692fc936a731",
        "cursor": {
          "ref": "035df1c7-1447-4a2a-9928-1855d485ca79",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5bfabf00-e414-406c-9f21-f79335d629e1"
        },
        "item": {
          "id": "c8decdca-9e19-4d15-be2d-692fc936a731",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "747b263b-6dd8-4f14-bc47-7d4f1cf23ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce14314-1e8e-48ce-a507-44e17374e841",
        "cursor": {
          "ref": "43c3d7dd-7b04-48dd-8e01-cbf008daaea7",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "77554bf7-0c67-4d1f-b0e9-edff6a5514e6"
        },
        "item": {
          "id": "0ce14314-1e8e-48ce-a507-44e17374e841",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8d7df02d-99c4-4967-bf31-1bb5c7a147c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc6d7e0-ffca-4458-8911-544725fe1fd3",
        "cursor": {
          "ref": "0f4b5f46-57ef-47ae-a2ec-1e7af9c1fe77",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "25e5b670-51a1-4f5b-ae03-2368737529d1"
        },
        "item": {
          "id": "6bc6d7e0-ffca-4458-8911-544725fe1fd3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c8897ac6-02c2-4fd5-82ba-90360ffbb4cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444462d6-3e62-4ba1-ad47-ca214002b672",
        "cursor": {
          "ref": "acef1191-75e5-49bf-b7e4-e6834235c864",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e24f7248-61b7-43b8-8310-717ef5a86825"
        },
        "item": {
          "id": "444462d6-3e62-4ba1-ad47-ca214002b672",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5abdf606-d837-4f33-8b05-74c22085ff1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57580fb0-b4eb-49fb-bc44-ab61857173be",
        "cursor": {
          "ref": "74605f77-b3e6-481f-85fd-9bb813e2690c",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b93d7578-78f2-4cb8-af8f-ed0be575ba65"
        },
        "item": {
          "id": "57580fb0-b4eb-49fb-bc44-ab61857173be",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "21cefafa-4c38-4eca-ac80-769b1000d2b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f91d82b-b611-4339-9a02-ecfcfb003257",
        "cursor": {
          "ref": "cbb9a6c7-b4ab-4ff3-8877-c23113e781e2",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3e5ba214-032f-426e-b177-1cf4ffde2e6e"
        },
        "item": {
          "id": "7f91d82b-b611-4339-9a02-ecfcfb003257",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8c6822a2-206a-4586-89de-26ff35003044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f48041-b0a5-4a07-b551-fa4e5b96af4a",
        "cursor": {
          "ref": "f49381a6-e884-4a53-bdda-4e6de4f23bac",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5194ba42-ce1c-4490-a4c9-fd9ec756dbf1"
        },
        "item": {
          "id": "14f48041-b0a5-4a07-b551-fa4e5b96af4a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "20eb095a-efcf-4116-8886-4c971342b054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0eaf83-c23d-4c8c-82f7-667c308ce015",
        "cursor": {
          "ref": "4e908371-b54e-4b36-9bd1-13eaa4d9cb48",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "002e9b15-b7d5-41e4-8830-cab4b531cc6f"
        },
        "item": {
          "id": "2d0eaf83-c23d-4c8c-82f7-667c308ce015",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ef781c21-2109-47e2-aa35-10a61b834763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91cc353a-3572-463e-9808-d90098960599",
        "cursor": {
          "ref": "3325346f-9874-4f2b-9d30-4d89e3269d7c",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2472c14a-cf2c-4ab6-a9c2-1fc753931f0a"
        },
        "item": {
          "id": "91cc353a-3572-463e-9808-d90098960599",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "388ecef4-4938-49c9-bbac-26f70cbb78d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9909a08b-541e-4120-9252-7c709d28dd4f",
        "cursor": {
          "ref": "13d0f51d-65d7-4268-9e47-2e324971ec40",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "04336c0b-b69b-41a0-9254-e5d7f5f44a23"
        },
        "item": {
          "id": "9909a08b-541e-4120-9252-7c709d28dd4f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d7e1b9ff-6607-403c-add0-eb7431911033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a276e6-c5bf-4a7f-b5a4-bbc3309cf311",
        "cursor": {
          "ref": "6a86b88d-254f-47f2-8c74-ca9f24268f01",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a178b957-3495-4a23-b283-8bfdc01d08cd"
        },
        "item": {
          "id": "68a276e6-c5bf-4a7f-b5a4-bbc3309cf311",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "09b5f187-04c9-4b6d-89d7-0f3ae50939c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32fbbe92-fc59-4c80-bade-a0e4342f5a4a",
        "cursor": {
          "ref": "f0e13bf1-b268-49ff-aefe-7918dcc1ea15",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2cca036f-2169-42ff-bcb6-391bae9fb73b"
        },
        "item": {
          "id": "32fbbe92-fc59-4c80-bade-a0e4342f5a4a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "edc3f8ae-d908-4ff4-9221-4175db57b389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226f1915-265c-4a54-90b3-ed06346dbd7b",
        "cursor": {
          "ref": "8d5f5bf4-f78f-4590-b014-3b842ca050ff",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1f241e2d-7c89-496b-b519-834f82e1fa03"
        },
        "item": {
          "id": "226f1915-265c-4a54-90b3-ed06346dbd7b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "278b51c3-c976-4104-adf6-17a9fc6cdcd5",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "b068464d-edf4-4385-89d6-c0ce6678a596",
        "cursor": {
          "ref": "f4860953-2913-4e71-ab74-413100a253f9",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bf6b6a2e-1aba-41bb-b79e-9cc4bc683b33"
        },
        "item": {
          "id": "b068464d-edf4-4385-89d6-c0ce6678a596",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fee39669-c97d-4cf9-80ec-79495d4567a1",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "8c30cd13-3047-4568-ab39-c89b1b1a2590",
        "cursor": {
          "ref": "a3e1ec59-ab4f-4ba1-844f-a7aea05b390b",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "eee07153-4674-4b18-9032-99bf7f9b8a17"
        },
        "item": {
          "id": "8c30cd13-3047-4568-ab39-c89b1b1a2590",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fc29529d-6988-4315-967e-52a318cb3d34",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "36b56c2d-1626-48ea-a8a1-bc72a31933e0",
        "cursor": {
          "ref": "132a3d73-23b1-4c26-8444-4cbeabd72110",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9e9733cf-a668-4d12-97d8-f1320ff62a1a"
        },
        "item": {
          "id": "36b56c2d-1626-48ea-a8a1-bc72a31933e0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a1a168d0-fcac-4721-a683-35042634ba84",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "9b826b79-eff7-40c0-a360-4fc40776f302",
        "cursor": {
          "ref": "973e9393-d42b-4f9c-84e6-c456c2639c00",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "32181810-1928-4434-978a-949c7c2ebc37"
        },
        "item": {
          "id": "9b826b79-eff7-40c0-a360-4fc40776f302",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9239551c-2b14-4749-8688-fd1c92a79057",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "9d1338ee-830f-4aba-a64f-9fb72532285b",
        "cursor": {
          "ref": "81210430-3a8f-4741-a2bb-649d55e3e2f7",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "68751d69-e40d-432e-901a-f9f48068a43b"
        },
        "item": {
          "id": "9d1338ee-830f-4aba-a64f-9fb72532285b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "88060179-3ddf-497a-b7c6-49af852a6a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731d4789-50b1-449d-9bdd-13eed3f79ad6",
        "cursor": {
          "ref": "b61688e1-c0b0-40bb-a0b1-8f872667f25c",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7c9bffff-180e-4cd5-9108-99c3addb1750"
        },
        "item": {
          "id": "731d4789-50b1-449d-9bdd-13eed3f79ad6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "466d8b8d-7e46-4ac4-9889-2775b8a37d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd8362ba-2cf6-4c89-81e0-4db92d618687",
        "cursor": {
          "ref": "3cc477a5-90e4-4a2b-8db2-a5691ae068fb",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2e946cc3-ff53-42fd-93ad-a95906439e9f"
        },
        "item": {
          "id": "bd8362ba-2cf6-4c89-81e0-4db92d618687",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ea9ba7af-729c-47dc-bcd6-783d8514632f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dfd95df-8106-47af-aa55-496911ac2091",
        "cursor": {
          "ref": "804c295f-a46e-43e1-a809-c8211a123090",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "76c2412e-3ff7-4308-bb4e-1f004f45976a"
        },
        "item": {
          "id": "5dfd95df-8106-47af-aa55-496911ac2091",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d2cf76c3-c14b-491b-96e2-9176dc49f83f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297638ae-37bb-4d3d-ba15-277e1972b0f1",
        "cursor": {
          "ref": "ac36ee92-64ce-419a-8ce2-275c0e82f3eb",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d3033e2a-7c2e-4f45-9452-fa927d09cefb"
        },
        "item": {
          "id": "297638ae-37bb-4d3d-ba15-277e1972b0f1",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "417e3c12-3778-4890-9c64-f48899d1adae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b15a59-88c4-49d1-8af3-b614f9c28e3d",
        "cursor": {
          "ref": "a6f84eb5-2839-40c6-9af3-a2a59adcec60",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ed550fa1-2064-41f7-97a3-c89fdf405e84"
        },
        "item": {
          "id": "f0b15a59-88c4-49d1-8af3-b614f9c28e3d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8fb5b236-e2fa-4755-aa39-09db093bb9fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf6d542-42b7-469f-92c1-dc90ff7cd2f8",
        "cursor": {
          "ref": "3bfcde10-e2ec-4884-b34c-cc3c66c04dd3",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0fcecbce-2d7b-4780-8cae-2cda41d37227"
        },
        "item": {
          "id": "cbf6d542-42b7-469f-92c1-dc90ff7cd2f8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ad31dd55-d24e-4c23-b27d-dff424b3515b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25d4968-cd68-433b-8e50-8a7f60945b32",
        "cursor": {
          "ref": "388beb9d-69b8-4220-bb96-b524d699fe7a",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b3538649-cae5-4dba-98e4-a3f7d7f7ba90"
        },
        "item": {
          "id": "e25d4968-cd68-433b-8e50-8a7f60945b32",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "78aeeebc-b012-4bad-8352-36f2d7166243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3888bd4c-7058-4df2-bc5d-ab7ce5f3d615",
        "cursor": {
          "ref": "3b941de3-c989-418e-bb82-0c9e2cff741d",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "59834b70-ef45-4915-bd98-048af4f72939"
        },
        "item": {
          "id": "3888bd4c-7058-4df2-bc5d-ab7ce5f3d615",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4e82fda7-5828-4ba6-a77d-928cb241b1a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f9e367-2846-40e8-b272-8b44fa2f53ad",
        "cursor": {
          "ref": "d56106f1-f14b-4c72-8dfa-39d63846876e",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a4dd82c3-2bb6-4a63-9038-6d0db498b3cc"
        },
        "item": {
          "id": "48f9e367-2846-40e8-b272-8b44fa2f53ad",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "425fc148-f36d-4817-aaca-cde3e19573d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cf1a5b1-4c96-4f4c-a435-205ab30d76be",
        "cursor": {
          "ref": "fd8ee349-c7f0-4aef-8667-28987b606d67",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d1b2dd3a-1f93-4a39-b944-5af37f175ca2"
        },
        "item": {
          "id": "0cf1a5b1-4c96-4f4c-a435-205ab30d76be",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2ffa9db4-2e37-42ed-9251-37e8d5017d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6e9390-b423-4d6e-93ae-91e1ea8c8121",
        "cursor": {
          "ref": "54e47518-2a96-4b0a-b343-e0ee9fcd1deb",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3f215509-e457-438a-8e84-6d3ffd92d5c8"
        },
        "item": {
          "id": "ba6e9390-b423-4d6e-93ae-91e1ea8c8121",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7bc90d37-ba89-4002-bf82-5057cceec8ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "635b4098-3810-4424-8caa-64064b580b66",
        "cursor": {
          "ref": "fa27571a-0207-4715-bd3c-a6595bb58185",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c230afdd-548d-4be3-b949-002e6e146c7e"
        },
        "item": {
          "id": "635b4098-3810-4424-8caa-64064b580b66",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "28301b9e-97fc-40a2-973d-8f56f8a1b09a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7518607-569f-4bb1-b2c4-3aad44f0336f",
        "cursor": {
          "ref": "d7842e6c-d73a-4fab-abdd-9d575afd809b",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ccf24dd6-b5e8-45dc-a04d-b66bac802b43"
        },
        "item": {
          "id": "b7518607-569f-4bb1-b2c4-3aad44f0336f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0a249c37-7342-4bd2-a1f5-7a4a3471e5c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee185b9c-febf-4c6a-980f-a074447ef031",
        "cursor": {
          "ref": "d1732516-3870-4825-ab5f-5e8179c9928b",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "81b03f61-a151-423a-bb21-0a35e81d5b40"
        },
        "item": {
          "id": "ee185b9c-febf-4c6a-980f-a074447ef031",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ea72b94e-53d3-424f-8b3d-a6ea677d59db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a96e9c-e00e-4f7e-a8b3-ac17f1286594",
        "cursor": {
          "ref": "0370d6f7-b140-47fe-a96c-8a753b831d3b",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1ac14a20-3ae3-49a1-ba2f-e491000e6ebc"
        },
        "item": {
          "id": "91a96e9c-e00e-4f7e-a8b3-ac17f1286594",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4e97e0a5-4d01-419c-82d5-c523ef86108b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14de1d9-dae3-486f-b29b-e40e8eb2f344",
        "cursor": {
          "ref": "c4823ce6-cf0d-43db-972f-b149852c2e7c",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "10f9fe27-73dc-49c2-9f52-a2ae4995620f"
        },
        "item": {
          "id": "a14de1d9-dae3-486f-b29b-e40e8eb2f344",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "49c0d790-884c-4f42-9070-7c696fbd1287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc6418f0-e80a-4997-836b-f7eddc96e386",
        "cursor": {
          "ref": "8752d5bf-0597-4270-9ac8-06170711dc72",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6229b98c-36c1-447e-9a33-888ddca7ee58"
        },
        "item": {
          "id": "bc6418f0-e80a-4997-836b-f7eddc96e386",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d37e3a2f-fc4e-42a8-8aab-010b9c213b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aabab881-66d1-43a4-9358-c483c08e0113",
        "cursor": {
          "ref": "33547158-6a3b-4888-b4a6-1c947fe32266",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "76fa725a-4c99-4694-8dce-e29ce5763ee2"
        },
        "item": {
          "id": "aabab881-66d1-43a4-9358-c483c08e0113",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7a1869d9-9742-4d8d-9e87-82b4b30ab6f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a90cd1d-ad70-4f97-96ec-885d325a314d",
        "cursor": {
          "ref": "b499dc7c-43be-4c2f-83ac-7c107d33b803",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "2945a82c-7f25-48bd-9462-d24b7b8d8c9e"
        },
        "item": {
          "id": "5a90cd1d-ad70-4f97-96ec-885d325a314d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "edbe1b54-93f8-40a2-930a-c0044cea8c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "282bbcbc-86e3-4fd9-b53e-7ff38fdbf146",
        "cursor": {
          "ref": "8d1ffda2-c90c-4e12-a980-083c611efa40",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d623567d-389e-4ba8-b5a9-d157f0bf3341"
        },
        "item": {
          "id": "282bbcbc-86e3-4fd9-b53e-7ff38fdbf146",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7ad85957-c74c-4ee7-9e9e-4925227951c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176d1f01-c8d3-49f3-8acd-63fbbdc24ee8",
        "cursor": {
          "ref": "d58f272b-6d51-4222-92e4-7138d9b65d0b",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "55ba0c21-2a72-427a-960c-565317867f67"
        },
        "item": {
          "id": "176d1f01-c8d3-49f3-8acd-63fbbdc24ee8",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d0ebff39-29c2-4823-9e43-7273df8e0032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a4ee106-87ad-43fd-98ea-058868003d55",
        "cursor": {
          "ref": "62ed9639-07ad-4140-a2b5-30f1b8af3668",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "35b7adde-33a4-4d5e-bec9-f9bd328dd741"
        },
        "item": {
          "id": "3a4ee106-87ad-43fd-98ea-058868003d55",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "add1de4a-c399-427c-97d4-277ddb95f0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a78337f-caa7-46b9-b108-888d35ee08b8",
        "cursor": {
          "ref": "5ee55a2f-b436-4811-a5d5-2a419c5a4be1",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ab62b711-88c1-4b51-be3f-04a3a76e76c4"
        },
        "item": {
          "id": "8a78337f-caa7-46b9-b108-888d35ee08b8",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a7afe2d6-962d-42c6-b355-41ad458ff771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92fdd928-6d44-4f47-8610-e38ee1275684",
        "cursor": {
          "ref": "f1b3d85a-8ce6-4cb4-9181-897c82222bd1",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9910f6ec-5909-4421-9bd2-4217cbc88108"
        },
        "item": {
          "id": "92fdd928-6d44-4f47-8610-e38ee1275684",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "adb86c0f-8d4d-4f50-9540-aef3309fe09e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab8ba263-a1ce-45a8-b932-8cbc49deea41",
        "cursor": {
          "ref": "1d513bbf-104b-4d20-bb19-53d7be47721d",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "12713d86-3344-472a-beed-4dcace061eea"
        },
        "item": {
          "id": "ab8ba263-a1ce-45a8-b932-8cbc49deea41",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5612f320-f476-4849-be09-423d0f454747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148cfb65-656d-41bd-8c66-0a8c1946c57c",
        "cursor": {
          "ref": "e88f74f6-293a-41be-9db1-4eef99757998",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0c613b37-e935-4813-9a37-0d333096aa72"
        },
        "item": {
          "id": "148cfb65-656d-41bd-8c66-0a8c1946c57c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "65dbb1a3-bbf0-4382-9a49-b2c200ff7209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43ebd5b-cdb3-4cc1-b7b1-8fee315464ae",
        "cursor": {
          "ref": "defbb738-0fc4-49c8-87ba-bded76eef918",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b4e84c9d-c0e5-4413-9263-f79a97488dd5"
        },
        "item": {
          "id": "e43ebd5b-cdb3-4cc1-b7b1-8fee315464ae",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "339c57c3-d12a-4cf9-88c7-8f5c6628730e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca305e4c-99fb-4c20-88df-c1ecbcaebb56",
        "cursor": {
          "ref": "800bb082-4931-4552-94e5-3b30592327f1",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "afa3314d-fdd0-4e19-ad00-41e1aa97535b"
        },
        "item": {
          "id": "ca305e4c-99fb-4c20-88df-c1ecbcaebb56",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6cf785fd-fe50-41f2-a972-8463544e5fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63b4a0a-984f-4d5e-9214-40e66bc5251d",
        "cursor": {
          "ref": "2df151e0-10aa-414b-8868-a88be95bc2fb",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d9f0b494-31fc-4f05-9715-b89a8af9fb4e"
        },
        "item": {
          "id": "d63b4a0a-984f-4d5e-9214-40e66bc5251d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8e5c34e1-310d-4dc9-82b4-a2dc51c80a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7dc1ab9-c0e4-4624-8a21-012f6b1a43e7",
        "cursor": {
          "ref": "0413323c-59af-41fc-9bea-6c0643d6ceed",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c44ffe60-1f6a-4071-89f6-706efdea7b11"
        },
        "item": {
          "id": "b7dc1ab9-c0e4-4624-8a21-012f6b1a43e7",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0b048a60-4459-4a51-81b3-e663b9b0e10a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97a3d6c9-aba4-47a4-a25d-e96015e07893",
        "cursor": {
          "ref": "147d050b-20e7-4918-9f57-093aabdeffd5",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "37c8f7b3-3491-4070-9431-f5aadb1ba066"
        },
        "item": {
          "id": "97a3d6c9-aba4-47a4-a25d-e96015e07893",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ac2ac7b4-c409-4c91-9fbc-3e6c7ac41ffc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f4bd61-c2b3-4901-abcd-408831fdd9b7",
        "cursor": {
          "ref": "68834052-675d-43bd-9e22-61d22f5e43ef",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e1e2f66f-f105-45ed-8b0c-1ff9004243e3"
        },
        "item": {
          "id": "21f4bd61-c2b3-4901-abcd-408831fdd9b7",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "e5a30fc8-640f-4b60-83b8-b80e0072da94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c7c1d617-99a4-4f3d-ab55-e9b1239febc2",
        "cursor": {
          "ref": "dec177bd-e0d0-4eb1-82bf-54fbdbd0faca",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0f2b5b2d-4ec4-43dc-8be1-81e1a69df4ee"
        },
        "item": {
          "id": "c7c1d617-99a4-4f3d-ab55-e9b1239febc2",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d10184bb-ae93-4bd8-bfb9-30fb7ca53f76",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d24d47-54e4-43a0-bb31-ecc6fbfb2fad",
        "cursor": {
          "ref": "14b66090-c85a-421e-a1da-677fa95be010",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "103c6f8e-93f8-40e4-8114-9d5d6180016a"
        },
        "item": {
          "id": "e4d24d47-54e4-43a0-bb31-ecc6fbfb2fad",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "45614c3e-7d26-4cb2-aa22-fd3a82bd5b6a",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8f0106-2e31-42bd-a5d3-f245ccc6b99b",
        "cursor": {
          "ref": "5719965f-ee5b-45c1-ae78-7c4a10d04246",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5e48060f-e6b8-4cb7-a8e2-5b04af72ab59"
        },
        "item": {
          "id": "8a8f0106-2e31-42bd-a5d3-f245ccc6b99b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c3ea6e42-6ac0-46f6-bbe7-03b157940bd6",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0485932b-c750-4129-93d5-cd26d62c8947",
        "cursor": {
          "ref": "e123b575-86d9-4853-9c73-4ee5a8f654dc",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "62b72522-7b62-4c52-b60d-61b6870802ee"
        },
        "item": {
          "id": "0485932b-c750-4129-93d5-cd26d62c8947",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9e6cb181-bbdc-42f5-92ca-da68fd934d80",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c083b8d7-ad84-4c84-8f1f-675a7fb62baa",
        "cursor": {
          "ref": "0567838a-2566-47e6-bbf4-a3f1a5cdf58b",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d0b810f4-7b1d-4c13-835e-8a4d533bd849"
        },
        "item": {
          "id": "c083b8d7-ad84-4c84-8f1f-675a7fb62baa",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "58ada929-51dc-47ef-8705-d6f2a9f90979",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-23T00:34:07.237Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-23T00:34:07.237Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "2b709c3e-e3ea-4eed-bd5e-347e7289550c",
        "cursor": {
          "ref": "e954ec48-8906-4953-8940-230e62ee645e",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9f88a893-e673-430a-8f53-3089819cf90f"
        },
        "item": {
          "id": "2b709c3e-e3ea-4eed-bd5e-347e7289550c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ec57a5f5-17e8-4151-90c1-5b3a1b766c30",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db2c3002-097b-4b49-afe3-4b89768d7d4a",
        "cursor": {
          "ref": "a6185431-061b-4811-96f0-069481cebbd1",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "89da5317-e0e5-45f4-b881-68469709557a"
        },
        "item": {
          "id": "db2c3002-097b-4b49-afe3-4b89768d7d4a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "dd60344a-bd7d-4a27-8e9b-764928ab4ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f8cb94-352f-4569-a16a-39086f8a60c2",
        "cursor": {
          "ref": "3e40d6f6-70dc-49c9-82a7-14d9bb5723a0",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "aba70e3f-d33c-4292-b16f-ddc7130a700e"
        },
        "item": {
          "id": "78f8cb94-352f-4569-a16a-39086f8a60c2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6f226111-cf15-4023-b445-290fba28b354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a9069e-2c95-49b8-8b20-d87bd3cf22a7",
        "cursor": {
          "ref": "8de1a6d1-e9a3-471d-9703-31853806325b",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "32cd2b16-de24-40de-bdcf-a504958457f7"
        },
        "item": {
          "id": "24a9069e-2c95-49b8-8b20-d87bd3cf22a7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "05dcf2f6-1888-492a-a922-a071b83bc6c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02cee26-3451-46bb-aa76-f7a52937bbbf",
        "cursor": {
          "ref": "1d40fe30-302f-4f06-a8c9-f5c17df3cb75",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9ef5a81f-cd8c-4627-9095-4b2d4ca06915"
        },
        "item": {
          "id": "b02cee26-3451-46bb-aa76-f7a52937bbbf",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ab2bf0fd-8983-4307-9536-32be19370100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910ec468-a93a-431a-b167-c3783c8a216f",
        "cursor": {
          "ref": "fd0980ff-4da2-477a-a4dd-fff798913ded",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b3e99bfd-1425-4da3-8b7c-f122132a6e2d"
        },
        "item": {
          "id": "910ec468-a93a-431a-b167-c3783c8a216f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3593b3f4-5ac0-458d-8f35-72bf0eab931c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25aad7b1-8c30-4627-b785-851b6b3eced9",
        "cursor": {
          "ref": "893f4938-8e8e-436b-bd5b-1d5190b7a6a1",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c888c95a-d43d-4c9c-a065-e2f410a725e0"
        },
        "item": {
          "id": "25aad7b1-8c30-4627-b785-851b6b3eced9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "112efce7-395d-4ac7-85dd-77bcfbbde71f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "517f66d3-1cde-4942-87b4-6864e8a318f2",
        "cursor": {
          "ref": "97c955ba-b9e2-443a-8c32-bda873e5c297",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "aac35de7-d287-427d-8e28-ce93dca929d6"
        },
        "item": {
          "id": "517f66d3-1cde-4942-87b4-6864e8a318f2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "dd861123-d19b-4452-bfd3-0a394e5bd9f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2efe87-c27e-4161-885f-f8a97774a82a",
        "cursor": {
          "ref": "6e41162e-c27e-47f5-a3cd-7f231cd81c0a",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "329274b6-9fd7-4768-93f2-f63c8c78454f"
        },
        "item": {
          "id": "2c2efe87-c27e-4161-885f-f8a97774a82a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "39b63d54-dec8-46b6-ba85-5e814aa11743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d91e28d6-8859-4bb5-a1c8-0ae5385d4f89",
        "cursor": {
          "ref": "2065d559-7d39-4a0d-9c90-899b749e92b4",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3659b886-9590-47c7-a37a-dc758f700af3"
        },
        "item": {
          "id": "d91e28d6-8859-4bb5-a1c8-0ae5385d4f89",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7c1643b4-b2e7-46aa-b5fd-e6d23614fb74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89a1585-f138-4ce7-ac70-ed2e2a54ca62",
        "cursor": {
          "ref": "57a9b33a-dd06-4ae0-b0e0-579f5067166a",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "53f6e030-a78c-4d99-ba42-8d94cc5b2384"
        },
        "item": {
          "id": "b89a1585-f138-4ce7-ac70-ed2e2a54ca62",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fa86d73e-e746-47ce-8630-770fb488e121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43997789-bf48-4f34-b818-3c3a576ac400",
        "cursor": {
          "ref": "812f7903-d2cc-4980-a6cd-217c995a02ad",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "05e5dafa-2470-4e51-831d-f25d107128da"
        },
        "item": {
          "id": "43997789-bf48-4f34-b818-3c3a576ac400",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6e33d983-4282-408e-ae60-61eafca3ba1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5113559-ed8c-41a5-b24f-24a194e25724",
        "cursor": {
          "ref": "5da65a7c-900c-48c0-8c55-019f6a533293",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6c1a0489-283d-4819-b75e-8e33f14d8479"
        },
        "item": {
          "id": "c5113559-ed8c-41a5-b24f-24a194e25724",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7073f340-9715-429c-8f33-4c4fe8addf32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6524e0-6be6-432b-aa12-dd129fe0ebc0",
        "cursor": {
          "ref": "61b72700-5900-4b68-9c93-4f5bfdf7e329",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7c016b50-0522-4b23-a255-e030ee1d4cd9"
        },
        "item": {
          "id": "7b6524e0-6be6-432b-aa12-dd129fe0ebc0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ff25a614-37ba-4759-ab7f-a398bd7ae960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f85344-615c-418d-942e-5cead723e7e9",
        "cursor": {
          "ref": "c2a59450-47f7-4864-8ff2-50550bab1f72",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3d0df58e-ef5c-43ae-859c-3a2c51c3d0fd"
        },
        "item": {
          "id": "15f85344-615c-418d-942e-5cead723e7e9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a973c942-a22a-4486-969e-4b801a8d89ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fdce506-0a0f-4589-bce9-9214ae438012",
        "cursor": {
          "ref": "18d90810-8137-43d9-863b-42ed7c0b6621",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "bfd0aca7-639a-4290-8c95-da24add7ac7b"
        },
        "item": {
          "id": "3fdce506-0a0f-4589-bce9-9214ae438012",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ed93911f-1be8-491b-a9f4-4f65cca0532a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaef4093-3111-43f5-9307-c039b9f91729",
        "cursor": {
          "ref": "b9d29330-4a44-4f91-bad9-a16a95b58150",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e3703d42-e098-4232-80c3-f7a8028dfcbd"
        },
        "item": {
          "id": "eaef4093-3111-43f5-9307-c039b9f91729",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5c6faccd-ac21-4ba0-958b-d4ac0221855f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee250c9e-80d7-4d45-af3e-b42acbc77164",
        "cursor": {
          "ref": "617de7d6-c437-4883-b512-b04260bf7ac1",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "30dbb0c3-6a5d-4492-822b-2290369a05fd"
        },
        "item": {
          "id": "ee250c9e-80d7-4d45-af3e-b42acbc77164",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c76ac918-aa10-43ce-b5e4-beb00120ff65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a43bc48d-59e3-49fc-89b1-cc4f4c5b02af",
        "cursor": {
          "ref": "5a1dbf70-1840-4e4e-9cab-28e140738293",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "af245e92-75f6-4b03-b58d-5d3d4e5be672"
        },
        "item": {
          "id": "a43bc48d-59e3-49fc-89b1-cc4f4c5b02af",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ec0cab1e-d06a-47a1-8fa1-70896d5a1ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04867999-e381-4653-a23a-767cab2b3fa5",
        "cursor": {
          "ref": "39f344dd-42ed-407b-9072-c363590318b5",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "99c6a94b-f032-4541-a542-a308ebf92c07"
        },
        "item": {
          "id": "04867999-e381-4653-a23a-767cab2b3fa5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "19bc8116-c4ab-40b2-9452-c17dff2958de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670a6674-7ec3-4c01-9f23-92f570d7bfb7",
        "cursor": {
          "ref": "93850827-f89b-40d2-9c91-e3ca51ce7cbf",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c7e7cee6-ece5-4f68-8352-5bb4259c25a2"
        },
        "item": {
          "id": "670a6674-7ec3-4c01-9f23-92f570d7bfb7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "383c4a8f-57e7-4c7c-b5ed-15e9e3422f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30277ce8-7c74-476e-a7dc-f3e071e5cd3e",
        "cursor": {
          "ref": "1822587e-5efc-477c-95c2-7c490bc0f469",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b12ab0be-be17-49e6-ba47-a927e92f0f24"
        },
        "item": {
          "id": "30277ce8-7c74-476e-a7dc-f3e071e5cd3e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6b8cc21d-beb8-46f7-b92f-e2e6314e5788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b9ee08-f322-445d-9220-f4a49da1a65c",
        "cursor": {
          "ref": "118e5c1b-2a14-4f6a-b15d-856563793b17",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "24075d63-890c-4629-ad1c-f5f2f47335f6"
        },
        "item": {
          "id": "d9b9ee08-f322-445d-9220-f4a49da1a65c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "64f96cce-b392-4682-8ce0-3dcb445626eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57536202-4465-43ef-972c-254f032e1a35",
        "cursor": {
          "ref": "ccf18cea-0b4c-46cb-8829-9184d4464b8a",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "34b5330b-8b03-409a-aafd-f006344edae8"
        },
        "item": {
          "id": "57536202-4465-43ef-972c-254f032e1a35",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1f4ffc94-00e4-4574-bac6-b32fa5aff3b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c59c07-c78c-4367-bb88-d8c15f2e5b26",
        "cursor": {
          "ref": "e160677f-a704-43ee-a1d9-a04635ab9f75",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "fb62925f-d539-4309-bb7f-fac538db1468"
        },
        "item": {
          "id": "68c59c07-c78c-4367-bb88-d8c15f2e5b26",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a1f06b98-86ae-44cb-87fc-27cb897a4d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b86639-a2ca-4584-b9e9-f3bb72938c28",
        "cursor": {
          "ref": "67acfaff-79d8-4034-ba2b-0fccd0fbdc3f",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2ea4efe0-b894-4ae7-ad24-dea93890a8d1"
        },
        "item": {
          "id": "57b86639-a2ca-4584-b9e9-f3bb72938c28",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2ada75c3-3807-4d7a-823f-8a836b8deb7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "450d6cad-9bd1-48ee-bbcf-bd8a0136d4cc",
        "cursor": {
          "ref": "0181bb5b-ec41-4f41-9a90-90c36d9bbdba",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a25be197-ab29-40ca-8b1f-c32bc3267847"
        },
        "item": {
          "id": "450d6cad-9bd1-48ee-bbcf-bd8a0136d4cc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ef9bbced-a750-455c-9286-e2e585c95ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db7d1726-da2f-415c-aa56-fb1cbbe9e4c3",
        "cursor": {
          "ref": "23eaf7a2-9e83-4bc1-a616-2d1536976a34",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2e652848-9601-4b5a-82c3-be5382deacfc"
        },
        "item": {
          "id": "db7d1726-da2f-415c-aa56-fb1cbbe9e4c3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d7c14372-e18c-4812-9d7f-9bb4797249ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adde02c1-61ab-4c8a-9801-4cf575804eed",
        "cursor": {
          "ref": "a16e62af-c3e5-4e00-84a6-0bd4f573c89a",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8f06add6-061c-4ad8-be1c-e451ba682fc8"
        },
        "item": {
          "id": "adde02c1-61ab-4c8a-9801-4cf575804eed",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "baa81d93-9f9b-4b16-8bde-6cbbaea2cc06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbb40a8-cb9b-488b-86a3-e10cc3e0cb95",
        "cursor": {
          "ref": "d3dc22ad-2b57-4dbd-bc37-de2bc5ca19d7",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c0d0afbd-f1f7-4cb5-9c32-ba3db4cf2068"
        },
        "item": {
          "id": "8cbb40a8-cb9b-488b-86a3-e10cc3e0cb95",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "59a10514-540a-44a7-ad2f-5a7432f2a89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7fa9af-3043-4498-8d47-f67a73b18b82",
        "cursor": {
          "ref": "951a80c8-c3db-4610-a354-700665f8dc43",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b4a42918-e590-4384-abaf-a338b3cbb75e"
        },
        "item": {
          "id": "1b7fa9af-3043-4498-8d47-f67a73b18b82",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e3cf8448-4206-407f-b3d8-a5b4a415e62b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4a1acf-5fb7-4d7e-acec-3eb067cda060",
        "cursor": {
          "ref": "fc3aca85-5224-4baf-bc3a-05e9ef378888",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "116b2c6f-1b9b-4289-83b7-65c6809ca5c9"
        },
        "item": {
          "id": "9f4a1acf-5fb7-4d7e-acec-3eb067cda060",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ed74815a-538b-4f3d-9e99-cd965ed1dfa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00743432-5332-40ff-a397-5a770a9cca32",
        "cursor": {
          "ref": "89ecb4d1-1937-4f76-aaba-17d7073e31a6",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "91e9cbb5-ba63-4d61-96ba-9c25b227cf6d"
        },
        "item": {
          "id": "00743432-5332-40ff-a397-5a770a9cca32",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9cee7d75-e370-4f12-8e20-0fb3f4b6647f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54c5871-3334-4860-9315-10bea1e9b386",
        "cursor": {
          "ref": "4d608998-2d68-4fb7-8273-16ec112d963b",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0fb97155-db1e-4351-95fd-30315b3992b3"
        },
        "item": {
          "id": "d54c5871-3334-4860-9315-10bea1e9b386",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "77153acf-b6ef-4d90-9b07-99461aae91f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0a00f9-8f5f-4856-ae24-0ee791106cb5",
        "cursor": {
          "ref": "cd04446c-17fc-4e5f-a820-c42e2972ece4",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ceca96f2-4698-493c-85c8-08abf84ca1ea"
        },
        "item": {
          "id": "9e0a00f9-8f5f-4856-ae24-0ee791106cb5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f597d341-fd01-4164-bd64-1919851f8d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf41348-c804-415e-8c76-b892e0d2e671",
        "cursor": {
          "ref": "0ce30198-5bc1-4335-bee0-e7bdb3d8ce23",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7c30ce2d-58ba-42e6-b58e-ba478d8e3caf"
        },
        "item": {
          "id": "6cf41348-c804-415e-8c76-b892e0d2e671",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "29ae6737-3ba4-45fd-9f0f-c3710c7e8e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf632fa2-ae24-45c9-bcd0-36d5f7d57e32",
        "cursor": {
          "ref": "c0dded54-41f3-43ff-8185-906e97acb0c1",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "205d6c7f-c941-4af0-9903-22a962a23271"
        },
        "item": {
          "id": "cf632fa2-ae24-45c9-bcd0-36d5f7d57e32",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9002becc-d04e-425e-8b80-143f33a7bfaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "700c8672-a537-4a60-ac12-d70d69e122e8",
        "cursor": {
          "ref": "42b1dd36-bf3a-491f-a577-3b009c774146",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "67ebdcf6-4d15-4f07-9256-4e6a12f8383b"
        },
        "item": {
          "id": "700c8672-a537-4a60-ac12-d70d69e122e8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "937b6eac-e500-461a-b88f-f17b482ac59e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c33aa6-7827-4975-84ca-ea776f20bd17",
        "cursor": {
          "ref": "2be1995f-1b23-464c-bd3a-b73e0f7ce7c2",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "69038580-9a53-4457-b82e-bf26debd371b"
        },
        "item": {
          "id": "97c33aa6-7827-4975-84ca-ea776f20bd17",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6db36f9c-e98f-42b0-a3a4-dbd9f3eaa00c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8353adab-f2a7-465c-9bda-6aed323d015d",
        "cursor": {
          "ref": "0568716a-a956-44e2-abd0-b00fc01528cb",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "cb48f23a-9924-47d3-a5e5-964e340123a3"
        },
        "item": {
          "id": "8353adab-f2a7-465c-9bda-6aed323d015d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8cf67cf3-1ebf-4106-b61b-1e9cf722b649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5001561-9752-43a5-80ab-76e6db2726d2",
        "cursor": {
          "ref": "7ce9c0a6-4cfd-476c-ab6b-d963d7e92ecb",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "aff706fe-b62e-4841-aab9-247ec4d63ec6"
        },
        "item": {
          "id": "c5001561-9752-43a5-80ab-76e6db2726d2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4cca29f7-f903-4d5e-91b7-572e553c2f14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92740045-baf7-4771-991a-36e0b07240b5",
        "cursor": {
          "ref": "dd4bc67b-4533-4938-9e32-eebc2271b0de",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a30e6643-332e-40df-93fd-417714272c25"
        },
        "item": {
          "id": "92740045-baf7-4771-991a-36e0b07240b5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "770658d6-0252-4d82-a9b1-c8447309d387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ae2eba-9708-4bbe-b5ff-7963198d3b8f",
        "cursor": {
          "ref": "d949558e-2b39-4d5d-bb57-15e3873df81b",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ae3fa5b7-75ed-4bdc-9c84-2fb524a5873f"
        },
        "item": {
          "id": "43ae2eba-9708-4bbe-b5ff-7963198d3b8f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "37edbf24-3059-41b6-bc77-12213e8c0382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e81d8428-7919-4550-b345-d915ed714ff8",
        "cursor": {
          "ref": "b14c52be-66bd-4449-8962-241ddb62bbe3",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e3c7a480-1d69-4564-bf39-cf091164c526"
        },
        "item": {
          "id": "e81d8428-7919-4550-b345-d915ed714ff8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4dce37d1-9ec5-4169-88ef-fa63e14cbcf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6da76e-bcc3-4db1-aeef-1eabee4e9d9c",
        "cursor": {
          "ref": "85ed6410-882d-427d-8863-81b62a6daeae",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ba574ade-9d61-4fad-b734-8fc4fb139613"
        },
        "item": {
          "id": "dd6da76e-bcc3-4db1-aeef-1eabee4e9d9c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fa740b2d-5f6c-40be-8e1d-4bc4cd5e00b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ed3223-d507-40d8-a6ea-cea936ce1eaa",
        "cursor": {
          "ref": "a87011a2-af91-4dcb-80a7-adc1c7f7146c",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e42fb3b9-e8ad-499d-8276-a54ae451d101"
        },
        "item": {
          "id": "60ed3223-d507-40d8-a6ea-cea936ce1eaa",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5b129319-ddf3-419a-9c17-3981d471adab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f110aca-21db-48c7-a622-5750239f8a5d",
        "cursor": {
          "ref": "abb68496-dcdc-4138-a3c2-f5d15064f139",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d5e5b504-5c01-4645-938f-81388934bf1c"
        },
        "item": {
          "id": "2f110aca-21db-48c7-a622-5750239f8a5d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c1da0bca-3742-48c6-8e81-c54bc4529f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baef7df5-3df0-4ead-b7e0-f426b283c0e9",
        "cursor": {
          "ref": "d5bcf19d-d913-4161-a22e-479c11f289d8",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2048b30d-ef84-431e-ab04-ab49a6b1174a"
        },
        "item": {
          "id": "baef7df5-3df0-4ead-b7e0-f426b283c0e9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9db7b1ef-f5b2-4091-9b60-aeb171daa56e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6db93d9-f150-409a-bf7d-70c1e698fdd1",
        "cursor": {
          "ref": "731797d0-8fdc-4740-89fa-ac1101a43577",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ba9220d4-eb1a-47ab-9356-f45bd8e5668d"
        },
        "item": {
          "id": "e6db93d9-f150-409a-bf7d-70c1e698fdd1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "dcd31beb-23c3-46cf-a843-0974045f892d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb3560cd-a379-4590-b576-68d3ae6f80ca",
        "cursor": {
          "ref": "25174ad4-3ee7-482c-bb9c-475bfab1ed08",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0bc3fc36-a959-4d29-874e-460e857c311e"
        },
        "item": {
          "id": "fb3560cd-a379-4590-b576-68d3ae6f80ca",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d13800b1-7451-488a-b7b7-95a05a7f63dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd73d6f6-50ca-4871-a8d1-7833b3c9afbe",
        "cursor": {
          "ref": "9261cadc-765b-473e-a962-bce83cdb8b58",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "71993914-2799-40d3-9b6b-52b316f1c202"
        },
        "item": {
          "id": "bd73d6f6-50ca-4871-a8d1-7833b3c9afbe",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "224066bd-9b51-40e9-9d9f-45e5cd31b61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965442ff-d86d-448c-b6b2-b70c1d10148b",
        "cursor": {
          "ref": "e230f199-9803-433b-946b-34b720e2a81d",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e9ab9a11-a06f-4554-8715-2a9c29af09a2"
        },
        "item": {
          "id": "965442ff-d86d-448c-b6b2-b70c1d10148b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "73037564-4ed6-43e2-8310-40ff9ac70433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072896e2-e6e3-4be9-967d-ed5bcc8b6b5c",
        "cursor": {
          "ref": "3703dfa0-265c-4e5b-a243-868d24a1b115",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "24206db1-96e4-4d59-880d-034fe61b71ef"
        },
        "item": {
          "id": "072896e2-e6e3-4be9-967d-ed5bcc8b6b5c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9ab9364e-688f-4871-a561-b721de14e87e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3061eb0e-7a97-4784-b5c3-263bc55475b6",
        "cursor": {
          "ref": "cce5a2c6-cb0e-4697-ad2d-f79f1498ba24",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d0be96be-340f-4e46-92a2-43b114379a2e"
        },
        "item": {
          "id": "3061eb0e-7a97-4784-b5c3-263bc55475b6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "edcdc47a-fe3e-478d-8bdf-43de311465f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320928b7-31e7-4775-84c1-0a80fbb35cb1",
        "cursor": {
          "ref": "41f15511-11a2-4e43-b717-db1d3627d0b8",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5467ae0b-166f-4be5-bc8e-60f5bff75d16"
        },
        "item": {
          "id": "320928b7-31e7-4775-84c1-0a80fbb35cb1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2781eb4c-f322-442d-b709-1e0858dce2f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb404a7b-2e11-44a8-905b-abd5d001e126",
        "cursor": {
          "ref": "632858a7-f07f-49c1-a70d-53982271e9d4",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e3e819b5-b03d-4e71-807c-f3101c474c27"
        },
        "item": {
          "id": "bb404a7b-2e11-44a8-905b-abd5d001e126",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "01e41057-3eed-489d-9a5b-1bdad5e839fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4964cc-37f0-4870-8024-d28522b9aaa6",
        "cursor": {
          "ref": "992ade49-3dd5-4b2a-93a5-ecd218b7a84c",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f67a3cad-64c4-48c9-9cd0-fb41ac11ae04"
        },
        "item": {
          "id": "be4964cc-37f0-4870-8024-d28522b9aaa6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0b95d852-b268-464a-888d-d0d420006238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69bb1d10-0d87-4df1-a0ed-23a2f2cd90af",
        "cursor": {
          "ref": "af4fc71a-bfa4-46d9-92ca-cb3c1b19ab63",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ee354ca3-c898-41e4-9dc6-f6389f0129df"
        },
        "item": {
          "id": "69bb1d10-0d87-4df1-a0ed-23a2f2cd90af",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9aacf716-2b6f-40c8-b676-25f1346c7176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8811135e-a59e-4e18-a6db-096375c0df4d",
        "cursor": {
          "ref": "d458d47a-3ce3-4f2f-a64b-e2d95623c13a",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a29f59c4-c4c1-4a79-a820-c2eb6d0a3203"
        },
        "item": {
          "id": "8811135e-a59e-4e18-a6db-096375c0df4d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "596fb9ab-5c39-4cb0-b545-d6e974cedaa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29aa04f3-2407-4abc-95b9-79102b08271c",
        "cursor": {
          "ref": "449c8a40-a1ae-4d01-94eb-d8e40579a833",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "fc08207b-a400-42a7-a210-e064f42c1af7"
        },
        "item": {
          "id": "29aa04f3-2407-4abc-95b9-79102b08271c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "457e510c-1ae4-4a2d-a9fd-299950f19bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4452d5b-2141-4c2f-9cf6-5f5eac4c8b2b",
        "cursor": {
          "ref": "116fcce1-acde-4518-ae5b-8a7a42973667",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "477a3e60-3265-4c4e-9872-398813e91bec"
        },
        "item": {
          "id": "a4452d5b-2141-4c2f-9cf6-5f5eac4c8b2b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d6a2891b-eed1-4c0f-9f49-f44eadf00af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "099baf26-932a-4a71-95b3-2de5261cf021",
        "cursor": {
          "ref": "3291bad2-2e98-4517-8e82-f2e3d63b1687",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8f4afeb8-1f88-4247-96b2-345808e1c391"
        },
        "item": {
          "id": "099baf26-932a-4a71-95b3-2de5261cf021",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5f11a696-5aff-4858-bf9f-2992f1dda458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3bf7d93-6433-47d6-a585-b3c6f0d7155a",
        "cursor": {
          "ref": "51139fb8-5f8b-4e47-8a97-0f14426064c7",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6da8c0e5-3dfe-4ccc-92b9-3280fe5f0802"
        },
        "item": {
          "id": "b3bf7d93-6433-47d6-a585-b3c6f0d7155a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bdb7b0bb-1712-4e6d-b498-2857a3f7fd52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17daf1ff-2803-418e-ba37-0384a4fb0f1b",
        "cursor": {
          "ref": "fe13996e-7112-46c7-9a3a-cf1420a4057b",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7aca2f14-6ed4-4723-9923-6cdd73886660"
        },
        "item": {
          "id": "17daf1ff-2803-418e-ba37-0384a4fb0f1b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "896a1d6e-c384-440c-9019-dd99803d4b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23f2aa4e-7cf8-4812-868d-089b8e22ea17",
        "cursor": {
          "ref": "fdb786f5-e336-4e13-bd21-e8b33fefcb6b",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "35cae3d4-492c-4aba-a89f-a0f0b836a7f1"
        },
        "item": {
          "id": "23f2aa4e-7cf8-4812-868d-089b8e22ea17",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1f9646ef-5041-47fb-b85c-fdc8659aa6ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d41e885-e616-472f-b47a-d9f8944bdbfe",
        "cursor": {
          "ref": "831f7320-2243-427a-a99b-548f395ffa4f",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4a28cb7d-4ebc-4743-a4a6-8a35b3db950a"
        },
        "item": {
          "id": "2d41e885-e616-472f-b47a-d9f8944bdbfe",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4b420a9c-5aab-4671-8afe-4bfa83c8715a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb97f3db-a34c-4133-a093-72098b513ac9",
        "cursor": {
          "ref": "d7f41da5-f495-4c25-a232-6d9b56a2c3cc",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ff579a76-845e-4a6d-a941-62de9e369d8c"
        },
        "item": {
          "id": "fb97f3db-a34c-4133-a093-72098b513ac9",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "0acdcbf6-e3c7-441e-b50c-bf47999e3b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "558e4284-50e1-4fbb-9508-683d8e711772",
        "cursor": {
          "ref": "66995c1c-3422-460b-9bca-dde230fc24e8",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d97c1718-8d5e-4d3b-bc11-80612a850156"
        },
        "item": {
          "id": "558e4284-50e1-4fbb-9508-683d8e711772",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "e2c90569-7d8f-417d-bc56-75b59d36ce39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f598df-0716-4fa0-a93a-6f255513666c",
        "cursor": {
          "ref": "79da414e-3a96-4a1a-8db1-8972fb37c087",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "bcc3a77f-e788-45d3-9eb3-c84de4945972"
        },
        "item": {
          "id": "42f598df-0716-4fa0-a93a-6f255513666c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e9fccaed-dd53-459e-a637-547d76e1068f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea50495c-4d0a-40e1-b0a4-5091f0ab6a8f",
        "cursor": {
          "ref": "922ebb88-4f41-4e07-91de-f822c0e2480e",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "68b0ddb4-b75d-4a4c-a017-6c8c0502289e"
        },
        "item": {
          "id": "ea50495c-4d0a-40e1-b0a4-5091f0ab6a8f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "830715b0-0c57-4151-ae97-af0220d6a6bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1c8deb-6a41-441a-98f4-057c35c50de7",
        "cursor": {
          "ref": "27e4b5cc-85c3-4e43-a67c-45de6bbde655",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "97737819-6a9d-4f24-a26e-bdfa428bd487"
        },
        "item": {
          "id": "0b1c8deb-6a41-441a-98f4-057c35c50de7",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "0abb3fd1-cbe9-4386-82e7-6bae4c675eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12dc8b4f-8742-4325-99b9-48231d501e38",
        "cursor": {
          "ref": "9905f9af-599c-4326-9060-c6497a26e8a8",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "af516c7b-b38c-4cdd-9286-843af32859a1"
        },
        "item": {
          "id": "12dc8b4f-8742-4325-99b9-48231d501e38",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "90dfddab-7733-48ff-9d6f-c2587df849db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8432e476-81d5-4712-872d-ecb8b1cbbb75",
        "cursor": {
          "ref": "0d4c708e-6e35-4144-8c25-fc94acbd5f3e",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0a70c3db-03c8-48db-a05b-b3c05887137d"
        },
        "item": {
          "id": "8432e476-81d5-4712-872d-ecb8b1cbbb75",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "463c4088-13d1-425a-9c50-1e393560367e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747b3f8e-3f88-4195-baa8-b22624aad19e",
        "cursor": {
          "ref": "d9d1f2aa-2fb6-4737-ab11-379e5a009ed8",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "144cf3a4-3867-4d83-8d88-28e57ca4121e"
        },
        "item": {
          "id": "747b3f8e-3f88-4195-baa8-b22624aad19e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4a8f4a21-3aa5-4734-b59a-12017396c617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24ce981-d9c5-4250-bc7d-68478fec3a44",
        "cursor": {
          "ref": "5d815453-4c9f-45b8-a7ef-9bab300585e5",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "eb5093dd-f917-4f20-9780-25a6ed2aee34"
        },
        "item": {
          "id": "b24ce981-d9c5-4250-bc7d-68478fec3a44",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8e53f827-011d-49cc-9140-59eb3af2b4f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad677739-0cf5-4499-9f98-c9e1a5b98602",
        "cursor": {
          "ref": "5e24e808-2c15-4a50-aa60-419b4fca7460",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c5f05eee-3df0-490c-9deb-903c43530a1e"
        },
        "item": {
          "id": "ad677739-0cf5-4499-9f98-c9e1a5b98602",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "fc2cbe9d-7787-4af5-aa09-61b40f3cc567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f098f818-58cd-485a-a9d0-1687514cb179",
        "cursor": {
          "ref": "196165ee-0ac9-4ae2-a52e-286834c4d89c",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "cd2276e1-99e8-4e64-a65c-650483b6e342"
        },
        "item": {
          "id": "f098f818-58cd-485a-a9d0-1687514cb179",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "56d46455-85d4-42fc-98b3-5cb3de7200db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd4dca19-770b-4bf1-9d56-0b83dfca2e19",
        "cursor": {
          "ref": "786f36a1-9ec0-4095-ba3f-59cc9af21dbf",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ac997710-066c-411b-9f0d-4a5b000cb246"
        },
        "item": {
          "id": "fd4dca19-770b-4bf1-9d56-0b83dfca2e19",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "efcf5243-337d-4775-9caa-92dd1d100085",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "491b5080-6f92-498b-a98a-5f1a2bab8c85",
        "cursor": {
          "ref": "979bf0c4-93f3-4a66-9c97-82e6c7d6a6cd",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "63489913-0ca7-45f7-91a9-595845dd3b85"
        },
        "item": {
          "id": "491b5080-6f92-498b-a98a-5f1a2bab8c85",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "fc6275f8-ed21-4da4-93db-2378dfceadd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e0cc87-5419-45a2-8f34-d37e02e5a529",
        "cursor": {
          "ref": "5e6bb1db-9104-4f68-b7c3-ee78b28837b5",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "aed23c45-5e40-4cba-8505-46b3193fea15"
        },
        "item": {
          "id": "f3e0cc87-5419-45a2-8f34-d37e02e5a529",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e439ed08-db05-48bf-adbc-31898588761b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f64bd7-c6d9-4967-9a4c-04de1d7706e8",
        "cursor": {
          "ref": "729021f0-6f53-4cf6-9510-e3d38bb6d6a2",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9a0dcc38-4284-4bba-ac8f-cebb028f8178"
        },
        "item": {
          "id": "12f64bd7-c6d9-4967-9a4c-04de1d7706e8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "10870bf6-7ddd-415e-bde8-1e97f0e33627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ba2603-087c-48d6-95d6-cc540dcbd1b0",
        "cursor": {
          "ref": "81f269b1-1a81-449d-8f0d-ad6636c05a8f",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "dbb592a7-cf4f-4874-aeb4-ac833e58256b"
        },
        "item": {
          "id": "87ba2603-087c-48d6-95d6-cc540dcbd1b0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8557fc72-c47d-4db8-a66a-325c7ed6e5e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b66a760-01c2-4852-bdfd-09b4a4151ae1",
        "cursor": {
          "ref": "7c1802dc-4efe-4076-977e-1c7b20f97590",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7d115605-47b4-422e-bd71-9dd77d2e03dc"
        },
        "item": {
          "id": "2b66a760-01c2-4852-bdfd-09b4a4151ae1",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b513985e-375f-4713-9d35-482f4ce5f253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc37e9c6-3bfe-4595-a849-2e41a48e5175",
        "cursor": {
          "ref": "b6bcb63a-d31c-486d-baa8-83bdc5c00c0b",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e970ff40-e386-4b67-97e8-6a7f00fe337b"
        },
        "item": {
          "id": "fc37e9c6-3bfe-4595-a849-2e41a48e5175",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "4b49caf4-0a15-460b-860d-0a1de6e849df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29202eb-f9a2-494d-a43f-a1704610e052",
        "cursor": {
          "ref": "812f6990-80b2-4b0a-a42a-954a8a645fd0",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "bb148246-4190-4cb6-ba7c-5b667394a0c3"
        },
        "item": {
          "id": "c29202eb-f9a2-494d-a43f-a1704610e052",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ac83334c-5d40-492a-a37e-eca8bb3f9772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b9fced7-9b8b-4670-93a7-70f05fa40a82",
        "cursor": {
          "ref": "4f91242b-b436-4f8c-b561-4eddb20e8e2a",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c0142234-ad06-4be5-a9ef-a7b6571fa6c5"
        },
        "item": {
          "id": "4b9fced7-9b8b-4670-93a7-70f05fa40a82",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "fdfa1e80-7c3e-46a3-bf25-eeb35560a95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a959c7eb-15f8-405b-a883-e303e2f9c666",
        "cursor": {
          "ref": "fcfade35-eed3-433b-b63d-c447ae28b4b0",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5fdbdd14-f543-41a6-b5f5-1389e0d36bc0"
        },
        "item": {
          "id": "a959c7eb-15f8-405b-a883-e303e2f9c666",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "296f28b8-8fbd-4531-8e8a-6e2595f19635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea001332-7081-4ee0-9243-36746235ebfc",
        "cursor": {
          "ref": "79a91bff-c3a0-4c12-9407-161ad3a0b14f",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "75db4870-9c17-43e0-8886-e4430c99c689"
        },
        "item": {
          "id": "ea001332-7081-4ee0-9243-36746235ebfc",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "462167eb-93e9-4c9e-b53c-52436441854a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19cd3eb-638d-4396-a8b9-fa3a8eb68848",
        "cursor": {
          "ref": "32c9dc8e-90a7-4d2d-8fd8-f98e54137e7b",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ef8d2353-de68-462e-a4ba-e40e63d35ce2"
        },
        "item": {
          "id": "f19cd3eb-638d-4396-a8b9-fa3a8eb68848",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cb414fc5-a9fb-4203-ac04-36925a9bd208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba51ce7-7d04-4ffe-bdfe-888d69dec252",
        "cursor": {
          "ref": "21d1cce7-c3c4-4edd-92a5-d2b35dd38827",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9466fdec-4d55-4c1a-b0e5-083438861a19"
        },
        "item": {
          "id": "fba51ce7-7d04-4ffe-bdfe-888d69dec252",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c1629449-6656-4b6a-a730-8b13aedea4d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d7fd28f-61aa-4d4a-9bdc-b3e8c4f83001",
        "cursor": {
          "ref": "2715a9e7-53bc-4a1c-8e5e-3bef82b703cf",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "bd6c6e33-6df6-4bb6-afaf-d82e84af996d"
        },
        "item": {
          "id": "4d7fd28f-61aa-4d4a-9bdc-b3e8c4f83001",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "93ac6cf1-06c7-4587-b278-1c6a048a047f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc7ad06-0ac7-4c11-a888-a320f0dcf8d2",
        "cursor": {
          "ref": "4d73f5eb-31d8-4836-9115-b561120a8020",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0618cb5e-a94f-4c64-ad1c-f12dad1543e0"
        },
        "item": {
          "id": "bdc7ad06-0ac7-4c11-a888-a320f0dcf8d2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "24f10987-8645-4ee8-8eba-f133228707f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dbd9b1b-fbee-4627-806e-def60f1ffa11",
        "cursor": {
          "ref": "4909dabc-249c-4c10-b388-50b19733d991",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5a6ecbd7-d59a-473d-99d7-1838e94f4f60"
        },
        "item": {
          "id": "7dbd9b1b-fbee-4627-806e-def60f1ffa11",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b581072a-6246-4c82-a1cd-4973f24c61a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7113e33d-00bd-4fe9-a20f-0d2bc0669bf2",
        "cursor": {
          "ref": "fd64bf5d-faeb-4776-8cb2-21bbc227b537",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9f1699be-f8eb-4208-8098-a9067db7b835"
        },
        "item": {
          "id": "7113e33d-00bd-4fe9-a20f-0d2bc0669bf2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c64b32a6-5138-4586-83d0-74609bfd52cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fecfd381-1471-441c-a091-38820d3fe081",
        "cursor": {
          "ref": "c6a94e9e-4eca-402f-9e7d-687c8f3ca067",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e1745e30-5fa6-4673-9d2f-bd315f557cbe"
        },
        "item": {
          "id": "fecfd381-1471-441c-a091-38820d3fe081",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "debbb6a6-6cb6-484a-9a2e-4ac7d23ed761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3de3ed3-7406-477e-9282-bd5e34888e43",
        "cursor": {
          "ref": "695ff0ea-ecf0-44d5-8c7d-f1ff556d8e6d",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c0e5dd68-1e0a-4c62-9f66-a67fe6931671"
        },
        "item": {
          "id": "e3de3ed3-7406-477e-9282-bd5e34888e43",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f0bed763-fff9-4e42-abec-13cc844f42ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b76d4d76-e990-4f2e-a3ff-78b9635ed186",
        "cursor": {
          "ref": "dddf602e-eac2-452a-a13e-624f5386ec8f",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6a95bb96-47e2-4c61-a3e1-0fc6c3c047b0"
        },
        "item": {
          "id": "b76d4d76-e990-4f2e-a3ff-78b9635ed186",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "940ba16f-3ba8-41e8-ba5d-dfad812074ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65aca0f-0d39-467e-bb48-13b15c015ca1",
        "cursor": {
          "ref": "e536e7a8-3993-4092-bfe1-7fde89865626",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a142d90b-b71b-408a-a819-bd9fa956e69c"
        },
        "item": {
          "id": "d65aca0f-0d39-467e-bb48-13b15c015ca1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "edf64e3a-7e58-442a-93a8-d29f9d2848e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719c4b24-5fe7-40f4-95de-5cb08683c8f3",
        "cursor": {
          "ref": "c884400b-7d4d-4773-9b39-88c680981fe3",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "75461490-fd6f-4bc9-81c0-4f6340aa6a9e"
        },
        "item": {
          "id": "719c4b24-5fe7-40f4-95de-5cb08683c8f3",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "68a5400d-7430-4863-a39b-cb9e8eef31b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b258d10-d036-468f-ae73-36cd08c8ae93",
        "cursor": {
          "ref": "d75bfca5-49b3-420c-9a96-fd1add582c1d",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "87ec351d-50db-4a5f-94ca-6664b61994cf"
        },
        "item": {
          "id": "2b258d10-d036-468f-ae73-36cd08c8ae93",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "954c9a95-9757-4c7e-8af6-bb3de86f8967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8460ce93-253c-41d1-9d04-c40e9a661182",
        "cursor": {
          "ref": "e905a276-41a0-4db5-9d89-26ecc65410c3",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "de4c44cd-b97d-43e0-bc4c-785efeb10270"
        },
        "item": {
          "id": "8460ce93-253c-41d1-9d04-c40e9a661182",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3014c361-a780-49d1-af04-240e089a7178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837a4e1c-80f5-44ba-9f72-32ce07ebb869",
        "cursor": {
          "ref": "d5132177-4267-40b5-8021-c207e52a340b",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "55dfeb87-d1aa-4f43-af13-57744c717ea8"
        },
        "item": {
          "id": "837a4e1c-80f5-44ba-9f72-32ce07ebb869",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "33acf89a-d229-46e5-9773-b17fc8cdf63a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ee2722-1b6c-48c7-bdd0-cac3c76913b0",
        "cursor": {
          "ref": "b51a81f1-9571-4ba8-aaaa-b593a1b3133e",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "53c41a49-a2e0-4892-9a3e-d8d71d81fd38"
        },
        "item": {
          "id": "61ee2722-1b6c-48c7-bdd0-cac3c76913b0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "bd2170c1-36d0-4dfe-acfe-3d88e0cd0e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27364b2c-48e1-41c1-80ee-5f1a6c751240",
        "cursor": {
          "ref": "8207d02c-0497-469a-90b5-eebffa976442",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7675a738-4c98-42c0-a21d-4fec93ec3c47"
        },
        "item": {
          "id": "27364b2c-48e1-41c1-80ee-5f1a6c751240",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "378baa18-61de-48cf-a885-ad992f086bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "313ef61a-3b9a-4c27-b69e-3a0a3fa1d15e",
        "cursor": {
          "ref": "6241df6e-a36e-4669-ac01-b9b459a57f09",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4a64f63f-7750-4cba-a235-6beb8add2dff"
        },
        "item": {
          "id": "313ef61a-3b9a-4c27-b69e-3a0a3fa1d15e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "645dbdb4-e117-42ac-b338-8e1fcbfcc367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "134e6673-1d49-49fb-a728-da90003d542d",
        "cursor": {
          "ref": "8c4956df-51c7-460a-90e5-4d234626f8a7",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e8b4f102-3ee5-4b08-86c9-4074ad499a52"
        },
        "item": {
          "id": "134e6673-1d49-49fb-a728-da90003d542d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "cab0b6be-9977-4167-a341-efe846966dfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4909b565-6dd6-4687-a7a2-2700c48844ab",
        "cursor": {
          "ref": "ff7eb9fe-52c5-4794-b103-86f4cf64d93e",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a4e1f613-5c4c-4a8c-a65d-817c30c4baac"
        },
        "item": {
          "id": "4909b565-6dd6-4687-a7a2-2700c48844ab",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "632626a8-4db3-4589-be4c-5d019fe34674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10355452-7500-458e-85e6-dc59e8216f0e",
        "cursor": {
          "ref": "b0746b1c-8a00-42fa-a527-abb89bd78a4c",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fd06a99e-2d60-49de-9829-0d37dee1ee33"
        },
        "item": {
          "id": "10355452-7500-458e-85e6-dc59e8216f0e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "22fec274-bff2-4045-8072-51e459ec11d8",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "5efb08b4-673d-4d3f-8ffa-ece0736d8007",
        "cursor": {
          "ref": "271baaee-0a44-4f4f-a62a-57155f9ac332",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a0d5068e-556c-4b00-a6b2-6b41f0bd3755"
        },
        "item": {
          "id": "5efb08b4-673d-4d3f-8ffa-ece0736d8007",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1d9cb328-2ae6-44f2-8eed-d2c903d8f508",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "e09e8953-0960-43a3-9578-e5c2b04c6294",
        "cursor": {
          "ref": "5f3bde0c-906c-43a7-a809-f4a6484631f3",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8083295a-bac3-4be7-8ed0-b3c625cecf41"
        },
        "item": {
          "id": "e09e8953-0960-43a3-9578-e5c2b04c6294",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "024dc3bc-6526-4e24-af79-1647dfb3a516",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "59b81555-72c9-4fb4-ae12-60b0ccd19448",
        "cursor": {
          "ref": "7b62788e-7850-4de1-a27e-06da94678910",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cbae5c2e-29a0-4e36-b74d-d7b7b60ee88c"
        },
        "item": {
          "id": "59b81555-72c9-4fb4-ae12-60b0ccd19448",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4d4346b3-7142-4ae0-8b31-efe75617d8d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e8093c-4ca5-4942-adaf-01b10aba3722",
        "cursor": {
          "ref": "732cfcf3-697e-4e53-9d0b-e2f1d9b14e3c",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "55ed2b18-f0f0-4beb-8787-b50ac3224068"
        },
        "item": {
          "id": "19e8093c-4ca5-4942-adaf-01b10aba3722",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9596d53f-a61e-4e13-ab14-201abb5f2876",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "5bad5527-9973-47a9-b52d-927eeda684c1",
        "cursor": {
          "ref": "4158750e-741a-4edb-8e8e-914082f01101",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b725808f-2fcb-47cb-b935-3706ed68407a"
        },
        "item": {
          "id": "5bad5527-9973-47a9-b52d-927eeda684c1",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2cd428f2-4ad5-4219-aa5b-f2dc4f614290",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "2c769342-74ac-4118-ad1c-ccc19a079d4e",
        "cursor": {
          "ref": "cd745efb-4ad3-4923-9720-d53715791e41",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b0fbefdb-85d2-4dcb-8cb7-2ccd9b7d813f"
        },
        "item": {
          "id": "2c769342-74ac-4118-ad1c-ccc19a079d4e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "49dbe560-2339-4b68-ab25-a0f4ce6f6d19",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "660be269-6bbf-4e38-8d2e-51dc0628d380",
        "cursor": {
          "ref": "05a59081-0312-439a-8570-66257de365a2",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6b137781-b733-4d2d-a4c1-0839703fea4b"
        },
        "item": {
          "id": "660be269-6bbf-4e38-8d2e-51dc0628d380",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b07cc875-6437-415f-a1ab-256ba50055e9",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "a37735c4-c31a-405b-9f92-00702a652a32",
        "cursor": {
          "ref": "b969d34a-cae4-46fd-9ba0-fe9158edeca9",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e64d820a-e640-4cb8-ac1a-f6921f3f00f1"
        },
        "item": {
          "id": "a37735c4-c31a-405b-9f92-00702a652a32",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "269e54d8-befd-49c9-9404-fb807f0dd19a",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "6323ac1d-43d0-4787-ab2a-61f646103fb8",
        "cursor": {
          "ref": "75e74e33-2515-4c74-9bfb-e9fa97158a79",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "cb133652-eabf-4fad-8d51-82f24438b7eb"
        },
        "item": {
          "id": "6323ac1d-43d0-4787-ab2a-61f646103fb8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "dfbb5ef5-25f5-4afc-abf2-ee9643c1f255",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "1ec5c0ff-894e-43f0-a86a-bfdbdf97bb79",
        "cursor": {
          "ref": "5939ebbb-dca2-4939-832a-71a8026ab89e",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "daee0501-53ac-4c10-8362-2c55084aff70"
        },
        "item": {
          "id": "1ec5c0ff-894e-43f0-a86a-bfdbdf97bb79",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d17da38b-0602-4fbe-bee7-59ef941eb724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7dc61f2-c584-48c3-90e0-91d3458d6bd8",
        "cursor": {
          "ref": "392f21ba-70a5-4a10-8727-6ea452061eeb",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b52f778f-1e32-4e38-94f2-ace316b4e712"
        },
        "item": {
          "id": "b7dc61f2-c584-48c3-90e0-91d3458d6bd8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "faec0a79-14ec-4935-9c73-9256288d0861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652146b1-22f9-43f5-9ca3-e899bb0199e1",
        "cursor": {
          "ref": "cac6bd65-8be2-4dbe-91a8-18fa074f71e6",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5bf7675a-7a5d-41b6-83d7-ccdd27601b21"
        },
        "item": {
          "id": "652146b1-22f9-43f5-9ca3-e899bb0199e1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "538a4aac-7304-43b1-89ea-c06d6fd6fb40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e74e2aa-3235-4232-9b14-8a4fb215ce27",
        "cursor": {
          "ref": "42354056-138f-4e13-bf70-06468c0f36c4",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1493abb9-7ccf-4bcf-8655-6f37dfc767cf"
        },
        "item": {
          "id": "1e74e2aa-3235-4232-9b14-8a4fb215ce27",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9b8500f6-1f4b-4fe2-9b6c-b12d767cfed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "977e1dda-eaa4-4bac-aaf7-1e5873967304",
        "cursor": {
          "ref": "bdd1e0da-cc6a-46c5-8c7e-c09837c0d24c",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0c437fe6-04a0-489d-916d-b4a2e9c9e11c"
        },
        "item": {
          "id": "977e1dda-eaa4-4bac-aaf7-1e5873967304",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c7458b06-0e41-4b9b-b8ac-360c5a37754a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f0643fc-b77e-4573-b58b-8f75df6ee586",
        "cursor": {
          "ref": "a3dd9d1c-5c33-4f33-b4fa-e1d3e264a40b",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "2f38d970-5b7d-4dc2-be30-8986c73ce501"
        },
        "item": {
          "id": "3f0643fc-b77e-4573-b58b-8f75df6ee586",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a3eceb15-362d-4d18-a39b-fca32601d6ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b16a154-be47-40bf-80b6-7475ca37f6c3",
        "cursor": {
          "ref": "e2c7eeb3-f1e2-40af-8af6-024b5cdc8a68",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "60cb1017-4085-4874-b957-81e902ca7cdd"
        },
        "item": {
          "id": "7b16a154-be47-40bf-80b6-7475ca37f6c3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "502f7c80-849b-4cb6-b2c2-fa0e532e45af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04168565-4453-4dda-ba1f-889a6d35de8c",
        "cursor": {
          "ref": "0eee55f6-b040-4ce8-b65f-6dea181a59a3",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7551a76a-52d7-4395-91e0-74a81878ea78"
        },
        "item": {
          "id": "04168565-4453-4dda-ba1f-889a6d35de8c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a06a517e-af0f-462c-806c-820f1f629a53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8038a9ec-4db7-4f11-bf6c-ae65172ed830",
        "cursor": {
          "ref": "9ef2e18d-0282-40f0-bdc4-43a8a921cf40",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "79458ecd-969e-425f-992f-3796ce0eb771"
        },
        "item": {
          "id": "8038a9ec-4db7-4f11-bf6c-ae65172ed830",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7a0480fd-ef80-4b8b-9e92-4494102dcf71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d26f10-b24a-405d-b13f-6b8fe55bed56",
        "cursor": {
          "ref": "dbce2a52-a310-4698-a60b-6007c2bf5f30",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "626f4950-de8a-4903-b13a-2f74fd5c8f9b"
        },
        "item": {
          "id": "f7d26f10-b24a-405d-b13f-6b8fe55bed56",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5352310d-88de-4b24-ac78-dab6bab1c239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b96cd0-5776-4d87-8d00-26f535ab6250",
        "cursor": {
          "ref": "afc5f725-0c37-4c64-a091-e3f3dad26ec8",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7fe83bc7-2dda-4d2e-9da8-2fc5e1ed55e3"
        },
        "item": {
          "id": "53b96cd0-5776-4d87-8d00-26f535ab6250",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c5f73be6-bae3-4578-88ec-3fd1a9c898a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f7740ad-7f8c-415f-983b-b88a64dc280f",
        "cursor": {
          "ref": "247b747b-1bd0-4f8c-a06b-35a3f3e8692c",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "59ae44b2-e4f0-41c8-8786-d7e04eb38e7b"
        },
        "item": {
          "id": "1f7740ad-7f8c-415f-983b-b88a64dc280f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "19803300-ec69-4519-a4ac-c50613d277e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88cff5a0-eaa1-405f-95c2-bf08af7a9971",
        "cursor": {
          "ref": "6ccfed62-9d91-42f6-ac36-15efe489efc0",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "260365bf-bec2-4f8a-9946-25d6675a90ab"
        },
        "item": {
          "id": "88cff5a0-eaa1-405f-95c2-bf08af7a9971",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a8320bd5-5181-4c38-954b-5adc267af1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb9e6aa-02ef-463f-9ef5-3b688e590579",
        "cursor": {
          "ref": "f280f515-02c4-45f0-ad0f-b8501ab294fc",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0e03248a-5975-423b-9414-022966d0b640"
        },
        "item": {
          "id": "2eb9e6aa-02ef-463f-9ef5-3b688e590579",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9a06755f-875e-4db1-a36c-c5de6e0c55ea",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "2a58457f-2f12-48be-aa14-8c98b16facc2",
        "cursor": {
          "ref": "3583b572-2baf-472e-a2a9-36113ae35d62",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "999e443e-28ce-47a8-aeb6-b1c705a175e5"
        },
        "item": {
          "id": "2a58457f-2f12-48be-aa14-8c98b16facc2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "090a0e12-f446-4457-b69b-a22b081e8ec7",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "73b3378c-111c-49b8-af1a-0963e3b09a9f",
        "cursor": {
          "ref": "29167dd0-abda-4e72-9046-fc67cb320f7f",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5204458d-2ada-482c-b522-55c25074a874"
        },
        "item": {
          "id": "73b3378c-111c-49b8-af1a-0963e3b09a9f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8c3c8185-aeec-425e-ad37-974478840d8f",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "1aeaa5bd-17d6-4a7e-9b24-227ff74da638",
        "cursor": {
          "ref": "5e0d8eec-58d2-4aa7-95de-06d4c8daa89e",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d485447a-ce53-45f3-82a0-b14d5effeb1a"
        },
        "item": {
          "id": "1aeaa5bd-17d6-4a7e-9b24-227ff74da638",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c4e20d8d-e153-45fa-9fd3-edf9660f6c2f",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "8c817046-36b6-48cb-a918-395dc6036e17",
        "cursor": {
          "ref": "d989a46d-9962-48a3-b102-f53e76b4c5a9",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a27e34f4-0dbc-4b41-a7c1-9841bed9b8df"
        },
        "item": {
          "id": "8c817046-36b6-48cb-a918-395dc6036e17",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ab0ea9bb-3d08-450b-8f5b-d4f980641ffe",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "b91b12a3-0a33-4ac3-a65d-672ef1f95edf",
        "cursor": {
          "ref": "ba63bd86-4601-4beb-b3c5-aa12a91d5ca9",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f7e6d30e-e816-434d-819a-53f5df51bc14"
        },
        "item": {
          "id": "b91b12a3-0a33-4ac3-a65d-672ef1f95edf",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7b71fa0e-8f8c-40bb-bc65-fdc006c94be0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b549c8f1-77ec-4e1a-bb07-c39300cac44d",
        "cursor": {
          "ref": "f805b812-7dae-4ab0-81e1-24410292150f",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c7195289-f3f8-47f7-a53e-3e2356c05bc8"
        },
        "item": {
          "id": "b549c8f1-77ec-4e1a-bb07-c39300cac44d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "49e7cd78-9ecb-41c9-980b-0a41b02597fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc54396-c5a5-45c5-bf33-cc74f8f5d6bc",
        "cursor": {
          "ref": "b7944a21-66e4-4b0f-8593-0169aed07424",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9fbf1837-1347-4836-92ba-c676d44f72be"
        },
        "item": {
          "id": "0fc54396-c5a5-45c5-bf33-cc74f8f5d6bc",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "67eb9dd7-e52d-480f-b4de-22f7b360f5bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c328f019-ee6b-4eac-ba55-5d2c4d766596",
        "cursor": {
          "ref": "2edf8fc4-a439-4ef8-a9ab-c6d336242c4f",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "177019ea-10d9-4312-a307-b5664c124384"
        },
        "item": {
          "id": "c328f019-ee6b-4eac-ba55-5d2c4d766596",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7454c184-aabe-4563-9ea5-c162addc36bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7f8af7-f436-431f-84a3-0a264038d485",
        "cursor": {
          "ref": "49aec28d-f7d1-4311-a870-eebbfcd25164",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "75b61fbc-22e3-43a6-b8f4-7a8cba6517e2"
        },
        "item": {
          "id": "6b7f8af7-f436-431f-84a3-0a264038d485",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "68245f50-1617-4e49-8502-9b4f90dd410d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fde02f0-ceb7-4c83-8841-2f557b80f91f",
        "cursor": {
          "ref": "37344392-9785-4520-87b9-2ce7dd414ccb",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "62be5416-17cc-4c58-9a57-9213f976fa81"
        },
        "item": {
          "id": "3fde02f0-ceb7-4c83-8841-2f557b80f91f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "bda3edef-0992-45de-8b8f-006cef9a9c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "442bc4b9-2aab-4f50-b4b0-1a7a827263ab",
        "cursor": {
          "ref": "d5c4d127-57a0-4ead-a973-368625bdf2b9",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2634ab95-da61-413a-95b9-c1c96ff80b6a"
        },
        "item": {
          "id": "442bc4b9-2aab-4f50-b4b0-1a7a827263ab",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b7f7ac9c-6e61-4ed7-b106-35e21464c393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e5a8ed3-5afc-4a6c-9555-38104a1df2f4",
        "cursor": {
          "ref": "e36545d6-1bbd-40dd-83d0-838bc42efab1",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "08281488-97d0-4ff6-9504-9e48c96845f8"
        },
        "item": {
          "id": "0e5a8ed3-5afc-4a6c-9555-38104a1df2f4",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f33cb707-5e78-46ef-a38a-ed3b9ab506f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a60c2eb-d5bd-4049-b4c4-d23aee881ea8",
        "cursor": {
          "ref": "5cc1ece3-5c60-472a-8645-487c82333e96",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ed506580-de45-4614-b7a2-1b99f7f78c49"
        },
        "item": {
          "id": "6a60c2eb-d5bd-4049-b4c4-d23aee881ea8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "47b236b7-d0ac-4f56-aa28-4abc87c7c6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a05b2c2-9ced-4005-b9c0-89241cbb7927",
        "cursor": {
          "ref": "0fb661ca-6a20-477a-8bc7-36651c50b373",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "a9325bd1-764a-40ec-896c-1b875618dfaf"
        },
        "item": {
          "id": "3a05b2c2-9ced-4005-b9c0-89241cbb7927",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "894b3880-035b-44b7-a391-9a7aa5626f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe9e9ca-67b0-4466-a5d5-38f74176895b",
        "cursor": {
          "ref": "86e40d57-9bd0-4e5b-9918-38e5a220bfe9",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c1193f02-7d78-441f-9fe5-7e350feb2dec"
        },
        "item": {
          "id": "1fe9e9ca-67b0-4466-a5d5-38f74176895b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "39ea93cf-ecf8-4368-ad95-0f95cc07c1b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce86639e-169d-4dcc-98ed-e55d8a208a98",
        "cursor": {
          "ref": "c5b62bf3-8b71-4f01-83de-c4063ad1679c",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "1a8170b6-f236-40c2-8707-6ce77574e5f6"
        },
        "item": {
          "id": "ce86639e-169d-4dcc-98ed-e55d8a208a98",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "47d2252a-0907-4020-8a53-69096da2be38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7392436-1f39-4bd8-a5f9-ea1ab680c652",
        "cursor": {
          "ref": "c408057d-8502-4f20-b7eb-137d523c5573",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "72c26406-8c4b-4ff5-abd5-2fbace4cb434"
        },
        "item": {
          "id": "f7392436-1f39-4bd8-a5f9-ea1ab680c652",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a46cd7b2-e6bf-444e-8e1c-c5c9fc6c0bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b352771-20b8-403a-88ab-57dd88ed3f72",
        "cursor": {
          "ref": "9786ed8b-294a-4093-a322-09918e5ede6d",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "27c08180-9c2b-40c2-a2e3-92656e2da06f"
        },
        "item": {
          "id": "6b352771-20b8-403a-88ab-57dd88ed3f72",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "261a0c76-5bad-475f-9726-d44a10bbe939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b937fae-2e4c-40f6-b1fc-5cdd5229eb81",
        "cursor": {
          "ref": "c794c3ec-efe9-408c-8b04-b4bf1ba025f4",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "138837e6-de31-42d2-8acf-e333dd945afd"
        },
        "item": {
          "id": "1b937fae-2e4c-40f6-b1fc-5cdd5229eb81",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bf5ac765-fad7-4f7a-9d89-97209f3589d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e61b0609-c10d-47e8-b97e-cb7c8ea0e40c",
        "cursor": {
          "ref": "ebd827dc-c65c-42fd-ab98-8a76f6c5fbbd",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "04fa0461-ce3e-4ba2-bcb6-803f8673a60a"
        },
        "item": {
          "id": "e61b0609-c10d-47e8-b97e-cb7c8ea0e40c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d4e06537-7a0b-46cb-8747-be29abeab734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfaa1c4-122c-49fb-a02e-3ae51e3c262e",
        "cursor": {
          "ref": "6686b083-328d-4e1d-9ebc-b49b65ccfe1f",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "baa72277-47ca-4fe0-882e-49f8ab011a50"
        },
        "item": {
          "id": "8cfaa1c4-122c-49fb-a02e-3ae51e3c262e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ef670a92-7391-4af5-ad0f-1c5f8dfd9703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb5c45f8-a770-49a7-bfaf-9e0d9e74fe98",
        "cursor": {
          "ref": "00fd2a4f-2843-4e9b-beee-70607e62a9eb",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "5ebeb23b-a5fa-444c-94dd-e1e811d9e0a5"
        },
        "item": {
          "id": "cb5c45f8-a770-49a7-bfaf-9e0d9e74fe98",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5c0328d6-9206-407b-81c7-a0369e4093f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec6e327-f1fb-4cca-aefd-b46770487933",
        "cursor": {
          "ref": "c07f712e-bc51-4d3a-930e-773aa0c3f355",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "1a11b9c2-8de3-4ae5-81ab-75182b866f08"
        },
        "item": {
          "id": "bec6e327-f1fb-4cca-aefd-b46770487933",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "130123d0-6fc6-4a4e-b4dc-564e29503824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4de8655-667d-4bfc-ba71-4ae97d4b777d",
        "cursor": {
          "ref": "73a32a07-4fa0-455f-a01a-a6830725f94b",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "d3bf83d8-33a6-476c-a287-d1337cbabd9c"
        },
        "item": {
          "id": "d4de8655-667d-4bfc-ba71-4ae97d4b777d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cd8dcfc2-38ec-4615-a131-bb4fd6e16d62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b50ac2c7-316e-47fb-9fcd-c577acdb7876",
        "cursor": {
          "ref": "40ae60a2-d4aa-49e5-92e3-3b3351cd217c",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "e84349f8-cad0-4402-a688-f776869ed36c"
        },
        "item": {
          "id": "b50ac2c7-316e-47fb-9fcd-c577acdb7876",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2d39b15e-ce69-4bd7-b13d-3a9099ec99b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ebafe51-52eb-47ab-8c3e-615b5d0978a8",
        "cursor": {
          "ref": "e879a317-ac93-4092-a2a1-460807b2b069",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "14ba4a2b-fa10-46bb-9c70-f3ecf8791cc4"
        },
        "item": {
          "id": "4ebafe51-52eb-47ab-8c3e-615b5d0978a8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "40520f24-8a2b-457c-af0d-29bdc126542a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92bc3a8-9b95-4833-ba6f-9b28c1cfa662",
        "cursor": {
          "ref": "7e536426-2f02-4542-993d-9b5414caf450",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "b830ff2a-2b7f-4884-a8a0-e8b1eeb0884d"
        },
        "item": {
          "id": "f92bc3a8-9b95-4833-ba6f-9b28c1cfa662",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "54848dc6-a000-4ffd-a5bb-4ae13913e73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c0f8f8-88eb-441d-be91-a4c21a4b0603",
        "cursor": {
          "ref": "05b3b651-4f58-4ca4-ba76-755055d20936",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "4419d562-af09-4a04-a81e-5a63508fd307"
        },
        "item": {
          "id": "e0c0f8f8-88eb-441d-be91-a4c21a4b0603",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "db58c5c1-57c6-4286-9937-af5f944f73ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13aa462d-c9c7-49e5-9590-3b6a916e87c9",
        "cursor": {
          "ref": "f541f4db-5596-4f33-ac41-76057c8489ab",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "b84a0195-096f-4134-ba83-5d5fbe952f4e"
        },
        "item": {
          "id": "13aa462d-c9c7-49e5-9590-3b6a916e87c9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0a15f545-235f-4df5-b7db-d044e4369aab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a8d67f-ef47-4e7b-b92e-2934efc47f42",
        "cursor": {
          "ref": "faeb4ace-78ef-4aef-8c6f-ef91f1d0286f",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "945108f0-83ef-47d8-8c82-e37d98e544d1"
        },
        "item": {
          "id": "b3a8d67f-ef47-4e7b-b92e-2934efc47f42",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ac6cb3a4-27ef-4c7d-a889-52f82fea137c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255695c7-1be6-4a8f-a66c-f1fb6e3e92ac",
        "cursor": {
          "ref": "e4e46a8f-a880-446e-9f25-c604d19c5e66",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "c9abbdfe-1e72-4632-9126-2ecd92bf65f9"
        },
        "item": {
          "id": "255695c7-1be6-4a8f-a66c-f1fb6e3e92ac",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0efb7611-83fd-4268-93f6-dcd1470a14c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42704806-3edb-4464-b182-e11b0f3e5d25",
        "cursor": {
          "ref": "a8b51e36-3806-4914-b411-513757691525",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "0400df2a-fe21-4f0e-89ca-ef56d0f3a6e6"
        },
        "item": {
          "id": "42704806-3edb-4464-b182-e11b0f3e5d25",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "81b0b042-fd73-4903-8b6b-7a4538192ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fdfc356-6d28-486d-902e-43130f0a9931",
        "cursor": {
          "ref": "0d87e378-cf56-4638-b45e-ca80cc2b2711",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "16c6256a-f352-4e22-b6ee-f2cead849213"
        },
        "item": {
          "id": "5fdfc356-6d28-486d-902e-43130f0a9931",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "fe5a2b47-afea-4e7b-9dd0-f8528695ebc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92c4e39d-d5ae-4e11-a79f-168f4b59b7dc",
        "cursor": {
          "ref": "ca158250-e3b3-459a-bd53-0dcf63fd4f71",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "94347706-5bd1-47c3-b7fc-da602476b01e"
        },
        "item": {
          "id": "92c4e39d-d5ae-4e11-a79f-168f4b59b7dc",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "09f8e2a3-658e-4033-b150-ecfc7985bdbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a51925-3cbc-4b46-a974-299ef720ed34",
        "cursor": {
          "ref": "11f0384c-b241-45df-8e1d-56e2d0bd530e",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "a81d996b-07e2-4360-b309-426926152bf7"
        },
        "item": {
          "id": "02a51925-3cbc-4b46-a974-299ef720ed34",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "8436b163-5b31-4bde-bb5b-8accb3c288ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6e4bab-e75c-4f49-86d8-3327fd6503c6",
        "cursor": {
          "ref": "7153f8c0-218f-49dd-ba2d-44c30a03d1a2",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "83ef68a5-bd70-4461-b861-0154a2f2db81"
        },
        "item": {
          "id": "7b6e4bab-e75c-4f49-86d8-3327fd6503c6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "02f171ac-982f-44cc-bb23-f7c5681e7b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44af2488-28fb-4d27-9aaa-8052c0e8872f",
        "cursor": {
          "ref": "27ba9578-4f3b-4f19-8d8f-424d75ea4baf",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "09fdf5a6-3986-4dba-8a70-5087e47b1211"
        },
        "item": {
          "id": "44af2488-28fb-4d27-9aaa-8052c0e8872f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "88427a26-4a23-4f01-9819-da22dde5c033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c26ba27-8e80-473c-a777-691eaf228855",
        "cursor": {
          "ref": "4ec37913-9001-41a8-b53f-578f7fab2fb4",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "d4b571ee-9ce6-4c9a-9ffc-37c87a039b94"
        },
        "item": {
          "id": "6c26ba27-8e80-473c-a777-691eaf228855",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8373ceee-7275-4c43-bc4f-6a257ba5e34b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9e4fce-1fa1-45a3-82cf-a18c4d55ce64",
        "cursor": {
          "ref": "2c2e9f9f-d419-4891-9dcb-338524b7b434",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "aa38e883-3428-48bb-a07c-613c72ad5749"
        },
        "item": {
          "id": "7e9e4fce-1fa1-45a3-82cf-a18c4d55ce64",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f4019c25-ff64-4bbd-8480-f1ed93c675ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6899637a-2493-49bf-aac3-26c48128e43d",
        "cursor": {
          "ref": "6495928f-6860-4f49-a7ff-411ce94d74e6",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "c7060576-ae98-477e-b34a-833538b3e457"
        },
        "item": {
          "id": "6899637a-2493-49bf-aac3-26c48128e43d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f78e980d-950d-4855-89a9-3c1707cb0bd4",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "197ce2c1-fb06-4788-b8f8-e43a6726f1da",
        "cursor": {
          "ref": "6cbe980d-4e2c-49de-a4eb-df25d131cf0c",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "e527e41d-d56b-4355-bcbe-960bb3fba822"
        },
        "item": {
          "id": "197ce2c1-fb06-4788-b8f8-e43a6726f1da",
          "name": "credentials_verify"
        },
        "response": {
          "id": "42d0759d-436a-4a5c-ab73-d69d31f6f288",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c9589d-0ffe-4f5a-8bdc-0f5e3991c55d",
        "cursor": {
          "ref": "88fec905-f2f4-43ef-bc6f-6781a3b7526b",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "a6390dd5-26d9-434e-a57a-8f5b5786718c"
        },
        "item": {
          "id": "90c9589d-0ffe-4f5a-8bdc-0f5e3991c55d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e0e0c764-8bd1-4042-9940-3028549f9df7",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5d892c-bdca-4086-8118-65f2f747649c",
        "cursor": {
          "ref": "71ed18ce-4c27-4616-a08b-9d2ae31690c4",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "07703067-a132-4467-aa16-cd9481c8eb65"
        },
        "item": {
          "id": "5d5d892c-bdca-4086-8118-65f2f747649c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0ff9b855-4320-429d-bfeb-30471537a41a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5d892c-bdca-4086-8118-65f2f747649c",
        "cursor": {
          "ref": "71ed18ce-4c27-4616-a08b-9d2ae31690c4",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "07703067-a132-4467-aa16-cd9481c8eb65"
        },
        "item": {
          "id": "5d5d892c-bdca-4086-8118-65f2f747649c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0ff9b855-4320-429d-bfeb-30471537a41a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0faf358-1640-46ab-8947-d0bb23b4a8f6",
        "cursor": {
          "ref": "04d4534d-7974-4940-b729-6beca210ea30",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "6db2739f-51fd-4d77-b168-e0d1958e69c4"
        },
        "item": {
          "id": "f0faf358-1640-46ab-8947-d0bb23b4a8f6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8d18729f-22e5-441b-91dc-1ebe8345162d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e0f7292-62cc-4fe8-84bb-e8aa14e0be96",
        "cursor": {
          "ref": "9c022a83-cd80-4e7b-860a-9d10172ad9eb",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "615525c9-989b-4f8f-91b2-64417711bf78"
        },
        "item": {
          "id": "0e0f7292-62cc-4fe8-84bb-e8aa14e0be96",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8e379ab6-e604-4229-98c9-e91ea6f98bdd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}