{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "89a4b7bd-88cb-4825-ad74-4b22fb82aa48",
        "name": "Clear Cache",
        "item": [
          {
            "id": "bd38ca75-104e-4d61-ba12-031c3ee17449",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "65b53baa-8366-4153-8d2b-56800f0903af",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "14f3167b-4868-4e46-877d-dc7438baa09e"
                }
              }
            ]
          },
          {
            "id": "7deaaaa5-f743-4933-b489-f0fff252b18e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "790313c7-4b8a-4b08-9623-7a94fc275957",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4fd2924d-3dac-4263-ab42-b7c0c409ed5c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "146b9c45-cdbc-4e34-b48f-b55b6927ebbd",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "38f1f92b-6fd9-42e8-9ada-8ae0030c08ee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "51e83735-f23e-4ae7-a31e-69dc2d721198",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5315af87-55ca-4a04-8c3d-2f542bb18663",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a33d70a9-cb8e-4f9a-9172-79d51b8718aa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c68014a5-6cff-4eec-b23e-7ab36cca1a14",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "874a6d33-f41e-4628-99d2-2e8adc71194d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "afc6ebf0-2b23-4baf-8af2-ff3357cd8a6e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c24007d4-3bc2-4828-bf56-dd00519903ef"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97cf30cd-74d1-40b2-92ec-656527ad1f0b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d91f1610-da66-4d03-bb95-06770cdf1c77"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75443212-d4a0-4af6-a305-9634e0fc3481",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f965e4ed-3df6-42da-aece-4099e678b529"
            }
          }
        ]
      },
      {
        "id": "69fd595e-ad14-4ef8-8fe7-2abe2f95a4ea",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c1a6218e-6d37-448e-8367-fc9f9e5b0bf6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a6bb8f9-e41c-4276-b2d0-942d67b11574",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e79e96a9-fd3a-41b1-a9ca-d13f50be3bc2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd66f2c9-17c0-4ab8-a73a-54eccd8b832e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c68cfd82-f143-4c15-a77c-d364f43fa108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39c873c-e220-4cd7-b756-19a7eb652f62",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "264e746f-93a3-4bee-a2ad-bac457455547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e432c76-76e3-4472-a6bb-e5eac1f5cf06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db14f909-3216-4cf8-ab74-5584499955f8",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6611f2f9-a8bb-4e29-beb1-e413e82141a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5656e261-f254-422c-9bc1-5bb0128570fd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ffc778a1-a044-4720-86a0-bc102c3affa9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8c98ba1-7094-42ae-a16e-25a6e552c5a1",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8132eee-1d03-4cbd-865a-5158b1964800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d384a58-7c88-44d9-ad23-3f93b24a4511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8e8b29-bbe2-4d64-8443-aa55238129b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db2b8ff3-e293-496d-9f23-5ad65a49cd87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0b8e09-1177-4690-af3d-bcf31fa8b46e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48394b63-fd92-49b7-99cd-38ff81093744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "271f4e4f-567c-414c-97eb-f6a632ece588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8562e05-518d-4080-a796-4eb559b636e1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "6df7fb18-e63e-44c3-9ca1-179091a6a8d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ca004d7a-fd24-4279-aad9-3ac32bf0550e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cdd233a1-1bcb-4021-ae46-8f7624153f24",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5cbc7248-106d-4b25-8c2b-de66168f4fad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7870991e-fd08-4f79-8cbf-35c89757f257"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c0e06f1e-7f04-4907-b8c0-0ca63ca26f9d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "dc4e49c3-e7ac-4059-aba1-661ca35348a1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f0f6b97d-840d-4abb-8bf3-30da3579818d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "abddf8b2-1839-4712-8fb3-3d097025feb0"
            }
          }
        ]
      },
      {
        "id": "e1679e8a-698d-4fc5-aa0d-a459f882904d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9a0164fa-7cb9-475d-ad30-e1b85de8320d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bff7f22a-b956-4bc4-a845-baafe810b99c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f3999116-824f-4dcb-853b-9591fea40c4c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b3e136-c707-4652-81dc-d17c408bf975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e45b540-f5b2-4771-9d33-966702359402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a65527-8f7e-4f56-b5d3-14c67c2a980a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6073130d-adfb-4db2-9789-3ca7941af0bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade80db6-b991-4ed9-aafc-c4675302b3ed",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a3b23d-0ed2-43ba-bff2-a85f8b6ffaf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090a1aac-8521-475a-abb0-980c73b5fe92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd74b11-e874-47cf-8b2f-cda4c1073d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d985634-2e4b-4b79-8f39-ef576f1a58a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41bb650-2120-4a3a-9c44-7798da488e7e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ec7ff6-ea4e-4695-aa68-db6ea14349e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07ae1872-0ff7-426e-a7ff-ba2b343c9b64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425f0f50-4071-4eae-aa3c-235cbfb03f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed5893a9-96e1-41d8-9102-fc83833ccc0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97472d38-43df-476a-8512-4a69f723f85e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7b4f9a-c9a5-47e9-83b7-e7fa2ea49322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0213dc3-27e3-436d-ae02-fc1d1cc6f66f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f01252-8707-4361-803c-edd3f63b14be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4dde25f4-29fe-4d31-95fd-e2bfa5f28298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcec19bb-3efb-48e2-b50c-8cecc285f18f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7afed83f-2c11-4801-81cf-fc51137ef9d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cd341e8-c135-4ddf-9a66-fc91756d2472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae2d1cf-63d2-43a0-8e8d-65e4342697da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07d933f5-aa4a-44f1-bcad-71e9b1c6e53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155ca0ae-94d0-4c7a-bf44-6f3b77cd578c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf135d74-267e-4d89-aadd-18c4e23d2e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe1ea582-478a-4bbf-b891-92a3a2adda68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7475229d-a25c-4101-9a1d-499522d51ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b6d4216-9ad1-445a-994b-2a72360fd91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5aa3f2-6425-46e0-bf3d-ac968afb0581",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8760906a-5573-4c9f-93ba-c4b34b6b453e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8bca992-5b75-491b-9d8c-ed3b6d7ffe0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f8c912-2e1c-4270-88d1-ec59b01da1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd4afc5c-1a0f-4ec8-bf18-ac4379715476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b140b2-68cf-467e-a0ac-8b0ab9d0a7f4",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "403121be-8734-44eb-a5be-12625f6ee822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b14d2807-8208-4f93-b722-1f9c5c376123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aca005d-43f1-4b6f-a5f3-7f48b251c8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c907bee-2d0e-495f-9bad-113dbe339f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67d5eee-ebdc-40c8-8031-38fd1501255d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ac6bb5-eb29-48db-a2e3-865c40c46397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72094043-a513-4d3e-bf32-b820a28ea966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4547814-0361-4f88-834a-c9589576b83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ac8bdc3-3b70-49b7-a5ae-24fc0dae45bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc950c59-776f-4717-91a1-cac14f816664",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a84416-2d2a-45ad-9fc2-b89394544ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abaaa09a-4551-46c9-b209-2a756e84a345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c541e70-9f99-4b8c-8aef-90bd2f7c126b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88eccda9-f8c0-4b54-a4b5-b365312b556f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa4a4df-e6e8-4e9a-bd3f-c14f3abc2be6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a6067a2-0272-4b77-bd3e-b97755b999cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d8e2a3-46e4-451e-a120-ded16edff254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51430508-41db-4f2d-bb13-19839994a8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aea5b032-e3c2-4304-8247-e2e2fc5f9a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f09ffb02-95a5-4661-af11-69718cf6eb8f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3cfe18-3170-4fc5-a960-71e53048ce89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b6f569-f863-40dd-98a9-2de995518bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae341aec-4352-4801-9f80-3b57c96e7bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f5b1956-315a-4da1-95c4-b250619f8caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf9f32b-fec1-4048-bec0-267326723941",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8da3424-deaf-4966-aada-91fc227ae41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58021bc1-7432-4734-a43a-e8076d195f0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e28088-51aa-42a6-b675-e199a8a6f3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b2216dd-2d08-4dd9-8b36-8fd3531c6560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d10214-3c17-48f3-a721-c7d320dc3451",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68af3176-87df-4d4f-ae2c-60bcc8689cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8843a2a4-b65f-4e43-8118-b6588e7daab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88bcffbb-d1ab-4886-b577-f6dfb0ef0f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "514e838e-5707-45d1-b998-4247a79ed68f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161d92bf-339c-497f-b313-bf4d32c2d63c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f32fef6-97bc-4899-be68-ffe3693c98a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76a72aba-c0f4-4f5c-9b79-6a656d83d481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4e7a8f-ba5f-47d6-9065-8d8d0ec17f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7788dba3-0eed-486c-bdd8-db265d9c5523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7761f821-0e87-4698-bd72-417a95776fbe",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a74099-352f-4c38-9d91-4ee6a494a925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2075ce66-b596-4b40-9251-787a0c25b6c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814b49d3-286f-4de8-9001-0620dfcefabf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b468c22-eff9-4be5-a2d9-0191862d77b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a7a2c9-56d9-4ef6-80ff-b9bd258cfd9b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b67bad9-16dc-4484-8fff-b486a5fa5f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0af630d2-2055-4394-bcee-3c6bb4e78e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e7c210-ee99-4519-a187-16fff9ca4cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6dab7891-cb02-4d90-9698-1fbebd5b4c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf295b6-04d0-4072-965e-93d35fdf2241",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "461883b7-3bff-49f8-bbc7-bc59cb31c3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "688c52c6-470d-439f-bc04-f72895ee3fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d574481a-4fa5-4558-a3f5-be485c101c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae57a215-db44-489c-be8a-a588dc96c06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4ecb3d-5b78-4d53-81c2-2b07f3c90fe3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4540af2e-4aca-4dc4-81d0-d35cbb79beaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f4eb07-dc9d-46c1-a07e-d87a560daa06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05151646-d535-4d3c-9099-6e20fa91b6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "30945eb6-979f-44d6-a933-3664c6d50e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db07c6c-799e-47f7-ba27-066b0cb67f8f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bcdd0b5-9392-443b-a768-9b08611a4f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d749d9c8-0c8e-4234-917c-1cdf49686a47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62d9d2c-b309-4b7e-9d6b-205b33fa907a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f123035a-f6be-473c-b693-f1a1d9dcb0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f00cba1a-412d-48aa-96de-f84b611c8106",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d581d191-629e-4bf1-ab71-e1ee7f6f905f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5035dbe6-8a85-44de-a539-bd3d27f6aec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe21aaf-7ea8-4b93-848c-28ac63095b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6615e01-b42f-4108-80d8-7ad742713fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8715851-c01a-49c8-8194-f04a59547fc4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e723fb-f267-4845-a741-5b87ab0ae8fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64a41894-d655-42db-9d7a-9ecd0bdde08f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7cc204-b29e-4ed8-9bbb-3d2b4f854791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0458b45a-eb63-4054-89e1-157c09654b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2393c0b-b94c-464a-bc54-fa445dd87a28",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e52577d-59e3-4180-821c-c71d620fca58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce32f0fd-15ce-4d90-b01c-1b89fda2dd20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d721881-966e-457e-9dcc-e760820d4962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "54d96b98-61c8-4b7d-8a05-a5ef76f980b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55013957-4f7b-48e7-b55e-e0c39970dcc0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ed8b25-6589-4567-ac29-2b620369d410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "426d94b0-3eb1-4289-86f1-07ab87d7e623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387d31b8-44e6-47b7-9834-c4fa983fc2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b836aeb7-6e0b-45fd-a62e-fddb90871309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d1f951-9472-4493-8199-1d0bf420b9ba",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c53f45-399a-48a7-b73e-d80437da22b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1806e64c-fcf9-4dd3-92de-66ce4b0171f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c362275-4187-498c-8900-e29031d5a151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "de99374b-d9d3-444a-ba87-62683751dce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b2498b-ed07-4143-9519-d513b6a0b60d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09539dd5-c4df-4080-aef6-c66554943140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1834e4f7-1482-47f3-bbdf-1a0e80d23680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fff9e5-dc7f-4437-9a9c-983de688f818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5297c4e4-78c5-4622-abed-c80062ed251e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540f1c67-971d-481d-beee-7f0f23280b0b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed37aeff-8b09-4d06-8d5c-fd7b65660063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f51df4c-a8ef-4dde-ba07-5aed347a89f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de95e22-09c5-4ef2-b1c5-7f0368a5c199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "652bbeb0-0b20-4f0c-ae38-458be04b637e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52dd34e-6fa5-4e82-aef5-19ac96973585",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6c059d-a9ce-4875-a7e3-d8e8bd392021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8059ca7a-887d-4292-92d1-ed1f357e85ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14fb7b5-41c4-456b-8acc-ccfe11b49ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d78fa15-7629-45e5-8a16-4dffcdecfe57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c4727b7-88c1-4b88-95e9-fcb67b4c8911",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e568aea-0607-47f3-869a-97c29eefb41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab54d65c-ad0d-4f49-90c0-cc4dbf07ed29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b074a17-0f59-44eb-ad0b-3113ca3c324e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "01527f4e-7fd2-488a-90e5-09cb47dde7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb8fd07-7cc7-4cc8-9211-1735fb963902",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87570e25-e691-47a4-b5c1-58626a37ab3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0945e958-3ba8-4be4-a268-26136f993218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d383da93-9404-4d20-b997-b81008a9e3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "92eef55f-629b-4ba8-949e-bbe1fdd95166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd803962-c4f5-45bb-85d0-c3499ec72111",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dcd49e0-8e92-4c53-b42f-4a45cc04fb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c92832c-f21a-4a1d-8d05-2f741425462e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311eb8bf-6422-4c72-a119-1f69859d1ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "798272ea-1fbd-4cc7-bdd7-1a26d0a93b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce8ce11-54c7-4e98-9818-1fb38563d855",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3e63a5-208b-471a-89e3-7676ba3c98b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d498228-5536-4237-92ee-980633c097ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f35c5c-354a-433d-8ce5-3e254ac29f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bef15246-ca36-486f-9cf3-1bcedd736afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c50175d-feda-4dec-b6f5-28a5bf3f1292",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a31a68-c7ed-4b67-8554-076873d03c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80215539-f7ec-4b74-bd03-8b1ff5ae933c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da5c8b9-6264-49bd-b56d-991efe9ba314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c729c0e4-71ec-4835-af81-5887e762c0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e8ba33-b8f0-4a42-a986-64fc44359e0f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08520389-de78-4415-a063-ea1cf87f3575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4130b88b-522d-4e01-91cb-2a6e4db6048b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658fab63-5b3f-4616-9e8a-ea610730886a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9adb54cf-6ffa-425d-8435-8e3c21f3c69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741fa794-c516-4f22-9eb7-fda62a1cdd27",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db90d57-594d-41b0-9a07-264aeaae1793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d17eef3-68ac-4b1b-be60-6441a4c04c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466a1151-7da5-4218-a54e-a6f6165aa7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "549832dd-ff65-42fb-bef2-e4d0ccfdd9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c540c084-f761-41a8-9cbd-f50d5433459f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00587d90-72d7-405c-af5d-20bc46269faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe149e99-e15b-49d2-9320-78c8d219ddd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db98b5fa-84b0-45c4-a207-d7a4fd16706b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "704cee05-c48c-4c5f-b2ac-dd96574f0bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751ce2b8-f996-4a4e-bfcd-3a9e5f4dda8a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcce71a7-cdd7-44ea-8b2e-2a7796fe5aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c17c7260-4779-48b5-8728-4995ab9442ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a582bb-e386-4d2b-8c76-8879e13e435b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6b57c63-0c4f-43f2-b339-b54a7443d6a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56124a9-0ce8-4381-83b3-d671e83af88e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa5f737-17e5-4330-b3eb-61823b739a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66523b34-f21b-40a3-867c-a703178c02c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05b4fdb-72fb-417b-bf1f-4c426be06386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8743beb-e9ca-4c1d-93fc-3d609f06e464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a6dacb-6a7f-4860-9809-d4590d5746be",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c22072-0903-43e5-8b80-66d5f777c5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c067350-befe-41f4-89ac-cc6ea4b0e395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23f2add-5a68-4b9d-bf6a-dbf27c8d96eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3919a57-6633-4b92-a5a2-9da8eb4a9822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb458d6-333d-4e90-9966-7739ea90d427",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a53107-087c-4d49-a0bb-086dd0ad5ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20b5abc0-f702-4e7c-b2d4-5ab91fddbcf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f242c2-f920-4f63-84f9-075cb7f0ed29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "223fd199-563a-4b77-aeff-39c82f02fd71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e555f6a-bffd-4421-ad55-7ab3d05ca9fd",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f61b76-c7f3-48a9-85db-0d7e24caf5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df1e1e9a-b7bd-4d80-9ef0-17232c95080c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a14beda-b970-4fc6-9c65-65c418fbd995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad5b26f3-33ac-46b5-a6f2-45b6e8078265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd958fc-6645-4a14-a6b2-d2e99c55dc1c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "788e7086-b1fd-46ca-9045-17cdb8e2d695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b288279-f25e-4bc3-9dfa-8ea13ba74eb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb9df5a8-c795-4652-be28-18f85a08a155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "de1df41e-a51a-42d5-9f21-3f0543a60351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3f58b2-4e41-4c50-b9d5-31074df6a14d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c2019e-0895-42e7-bbd4-cd8574fc5f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b92f13-9a64-4cc1-b052-a607c28b5ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6cc5af9-186d-4d21-8d27-6d9168c8881f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "283d3bbf-57e1-49e5-8b78-055fbeb12516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdad637e-d2ca-4447-91c7-73750779c545",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "028e14c1-a90b-43b0-8484-92b572c7d62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9774ec5-aa64-4c2e-b788-b9933d36975e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d136fa89-1741-4e47-b5b5-7464f4f2bb89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c2815f9-e513-4c81-afb5-553ad533e173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1afbca93-c1ee-443f-9989-add69a9a1e60",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ce15df-96c9-4596-8a7f-d242e3ad96fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5973b90-af92-45f2-9543-993d743e9aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea75300-0565-4e86-a3a9-4f0a10941174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "82010590-0241-4382-9bf1-92b3269690bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ef4fb4-60f1-418e-a1a1-a149145f45d4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5c8c3b-f338-42aa-a835-066af97b5908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d00271d-d29e-4dc3-938e-61c57f8b29c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12062651-f169-4f42-8337-1b4f96d86558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "256d9158-fd5d-4e65-addd-98ab8531e04d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4836c535-4222-486c-aa3d-742db16c5d1b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "353af489-e812-4a57-9267-df9f0bedafbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57add69c-7bff-43f0-a262-6a85f4343bcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf575a9-b499-457e-88ca-57cd5d7a3d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8505bc74-8756-4329-b81d-162ba7a3276e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f24438-7d6d-475c-a534-ee885fc75cd7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1657b0f-b553-4479-ac8b-d2b49611a1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "493ccd0d-234f-4668-9700-553c6c9b3b11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97bfa9cf-9a72-4509-a386-ae3265b42b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b60e064-4af7-4a06-b09a-aa2a33e4a05d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98698c81-a9d0-42dd-b154-55729d14dce4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "344c794a-65cc-4842-889f-fce46a0041b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8dee2d6-f7b8-4f0c-a5f9-020d46757cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab125dde-c03a-41a4-ae5e-726afa615fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "06ac9023-dd74-478e-a443-2e2f807085cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91f8931-961e-4be5-b4f6-bbfd73630550",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bcc7ac7-c91e-4bfc-af77-e34cce77ce68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b86ba00f-1831-405b-80b7-47a0acb11cbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3517c068-1567-46d5-b62c-055ce59e33cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "51f4ba78-f44d-408f-8707-b1c14a789838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6437d0b3-bfe1-4b2e-b6b4-27155c680718",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "808e6a8a-25a4-4562-9ce8-30ebfd624289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb58f203-9d0b-4d3f-b800-ebd3e8921ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3abe11-abd2-42eb-b698-59116d052a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9186e799-c228-4fa6-81d0-60440bf358ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75a6bb8-bf8f-4a52-babc-ec8dcc32d641",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f9929a-9c04-45cc-81ae-73480076fe22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b16e8837-c629-4e87-a4e3-cbc7c1ccac5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df84626-ed64-4fdb-aaee-5aab41a81516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "64ab9ad9-5849-44be-ab29-9abdc76aa623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3679173-cd32-4d9b-861b-0e8c5f301c45",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4894814-ad9a-4ef6-857c-2d7a57dcbc40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98f48517-40de-44f3-aab1-e4dd13703e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf6969f-7334-4a55-8e03-9412c7620cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b0b2f48-13a2-4f0c-9eef-33da045c713b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2866ac-4984-4888-8385-ec54e919f293",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4935bc58-8d29-465e-8320-19e9db514f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2685680-e3fb-4756-9f96-e6f5d4e1454a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745ae36a-aec0-48cd-bd4c-53cecf6ac00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2303b620-fd6c-4b1b-822f-03fddc422a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87bfa9af-6fc8-45db-8599-3974e349a60f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce1f641-b795-4a5c-ab73-a2329d8c6cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46eb447f-aa13-44bd-8b92-0c4dd8599776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ed9540-c02d-425b-a704-e5af5bd7fb5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "482c8dad-03e7-4e8e-b6a0-ca1646628dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c0327f-d987-4058-ae93-ae4651d35527",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ab400f-bbb3-466e-9bf3-7666ebf84d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b1eba31-dfd2-400d-bf97-bd03660bcebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beded437-405b-41dc-b57f-dce800f7af63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "17739efe-3cd7-49b7-ad5e-4d6c68223f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c1232b-3c2c-4215-9479-44adabb14843",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "869d1ac9-1c53-486a-b0a2-a44063868524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d13360e-cc58-485f-a0d4-3c1f02270344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb9c525-261f-4f59-b726-52de3dc2a777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "42abd2c2-ed8c-499d-80a5-cef8f708c5e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc23aec-14f3-4d3a-a500-7b7d142089ba",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb84c48b-4128-45fe-822e-eeecad985018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59d7ed11-a8ba-4400-b368-e2c592407c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8017c21d-1c6b-41dc-90f3-a8507c32129b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f024a2e3-7bfe-46ae-9d7b-4d8f261de735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96da8631-1e67-487d-bb73-2c54b6f2f453",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55783bb-2bfc-46a7-b454-6c96ff59d00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b8b761-7d8a-44b7-9f02-8cccde48afbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49cc9831-491b-4ec2-8fba-8d35f21b6c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ba604d4-7422-40e9-96da-a007cb24339f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76cb9531-2cb0-4af5-898d-1ee23f7a0b21",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95980ddd-6fa8-4807-ad2c-99fdd8f61f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa5a7e1-3a00-4ee5-bf23-f786d561a65f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca5d1e0-d6ca-4a0f-bd0a-5ceef2b5e5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5c1497-586f-40ad-bd68-acc489ebcfc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1221e714-a4d2-4f3b-a568-dad42ee3ed18",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7ec55f-b193-407f-9f76-742de78fca4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0cc45b5-baca-4ca9-a458-67a2a9933c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc2d8d0-0afd-4e95-a627-e3b40b7fb94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e229c48-9fcf-45ba-8390-1c9c2d8b0c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8533f868-1b34-49b0-8280-fca6d7307111",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7eebbb-3d32-4fbd-8812-1d8134c4eae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2eb8428-9641-45da-97a9-5e76ff4deeb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac032d5-abe1-42a2-a336-90a01f9e33dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "231f1038-64e2-415a-9763-b65f27752ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca2180b-238e-4c7a-ab87-012418bed0f6",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05768511-0689-428f-b496-68a338eb6bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffb5b821-8236-425d-b8e8-5f26f4be8c39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07625ff-8837-4a4d-aeae-7d706fa4d7e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bfada4e-9577-4fdb-a6f3-5528362b1a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171ee7c1-6d28-4f48-97ad-21439ed06474",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c5664e-265e-465d-89a9-114ca9defad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ca23125-2a15-4cbb-9a6d-442e463230d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18dc6882-36d7-4393-a00f-161621eaa3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "041d4878-2d83-443d-91bd-bbdbd91b12b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e0cd3b-863d-4d72-8a24-8f604976e9c4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2717a6b0-7e58-40c3-abb5-b54a837a5658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "229d73d5-9e78-45b8-b6dc-c5ebfa2c6157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572d2c0d-3b95-461f-bd58-0443e3001317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "46d1b5b9-4976-4009-99c8-43b9295fe671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f108ed82-68a2-40df-b1c7-94d421e5ca0b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71980888-60ad-4f95-8fe7-b4912f349c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a061493a-57d0-4b0d-bfae-f012e823039d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6eb6486-4408-4d04-a5bf-fb16be0ad976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9670c8b-5cae-4e09-8692-c66a26527ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2806885-ef57-4027-a13e-d4c76745bcd3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0a391a-e772-4c12-89c3-f258bd3522da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f99e12d-3841-460b-a983-061089fde821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7daa6860-a5fd-4c69-98b9-376c3616c442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "75d5f988-4461-4144-8b0c-fba44b8f961a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b7fccf-8e2a-4f04-af84-07339b9407ad",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32170080-b232-4184-be68-755c6b4b54a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e92ce99-36c7-4536-a79f-9694dced03d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9f95ec-1040-44b1-9250-3a70d8b2b294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "73a02bd9-7445-4deb-b374-bfed5501eecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b187dab-64c6-4cc1-8931-a4a8710d0410",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee48bb8-fca6-4bc9-9a00-545c77ab11f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e7927c-5813-4af1-9df5-3a8045d147a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52251df-69ba-4aa9-b8fb-3caa829a36e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dcfb3f6-e0cc-4f9b-9976-22b3edf5b923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cfaf040-b37d-4674-b5ba-89bb9b92c663",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "035b6ebd-0822-4cbc-a255-73447b5b7088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "680db547-49f5-4847-a02e-c11a310c8ed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ccaea52-c31f-4ab6-9b4a-66b04c672abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f798929b-88cf-42b3-9422-816b3d2e7aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9edf66-9978-4546-8281-53bb4516d59c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c83f2e-848a-4f3b-88f7-e77196928894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080aeb3f-3399-489f-96b5-dd9eb836425b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758f620d-6a6f-4008-8d29-8552780fc16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf80728b-6bfd-4415-aa65-6245676cb138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca6246f-beb6-41ca-9d55-be1587c42b51",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a6d4cc-c6d3-40ce-934d-1ed5dede2fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "610af10b-2551-4099-95f9-63d67f129759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de036fee-455e-4abf-84c9-048971a48533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9371257-b1c5-4ca7-80b0-e0b3c8d7b36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7c87fc-e5a5-40a8-b658-7dbdfe65a793",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd607809-c942-4973-b63f-0949c63ff1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00662c5c-c265-4d1d-8bc8-e7dce2e6b0cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f5b030-96f9-4876-a010-0ff4e390647b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bfdf91c6-d9bb-4b22-906f-424f77167442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ba8358-9939-45ca-9050-26bac5a01ff2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ddc89ef-bad1-4f2b-82d0-5c4fa2c3bab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bc0dad6-854d-47f5-bfb1-1c037701e773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf11f92b-0fab-4528-857a-d5e649abdfa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d57223f6-a82e-438c-bd69-7c541aab352d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d51ba52-ac1a-470a-912d-35f4019a9c22",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35f4c1a-4b25-466a-8449-c5130a0c4336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9604f3cf-d9a2-4114-ba51-f1946355c146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b63008-ead7-4c30-98b6-12f7d753faed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d72dd44-8f5b-423d-9038-418e22280da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713bbfc9-f860-42be-be31-a1c407d1a29a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "635f3fd9-d08f-469d-804e-c697c0562811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c88d2ffd-0e7a-43e3-a4ce-02018e4391fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8215c3-2c59-458b-b757-242f7aeefe2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "954a1bd4-49d1-481b-8fd7-8cc61345e0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da7c801-44f7-4826-980c-48bfa14d92b6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d49db86-bd5a-41e8-9227-c7394cbebdac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5794cc0-bc9e-4d10-9e5f-c4366139e7c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0b3ec1-be03-4bea-9769-216c31e0cbe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3db11a14-288d-49bb-880e-7b30812facdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7849684-edcf-4c17-aa96-2bc314ecf287",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5208f5e5-9fb6-4990-b805-b1d53fee4ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8626e37-773b-49dd-ac37-f47f7fbe944a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc3d711-0e4c-4c08-9378-8bd2e37ffe5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4fc049e-4d13-468e-af69-adbcc53b7fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8590bc5a-2706-4ba3-9095-923ec122e3cf",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39520db7-f249-48cd-a2eb-fac1638b2116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4705f55d-16be-44aa-917b-8bc2649a1759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7319b8b-8871-4c1f-b060-e5bfba20fe22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "688d4cf8-a9b5-4c1c-8003-3f00d452bd76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53992a3a-68d3-4e26-947a-e84dc0571dfb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "436e17da-493e-45a9-8d93-e8bbd3d8b153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2015668-6939-4586-bcf5-645948f795fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f96a31-44aa-4770-b208-00b612650475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "20bcb443-679b-4446-9c7f-f8ca1580f197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69d71b7-b431-405c-b5a3-ae89db107623",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dfd8291-546b-4dd2-ab95-937c40df95ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "153ce07a-e302-4238-b322-617b8e90e888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceadc704-6a12-44f8-a039-07859e9a3e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7150927b-f52c-4865-bc96-91ee369632de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35663324-8b42-4500-83ee-89457d1843dd",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0493b3-7e43-4b25-aa8f-422e141e74fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "230f142c-341c-4b5c-be5d-7cdbb0647c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8faba646-1351-4b41-a324-fc7eda45d11f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53ba3e31-5131-4340-944d-23eb6ca4caf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b192ae7e-038b-4184-b60d-55a14c3f5396",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "470ef8e3-8af7-4241-8a83-e6b399179a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdea2d6f-a2e6-42fd-b58b-b55da413e04c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ab1a6c-1798-4b22-b190-0e6c1b2ac04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61afebd3-b151-4305-9412-b8016c25cbee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f71b66-384b-4bf1-9aea-2fd43b03ac6a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c50ad66-ce4c-44f3-9f43-ad5ad2e7a00d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f0b5f99-4755-4df6-add8-bebd7c014371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b60ee90-2d4b-4dd0-b4ee-e87cecb26fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a418e9d-1117-4adf-811b-6ef77c8b7394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6dbb1d-fe78-47b0-bef7-6a8cde7fe898",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "463641d9-b311-405b-9ee1-0784a95bf14d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e281d4-c7a3-4ac8-9508-4c9cbb2c7fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "726c45c9-472f-47ef-8912-c8a8afe05573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e9bf414a-8a0c-416e-bdf0-75ce032fc3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "198501e6-ae40-42ca-a03d-e624f36048a7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f633de6e-05db-4722-8918-c9e1d135beaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42b2d675-fc6e-4d81-b710-7b113a1fecf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698a5357-6165-4834-9a6f-dc8793f5760f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2cffe90b-0679-42e7-ad5b-c6638ee30489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c79e2b-03b1-41e3-b899-d81cc0ad3df6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3c5d64-5326-4a38-b99a-dff167909920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f56c3251-9583-4d74-939a-d3df3ff247a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774575c4-ce68-438b-84ca-20a8ae625437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "78996aeb-917d-4480-85b6-2048c3ea02ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45157ce-4be5-476c-b628-b628f1431de2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f53fef-a434-403f-947f-e5bf8dbbd484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45beaa0c-c597-484d-a95a-c0d7283a5292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc09104-c553-4339-beba-b7b5463c6d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "10d4f5da-0e45-4ec0-9750-f9add5f93e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d44cae-b1bd-41dd-ac8b-06731b305469",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0905b6cf-7651-4315-a49c-f986ca5d63d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80942988-664d-4f6b-9b6f-f02f14c25172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401380a0-bddc-4a8b-8a70-dbfdae60633a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1862bf6-2f7a-4d48-9118-d8ce0627fc77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d77bf34-4011-4682-9d2b-b74b59235f92",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a733781-a5b3-479c-a543-ea2cdb3e070e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e06b5d-a537-4c80-8244-060c97ffe879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce299c9-669f-4cb4-bc7c-f4de0d7e442e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "154c859e-dfcb-439d-aab6-50d7ea492863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440d019c-7035-4f72-9cf2-c598e3511009",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "144eabe4-7dbc-469c-8061-0a79c90396d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c8f837-284b-431a-88d0-8c627948d669"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73fda9aa-0ef3-4d43-8323-ddb7cdbbdc4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e8be66e-04d8-4c98-9a5b-9b86834a148c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf8fd1c8-983b-470c-b22d-8c8a46fcc7e1",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "325e49aa-45b2-4f8c-97ca-ee7b875a9cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0e510417-e1dd-4509-a3d6-3d5c73d54818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067be546-c2d0-4b33-a25e-64002b39ce39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "54123937-30ba-492c-bd20-ab1d12090482"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "312547b7-4c5e-4e71-8783-435e216fc7e7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0793ef73-441e-450f-b479-d321e08070d0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da37d385-bad9-409d-89b5-fae56bc1cdc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8181750c-fb15-4a53-8c83-a87e6172710b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2279d6e7-8907-4e3b-933d-d61685f2aff0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1b954891-0207-48a9-8b2f-0d359693d5c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d844393-fe36-4c76-9962-ba529fb986b6",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16a5df6-32fb-4515-a20a-44091ca87bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb6646b5-a0e3-4c45-850c-f2fb897c5409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e03197-7e84-47b6-90b4-d52e8eade21a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5b00c5d9-0b7a-4736-ba63-fb5ea2b13684"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5fb20898-33be-4523-85fe-efd383db5993",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a3c3ae3-aeb0-4d6f-bd5c-ca71c4decf0e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a3719c5-5adb-4e07-b40e-a0dfad939b2b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5121ff1-0aef-458a-a4b4-24acfeaca74f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e7626503-286c-4b74-b1cd-60126a62750e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "83e98c4f-9a21-46bb-9fa4-019be07b871a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "889a3a69-e046-49c0-b7eb-1e35b006e2cb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "62ffbc6d-ec64-4a9b-bcac-3ed6b781c15b"
                }
              }
            ]
          },
          {
            "id": "117aa908-dd59-49f4-b6b3-c02e00b56350",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bdc78c9b-0d47-4b4e-8ebb-efc32016beb5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "82ecc614-614c-4b6a-9043-98e092b9eade",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d62b8da6-e98a-4ec2-993d-526d50192dd1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1085531c-e368-4b8a-b9e0-21abf6c61823",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b486b9b8-4faa-4ee0-8911-93900f0c8cd4"
                    }
                  }
                ]
              },
              {
                "id": "4d3a8736-7c66-43d4-91f8-9d296d73dc97",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2b4564f-2ba4-44ac-8f4d-269f13282a69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6347712f-4199-45bf-bbe7-23a56d13fa69"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e42629e-bfc9-4e67-8243-c621360a0d9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dbfabca0-5d8a-445a-9f6a-068abc327b5c"
                    }
                  }
                ]
              },
              {
                "id": "a0c2908e-126e-46cb-993a-5d5690003667",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb94acf5-4840-4916-bf51-fd4bd83bfc96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "151df303-11e8-4931-b5bb-72b854b4c5bf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b661a35-01d8-46a3-a5af-9eb88b23cd14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0d591ba0-4246-43ec-8fad-a1093753589e"
                    }
                  }
                ]
              },
              {
                "id": "e2886750-d605-4510-ae21-241691b4bbc6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eaf1f27f-2ab7-4772-9968-451ff40dccf3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f798ec3-0c50-4fa7-9778-f38bd7cc6760"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "318c871a-b031-4881-b6e9-01e2072a69c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d8577730-45c7-4fe8-bfd8-0734508c632e"
                    }
                  }
                ]
              },
              {
                "id": "bb087e57-7c85-4197-b6d5-53344185e8d3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b65e0362-bf31-4e56-8140-c1122a7f6de1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef87b1c4-cc45-4ba1-aa0c-9c52eeabe069"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "61fe558c-e044-4258-bfeb-7b9770095bb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d98d1673-04b0-4a1a-8269-7902c0466eba"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9ab690ef-378a-4c1a-9861-ef416aa1cc58",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6e456bf2-d2c6-4f54-af55-dc368c94c5e2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0cef8e27-f470-4f21-84fa-ac452e319425",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bdab6cc6-a955-4dd0-bf1b-67afe3a6f40e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f191e12f-05fe-4bbb-a0f6-9616e278184a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ca3e64c0-55ab-409c-8027-d1780abaa4f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a3158fd-cd09-406a-9a54-4b3366318f14",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ed874835-c801-4dcf-a462-f8f4352eb869"
            }
          }
        ]
      },
      {
        "id": "d65efec9-f7dd-4489-bfc2-0bd4a58eca1f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5c53353e-b06c-4667-99dc-0a871b1a8452",
            "name": "Negative Testing",
            "item": [
              {
                "id": "89eaa0a6-47b5-48a2-9177-c0a035c302a1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "87cdd08f-9c48-4ed5-ae5b-d34540cac2be",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeded298-2a08-4ba6-84bd-615690975572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7052704-4b09-4449-96d2-ad63fb5cdd2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba982db-0a15-4e2a-9ba3-3bf57527f5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "89cdc43a-1c57-4fa1-bcd7-84afc828dcb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de7b88d-9480-4928-8745-855ce0f0824c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5552b0e-21c6-4ea8-9718-1d3daeda9a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79872bfa-2ea6-4461-ba07-e919af9ef788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab39b50-554e-46b3-a242-2ea3d84a3200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb7e2405-87d2-48d7-b275-4a183da77b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ed2dfd-7eca-4b38-99de-b9d7b9f64c9a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c9a925-c1e9-4513-9e5b-5f1b2b210ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa9b9ee-9116-49a2-bc27-644eae8b01e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54754a3-1607-45d0-a511-fd80cb9d765a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eeabe8f3-e9de-43f5-a91d-14f652ccc7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae5f103-0c0f-4158-9bc5-d70bbc191ae7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ced9c65-69af-4b6c-a5de-cdb9a7147733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b492b30-36a9-4106-a33e-99605d17606c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0968b1a9-d3ff-4247-ab77-89f698b96c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "85586df9-8ac4-478c-82a4-bb4c6e6707cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a490dcc-2d44-448a-8270-3e5170816714",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7266ee75-8cbe-4207-80fa-2bf1231eafe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43bbe071-7245-4cfb-8407-a6d572b87546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a4de4d-ee91-400e-a6fc-a27fc30297ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4df4b9cd-92b8-442c-96ee-f58e7592088e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94843265-4f00-4b86-abd4-625f3d5eb1fe",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10e7c3b-87e1-4ff8-9292-af8d39952f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dba756f2-0cc3-47e6-a58c-2cbdf930515c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce816b44-c410-4be9-b532-12de035c65e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "55fb65e5-ac98-444c-a7de-a842f0391510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd55f30-e3ad-4ef6-b6d3-d62931df6532",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d82f1a-7da8-4bca-a781-46b6a30da94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e5c0714-3ef8-4335-80d9-1cec2afdda7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49351e57-782a-4e0c-a2e7-149a5c300e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "35a8423f-e731-4cec-83bb-26e77e195edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d2e967-0ffc-465f-b68b-5ecca4171ed3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a28b99-b29f-483c-a487-ecb44d235a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97ad0d2c-bc11-45e5-9b29-0bff5af1508b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac8afe6-d166-40fb-beff-873b9b6ffac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5bc4b00-c487-42c2-8472-f70875f33051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c162e57-0559-4f5e-8a8c-e826f606385a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed24f38b-fa06-482f-878d-3a4047c365c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fec2f44-7b39-4763-bf2c-62fda370ee33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46753d7d-5d02-450d-a563-379a7e2357bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ed838c3-ebbc-4170-8654-52557233aa4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01cdfc6-dd69-49bb-9c04-10fbd808a494",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a72ceb-e991-43fc-b5bf-4a713593a5e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3744cb6d-218c-44b1-be17-2c2da7c35131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2d079b-c356-4934-a766-86c4b4e84f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3acd659d-63ee-431a-b70c-bc71332682fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de96460-a4ba-4716-aa33-5d9872a28cc9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ca4255-3a0c-4250-9677-6c37f0571868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "932e2254-c6e0-4b47-90e3-d9cc5babbba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf497598-19d8-4b7d-b599-238a18497d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c2bab745-c998-4852-8863-2b91cf08d000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28492b92-4b4f-47d4-b1de-9e803cddc6e0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7ae87f-fb6a-45ee-aff1-f55c5badb227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecbf3b1f-5415-4ba2-b3f0-a4e7b3e583d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25f1c55-95ec-43fe-8aaa-03ca2ed30454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1893f1e9-fd86-463c-817e-737563a694f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7869933-dc2e-426e-86a3-8c187137189e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a190ca-65a4-4e51-8a82-dbfe7a9d2e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf4727a-7303-4374-b4bd-8519dd8c38d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932bdfd0-ecef-46d3-a4b7-3dc8a3295d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c66abfc6-9a53-43c8-96fa-daf5d2b67ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef8f0f0-72a9-48f1-a5b6-50762cd93eeb",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c818c09-2643-4e53-9350-7b49f5801cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "078255cf-0b25-4153-b397-bb9e11c1349b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762ce486-49da-46b3-aeee-cf82929db7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa6d76ab-92eb-40c7-b22d-9127fd1717ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44778b19-7a4f-4b97-9408-2fba2783265c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd428442-6af9-49d8-90c9-ed8ce7b03dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ebd067b-dd9f-4cdd-81b8-9c9324f70f3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76250bed-5df5-421c-a9ca-c910437a34c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "62ba6a71-e699-471e-9b63-8b397c46d008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48039e7-923b-4d49-b220-8fea4d068818",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315f8a42-c200-4e94-ae8c-eb9083c8dff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f8784b8-895e-464a-bbd4-74fae3a8671f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51f2e92-529d-4891-92fe-aa2955c385e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "203ba4b4-6084-4829-ac19-dbf277b4384a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3dfc8b-6a17-49b8-8e15-20bfb7b1880d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c80d5a5-ef8e-4e6d-9e54-c4464b0ca145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "842c915a-cbba-4835-b5b6-255734e43eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc08128-82e8-4ee0-af73-b06d5a77f04c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5abcadc-16c5-4d38-83ba-9b214e25568b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7ae453-e023-4059-9bfe-0837e4cc4b4f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f20bad-7fcb-4c59-bf52-5be6f78fb265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecbf90fe-8b38-4112-a9ae-74bc992f8687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e06db9d0-d35a-457e-93fb-1152d98224f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "acb5d4b2-a28b-4974-8a58-a5be7e898ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df79666-cf1a-4a7e-b2e7-b160dd49cd10",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b697d0-0398-4841-a1ff-8870b6106202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f90868-c9df-4c43-8b23-7f4a2678634c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab601fc-4dd5-430a-932a-b5bd6a0d2c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46d274cc-a046-4f13-8124-b22739e451c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f2f060-a622-417f-a9e2-2f428aca3bcf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bcb7b5d-30a6-4a8d-beae-ae1611d821b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b824cff-75a1-48fd-bd20-ea5985d0fb02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16fa47a-7ca5-4db5-b40e-51b1c7ace45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7776d8fc-17f5-4d1f-bff2-88f5a45a6dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f410814-9abd-4a5c-91d0-3464eb3502cb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5de9a4-cf72-4e47-ad03-b72a3afee478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a61fe237-58e2-47ac-aa4c-b2960d0971ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d6655c-a7b4-4623-8ea8-a143842824a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7528104-2cd8-4175-b756-804ad682a6d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b6d052-244c-4dd5-b047-8f850b46ebd1",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "522c51a3-c38a-4d3e-8e70-d8fcb9ffbf5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "683439ae-ea33-40ba-aa6a-b5a5dd2e48ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91926acf-cebc-4cb3-a0e0-839c39763e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f76dbb15-166e-4a56-9fe0-029c8664566b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03fe2e1-bce4-4428-a162-ba29c69ca0e6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ea983e-95aa-4f05-93b3-8463238b90ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c259533-8cee-4181-91f3-a22b1253fd85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3931a895-11a9-4aa9-9b04-75dc1261a20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa8f487f-a703-44b2-b2e0-26b917c41ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40489a0-0d9e-4da9-8386-48effa5363f6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff98569-e941-4ec3-8630-bc23ffad5b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b13f4bfe-4d20-4b3a-9a44-6f3cef7acd44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9690ff4-0f20-4a29-a9fd-2fb58d786a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97877d17-eb04-436e-9495-94a0ae11afeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3918507a-8a9f-4ec3-b3f2-3c0c9e2ef74a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8adc21-ffd7-477e-9dc8-54eabba91de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6183c576-63d3-4e42-a139-e230dd3e30d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7428dba0-bca7-40a1-98ee-82608b365b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9da5fe09-01f3-493b-b9f1-82005278c111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad2e788-fba3-4312-9625-706eee78bb29",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c18b8b-3ca7-4499-9313-014aeca0a599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed9fa44-826a-4171-a3e3-6020fbe699c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5497273d-bf8a-4a07-b5cb-dd32aed5f7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0df1d967-6a48-4281-97ca-4d5b8c7b90c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f56f2519-ee22-42fe-b8db-eb76e2d65a0d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6708f44-476b-41c6-964e-3a2b6445826f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b455f03-1531-4230-b552-17b138dc5e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed4fea0-db36-423f-892c-cc61c67e0b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd6435dc-1e62-4e6f-b4be-284be61168df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939509a5-86d9-4537-ac5f-f987582c8dba",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "877285a7-dd72-43d4-9c84-338f7cb351e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be0ad5f-1cab-4b3a-b30d-98665bf57e3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc81269d-df29-41a2-b342-7aecfc01a494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6328f527-a17e-4a49-ad3e-f6955ae2b512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22deb47-aaa9-47e1-9b1f-75a9577545eb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe65139-09f4-4ea3-901d-ce339ce2d90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29b2c862-b162-422d-8126-2128535c68d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b2d753d-c25a-4725-9d7d-85d5b2ca75c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04c99895-c719-4716-a1b3-39ff118654ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "732720cf-8e79-444a-bb74-216314c3da10",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce64d1d-6b89-462d-95b1-d24b64d41e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fdaf316-f05d-4b3f-8317-6204373144c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12dee52a-e0aa-4612-bdf1-db3dbbfa9673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e551384-9ba9-41e0-a785-54232ead9134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3e2da8-3dd6-423a-8291-103380fbc3d1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d1c965c-1744-419b-a772-14198123de78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7f3fd3c-de7a-4b29-ba5c-91b6f7f38fe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb0f2e1-a26f-4a21-a33b-f52868bc61bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53354536-d78a-4064-a914-03cff6b15f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e84515-a9a7-46c7-b472-92ed0e055129",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f15626-35af-43e8-8164-3df5ad2d5718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07d00769-786f-4989-83e8-b36ca2d1d1a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ee1c3b-c6ff-4cb9-863a-570ea21dde09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18789669-eb6b-4f33-9234-a2484c867775"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4e2533ed-2983-4621-8c3e-f0b5079f1ccd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "145f11ad-81ad-4478-bb49-30114aa53e3b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8140ad98-af39-42cd-9ee9-936151176aee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf70a77-80ed-4aef-bd5e-64b1116a6dac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "765b19a0-f19f-4dd9-8c94-f86cc3584b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94054462-8cc7-46be-82c5-c6691007a626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf4b93e-c347-4eba-8cf7-7d2be07edef2",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857952b8-d828-4b64-bc02-0a26facfdf0b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "b767747e-67c8-4020-ac6f-7456bba86d9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a40d14c-7502-4e8b-bfec-c3b9e4102dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f826fbe-0fc6-4536-bdb3-e788b6301b43"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fde5234f-c7fe-4cd5-9aba-8b27f0015c71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2609922f-9572-4c96-bca1-80ac9462df8c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4c281cd-2f2c-4988-ba2f-b3fa4577b53a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94564df5-1242-462d-8cc5-a08c12005bd0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c80e3a2-4566-44f6-a17c-c64bc4843725",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "923d86a7-ddc0-40d5-9dc4-057cbd0f138a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "616f1b54-6410-4d52-805b-8ab713865411",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8155242-84cf-4b97-87bf-3e197cd84413"
            }
          }
        ]
      },
      {
        "id": "b58a6720-aa52-4e45-9d49-28891bf1a4cf",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "83828b51-6bec-4935-9931-14da76369608",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c3de97ae-bb71-4e2c-904f-e218c5d9c82f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0f593a31-d58f-471a-afaf-714122498d81",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5890ce19-0529-435c-a0e1-0cd697e7bcf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67e13cc6-db47-4f67-8ee0-398180fa0aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629966ac-5095-4e26-bec1-fb483be16af4",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96954d5b-8bbb-4618-ac49-03935157fa49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce453e3f-9e3c-454f-b307-b020e2b66f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f22c352d-38cc-4b91-9e2c-c73bc61a0c8b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77fb296-f771-43fe-a79f-3911a1b8ed68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc4e7440-50f5-4e24-ba26-ead6b8b2ffea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17ed168-3df8-4650-b324-e04bc87e1436",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d76b32c9-26ab-46c3-b884-084e6dd7ebb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f6dcb36-f1c6-4825-8acb-2300601c063c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c3b1f5-36cc-428c-ac32-c92bd60bd89a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7be8c2-87c0-417b-a640-5efdf0570c6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11a3a00b-6ec9-43bf-8406-374e398d7221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7735323-55a3-4d95-bd72-f3397e6df327",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09cafd86-1dce-433b-86a2-ed8d76dd97d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "289df141-14a0-4ed2-97b5-50b5d7fe3491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ac9cc1-bca3-4137-8d18-90998947b8ee",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e2c8c2-6934-4c86-97d1-bc3e58aaccb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a3279c-39c5-464a-b3f4-b73cdb661f81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e40635-5027-45b5-a91d-053282e594e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab07bc7e-5129-4955-b07d-5d7b6c4bf046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d2065c-b565-4d39-b359-1651e725008c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a055d10-c7e8-4fa7-a48f-782b0c2b2dbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8bc376f-d2bc-4a51-b7d1-4a54faaf9ac3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0273775e-98d7-4ac3-add8-76bac0f5a7e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2a915c9-623f-435c-8f42-8f451b2cd4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c11879c-5979-40c4-bbdc-1d89ce2f5347",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "756d338e-f3f3-4948-ba79-89bf116f4630",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbaba949-7efc-41ec-b7a7-905636e45fb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "227761d4-2762-4f7e-944b-2269d2b2938e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd5c3e6-35e4-4855-927d-3c175ad0c302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a1a1dc-9940-41b5-9195-8f36f79f6261",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a7475c-faa7-43df-a0e7-522535a80f67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb263d3b-f857-4947-a7fe-789793056c5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e880f84-ae7c-445f-bace-a5f41e075536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df26bbd2-e1e6-4537-8b3e-0f1e4771220b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef218210-5b7e-4503-ad08-e135a2614a60",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6bf262c-878f-4441-84f6-156c7945fb6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccab5a8f-fbb9-4dd4-8d1b-ffa26ead36e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b005e5d-f7ac-423c-b938-a525449a3b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "857afd4e-8e40-47f5-a5fc-e06fcbd55efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251e9161-2dc1-46ed-b0d3-ec7c0675254c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86045433-de0b-4bff-aa13-059ea83f36c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2432048b-092b-46b8-a352-9c760930fa4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19de0e3c-86e7-401c-9de2-32ddb889894a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6047467-4ab8-4102-9a50-ca32d7deec88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7106fca-6436-4cb6-a77a-048cafebb763",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76aa0b5-0db1-4cae-9c22-603eb39c1a0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ebc6f4e-e92c-485a-aabe-f3471cd60ca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f39e28f-5c7d-44e8-8b59-f511ff4c1b34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "349276f6-3dd0-442f-8f6d-71e214983414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "811ca4e1-c174-4848-9dd4-efd8d2cbeda8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f090bf4-11d8-4e58-81c2-e5a7e5d80e7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "426e4f4d-5a4e-4b6a-8743-4ccfb511fd66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8366bb-1d0b-430f-b221-182f6f00c193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "844b7f9f-a829-4796-a16a-a2f33e2aec77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fdf9afa-35a5-4090-877c-19c7ae9860c4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1ae270-fe1a-4be1-9882-ffc0b8ea1e14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67bea293-664d-41c7-a760-ee23247a9df1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "926f179e-90e4-42db-96fb-78d4fb2e5d84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "932b0492-8896-494f-ac41-e341da6eb075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b8d160-6e31-4044-9ae9-169ecc53a850",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606a5ad7-e08f-45f8-b6c3-9b787e886b99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cffa724-5949-46c0-84a4-3d2af164647a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af51079-f902-492e-9dc5-43b533e49339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e8aeb62-6d3c-4c78-8b28-55cda261d4d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd896be-0f9a-416c-94ee-10a05d8ff219",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31daea34-31f7-40b8-bfa1-b461994eb7ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94a5bf3b-6164-43d4-ba9a-3a21b4cc6b39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddcace18-4b9b-483b-b829-7abffde70407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb3a031b-5ebc-49de-9817-a9a46d4b4e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec37633-c100-4987-8cbb-74c9b8cb96c3",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6f6c5a-e21f-47e9-a9f0-6b393547878e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c0589ce-005a-4420-a36d-fcfdf953ad41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0896acec-03bf-4e21-bb07-1cd8ff9aca3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e30c8b9-c6d4-4f20-ba0b-3edbf7133ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c3056c-276b-4ecf-b213-a5437e265113",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2f229b-25f1-4ab6-afd2-947f7fc8ad8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abf5e571-7d2f-4ebd-a72b-3dee2ee6bcf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c989b9d-962c-4d22-b2ae-e8cc2dec61ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e79f76-9a75-4dbf-9095-242bf32733e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d3fb33-2560-49ed-8529-7296b1eb5624",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d68b4b0-f026-484d-ac38-887c910f9357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c18aac2-b0d5-4af7-84fc-5788659c69a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6dd8d2-02f7-47be-b6f5-cc72f48ab60a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4fe52fd-ed29-48c7-827f-f62fab7d85b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d31c50-0993-481e-ad47-79cc0c23b721",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e7401d-2aef-4fa5-aa83-beff83e552e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa6dbb47-b6d1-47e1-8af8-9f4932221c95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0648c0-9745-42b5-9e77-bf1b4debe028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "745b764c-058b-4179-ba01-6db398df6e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb623b1-6e60-4a53-b932-a1b10b3516da",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977ef9b8-b22c-4854-b9b4-e3ae3a7b5e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3b0d2b8-e7e0-4520-b796-e8c151050787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1209f2-b6f8-4d6a-8b64-369f7531b656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e622d49-3c31-47de-9d35-346db8911fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ccd881-a8d9-4030-a6d2-c5af7f498963",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546d8a09-3c28-4296-973b-d51f49e6a986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bebc947-0d23-40e9-b4f7-c6385dd6dcd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79dccdf4-510e-4f96-81ec-4aed44942762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4412e99f-3570-46c2-890e-d9610eaf5bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2246db37-5df8-48fc-9453-0d3a91b95e53",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c51f70-4520-4a77-b7c9-a150da517140",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfdd673f-1701-4afa-a0f3-e3f718a2a075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a76e88-a845-401b-9f04-1ea5fbce93b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19f9d520-4cdc-486f-b3bd-ff372690341d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d29b49-6f8a-4736-810a-1142bc05ac91",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd397396-e1e2-4ba9-b311-816d1fcde599",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ff5a065-463a-428b-bdee-458146f04f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a506c321-8445-4c38-9c9a-9ac671abcd28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "552d9043-e8df-48a7-b34d-ca1103a1cbbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c17adab-6198-46a0-970b-b9b4f7e2cf4e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3f7d81-2439-4f19-bc04-db5ca95b263f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89bde713-dc7a-4d79-a804-1a3c104eb4ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a72d44-9fc2-46b7-9e36-1961c777a850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27321c2e-dcdc-4cd1-b1f3-be7ea7769639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c513ee-5c46-417e-a538-4817e40abeec",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfb6558-eac4-4b98-bd12-95546768383d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aba312c-876f-4210-9a7b-ed76207b2ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c14750-c20e-4500-9ded-7c7f0c704fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e53869dc-6a6d-4f8f-b105-eddcc5cf14d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce24c982-7517-435e-96a7-a5f68017f8fa",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6615cd6-a8e8-42c4-addc-71fb36b530ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec3fe850-f635-4608-9983-77b9376d6472"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b627ca7-4535-43af-afaa-c72865bb6016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25fd8aaf-b31d-4150-9afe-eae14ce70e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b256f578-53b1-4046-a43a-9b4f554956ca",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6980df64-03f9-4c2d-b50d-173024ab9fb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9076130-068d-4464-91f9-59791dcfd6d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2698423e-7215-4547-a000-815e13d11e9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef595ce1-f78d-48b0-b7d6-4471724eecb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc7bcff-51d4-4f43-84ce-81fec99aa15b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58b7463-48a0-4db5-9185-86dabc0f1732",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de45dd14-635d-4307-8514-211d151d766f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f00ece-b44a-4d61-9f30-deb084444971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "256d8ee5-04fe-4377-b8a3-a73a51a8b6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d9be52-1fb4-4732-b5a6-4db1282b4370",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc96b93b-6c4d-4579-9cca-c02fba419680",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c112753-7584-4d3e-93ba-974955bc9432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1232b59-dea6-4ac1-9a26-cebbae5a8df5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50996369-07fc-447d-adce-34b719d87dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d830dd1f-50da-48d4-8d50-4f9ba914bf98",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e0336e-8a06-4850-add3-ac116346d189",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57f6b554-4504-456b-9c76-d40bd020e6aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21da892d-cfba-4d08-8cc1-6874be9df843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a9704ad-ea02-49fd-84c2-5d97323ca213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a80709-b3d1-4a63-8d35-aee44b9597ad",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab6fa07-f397-486d-8a45-5c2679fd3e50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "641d7217-3cfb-416d-a529-aa64816e29f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ffc6324-6099-45ef-aa67-fba379d5eca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502c2ec4-37c8-45eb-a597-2c54cf64441f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed7f735-aa94-4251-ac87-b34b95cb34b7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe10f536-c866-4c00-b417-f1f660f8a067",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bd57e68-dc72-4d47-ac11-6614cfca21a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8b318e-493d-40aa-968c-fcad0e91e42e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a24e0b17-c85c-4782-9c6f-b4cf030ca7d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d96f693b-9e47-4d9c-b600-03771dcf03e8",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82c5e7b-1486-40f3-b039-7e52557ec999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae87889c-4504-47ad-85d3-b12bcf05551b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1685ee52-aca3-4034-8552-fbc85ee23053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11148ee9-99f1-4ab8-8fcc-99b44b403917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21706a11-8ecd-40e3-b026-caa9c2cee462",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abfdf7be-bdb6-4d40-aff2-07194c973029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d64f755-23bf-4150-b0fa-2c7979d56360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f783801-5181-4fd4-824c-a74dd3bcced0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "038a5db0-8e10-4719-9a76-0311d4a95c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6c9676-0568-461e-b82f-cc43c09e8278",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53dc4de6-3eba-457a-8640-31a99152df47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c3e32b-d99f-43a5-959a-30eb209e16fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3bfe2d-a651-4a75-b828-01d5f14d55c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "850e3e9b-3fe5-4482-b1bd-520a9f520c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e83882-36bd-44aa-9dcf-c77eb692bc32",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e515c1d5-317b-48e3-ba01-379d602396f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1e0ca4f-8720-48ff-8fc7-ed8722eafa1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "235510db-01ed-4e10-980f-1a7ab6069365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d08708-9283-43d3-9ccd-e6731bad021f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc19c680-0b10-4f82-a626-726e506ee480",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421111db-1a40-4149-964a-ee14ce33efaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df86324e-feda-479f-914f-2decf3e49a0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e35e0c-fbcd-44d3-931f-6521c279a2f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc79a68-a760-4adc-bdfb-d7461e41894e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe12a1c9-0ae0-4452-9017-d5142112e900",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec32d7f-653b-4167-b3af-464a4dc6aa44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a76e6bf9-da35-4e4c-98a7-e92eba2d5248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93624472-000e-4a3a-a210-96424cabe06e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc7e8e9e-0352-4042-8377-9246937b4773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874a2ecc-f6f0-4058-9719-2078cca1c117",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9afac8-be88-4df9-b57b-15eaec7d636f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34b87eda-c76b-448b-b891-5759b1084b71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b428203-b92a-4697-8847-ce0868fb5e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4d90561-d426-4d57-8733-8850611750c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b735b39-ee47-4248-be09-3f9cdc5f6e03",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c30c11-e672-49a3-a1b7-7a93d894dea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10e906bf-4c65-491c-b2f5-927da4b5adb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da21fb40-9499-4368-a64d-33879435c95d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9385559b-8d11-48b9-9347-feea2114d9c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2538c0a-30ec-4257-a92b-23edfda4b820",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ccfd88-b2a1-4445-a932-ed0ddfc4762a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2a888c4-e6a9-4a41-b16f-a6f33d02387c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9037ecf-3d2e-41eb-bc66-4a0765a3d648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded3df60-1d8a-4d67-9ae4-b1348dfc7677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55719271-3de5-4238-96f6-02b0c673227a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5669ce-ce5a-4d33-9684-8f8cf4557c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ce40201-982c-49c7-b8db-4afd67454789"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a83257-93f0-49ce-9c0d-898208e3d510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "317c44de-9f8e-4761-ba28-842e69be9788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43301e4-29e7-430f-8451-fdd435f68d11",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e62c38-b416-4efc-8b8a-b8d2cf364d47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fff5e419-b3e7-4c66-b2c3-9fbd4dff185d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29360c1d-8021-4a7b-8ab5-600717c208f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "265f8389-1fc3-4085-83d2-50a6e3bd2315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6054ff-1a81-4f52-8f81-9d3479bfcca1",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec1751c-efd8-42e2-9590-bf0103f257c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6049711-26bd-4c34-bd76-b2e4849ab836"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b94c47-d1ce-40f5-adf5-a60eddf5f993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce429404-fd6d-4131-9999-fa1caa29df12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa77cd8a-773a-4bdb-8955-925ae64f6548",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf01ab34-1384-460a-9204-389a0f1f4b9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74d7e675-5af4-4ee3-9ea5-6638f1ae7516"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1bb3a6-74fc-496b-a57b-f82b5d436578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da6724b-da06-4212-a61e-21486d17f426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62064926-5bb6-40f1-8530-3451c6bb7510",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c5c103-c3c7-4e09-b8f1-8605e60019fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bebc1bd-c60d-4c28-8fbe-0b1aebe94075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f31f43-9943-49fe-aae9-57e022b05814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c51b567-0b80-468f-9242-db49ceff337c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa322c02-8b92-4cbf-9cd6-90f0bdf559b7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a2e0ae-6c15-4094-a63e-08c0eefeef06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "322c727a-0996-4e12-90a5-14ac331ba5dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd851e88-3c84-474e-ab41-606c699858af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "979f6e7c-fd7b-4a28-8fa1-9ad9f6dc835c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b52dcb0-0da7-4f92-b025-4cc8be452017",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f124358a-1ac7-415e-8431-f7f50e6e747f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "149eb369-11db-4855-bdc9-c8dea2630673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cfa1f16-a9cf-493f-a7a9-a7c9344ec4f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64357c3f-9371-42f5-aa65-957fce29f2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d780511-bc14-4f4b-ba31-c1ca5e523887",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b760a8-46e0-41be-9e74-c7cab2f0c58d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59bc0c45-8fb5-44df-8152-cd132bfcc60d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f7a24b-309e-4111-8383-5101eaf6023e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65646d3a-1022-434a-bf96-443da8181bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b2ed61d-d409-48a3-9edb-b01c824ffdf5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d73d6f-df85-4ff5-857e-149970bf3f8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1366b632-479a-4217-8249-0d4794ff91c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc822dcc-8aa2-4ace-8c3e-1135a49ace8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "923c6fb9-af46-4d04-8c50-da27f021a730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05de4733-70e1-4ada-8b6e-84debcf4e262",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e03ae31-4cb4-4cad-90d2-0074a445e4c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dddbd6a-9f04-492d-b013-97e573ffd22d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ecbd5b2-a050-45cd-ad6c-880ef634a3f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d02129bd-7e1d-4c52-9ab3-8c2e8b9ace0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ff5cf0c-c2a1-47d1-a628-841a841708f0",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505207b3-a2d3-45d3-84e4-bf31a014ff13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0baa4b2-1f22-4578-a399-d7f29e35f2d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad6b63b-7f7b-498d-b18a-d426ae9861da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f5f29cb-eba6-49de-9155-29644b51d340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255b56b6-2d72-47d8-a87a-bd0b8922b12d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e74f153-0110-4800-8691-ac7a71877418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75c62301-8cf3-417e-9665-8c0551ff1875"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28d4eaa-3eaf-4063-94cc-ddedc03e4b3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c306cb4-db78-49d8-907d-26f1d049364a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2274cf9f-79e3-4f08-8f63-784f5308a8de",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b792f33a-dedd-43d1-883f-db8be5b43dd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e56e85-8eff-484a-9c5d-91b82fa4eaaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3821cd36-94de-4a0a-9ed4-1be9ba8eccb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36b33f06-256a-4b30-95ab-1d23d99c0df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50371b15-1723-4dc7-97ff-04011e5b6db2",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62188ff8-f4c4-431b-9db5-6dcc4c6a4fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e080a0b-b245-43cc-81bb-b6370c36042e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "518def81-8b6e-4905-a053-05f8533a6ad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e413980a-b70a-46bb-b6fe-f45633703390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f36d578-39ba-470f-8fc9-8a84ca1db98d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab306da-5e4d-4c5b-8f59-bfb8766d292e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eab09df-76d9-4d23-a90b-6eadce78a674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8535554-3b3c-4281-a9ad-79053d317438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c02efff-0576-424e-a013-bec02685389f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ff4403-ed7f-4cff-8a7b-8f9878bef56e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2aa510-2ee2-415e-b4fd-7e8a62af9e88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "866d9164-ca9f-4c72-9db2-6641f6743f03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f160eca6-4cc5-4770-8ac3-f93d840ae939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d0b2871-c0fd-4b89-964f-63eaf142fed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6336f2-8fd7-4405-a04f-06ed7771e327",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798a80f3-62eb-4e01-8feb-04c2f603034a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e29f6f-3ed5-4bb7-8656-89d096f3c9b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c029f8a-784f-4ec8-b851-00618217cfe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dce55a33-d089-4222-be21-eec6cd62f2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f814de1d-4ebb-45f0-b9fa-50d2fc4f6cf6",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2566167d-07c7-438f-9de2-fc7ed8a3837e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20803eaa-1714-4434-b2fc-59036891a02e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f478fd19-723a-40a6-b37e-141dab7f30cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c11c0589-e0bb-448b-80e6-6ef203da0644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4855587b-f5de-4e01-b1c7-df90e0f0e694",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39909475-d79d-4536-8dc6-38b7ff0dafd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be2b1ef2-7623-46db-bd94-916b08e8c277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7362f4-32fe-42c1-94a2-b1ecea9adf3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f8d0a82-1783-46d3-a463-2d68d561a5ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fd4b32-53f5-4b7a-bd5a-3bc3f9e1cbb6",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbd1141-37ef-4df3-846e-2950941b4949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1708344d-fe20-4a67-a731-6f6693dfc906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "436943f3-8208-4590-924e-923bb174860a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ecff9dd-d61b-4bd1-a356-e211d3813f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe17d3d-24d3-4322-9524-a55673d7f8b9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ba446c-9398-4723-919a-406d0018c605",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db84119e-309e-4b19-aea1-84c37eaa1552"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "512ff09a-26ab-4c89-b52a-2433c122d04e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1736506-12d0-464b-b9ee-9d58ea0a85b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12e4c4a-879a-467c-b061-67dc87613d49",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129ac830-1f75-4786-9916-193630ca4be1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1576d463-7467-4a10-88c2-23a7e55c92b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ca30fa-4bbc-402e-a04a-ebf8e3f1dd57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0276118c-5033-4868-8af6-522a885b5cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f81a78-0d98-492b-8abf-454bc82fa679",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6e000f-f396-4191-8a83-f4335e1b1c02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11b0d17d-5b2c-4135-8e94-6b952ccdc1b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93532270-d113-4e07-bde0-bbdc2dcdb914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "545cc0e7-d2f7-4801-b659-93e277cfe55e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1438d4a1-f4a5-4921-bc0b-6e10dfc51a14",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6807bb-3c3d-41fc-82e1-63c5cea6c254",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44988172-6e2d-4c6c-b6d2-7db2fbaab545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed96ea55-d6e0-4165-aa2c-b00fcfdcd79e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89954eeb-a81f-4034-8ec1-80e30f2ddaf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b725faba-e585-49a7-8c46-c7f7b4602462",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f77b4483-aa3f-47c8-a9c7-87fc8278a4f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fed5533-4d59-4757-9e0c-179eb25ae49f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed41e29-773f-4968-9ac5-58baa9db998c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d17a001-0481-4a1d-af2d-f79f936e26af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50676936-e460-4476-a5a7-8b30c7f088a2",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ffe823-9a1d-4ef9-b16d-270c2c603df5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c1edda4-510e-4929-b88f-3fdfcc77bb3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb3be0d-593e-4c61-be19-efb6e4277fc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9be71c2-ec8e-4bbe-a886-1849312d362c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bae564b-9652-40f4-8956-d8a65c56960e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6e3b93-c88f-429d-aac7-652a1a7bc522",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff1b9bae-6ac1-4cfd-90c1-9ca3adae6c1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1606ee1a-66b3-4dfb-a7ea-ae52a0493056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4aef3e3-5939-423c-9137-3ea349f85f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa88be6-2b54-4c68-b0bf-839ac530b371",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3245d2-a74b-4a63-aded-adb497e45427",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46c7b877-0fbf-4613-80b5-9b9ca7da2406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d189e2-320a-440d-8130-40930a923f2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29759137-2870-4b04-ad6b-0c918be605c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8def2079-bcda-4c2b-a5ce-4eef0b111428",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc25a739-b651-4d87-b374-ededb9033a8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f505d3ef-d438-4407-8876-a32c2a306f1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5391767e-6c18-4f95-a64c-fab3c70b8d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc9efe4a-8ad9-4a7e-9a8d-a8cf0e2ef231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc485ab-47a3-4d7a-b3a5-7954b158fecc",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3f9b27-670e-40dd-99a4-b7ab90079ea6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28ab59d1-c4c5-48c4-a4b7-0b2684c4f89d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb304c1-34b7-4bcf-8167-6cc9da572837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a63cca2-8bbd-48e4-827d-86498d9dc6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213da140-7002-4433-ba03-cbcffd724190",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01478d0b-fa92-4213-9b56-d4ed0d260592",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "807417be-96cd-4d46-873f-fe29f894b43d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b29f86-5783-4eb7-91bb-90215689f5ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "600f5fbd-0cdf-487a-a513-6edad4cf0b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1b7a5f-1efa-4624-9a11-2b22f7cfe392",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a4968e-d5b4-4ede-adbd-02b6e0e9e5be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32219f61-e43b-45e1-ae8a-132e039d15c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f024262-0ce7-4c2a-902c-33140d107f6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70832258-acc1-4521-a5f2-d66001c8beb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fd3a0c-dbd3-49ce-aa21-da95495c2f6b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28735b52-03a1-47ac-bb41-2095fb3a35f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0642b2d0-f88d-42e8-a47d-7d5de69b0388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff32627-632f-4f53-a9b5-50e044b33978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "658510fb-ec68-4cc0-9dcd-2e1ef9fd56f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e096af-1b0f-4d00-aecc-2b698771704f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168af975-b595-484a-8827-c9769079da25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9dde0bd-de1a-477c-a259-9d25ab25e018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a383ac-851a-415d-ba3f-dbc9f2e3c6d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fba406a-7bcf-4730-9056-b0daa05415b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f23bf7-27c2-4b80-9cec-61066453865b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69d8f15-f5d4-433b-8ee8-d30db2ce8949",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b27a6ef7-b8a9-4e15-9640-a3c8e6d9b5ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2ba09e-3421-4625-acb3-624b6d65d708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be5a59e8-c2bd-48b2-a267-c4c8222b3813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8be05f4-554a-4303-974a-f9b70255da7d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84559af4-e344-44d1-9772-3b86268689df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdd8840e-2aaa-4a78-a5df-3f740f2475b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d7e4c6-fbbd-4d0a-8b3e-8ac1f0e7e964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9039c6c9-fc5d-40da-a88c-bd1048c94cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6066fcc-0446-45c7-946f-c34d952ed7e4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdc62d1-f088-4ad1-b63c-7c9d087eeab1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69604448-e480-4b5c-93ce-77df708ce8f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4aa90ca-25b2-4df0-bb38-bdccb3c4315a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d482d3c-ca9c-4b3a-98fb-32020a4790ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d66b7af-f15a-4fcb-ab56-8fbfefd63274",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f66640c-b70e-482d-a4a6-a7a1a0a6e402",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cba20118-0287-4ea4-a459-1b9b76114e00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "736c8760-af10-41e0-bd86-c640ac7c8d16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18883e3b-c7cd-4b95-a744-f52c3bca781c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b785efd4-042c-4307-9398-70fe59f7610e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dbf0ca9-a365-4f39-977e-62ae7b8a4acd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64de5232-fdcb-4ee6-8b19-86d8dee219f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e0ffdf-0647-4695-9795-d504afe76bdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06655302-bd65-4abd-a2ba-8b0d14b30548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb89949a-f714-403e-9f18-ac4d636fd016",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beba33e9-dcc6-4d90-9be2-d6beb3c01dbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55546204-7d76-4453-b51f-0aaa3b955521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e04a4c7-6008-4deb-a34e-17fe579046a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c259348-9a36-4c38-b194-3f841c3118e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1b5188-f649-4fdb-8872-8184ad24cbda",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6d3896-0541-4683-9de0-eb390238e4ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56c783ba-35d7-4159-884b-8743c5ac59ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf8368a-6e8b-41eb-8d29-e0f5d8c7c3cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13968c66-3ba5-45f7-9f64-ee091f20b07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9fc618-6786-4bb9-89f2-f0c87a30c5ce",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90e5646-35c6-4c5e-9822-352915821a21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c749604c-9b97-4b79-925d-75ec62cb90f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "099ec581-98a5-4491-97e8-ed6fb165f036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15ec3821-ac31-45b3-bc9d-6085f04da5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa19362b-b5c7-47bb-ae3f-aa04fcbba8d2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90d6a6c-7e56-4353-90c6-ad7331cdc98b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ce058e3-a8c4-4369-a435-d6435e68862f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97003e84-2bb7-4509-9fa9-2e3d02281ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c4a4444-7d93-4677-9709-21853fa3db02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e524e48c-3bbc-4620-a083-2ff5b018f8c4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7e3726-45a9-4965-8ece-a3e6c24b9f47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e823e62-0d99-426b-95fe-1d4eba4aa505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb0d783a-12f3-4c0b-ac55-eb50571b51b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "727034b9-aabe-4ac9-aaa5-8dc43a34e030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066185a3-ff74-432c-8dd0-c65cb5a0d095",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf478d28-ea0e-4b26-a31b-c9d81ceb5e9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bc9e13f-67a8-4ba5-be2f-b6b49ecc922b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccda52bc-37d7-4c1d-942b-cdedc6f5d667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c0c4b5f-854d-4c83-88c7-1f99ba8890a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ab2a26-c9ed-44a4-9359-a23b775b91e6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f320049f-65c5-4d5b-b786-69d07bceabb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6043f47e-b602-42a2-852f-8d98a0ca55cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e810b5b-c94e-4e88-9fc9-cbd5ad594f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "875e612e-9923-4dac-a3e7-494a252a16b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e7b976-0cce-4c0c-a27f-cd60f89dc8e7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2705e6c3-a9fc-4203-bf0c-9b211c16e12f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b28c0c5-50d7-42dc-bafb-6ca4ee183b96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2914a0a1-1a19-42b0-bcde-95185ff3b83c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6799c56-dcd5-42f6-88a7-ebbd2b34b109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2924bb04-9a86-453b-9607-f1dd19e3fc30",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd83cd2a-c9a9-4f64-9492-60ab7506421f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53934ed4-a40c-4d6f-b1e4-4a30f5d68bd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55fe0c5-ab2a-4e32-a064-f489c55f0634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e77cc08e-e6f7-4def-a7e8-6533724e11f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70710afc-ccae-4755-89d0-1d405a60ce26",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "822cfc9d-199b-4302-90db-b0a184277b1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82389a64-0cae-4d52-9326-70101ae36c0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49dd49ed-4ec7-4fb9-802f-49773c01788e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d1e061-966a-4d30-9218-8bfd1c83954c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f607ee7-6ca6-4491-a838-1f454ce7236d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d03fa4f-1921-4e73-a9d6-759b4dfbedeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5de21624-1bcc-465c-8102-b2d460d08557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4b0588-6ebd-4464-9ef4-15985c80919d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ee3ebc7-b77c-45da-8706-841893391017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfeca339-4aa7-49f7-a99d-f2cfd286597d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77096a70-604d-48aa-9733-45177712cdfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ff1646d-0046-4758-87e3-7fe0aa266967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "630c9576-a9e7-41a4-a981-571779f7c241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e40277-b2cd-4818-b569-da6d13b28edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49fbcb1-a639-4a0b-80ee-5d15a0b75d51",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05700ce3-3143-434f-ba5c-d479f90c0a2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3529b3d6-b0ad-4364-82ea-162771faad8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a194716-f6ce-4055-a22a-05e557f46f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7af8e21-f869-41e4-9732-952ce934a46f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599f1f84-4fdc-4eb8-b3c4-a2cbf46e84e8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ae5eb6-742f-4ca5-9cf9-89b7bb4aafdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db04404a-a5b5-4ed6-b891-55930f63222f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2159bcfe-4af4-4256-b6f2-a5028cc474e0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f35507-de5f-4a50-995b-4d227c9980e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c99681d9-05c2-48eb-b745-fa8752682bc6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e85b48-e29c-4512-aea8-384dcf118b96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6deeabcc-85a1-4a0a-a7c8-a8e077c54a72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cbb4234-f15c-447c-924d-603d7ab13dee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38cc0fe6-023a-4d4a-a5be-cd499ba44c15"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9c5da05-b2f5-4253-96b2-f8eecfefe54c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "181cd587-c6e5-41a2-90f3-19555ca1bccb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "471b7b9a-bd50-4164-bc88-fa293b970ee0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c5e9585f-e2d2-42b5-982f-20fb31c060b1"
                    }
                  }
                ]
              },
              {
                "id": "f10b4800-c25d-4e9c-8e40-77ab5830d3df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6296d333-20e8-4fb4-ba1e-1e025ebca0fc",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbe93c8-43f7-4fbe-b001-191ed5e1797e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "91b939ce-dca9-46dc-bc7e-54664bdc3487"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f680a7-d122-479a-bb09-429fcfb6b05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c57b8c1a-3bec-4397-bd63-9326c9bb7f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44dc631d-52bc-4005-a6c9-56fb13aa48bb",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a18cfde-ca49-4bc1-95f9-36759b2a40e7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7546596a-76b6-4409-ac11-881aed942f5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd67b9c-6bd1-40e6-b2ce-856337130a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "207c9d7e-b25b-4167-aa17-a639344fcd46"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "480286ae-6304-445b-aa48-6366c1652511",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "952419d0-c1eb-467e-8b9a-dd5bc623962f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c49e5c9a-bea2-40bd-a9aa-87225a21341e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5575899a-a676-47b1-b3ca-35c276171666"
                    }
                  }
                ]
              },
              {
                "id": "f80bf5e3-bae2-4e09-beb6-14f56a9f25af",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "52d20348-e741-4ba0-bc0c-99d88504548c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec19cfd-9e6d-4391-9eb1-85f731c8e507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "1b2ba0b4-0c46-42d4-913b-d6c5bdac6902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a984bd5-7fca-4b4f-904d-b706ba7be32f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ea2975a-41e3-4496-b356-e4a0621256b6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8e7b9396-3b2a-4928-b4b9-566dfcd53fb1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "db05d01c-e297-49f3-baf1-5802381d7e6f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "54e50178-dd20-44cc-894e-fb92bf2c49e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "00d78a9c-50a3-4032-b559-692c310bf15f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28b1592d-5299-4ef7-91d6-db75c555a0d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97b4d569-85a0-4fec-a2db-0100920e2734"
                    }
                  }
                ]
              },
              {
                "id": "0977abdc-00a2-47b4-bbd4-6583b8b11c56",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6136f966-e7c4-4a7b-b3e6-ec668b88fd59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fac1d890-25b2-4ad5-95c7-734375402d6b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e25a5aeb-545d-495e-86d9-835bbb8291e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44cfa86b-c661-4c53-8486-910d203799b9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4cafbf98-025a-455d-a8a1-6722c8187468",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "433e2f49-3bd8-4dca-9564-bed764169702"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6782612f-ecad-4fb9-86a4-f1bdae64afd5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7e49ab31-e67e-4ed4-928c-1f3aad2d69bb"
            }
          }
        ]
      },
      {
        "id": "c2658ecf-4be3-48f4-842a-048a69d8adb8",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7d5fbe30-e102-4cdb-880e-86888d740275",
            "name": "Negative Testing",
            "item": [
              {
                "id": "83e548ae-d6a7-4434-b809-ad34f36c4a07",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7c124bb2-f368-4dfc-a50f-7a46e22d9dcf",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0008b560-08ab-4cb6-a3ae-78443dd083a4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "49d01cfa-99d7-4458-9188-3b2cfed3e825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "816a923c-e2b7-494a-a158-16235c863cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3f87ef2-ceff-418c-970d-756d645e1251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97d8433-5e05-4045-889a-6f9116a5dde6",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d52e9f-1680-439c-b5fd-30c942939734",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f9753b56-46d2-45b8-9db6-0fd33a3e4921"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe2b476-4f74-41d9-97a0-3717115d9bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f475188-e8f5-4190-a2f6-b8977dacc52a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7dedb27-62da-45d7-b3bc-be3f2069f14f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d2bf9b2-0b95-4ce6-a74d-6822b0a146f6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3da7d8dd-8bef-456d-a712-70b045cdeedf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d081439-a566-4528-b79d-2405036ed26e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa2f730b-eaa1-47b5-8275-0ccc32b2adc8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1fe7e234-363e-422d-857b-89882b4db58a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6d39487-6377-43bd-b88f-34f0296fa639",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "02b45175-177e-4d68-a04e-08c6df245b20"
            }
          }
        ]
      },
      {
        "id": "726eb380-3618-4684-a392-b399546491d4",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4008f896-8bb4-40b4-bd0f-5096302de43f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6c71b929-fb66-4be2-90b9-72a80f45679c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7811015c-9025-4ff3-bcd9-2d26704e1006",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f88965-a164-4205-9a82-3be10f6efd70",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f9fc79bf-e218-4d1a-a3a0-e02041c6db39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aba88b1-5176-43b2-b564-06e51fc24cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74e6a677-03b0-499e-b904-da9244e4451e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df39a2d2-aa18-467f-8ce4-25636a937fc6",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309597ec-d053-4fa1-8570-5895bc06405f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cc7fc0d9-a280-4881-9e37-a9b9b635608e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00d3ac1-99f8-47ed-a8ef-addb467c6105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36540d74-8193-4c0b-99c3-bd167c27bc34"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac9b59b7-90b0-43b3-8a9b-326878dad033",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e11c8d32-ead3-43ae-8e9d-4bb3401dc614"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "59e12396-6fc4-44a2-977f-bc79f67f445f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f38868ac-36a8-429a-853f-e555ea76b4c6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e6c60e3e-20ee-430d-baad-54cf3d58665e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5300e291-ac4a-40e1-b8d3-407abef63369"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6be0b210-5454-416a-b23e-050d83a0ca67",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7db4a49a-45ed-4f31-9101-021b48403ddc"
            }
          }
        ]
      },
      {
        "id": "e1d644ed-4b01-4a3a-85f8-be77b5854dc1",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c3dff53e-50de-4e31-b834-4f975e6dcb45",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df6b03d2-3527-42dc-ad72-91251449aa59",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11366b38-518f-4b0e-8f9a-d22ff788ee6c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7813f9a6-3381-4c92-afab-b07ecb61b0b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c23e8b4c-7b3d-4e77-a753-4a2a453f2c4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba84fa4-ec20-4132-877c-3793e6f8dddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97f20e3b-6858-4338-be57-0a891ae5baf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29fc9c8c-5dad-411f-b824-36eb438df6b9",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd311a3-e84d-40e1-be81-45e3db0450e7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1801877e-4c71-48cb-923d-c8408ad15672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "529cbc03-4bf3-4a7c-9d78-85bcde858f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eadfc761-7459-4cd1-861a-915570e5a09a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65e9cb89-c8ca-4f6a-82e9-1d4fa2153ca2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f498391d-cfb8-41ca-bd9c-31813128bd43"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "74a65fbe-5e30-4642-a7f7-e8223b7db5eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62fcc179-e5a8-4b4e-9098-c23f038ca8fa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb556bef-6c84-4247-a164-ed9539f57603",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9c68908c-516d-4150-9793-780214b973f5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dcf92186-32da-4202-8cc7-99a22f3f9862",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e31a10b-7262-466c-846c-7ef96825ce82"
            }
          }
        ]
      },
      {
        "id": "1660a6d3-382e-4ac0-9b37-3b9689f14ad8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff7d9d20-7389-4ff4-9165-b2bcac84e709",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1de9459c-de01-4802-82b0-e2533065313a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "fef0f549-fb80-4288-a7c9-b7cd06312b32",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df1f15ab-04c0-44b0-a1f2-44d1d307f8f8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5bd932ab-1572-4bd4-9cda-b00abe708eb0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 35
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 59.13513513513513,
      "responseMin": 21,
      "responseMax": 329,
      "responseSd": 33.36172814046684,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677631550330,
      "completed": 1677631576025
    },
    "executions": [
      {
        "id": "bd38ca75-104e-4d61-ba12-031c3ee17449",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "76321809-74d7-4731-ada5-6ad50f7720c6",
          "httpRequestId": "efe34af9-6509-4c59-81d1-8f4881943a57"
        },
        "item": {
          "id": "bd38ca75-104e-4d61-ba12-031c3ee17449",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8d2bb702-01a3-4074-b009-25e5bca0a412",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 0
        }
      },
      {
        "id": "7deaaaa5-f743-4933-b489-f0fff252b18e",
        "cursor": {
          "ref": "7e7988e3-cc91-4305-9d8e-3ce1a0900b4f",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b507f513-e12e-4f4c-951e-cc83295ab26c"
        },
        "item": {
          "id": "7deaaaa5-f743-4933-b489-f0fff252b18e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "774fc41b-834d-40e6-9bc1-da9d4ab2c5fa",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "51e83735-f23e-4ae7-a31e-69dc2d721198",
        "cursor": {
          "ref": "4f2e1b75-7a1a-439e-b9e6-09b88ffd8dde",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "46a6c7f0-d208-479a-af34-4ee0fb7ed8cd"
        },
        "item": {
          "id": "51e83735-f23e-4ae7-a31e-69dc2d721198",
          "name": "did_json"
        },
        "response": {
          "id": "3334e7b8-b6f9-455a-8612-411fb6b073b9",
          "status": "OK",
          "code": 200,
          "responseTime": 329,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e79e96a9-fd3a-41b1-a9ca-d13f50be3bc2",
        "cursor": {
          "ref": "8bd55c02-d808-4a0f-b67c-96372480ebde",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b4b11c54-32c8-4076-bdd2-1fad81b91892"
        },
        "item": {
          "id": "e79e96a9-fd3a-41b1-a9ca-d13f50be3bc2",
          "name": "did:invalid"
        },
        "response": {
          "id": "31d11906-8bde-410a-8799-50b085dfbb3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e79e96a9-fd3a-41b1-a9ca-d13f50be3bc2",
        "cursor": {
          "ref": "8bd55c02-d808-4a0f-b67c-96372480ebde",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b4b11c54-32c8-4076-bdd2-1fad81b91892"
        },
        "item": {
          "id": "e79e96a9-fd3a-41b1-a9ca-d13f50be3bc2",
          "name": "did:invalid"
        },
        "response": {
          "id": "31d11906-8bde-410a-8799-50b085dfbb3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e39c873c-e220-4cd7-b756-19a7eb652f62",
        "cursor": {
          "ref": "104d33ab-0879-403f-96da-c411be2dd579",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8dce25e4-00f5-45c6-b888-7ec5587887bd"
        },
        "item": {
          "id": "e39c873c-e220-4cd7-b756-19a7eb652f62",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "fa1ed302-05ab-427f-9dc7-9ac496d11b44",
          "status": "Not Found",
          "code": 404,
          "responseTime": 94,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db14f909-3216-4cf8-ab74-5584499955f8",
        "cursor": {
          "ref": "eac0903f-2732-4e61-af44-0e62744eb19c",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "517f2f6f-1308-4379-ba68-3eca40c8b996"
        },
        "item": {
          "id": "db14f909-3216-4cf8-ab74-5584499955f8",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "720a6440-64a2-42f3-bb95-377dd039dffe",
          "status": "Not Found",
          "code": 404,
          "responseTime": 51,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c98ba1-7094-42ae-a16e-25a6e552c5a1",
        "cursor": {
          "ref": "215288e7-d544-44e4-a76c-e651a940e971",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "967f3b7c-a5fa-4fab-9fd8-06b1404c3680"
        },
        "item": {
          "id": "c8c98ba1-7094-42ae-a16e-25a6e552c5a1",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2806affe-2753-4ecf-a791-7437f87ff97b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0b8e09-1177-4690-af3d-bcf31fa8b46e",
        "cursor": {
          "ref": "603f6191-2933-4f38-9c49-042405010fbc",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e111cdb8-050d-421d-bae9-4f6268ae9b48"
        },
        "item": {
          "id": "cc0b8e09-1177-4690-af3d-bcf31fa8b46e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2674ff8d-44f1-4c1e-94cc-34a1d6b0d5fc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 53,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0b8e09-1177-4690-af3d-bcf31fa8b46e",
        "cursor": {
          "ref": "603f6191-2933-4f38-9c49-042405010fbc",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e111cdb8-050d-421d-bae9-4f6268ae9b48"
        },
        "item": {
          "id": "cc0b8e09-1177-4690-af3d-bcf31fa8b46e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2674ff8d-44f1-4c1e-94cc-34a1d6b0d5fc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 53,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd233a1-1bcb-4021-ae46-8f7624153f24",
        "cursor": {
          "ref": "d380d7f0-f897-4027-be53-e8a5a1c0c868",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "738c3a2d-24b3-4f2c-8d6a-362d40ab76e4"
        },
        "item": {
          "id": "cdd233a1-1bcb-4021-ae46-8f7624153f24",
          "name": "identifiers"
        },
        "response": {
          "id": "ca2cf86c-2900-4324-be2f-881f21dcc5be",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3999116-824f-4dcb-853b-9591fea40c4c",
        "cursor": {
          "ref": "262072c0-fdcf-4504-8dbb-56fb1e22e3ab",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b2737db7-d92a-492b-9c3e-45c78ece3607"
        },
        "item": {
          "id": "f3999116-824f-4dcb-853b-9591fea40c4c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "57aa8512-11dd-4021-95c5-4417850da735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3999116-824f-4dcb-853b-9591fea40c4c",
        "cursor": {
          "ref": "262072c0-fdcf-4504-8dbb-56fb1e22e3ab",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b2737db7-d92a-492b-9c3e-45c78ece3607"
        },
        "item": {
          "id": "f3999116-824f-4dcb-853b-9591fea40c4c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "57aa8512-11dd-4021-95c5-4417850da735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade80db6-b991-4ed9-aafc-c4675302b3ed",
        "cursor": {
          "ref": "e8d81ced-dcd4-4cd5-9f9d-a410276bb718",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3f546773-a66f-4253-9dc7-60a2e8d7d538"
        },
        "item": {
          "id": "ade80db6-b991-4ed9-aafc-c4675302b3ed",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "479eee2a-46a3-42b7-bea1-74872a49d540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41bb650-2120-4a3a-9c44-7798da488e7e",
        "cursor": {
          "ref": "a7b5f163-3794-4dab-83f1-3bf18069ac12",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d99a96a3-8162-440b-b408-7674d077ee6c"
        },
        "item": {
          "id": "a41bb650-2120-4a3a-9c44-7798da488e7e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "edf8e76b-c203-45a7-9613-00f1666af445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97472d38-43df-476a-8512-4a69f723f85e",
        "cursor": {
          "ref": "62eae4e7-aead-4891-be00-9a6e45b3cefd",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8716534b-3c52-4a44-9fd0-78044ff1187e"
        },
        "item": {
          "id": "97472d38-43df-476a-8512-4a69f723f85e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b0fd142b-5404-4dda-b426-71765ddf6dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcec19bb-3efb-48e2-b50c-8cecc285f18f",
        "cursor": {
          "ref": "691a3da6-2798-436b-b2b2-1bcefee96d50",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b46b0656-1c4e-4477-9d80-709d0f380fe1"
        },
        "item": {
          "id": "fcec19bb-3efb-48e2-b50c-8cecc285f18f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "23a42338-959c-4b1d-86b3-cbe1d8da1ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155ca0ae-94d0-4c7a-bf44-6f3b77cd578c",
        "cursor": {
          "ref": "6edf100e-d469-44c1-ad0a-13feae14d35c",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3afbb3ec-d066-4f6b-aeae-4f167d3c34b0"
        },
        "item": {
          "id": "155ca0ae-94d0-4c7a-bf44-6f3b77cd578c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b9774635-2a2e-4577-8e13-7a2f4ac5f225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5aa3f2-6425-46e0-bf3d-ac968afb0581",
        "cursor": {
          "ref": "886eb947-88ef-4583-897a-78f1657f7eca",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b831c91f-f3b5-4f34-be37-a276aed4aec4"
        },
        "item": {
          "id": "9a5aa3f2-6425-46e0-bf3d-ac968afb0581",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "43f01a52-7212-447c-b573-d49e6210cb3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b140b2-68cf-467e-a0ac-8b0ab9d0a7f4",
        "cursor": {
          "ref": "c0585de4-c0aa-4b3b-a917-0f636effec09",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b76d1917-832c-4980-8181-d148e439324d"
        },
        "item": {
          "id": "98b140b2-68cf-467e-a0ac-8b0ab9d0a7f4",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "aaf67d2e-4aa2-4502-af04-07d538732fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67d5eee-ebdc-40c8-8031-38fd1501255d",
        "cursor": {
          "ref": "e70198d4-edf2-41a5-bea6-2489d0f9cd06",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a5f13834-8913-425e-9693-4decaefcbd07"
        },
        "item": {
          "id": "e67d5eee-ebdc-40c8-8031-38fd1501255d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "039e8df9-1036-4f33-bfb2-0327d7556e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc950c59-776f-4717-91a1-cac14f816664",
        "cursor": {
          "ref": "46dc9bc7-bd67-4e33-bf7d-197ecd31ba70",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "079c18d7-a7eb-4509-a1b8-428521c58e4c"
        },
        "item": {
          "id": "bc950c59-776f-4717-91a1-cac14f816664",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "11138823-1fd3-4bba-b350-1f05b2185ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa4a4df-e6e8-4e9a-bd3f-c14f3abc2be6",
        "cursor": {
          "ref": "bf3c5751-ed63-4816-8761-fa88b56d72b6",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "93b7af5a-4143-46b0-ac87-36e0bdca5286"
        },
        "item": {
          "id": "8aa4a4df-e6e8-4e9a-bd3f-c14f3abc2be6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "747693d9-cd03-409d-81ba-f846f33788cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f09ffb02-95a5-4661-af11-69718cf6eb8f",
        "cursor": {
          "ref": "204b639b-fc90-45dd-a8d3-7ae422fff1d1",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "97252212-0343-42b0-8e80-bea88589c51b"
        },
        "item": {
          "id": "f09ffb02-95a5-4661-af11-69718cf6eb8f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ca81216a-de78-44d3-9fa5-7014d7b2f772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf9f32b-fec1-4048-bec0-267326723941",
        "cursor": {
          "ref": "e90a7650-e2ab-43c5-a192-e4051ac20d44",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7faeccd8-ee1b-4612-9021-0fc9a1beadfd"
        },
        "item": {
          "id": "9cf9f32b-fec1-4048-bec0-267326723941",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8fd955d6-75f2-4fe5-84f4-cf97aed8f641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d10214-3c17-48f3-a721-c7d320dc3451",
        "cursor": {
          "ref": "8a72c64f-3d00-4970-8145-17923d46f9dd",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3747d0e1-dcb0-4a15-8db6-80f14bc745f1"
        },
        "item": {
          "id": "25d10214-3c17-48f3-a721-c7d320dc3451",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b50bcc7e-b416-4515-9856-1ef766ac0ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161d92bf-339c-497f-b313-bf4d32c2d63c",
        "cursor": {
          "ref": "6eb70a9c-253c-402b-80ee-fa72a1ebc0cf",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d1ddfb8d-734b-4c31-8854-674bfe27ae4d"
        },
        "item": {
          "id": "161d92bf-339c-497f-b313-bf4d32c2d63c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "86d2e417-3456-4a63-84cc-d088b7e3f129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7761f821-0e87-4698-bd72-417a95776fbe",
        "cursor": {
          "ref": "e1d6052b-f8b8-41fc-bc90-6d76b773dffd",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "fd4fcb92-efaa-45ee-b31a-0286d9b71d83"
        },
        "item": {
          "id": "7761f821-0e87-4698-bd72-417a95776fbe",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9128fb5a-8e5a-4e9f-8db7-89a8d38634d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a7a2c9-56d9-4ef6-80ff-b9bd258cfd9b",
        "cursor": {
          "ref": "33adce57-f58f-4079-91f6-d1056de65567",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "41dc4fcd-3ea8-427c-a60c-0b10c88ec9cb"
        },
        "item": {
          "id": "31a7a2c9-56d9-4ef6-80ff-b9bd258cfd9b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ac95bf21-15af-4e87-a016-72ecc6db1462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddf295b6-04d0-4072-965e-93d35fdf2241",
        "cursor": {
          "ref": "afacd376-4d30-4397-9bb6-30cbf1d38376",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f5f9ae6a-e95c-49db-94a5-b87c702ac2ca"
        },
        "item": {
          "id": "ddf295b6-04d0-4072-965e-93d35fdf2241",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fd1315ae-1023-465f-809a-b9926744b8b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4ecb3d-5b78-4d53-81c2-2b07f3c90fe3",
        "cursor": {
          "ref": "4d8859c9-84f2-43ec-8b22-8f5d4c70ca07",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9fe23a6a-56a5-40d1-b4e6-630bd9ef4e49"
        },
        "item": {
          "id": "9c4ecb3d-5b78-4d53-81c2-2b07f3c90fe3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "8296d872-2c12-4a41-9c39-57156283e307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db07c6c-799e-47f7-ba27-066b0cb67f8f",
        "cursor": {
          "ref": "228f3a05-d884-4a84-a1c0-ba6095bf4a1a",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "433b2c87-88c6-4f31-971e-e3e975ba1d1f"
        },
        "item": {
          "id": "5db07c6c-799e-47f7-ba27-066b0cb67f8f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "fd2d642e-459c-420a-bdbf-9a7646f69397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f00cba1a-412d-48aa-96de-f84b611c8106",
        "cursor": {
          "ref": "e7165e39-cb93-47e2-85c5-b92d814de949",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "037febb5-c696-4948-b6bd-4a8e77d289fa"
        },
        "item": {
          "id": "f00cba1a-412d-48aa-96de-f84b611c8106",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a567d972-740c-4e5d-903e-50dc37f44c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8715851-c01a-49c8-8194-f04a59547fc4",
        "cursor": {
          "ref": "f0c5919f-202c-407a-a050-8812c98d0b60",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c571a313-6180-4cff-bf5d-b8a46a4ff8ff"
        },
        "item": {
          "id": "a8715851-c01a-49c8-8194-f04a59547fc4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4d96f19e-ad4b-4ffb-afe4-103ebc2d372d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2393c0b-b94c-464a-bc54-fa445dd87a28",
        "cursor": {
          "ref": "0aac2588-0675-45bb-b5bd-bae81736aac1",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1e33cf74-3c0a-420e-927c-a7bfbe47e455"
        },
        "item": {
          "id": "a2393c0b-b94c-464a-bc54-fa445dd87a28",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e967fb06-ef19-40b0-9d6f-2b9635ca52c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55013957-4f7b-48e7-b55e-e0c39970dcc0",
        "cursor": {
          "ref": "a3d65238-3b0f-4b92-bebd-512df6fba968",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "515b24ad-9ff7-42d7-b200-f034ca07f25f"
        },
        "item": {
          "id": "55013957-4f7b-48e7-b55e-e0c39970dcc0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0544325f-c62d-4e0c-95c6-ddf3d8e07a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d1f951-9472-4493-8199-1d0bf420b9ba",
        "cursor": {
          "ref": "c28c0e6c-fabb-4045-aa30-c4cbf18d278c",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "cbd6aeb0-b70a-4323-8b64-fcea911e7c67"
        },
        "item": {
          "id": "20d1f951-9472-4493-8199-1d0bf420b9ba",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b06a4cf2-36ca-4b7a-a3ed-6b93bdf8077f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b2498b-ed07-4143-9519-d513b6a0b60d",
        "cursor": {
          "ref": "f2bf6433-9f85-4262-b0e7-8e8d6c3407c7",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b8b5bc59-aa96-4300-9c51-ae6b68695061"
        },
        "item": {
          "id": "d2b2498b-ed07-4143-9519-d513b6a0b60d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8609243b-3b3e-416d-9cf6-ad705577ceb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540f1c67-971d-481d-beee-7f0f23280b0b",
        "cursor": {
          "ref": "2d900c94-d4a7-4f9a-92fb-8e6e85ca15ca",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "47e88af6-41f2-4d2b-8362-e2dca24256c7"
        },
        "item": {
          "id": "540f1c67-971d-481d-beee-7f0f23280b0b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3e692d45-9cbf-42ad-b935-d27bec8f2ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a52dd34e-6fa5-4e82-aef5-19ac96973585",
        "cursor": {
          "ref": "6ec35d8c-eead-48ba-bb57-7fe642d9ec5b",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b164d8f7-928e-46a2-8b0a-c151f04007d8"
        },
        "item": {
          "id": "a52dd34e-6fa5-4e82-aef5-19ac96973585",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d4e6fab0-e886-452c-a941-45e17462ca6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c4727b7-88c1-4b88-95e9-fcb67b4c8911",
        "cursor": {
          "ref": "aed986c1-f50c-4a0e-a619-fd4895e9605c",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e0f7498b-b99b-40a1-be1f-93846bee5854"
        },
        "item": {
          "id": "8c4727b7-88c1-4b88-95e9-fcb67b4c8911",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2aef3258-f5a9-45d0-a4c1-af57a1118bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb8fd07-7cc7-4cc8-9211-1735fb963902",
        "cursor": {
          "ref": "395e68d3-2c23-4461-83c5-cfad8523c7ce",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1fc7bb54-f1e9-49ab-a87d-81349cb1e58b"
        },
        "item": {
          "id": "bdb8fd07-7cc7-4cc8-9211-1735fb963902",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "bb96aeb4-c2dc-4278-96d7-705cc44833a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd803962-c4f5-45bb-85d0-c3499ec72111",
        "cursor": {
          "ref": "95711858-b7d1-4cc2-8d61-2054a12fee67",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ccad07e5-2eb2-4de6-a9c1-c75ba6912505"
        },
        "item": {
          "id": "bd803962-c4f5-45bb-85d0-c3499ec72111",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e838539a-3898-4c58-abf0-55493fe8a820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce8ce11-54c7-4e98-9818-1fb38563d855",
        "cursor": {
          "ref": "603f6a79-f0a0-44b4-9f7b-e3d5e5688359",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d6d5e540-c6b8-43c9-b6fc-886ca8794b0e"
        },
        "item": {
          "id": "2ce8ce11-54c7-4e98-9818-1fb38563d855",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5d112358-0b20-4f15-b314-9a8ec24db231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c50175d-feda-4dec-b6f5-28a5bf3f1292",
        "cursor": {
          "ref": "1ccea120-2280-4f4b-b59d-619e6b522549",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6fb028a5-5a69-4489-9cee-5519aa7975fa"
        },
        "item": {
          "id": "8c50175d-feda-4dec-b6f5-28a5bf3f1292",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "43b03183-2cc1-4381-846c-430d77727dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e8ba33-b8f0-4a42-a986-64fc44359e0f",
        "cursor": {
          "ref": "7607cae9-7561-46da-a493-2127c7a6c148",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e9f1a783-66ff-418a-8612-927bee43f953"
        },
        "item": {
          "id": "d6e8ba33-b8f0-4a42-a986-64fc44359e0f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e7318289-38e7-4472-b965-bae9224eeefa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741fa794-c516-4f22-9eb7-fda62a1cdd27",
        "cursor": {
          "ref": "e927b2dd-3946-4e8d-8589-40b48815d6b6",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b1655207-b11c-4089-a740-227019de36c2"
        },
        "item": {
          "id": "741fa794-c516-4f22-9eb7-fda62a1cdd27",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8956e4e6-b497-4be4-b567-ffb34ebd8da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c540c084-f761-41a8-9cbd-f50d5433459f",
        "cursor": {
          "ref": "64ac2ebd-db8f-4f4f-8307-bb4118b88f95",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f7f83234-2cc1-4b1d-9ae3-bcf82e067f91"
        },
        "item": {
          "id": "c540c084-f761-41a8-9cbd-f50d5433459f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ea3256ee-5afd-47e4-ac55-4df0eab61726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "751ce2b8-f996-4a4e-bfcd-3a9e5f4dda8a",
        "cursor": {
          "ref": "8a11ab23-a35f-4f25-b740-9207abbb6169",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "27d8b0b6-ab6f-46af-b623-d57977eec289"
        },
        "item": {
          "id": "751ce2b8-f996-4a4e-bfcd-3a9e5f4dda8a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4a9c65b4-7123-44b5-9f24-7d5d12800269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a56124a9-0ce8-4381-83b3-d671e83af88e",
        "cursor": {
          "ref": "2755e75b-1992-439e-a7fc-c2fa595e9c43",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "694d5a3c-1f49-400a-aeb8-825d6e188460"
        },
        "item": {
          "id": "a56124a9-0ce8-4381-83b3-d671e83af88e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "486f5306-3708-4203-9f6b-6eb7821338f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a6dacb-6a7f-4860-9809-d4590d5746be",
        "cursor": {
          "ref": "a822b61e-ced1-4700-8a64-9c8983945695",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "78da3829-d113-4bf1-86ca-dab599d0b37d"
        },
        "item": {
          "id": "93a6dacb-6a7f-4860-9809-d4590d5746be",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "db73303f-367f-4f12-9d98-d8fbbac12a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb458d6-333d-4e90-9966-7739ea90d427",
        "cursor": {
          "ref": "fbf4bedb-1389-4e1a-95c6-5f8713ac0c24",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "49e790b4-e817-4c1c-875a-43fb2627b957"
        },
        "item": {
          "id": "bbb458d6-333d-4e90-9966-7739ea90d427",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3d554552-975d-4c34-ab64-57cb3cec5660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e555f6a-bffd-4421-ad55-7ab3d05ca9fd",
        "cursor": {
          "ref": "113e47cc-db37-48de-88b1-4e7b05f34214",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2d6f0566-aba4-4251-b9b1-95fd61c9523a"
        },
        "item": {
          "id": "0e555f6a-bffd-4421-ad55-7ab3d05ca9fd",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c09811c8-c935-4990-b6a3-923e0b17501e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd958fc-6645-4a14-a6b2-d2e99c55dc1c",
        "cursor": {
          "ref": "9590a616-3372-4884-9e7e-a42b2d0c64f8",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1d42aa50-f0d6-46ca-afde-9b6cc5e7eac4"
        },
        "item": {
          "id": "bfd958fc-6645-4a14-a6b2-d2e99c55dc1c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5331c4c9-3453-4e45-8ee1-6d657ea8949c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3f58b2-4e41-4c50-b9d5-31074df6a14d",
        "cursor": {
          "ref": "8ec171a7-5762-47fb-a08c-b095ec0ac520",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8d15ff6a-e69a-451d-b1d1-8d21a327f832"
        },
        "item": {
          "id": "7c3f58b2-4e41-4c50-b9d5-31074df6a14d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6272c013-0e89-4ee5-8c0a-c44120feeced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "fdad637e-d2ca-4447-91c7-73750779c545",
        "cursor": {
          "ref": "7997caa5-5421-4124-95b6-26f5e2fff9a0",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ee5b2928-7101-454e-bf90-95cbf8ec810d"
        },
        "item": {
          "id": "fdad637e-d2ca-4447-91c7-73750779c545",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "47d8481a-06c2-4288-9fc5-4cb7335ae718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1afbca93-c1ee-443f-9989-add69a9a1e60",
        "cursor": {
          "ref": "fdd13493-73d7-4b9e-866e-f4514e41b4cf",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8306e522-552a-408b-9c97-8384e5bf170c"
        },
        "item": {
          "id": "1afbca93-c1ee-443f-9989-add69a9a1e60",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ee0e1828-8d71-4729-acd5-4595b065bee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ef4fb4-60f1-418e-a1a1-a149145f45d4",
        "cursor": {
          "ref": "0ba1c6e1-5386-4f8b-a994-60cd695357a7",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2e81938a-b8b1-445b-8918-6d4a1557b545"
        },
        "item": {
          "id": "48ef4fb4-60f1-418e-a1a1-a149145f45d4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b09b5c5c-2112-4f5e-a9e3-51cf9eed450d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4836c535-4222-486c-aa3d-742db16c5d1b",
        "cursor": {
          "ref": "5e48fd6c-0515-4ac0-bd6f-0832a15879dc",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "87f78fdb-8320-487e-93b1-a817344e4b1b"
        },
        "item": {
          "id": "4836c535-4222-486c-aa3d-742db16c5d1b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d7ea0013-65a4-4983-a809-f132a6837070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f24438-7d6d-475c-a534-ee885fc75cd7",
        "cursor": {
          "ref": "968077d9-5791-4b2d-b9f7-eb3b5e69d7ae",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "346af5c7-3a95-4fc2-9716-acebdffa87a3"
        },
        "item": {
          "id": "47f24438-7d6d-475c-a534-ee885fc75cd7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "91557793-8fd3-444b-997d-b674217a26e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98698c81-a9d0-42dd-b154-55729d14dce4",
        "cursor": {
          "ref": "944ce7c0-baa8-4b1f-9eb5-0e06931b98f5",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ddc1ee4b-c96b-47a9-bc03-6419a8aef345"
        },
        "item": {
          "id": "98698c81-a9d0-42dd-b154-55729d14dce4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "30fdd8cf-13e3-4a5f-bab6-866fb8abc0bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91f8931-961e-4be5-b4f6-bbfd73630550",
        "cursor": {
          "ref": "533aed29-f1d8-446b-9cb1-3d8a23d8be86",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "bd7265e1-2a5d-49ed-bdfc-d6e554b046ea"
        },
        "item": {
          "id": "b91f8931-961e-4be5-b4f6-bbfd73630550",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "fce31bc9-cd27-4bd6-bb0c-4cdde14e3cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6437d0b3-bfe1-4b2e-b6b4-27155c680718",
        "cursor": {
          "ref": "1a730f77-7922-4812-8f18-39b3d329f7b9",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a6493404-3df5-454c-a72a-46c8022e9102"
        },
        "item": {
          "id": "6437d0b3-bfe1-4b2e-b6b4-27155c680718",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f32f872a-d573-4a47-b9a8-b9fc06ffe490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75a6bb8-bf8f-4a52-babc-ec8dcc32d641",
        "cursor": {
          "ref": "6baf65f5-7cca-4e97-8a6a-425463c7cb84",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "61092740-df34-474c-b7f1-e7b0aa983575"
        },
        "item": {
          "id": "a75a6bb8-bf8f-4a52-babc-ec8dcc32d641",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e97af5b7-c04a-4f8f-b2a1-71ef167f629a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3679173-cd32-4d9b-861b-0e8c5f301c45",
        "cursor": {
          "ref": "87600823-871f-43f0-926c-981b4a615f03",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "31d471b5-6bb3-4ff7-bf29-f53b2132cb01"
        },
        "item": {
          "id": "e3679173-cd32-4d9b-861b-0e8c5f301c45",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "bcc9bed7-b5cf-45fd-86f1-7e8846976e51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2866ac-4984-4888-8385-ec54e919f293",
        "cursor": {
          "ref": "76e9b56f-caab-4dc0-b38f-f94621a35001",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c5d4c364-ae13-4ff7-8d49-6e4f747135a4"
        },
        "item": {
          "id": "dd2866ac-4984-4888-8385-ec54e919f293",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7d3cdc97-dfa6-480a-a615-9bc1bf068aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87bfa9af-6fc8-45db-8599-3974e349a60f",
        "cursor": {
          "ref": "1826f1c0-f2e4-4b4e-a078-7831eb5ee3e7",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "da26b7fc-8efd-4121-b27a-25db4ac5c843"
        },
        "item": {
          "id": "87bfa9af-6fc8-45db-8599-3974e349a60f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "510b266a-f92c-42aa-8b10-f45111855224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c0327f-d987-4058-ae93-ae4651d35527",
        "cursor": {
          "ref": "43b11c93-6b70-44f8-a3e6-ed05311e358d",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4bc54d04-1232-4853-9ce0-e85f0147443c"
        },
        "item": {
          "id": "e0c0327f-d987-4058-ae93-ae4651d35527",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a2375417-a363-49a2-b1c1-34c0f351ec3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c1232b-3c2c-4215-9479-44adabb14843",
        "cursor": {
          "ref": "426444e2-6400-48e2-a4dc-1d82dbdd797e",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "81febb35-b367-4ee7-a0f8-44763b65f397"
        },
        "item": {
          "id": "c6c1232b-3c2c-4215-9479-44adabb14843",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "94d93d10-8157-45d5-91a9-b7b26b826545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc23aec-14f3-4d3a-a500-7b7d142089ba",
        "cursor": {
          "ref": "c4a5b33b-3f0b-42b0-87b8-90d538baf615",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "211f5c62-5d79-4b52-ae05-b87721b4613b"
        },
        "item": {
          "id": "4cc23aec-14f3-4d3a-a500-7b7d142089ba",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "764034c3-24bb-405e-aa27-b4127844ed44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96da8631-1e67-487d-bb73-2c54b6f2f453",
        "cursor": {
          "ref": "2511d365-4b43-4855-a453-9627e8fab3ea",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "35003f0f-79f2-4500-be7a-920a3f86fd4d"
        },
        "item": {
          "id": "96da8631-1e67-487d-bb73-2c54b6f2f453",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1399b94e-15c6-474f-b043-8c30cce961dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76cb9531-2cb0-4af5-898d-1ee23f7a0b21",
        "cursor": {
          "ref": "95d052e9-eb2c-41e7-934d-02ab0151cbda",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d39dbee0-3210-48ee-b461-9157d4a0514b"
        },
        "item": {
          "id": "76cb9531-2cb0-4af5-898d-1ee23f7a0b21",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "00d142c5-5ae7-49f2-bd81-8b1d1d1d1c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1221e714-a4d2-4f3b-a568-dad42ee3ed18",
        "cursor": {
          "ref": "43dc6a88-d87a-459d-b9f9-043a83212e1e",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7b36ec86-c268-41e9-a818-caf6f32eab62"
        },
        "item": {
          "id": "1221e714-a4d2-4f3b-a568-dad42ee3ed18",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fb14cc49-7571-45f7-9d21-c380c20bf6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8533f868-1b34-49b0-8280-fca6d7307111",
        "cursor": {
          "ref": "bf015789-e212-488c-930d-665a834410e8",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e01a914e-5f3c-4b8b-9337-01db38fd88fc"
        },
        "item": {
          "id": "8533f868-1b34-49b0-8280-fca6d7307111",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d4eae8a9-4a08-45ec-bc65-30dfb98528b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca2180b-238e-4c7a-ab87-012418bed0f6",
        "cursor": {
          "ref": "5e0925bc-7fcd-4a99-9395-7dc314620a83",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "18205640-60ed-4af5-a76e-c6e727f2f800"
        },
        "item": {
          "id": "dca2180b-238e-4c7a-ab87-012418bed0f6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "46e76a8e-c8b9-4a3c-9975-93e3ff41dd6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171ee7c1-6d28-4f48-97ad-21439ed06474",
        "cursor": {
          "ref": "d51120f7-0b69-4dad-bde3-2d83561814ce",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "cc77bdbc-528b-4710-9781-b25a083a0871"
        },
        "item": {
          "id": "171ee7c1-6d28-4f48-97ad-21439ed06474",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "27331b4d-602b-47a5-9c4c-49bf6b160283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e0cd3b-863d-4d72-8a24-8f604976e9c4",
        "cursor": {
          "ref": "b9c2c30e-0bf9-4686-bd03-c09d920c6dd8",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7cf196de-f3b1-4f20-a084-8598a175ddd1"
        },
        "item": {
          "id": "43e0cd3b-863d-4d72-8a24-8f604976e9c4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6b1e2048-d4df-4dbf-8f99-d646fbb489ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f108ed82-68a2-40df-b1c7-94d421e5ca0b",
        "cursor": {
          "ref": "42962fa8-ff2f-440b-a70e-48be1bdf0649",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "15b51f0b-a5b1-4af8-a8d3-f13808743d4e"
        },
        "item": {
          "id": "f108ed82-68a2-40df-b1c7-94d421e5ca0b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "88ca6cb5-ebac-4b01-938f-7fcd9b071dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2806885-ef57-4027-a13e-d4c76745bcd3",
        "cursor": {
          "ref": "8c722aab-0af6-48ba-a514-a3548736ed75",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "39c54113-3f7f-4a9a-a681-5cae650b3f9a"
        },
        "item": {
          "id": "e2806885-ef57-4027-a13e-d4c76745bcd3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "409580d3-3288-4c67-abba-694b0437a34a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b7fccf-8e2a-4f04-af84-07339b9407ad",
        "cursor": {
          "ref": "c55dfb5b-fe7e-4625-bbd3-745cd722db84",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "69c8064e-e5f3-45e8-9cfa-ba4fadcd8271"
        },
        "item": {
          "id": "45b7fccf-8e2a-4f04-af84-07339b9407ad",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "906b670a-bc42-461f-9b2e-0efd9d38a55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b187dab-64c6-4cc1-8931-a4a8710d0410",
        "cursor": {
          "ref": "17ac0605-1e0d-4d53-b1d8-ca92553aa9e1",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ac26e6d2-c8ac-4fe3-9365-604e8967b77c"
        },
        "item": {
          "id": "0b187dab-64c6-4cc1-8931-a4a8710d0410",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "971a4935-6a75-48ca-be4e-b6904a48b3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cfaf040-b37d-4674-b5ba-89bb9b92c663",
        "cursor": {
          "ref": "cfb70577-1032-4639-9c63-7893597ca820",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "176a38d3-e175-42cc-b02c-a2668425023f"
        },
        "item": {
          "id": "3cfaf040-b37d-4674-b5ba-89bb9b92c663",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "527b3804-68e8-4022-9e18-2fe2b3ae959a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9edf66-9978-4546-8281-53bb4516d59c",
        "cursor": {
          "ref": "ef039c0e-4a19-4930-b6d8-b3752263fbb9",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "257a2c24-128d-4562-92df-c61ec267d0a1"
        },
        "item": {
          "id": "6c9edf66-9978-4546-8281-53bb4516d59c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "36957648-5039-4daf-9c8d-f35d801f1e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca6246f-beb6-41ca-9d55-be1587c42b51",
        "cursor": {
          "ref": "a121c00d-c64b-4dc5-8849-d555eafb2129",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "033f6dc3-0dd0-49fa-bdd6-0d9548a1b644"
        },
        "item": {
          "id": "aca6246f-beb6-41ca-9d55-be1587c42b51",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9b5aa5e1-d2c3-42ed-85c0-6bd974eec974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7c87fc-e5a5-40a8-b658-7dbdfe65a793",
        "cursor": {
          "ref": "a0e21722-5dcd-4aac-939e-47b239d176e6",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "09a8edf9-4e2e-4b56-a853-136da9f8bd79"
        },
        "item": {
          "id": "8c7c87fc-e5a5-40a8-b658-7dbdfe65a793",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "51edf197-e76b-4c93-a731-aad8850a6435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ba8358-9939-45ca-9050-26bac5a01ff2",
        "cursor": {
          "ref": "dd31bae1-e438-4857-97d9-d05dc7bacbb4",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e35e1187-ff99-4259-b581-b9a83c341e5d"
        },
        "item": {
          "id": "54ba8358-9939-45ca-9050-26bac5a01ff2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "94f4bf4b-ce87-465d-8b86-d2358f178f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d51ba52-ac1a-470a-912d-35f4019a9c22",
        "cursor": {
          "ref": "9aaf909c-5770-418a-b7f6-990cd2d18324",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3a23fb66-c209-4449-baac-7c80a0d690c7"
        },
        "item": {
          "id": "1d51ba52-ac1a-470a-912d-35f4019a9c22",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "596d1966-cac5-4df2-b45c-a5b3fa8ba211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "713bbfc9-f860-42be-be31-a1c407d1a29a",
        "cursor": {
          "ref": "437f5fc9-857e-4f34-abd7-22762e7a0482",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "19786051-ab63-4bfd-8215-8a9315c958c6"
        },
        "item": {
          "id": "713bbfc9-f860-42be-be31-a1c407d1a29a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "cf5db2df-8ef0-4141-8aab-25b13ceba838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da7c801-44f7-4826-980c-48bfa14d92b6",
        "cursor": {
          "ref": "739b3f54-c031-4079-bed0-92e3a73c3f1b",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ea37ead1-1d77-4629-a8e2-60ff49bc9902"
        },
        "item": {
          "id": "1da7c801-44f7-4826-980c-48bfa14d92b6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f30217e5-3e90-402a-9932-d16fe51c8b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7849684-edcf-4c17-aa96-2bc314ecf287",
        "cursor": {
          "ref": "637807de-e7f6-45a9-af4c-27b9bdca3120",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d0408f81-6a3b-4307-8b9c-fbcf8027abb9"
        },
        "item": {
          "id": "f7849684-edcf-4c17-aa96-2bc314ecf287",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "900857d9-1d45-4454-91b0-7a7e7da6cff7",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 862
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "8590bc5a-2706-4ba3-9095-923ec122e3cf",
        "cursor": {
          "ref": "95db64c7-5c47-4b53-a7ad-be9e3c80a3b5",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1dd54618-2342-473b-abde-ded45f2e4a3f"
        },
        "item": {
          "id": "8590bc5a-2706-4ba3-9095-923ec122e3cf",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "fcd1c2f5-92cb-48f4-be10-839fbd654038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53992a3a-68d3-4e26-947a-e84dc0571dfb",
        "cursor": {
          "ref": "b4c29132-78f6-484d-932a-708b491dbfb6",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "646b9835-0f45-4220-a80e-7f0652beaa9b"
        },
        "item": {
          "id": "53992a3a-68d3-4e26-947a-e84dc0571dfb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c13aa7de-f497-4522-8963-4fe50891cb41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69d71b7-b431-405c-b5a3-ae89db107623",
        "cursor": {
          "ref": "117c152c-ae78-4a88-a554-1064eae3619e",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "77c1f3d1-f5f3-4c7a-a641-c4774c838186"
        },
        "item": {
          "id": "c69d71b7-b431-405c-b5a3-ae89db107623",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0cf8adb8-18d0-4ff6-87f5-09c29f9f8c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35663324-8b42-4500-83ee-89457d1843dd",
        "cursor": {
          "ref": "416b7233-d52a-48d5-8199-0e8dd91e280f",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "05cdb6ab-a792-4dea-941e-6006851e9965"
        },
        "item": {
          "id": "35663324-8b42-4500-83ee-89457d1843dd",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c72540f0-f80f-4acd-91e4-64ef9f0f20a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b192ae7e-038b-4184-b60d-55a14c3f5396",
        "cursor": {
          "ref": "d426b216-3854-49bb-9029-2771e12377a3",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "eb5d294f-9f1b-4f84-8165-f41b27eada14"
        },
        "item": {
          "id": "b192ae7e-038b-4184-b60d-55a14c3f5396",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "eda9476d-dc25-4270-a734-2aaf9b0bd0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f71b66-384b-4bf1-9aea-2fd43b03ac6a",
        "cursor": {
          "ref": "c04854db-37e5-421e-92db-b3137ec0098d",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "faf85b85-69cd-4df7-931a-a82688e60532"
        },
        "item": {
          "id": "22f71b66-384b-4bf1-9aea-2fd43b03ac6a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "cbd4163b-1f66-4d50-bd31-acbcce205d0c",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 862
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "3f6dbb1d-fe78-47b0-bef7-6a8cde7fe898",
        "cursor": {
          "ref": "3d690158-9e3a-4fcd-a3d9-cc136ebe604b",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a611b3be-f5b4-488b-a9c2-44de6ce2fac0"
        },
        "item": {
          "id": "3f6dbb1d-fe78-47b0-bef7-6a8cde7fe898",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9f6da1e8-d889-43c1-b410-0f550321e10c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "198501e6-ae40-42ca-a03d-e624f36048a7",
        "cursor": {
          "ref": "2af2b84f-2458-4fb3-a310-0300d3b2654e",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4db2d89e-def3-4305-9480-61074fe4cd44"
        },
        "item": {
          "id": "198501e6-ae40-42ca-a03d-e624f36048a7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c09f1caa-33c0-46d4-8325-62ef3045c9c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c79e2b-03b1-41e3-b899-d81cc0ad3df6",
        "cursor": {
          "ref": "3828add9-6256-4d85-9bf9-778b281f8eea",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "88e817fc-d848-4a5b-8fac-10a27a822cce"
        },
        "item": {
          "id": "61c79e2b-03b1-41e3-b899-d81cc0ad3df6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d9cbddc2-7f2f-47ce-9fb6-dd1ec636b7db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b45157ce-4be5-476c-b628-b628f1431de2",
        "cursor": {
          "ref": "7514b1f2-2984-40e9-ab1d-08e1b2633e36",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "453ada9b-f729-4128-92a2-8a0d844a2c84"
        },
        "item": {
          "id": "b45157ce-4be5-476c-b628-b628f1431de2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1424b42e-5723-4b7e-a2b0-c46c3da313fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d44cae-b1bd-41dd-ac8b-06731b305469",
        "cursor": {
          "ref": "5c506c9b-ef00-4006-839e-f0bded1a476d",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a8d344af-970a-49a4-99ea-83e7c8990f21"
        },
        "item": {
          "id": "c2d44cae-b1bd-41dd-ac8b-06731b305469",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f51cc6bb-942b-40ef-968b-fb6280665ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d77bf34-4011-4682-9d2b-b74b59235f92",
        "cursor": {
          "ref": "693d7df0-c75e-40f7-83b3-fff967cfc8d1",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "500f8538-4659-4d6a-8687-b588753188cc"
        },
        "item": {
          "id": "4d77bf34-4011-4682-9d2b-b74b59235f92",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ecb99f9c-f2bd-4439-a755-28805e3d2a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440d019c-7035-4f72-9cf2-c598e3511009",
        "cursor": {
          "ref": "0c0f8c40-d029-4550-aefb-47039615a337",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "4d447c99-8e31-4023-ae22-a98ef18d5cea"
        },
        "item": {
          "id": "440d019c-7035-4f72-9cf2-c598e3511009",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "fcea0268-dd35-4136-b57e-ffb890b5db07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf8fd1c8-983b-470c-b22d-8c8a46fcc7e1",
        "cursor": {
          "ref": "5eb621a1-0180-458c-bc6a-fb951b85ff1b",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "42f3dca4-33ed-4345-b447-f0b32b7ad983"
        },
        "item": {
          "id": "bf8fd1c8-983b-470c-b22d-8c8a46fcc7e1",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "da3d90e1-d53a-43db-bf60-5746154755e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0793ef73-441e-450f-b479-d321e08070d0",
        "cursor": {
          "ref": "ab321b44-7668-4b88-83ee-71c975a7f0ce",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "38f5d748-873b-42aa-8dda-fc67c5c61bf5"
        },
        "item": {
          "id": "0793ef73-441e-450f-b479-d321e08070d0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f5311546-e792-4abc-b295-a3c2fbfb8d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "1d844393-fe36-4c76-9962-ba529fb986b6",
        "cursor": {
          "ref": "a088c567-cb73-4fc8-a25e-15c2d3e41012",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "513cd01a-2266-48b1-93ce-d916d8a71230"
        },
        "item": {
          "id": "1d844393-fe36-4c76-9962-ba529fb986b6",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "a630ad38-8e6a-4434-864c-01634556e93e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "bdc78c9b-0d47-4b4e-8ebb-efc32016beb5",
        "cursor": {
          "ref": "1c987af8-f5b5-4147-9fc8-fea31a3b1261",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "020a5f80-5b76-4ff8-b416-d50b193795f5"
        },
        "item": {
          "id": "bdc78c9b-0d47-4b4e-8ebb-efc32016beb5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "fedda632-e553-4388-9a11-19cf8e991de0",
          "status": "Created",
          "code": 201,
          "responseTime": 71,
          "responseSize": 862
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3a8736-7c66-43d4-91f8-9d296d73dc97",
        "cursor": {
          "ref": "dc638097-6b91-4bac-88d3-ac9531be9f75",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "837d9fcf-c33f-426b-8b71-2633c4b3719f"
        },
        "item": {
          "id": "4d3a8736-7c66-43d4-91f8-9d296d73dc97",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2766e740-5916-499f-bbbc-6aa75273ed9d",
          "status": "Created",
          "code": 201,
          "responseTime": 108,
          "responseSize": 862
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c2908e-126e-46cb-993a-5d5690003667",
        "cursor": {
          "ref": "08ae79db-28de-4786-bfdb-5e5a9bfffe36",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2cc73c4e-e940-42a2-9508-2d28956b7c81"
        },
        "item": {
          "id": "a0c2908e-126e-46cb-993a-5d5690003667",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f1fba2eb-0c27-4ee1-8f5d-1a6199b48aa5",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 883
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2886750-d605-4510-ae21-241691b4bbc6",
        "cursor": {
          "ref": "7197c4b2-0bf5-44f7-b068-8f207167ed23",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "63695e5a-6c57-4fa0-8272-3ca13d965a01"
        },
        "item": {
          "id": "e2886750-d605-4510-ae21-241691b4bbc6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9a6b0618-ee98-419b-b26e-7c8dd5839cbf",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 852
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb087e57-7c85-4197-b6d5-53344185e8d3",
        "cursor": {
          "ref": "5a7a5c1e-ebc3-4bb6-a3ed-53a2f67c9972",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f835c5bd-4cca-4ba9-8d9c-af573badbf80"
        },
        "item": {
          "id": "bb087e57-7c85-4197-b6d5-53344185e8d3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2b466a25-bc47-4fe1-b6a4-f3026e308d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "87cdd08f-9c48-4ed5-ae5b-d34540cac2be",
        "cursor": {
          "ref": "88ceb2ba-d26d-4b7b-8974-afd646087b8f",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a1e44048-9e40-4ca1-a071-96e6cd563cfc"
        },
        "item": {
          "id": "87cdd08f-9c48-4ed5-ae5b-d34540cac2be",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "943156d5-c1c2-4d54-8def-713f8ad66912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87cdd08f-9c48-4ed5-ae5b-d34540cac2be",
        "cursor": {
          "ref": "88ceb2ba-d26d-4b7b-8974-afd646087b8f",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a1e44048-9e40-4ca1-a071-96e6cd563cfc"
        },
        "item": {
          "id": "87cdd08f-9c48-4ed5-ae5b-d34540cac2be",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "943156d5-c1c2-4d54-8def-713f8ad66912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de7b88d-9480-4928-8745-855ce0f0824c",
        "cursor": {
          "ref": "d8d1088a-7f4b-4f67-ab80-a415262cc3c2",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fbdd56d4-7b76-4ced-a80d-d82976a517f8"
        },
        "item": {
          "id": "5de7b88d-9480-4928-8745-855ce0f0824c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2ad2eda0-cb0e-489c-a51c-88991cac7646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ed2dfd-7eca-4b38-99de-b9d7b9f64c9a",
        "cursor": {
          "ref": "cc9c6655-0e63-4fcc-a63d-e0ae940bf902",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "beda3ed3-8629-4f6d-ae75-f1ca92c7effa"
        },
        "item": {
          "id": "50ed2dfd-7eca-4b38-99de-b9d7b9f64c9a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9194ffc7-aded-4cdc-9679-e626e1fe715e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae5f103-0c0f-4158-9bc5-d70bbc191ae7",
        "cursor": {
          "ref": "d160db9d-5fde-4ee0-b896-df87cca06eef",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b0f567e8-c230-4d99-b231-6049cdbe6675"
        },
        "item": {
          "id": "dae5f103-0c0f-4158-9bc5-d70bbc191ae7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "dbec75db-60f0-49b7-ae80-e5f940774ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a490dcc-2d44-448a-8270-3e5170816714",
        "cursor": {
          "ref": "190f0d73-11bd-48cf-ba81-ebd52aafb9c6",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0d0815cb-fba2-46bd-a708-163e49a314fc"
        },
        "item": {
          "id": "3a490dcc-2d44-448a-8270-3e5170816714",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "45038e1b-ba59-4b55-bc24-19741f143892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94843265-4f00-4b86-abd4-625f3d5eb1fe",
        "cursor": {
          "ref": "49b94f6a-bb6d-45fb-b52a-1aae5e6284ca",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5a21f8d5-e59e-40cb-a376-2503b7d01073"
        },
        "item": {
          "id": "94843265-4f00-4b86-abd4-625f3d5eb1fe",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4f44e3f2-410f-4f49-817d-a271a2d26105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd55f30-e3ad-4ef6-b6d3-d62931df6532",
        "cursor": {
          "ref": "76786a22-a13d-4fd8-84a7-cca86a347a44",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "174e9480-38f3-4c08-95d7-2d52f41121f0"
        },
        "item": {
          "id": "ebd55f30-e3ad-4ef6-b6d3-d62931df6532",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "86cf9bbf-8d0a-4cfb-9c47-b0ca62ea31d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "74d2e967-0ffc-465f-b68b-5ecca4171ed3",
        "cursor": {
          "ref": "4f3422d0-f01a-4474-b2e1-b1d79b0bb842",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d6014612-37dc-4bcc-bb6b-ba11ba8b4485"
        },
        "item": {
          "id": "74d2e967-0ffc-465f-b68b-5ecca4171ed3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a3ae539d-00a0-4bfa-9589-40ea6fcd9550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c162e57-0559-4f5e-8a8c-e826f606385a",
        "cursor": {
          "ref": "4ce72229-464e-4b02-a3e3-5606b55c94c8",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "36a9e42b-b3cf-4d3b-a5f3-d01ea6c19c0b"
        },
        "item": {
          "id": "5c162e57-0559-4f5e-8a8c-e826f606385a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "93e90be8-e8f0-4231-b147-b179480929e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01cdfc6-dd69-49bb-9c04-10fbd808a494",
        "cursor": {
          "ref": "58c24153-f093-43e7-af81-c3fa6f4edc0b",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "69b0488a-2c2d-497a-87d1-b46af43b9c51"
        },
        "item": {
          "id": "f01cdfc6-dd69-49bb-9c04-10fbd808a494",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6d101a2f-a12f-4902-8891-ec4c5fdc4298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7de96460-a4ba-4716-aa33-5d9872a28cc9",
        "cursor": {
          "ref": "c998afbf-8a30-40cc-9a85-d91368a81daf",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e2aea83b-247a-4e77-a77f-68dc68768783"
        },
        "item": {
          "id": "7de96460-a4ba-4716-aa33-5d9872a28cc9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4f26fd5b-f3dd-492b-85d0-384df29e785b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28492b92-4b4f-47d4-b1de-9e803cddc6e0",
        "cursor": {
          "ref": "637e63ed-2e50-496f-a3fe-ce3af622c165",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b5e0c3b2-f6b1-4327-8ef6-25f639fff57c"
        },
        "item": {
          "id": "28492b92-4b4f-47d4-b1de-9e803cddc6e0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1173420e-d725-438a-89bf-22517f1b1183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7869933-dc2e-426e-86a3-8c187137189e",
        "cursor": {
          "ref": "f8ea3bc3-b46c-46b9-bff5-f5e8ef7d4b14",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "cf4c332d-0fe1-455c-a581-72e5d2baef1d"
        },
        "item": {
          "id": "b7869933-dc2e-426e-86a3-8c187137189e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "510e3a3e-f725-43ac-8cdb-59f7fbe51206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef8f0f0-72a9-48f1-a5b6-50762cd93eeb",
        "cursor": {
          "ref": "37c18fe3-2669-4bc9-854b-0a88f9ea4bfa",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a5b23bed-e473-4629-9e58-b1ef3ae0b0a8"
        },
        "item": {
          "id": "8ef8f0f0-72a9-48f1-a5b6-50762cd93eeb",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7984eab2-30d6-41fc-87e7-aba97fb53e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44778b19-7a4f-4b97-9408-2fba2783265c",
        "cursor": {
          "ref": "de60ff6f-c010-41a4-b195-a7aefa1bb417",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "99463cc2-fbf0-4c93-96ef-f783338ec6ab"
        },
        "item": {
          "id": "44778b19-7a4f-4b97-9408-2fba2783265c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2549841d-4026-4acd-8750-673760d79955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48039e7-923b-4d49-b220-8fea4d068818",
        "cursor": {
          "ref": "b3168733-de00-4fe4-9c09-ba1fb41b8af8",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "db552a7c-6553-4eaf-ae0a-d45c0c197247"
        },
        "item": {
          "id": "c48039e7-923b-4d49-b220-8fea4d068818",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d94fe2b6-12b7-43eb-bdb5-ef6da1554692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3dfc8b-6a17-49b8-8e15-20bfb7b1880d",
        "cursor": {
          "ref": "b6cec66e-b7f4-40fc-b645-9cd70cd823df",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ed6cbde8-04ca-4941-af7b-a66613c1113e"
        },
        "item": {
          "id": "ac3dfc8b-6a17-49b8-8e15-20bfb7b1880d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c5259df4-1970-474e-94fa-af133a45316c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7ae453-e023-4059-9bfe-0837e4cc4b4f",
        "cursor": {
          "ref": "8b92f179-62a7-4e07-8a5a-a8933204dae9",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "465407c4-402a-45d3-867b-2addb8034edf"
        },
        "item": {
          "id": "9e7ae453-e023-4059-9bfe-0837e4cc4b4f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "81c86460-59f7-40bd-88be-a273285635d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df79666-cf1a-4a7e-b2e7-b160dd49cd10",
        "cursor": {
          "ref": "004d0abc-5d73-406f-a963-4f14859a8f63",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0f59a052-2810-48a8-9854-dc38058dcedb"
        },
        "item": {
          "id": "3df79666-cf1a-4a7e-b2e7-b160dd49cd10",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d7a373de-114f-4825-9455-82616c7a6b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f2f060-a622-417f-a9e2-2f428aca3bcf",
        "cursor": {
          "ref": "73654c56-57e2-4e65-8cf8-9b3591a542b6",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b37b4336-08a3-4249-ad77-460538dec6f7"
        },
        "item": {
          "id": "e4f2f060-a622-417f-a9e2-2f428aca3bcf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "bdd1f63a-5e29-4754-b8ff-e335711c3d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f410814-9abd-4a5c-91d0-3464eb3502cb",
        "cursor": {
          "ref": "28a26f5b-8d2e-42c9-8392-769d3b066bc4",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3bfb1a5b-35de-42dc-a91b-74e99a73b1ab"
        },
        "item": {
          "id": "1f410814-9abd-4a5c-91d0-3464eb3502cb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "99a9f593-ea0d-4127-aa82-637b48652b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b6d052-244c-4dd5-b047-8f850b46ebd1",
        "cursor": {
          "ref": "434c6582-90e7-4cba-971c-29e18547955a",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "13c02eb9-184f-4673-b57f-4dd23871ba9d"
        },
        "item": {
          "id": "e6b6d052-244c-4dd5-b047-8f850b46ebd1",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "12a0ac5d-6fe3-4a75-9205-b27c4f533143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03fe2e1-bce4-4428-a162-ba29c69ca0e6",
        "cursor": {
          "ref": "5ba793b3-5dcf-44c5-b111-040ac1d2affd",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "964357a9-1a30-45cf-821f-2a70d366e224"
        },
        "item": {
          "id": "d03fe2e1-bce4-4428-a162-ba29c69ca0e6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "29251d32-6d94-45ff-b128-59f0695beabd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40489a0-0d9e-4da9-8386-48effa5363f6",
        "cursor": {
          "ref": "6ec655fd-d3a9-4ae2-bbab-cd3185c91366",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4afc3d62-5f95-46d8-a942-76d8653cafa7"
        },
        "item": {
          "id": "d40489a0-0d9e-4da9-8386-48effa5363f6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "efb67ad8-c8cc-41a9-a45e-eaeb70c35ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3918507a-8a9f-4ec3-b3f2-3c0c9e2ef74a",
        "cursor": {
          "ref": "f2eb83d4-a1cb-4b1c-a7c0-1311b7c1c4d1",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6efc066f-2e1d-4ac3-be99-6767654aef86"
        },
        "item": {
          "id": "3918507a-8a9f-4ec3-b3f2-3c0c9e2ef74a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e58fd9e1-cd61-40af-a345-efef270d51ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad2e788-fba3-4312-9625-706eee78bb29",
        "cursor": {
          "ref": "376d2e55-2d0d-43db-ab3e-4830cf81bffe",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e44f5a1e-f404-4bf7-8aa1-76f43799b905"
        },
        "item": {
          "id": "7ad2e788-fba3-4312-9625-706eee78bb29",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "20aed3eb-45eb-437a-bfe4-26fa9a93c791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f56f2519-ee22-42fe-b8db-eb76e2d65a0d",
        "cursor": {
          "ref": "efc3ed92-0eca-4deb-8a2b-f46fd39eb115",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "dbd0e061-5b60-4abd-ab61-8ef004945962"
        },
        "item": {
          "id": "f56f2519-ee22-42fe-b8db-eb76e2d65a0d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5664b2f3-ab04-4216-84eb-31cd7c4d73b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "939509a5-86d9-4537-ac5f-f987582c8dba",
        "cursor": {
          "ref": "24d8b400-de65-4d0d-9f22-1842268e3e04",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fb668594-7d64-4bec-8b6a-964ab7c4491a"
        },
        "item": {
          "id": "939509a5-86d9-4537-ac5f-f987582c8dba",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9e888efb-8711-4f42-8891-05f2abb1426a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22deb47-aaa9-47e1-9b1f-75a9577545eb",
        "cursor": {
          "ref": "85725674-d2da-472f-ad30-2d9aad9cbe0b",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d80b6f81-7985-48d8-ab7b-0a580c2589a0"
        },
        "item": {
          "id": "e22deb47-aaa9-47e1-9b1f-75a9577545eb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9b913138-ffbf-4e5f-9133-f9b1d2ff6907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "732720cf-8e79-444a-bb74-216314c3da10",
        "cursor": {
          "ref": "5a8eebe9-2453-4c64-9385-fbd119be57fe",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "59b732a5-3027-4425-96fe-64333fe9e3bf"
        },
        "item": {
          "id": "732720cf-8e79-444a-bb74-216314c3da10",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "06b58b5b-97d9-492d-9328-e37dfcd43b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3e2da8-3dd6-423a-8291-103380fbc3d1",
        "cursor": {
          "ref": "153769b9-2e06-4317-9a77-525ec3a5f024",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2aad3690-9ff5-48ac-a227-18ba8cabd068"
        },
        "item": {
          "id": "dc3e2da8-3dd6-423a-8291-103380fbc3d1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5467f5de-f080-4ee6-84ba-98966a9eeb3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e84515-a9a7-46c7-b472-92ed0e055129",
        "cursor": {
          "ref": "f75e2933-6454-4597-8a3b-3fa1dc6721b0",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "033a6542-5544-44c7-8173-9e435a45fa22"
        },
        "item": {
          "id": "40e84515-a9a7-46c7-b472-92ed0e055129",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d15e1395-9d9b-489d-92b0-dc299935cd5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "145f11ad-81ad-4478-bb49-30114aa53e3b",
        "cursor": {
          "ref": "916fa70e-e65e-437e-b893-4e8f1692faa0",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a211b753-0ed1-4f14-bde1-202bce43e79c"
        },
        "item": {
          "id": "145f11ad-81ad-4478-bb49-30114aa53e3b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "46b839dd-60d5-4b27-9ce7-e1a088b189a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "caf4b93e-c347-4eba-8cf7-7d2be07edef2",
        "cursor": {
          "ref": "77be8f65-b1d3-4b76-8903-cc51a8b655b3",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d380f0d3-7b6d-40e1-9d86-2c27707a628b"
        },
        "item": {
          "id": "caf4b93e-c347-4eba-8cf7-7d2be07edef2",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "af29bd73-16f3-470f-be44-3e5f6aa0a83e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "0f593a31-d58f-471a-afaf-714122498d81",
        "cursor": {
          "ref": "59b3f883-4e2b-4224-90c5-9bbf19684230",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e428c265-6f7e-4f03-a96f-c6b7ff84d4a0"
        },
        "item": {
          "id": "0f593a31-d58f-471a-afaf-714122498d81",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "87c7c65d-bb9f-40ba-a350-549600a8c0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f593a31-d58f-471a-afaf-714122498d81",
        "cursor": {
          "ref": "59b3f883-4e2b-4224-90c5-9bbf19684230",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e428c265-6f7e-4f03-a96f-c6b7ff84d4a0"
        },
        "item": {
          "id": "0f593a31-d58f-471a-afaf-714122498d81",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "87c7c65d-bb9f-40ba-a350-549600a8c0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629966ac-5095-4e26-bec1-fb483be16af4",
        "cursor": {
          "ref": "720484eb-bd5e-434f-96e6-506b5953f0a7",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "359727b5-068b-46f0-8c41-36ea5cdd6ef8"
        },
        "item": {
          "id": "629966ac-5095-4e26-bec1-fb483be16af4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5a956ab8-839c-4cf6-be49-0901ba518e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f22c352d-38cc-4b91-9e2c-c73bc61a0c8b",
        "cursor": {
          "ref": "94ad3572-8312-4011-8b7b-4f1c763af015",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "cd8877ad-58ff-4fef-9289-7b5e50a71a28"
        },
        "item": {
          "id": "f22c352d-38cc-4b91-9e2c-c73bc61a0c8b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1fe28827-54a8-4182-bfc9-d6769a65f441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d17ed168-3df8-4650-b324-e04bc87e1436",
        "cursor": {
          "ref": "9c77e41d-a207-414e-a11d-963fa42acc7b",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "871e06d1-d22a-4f12-8591-24f198a2fa3a"
        },
        "item": {
          "id": "d17ed168-3df8-4650-b324-e04bc87e1436",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b9d5f345-1d60-4a38-9161-0a3be54ad592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c3b1f5-36cc-428c-ac32-c92bd60bd89a",
        "cursor": {
          "ref": "3464bc64-a10d-443d-98c5-a096c936e99d",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "aae1f441-bf86-4350-8818-7d11e78f0be8"
        },
        "item": {
          "id": "95c3b1f5-36cc-428c-ac32-c92bd60bd89a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8825bc06-4f80-4df3-8f9b-45593c7f752b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7735323-55a3-4d95-bd72-f3397e6df327",
        "cursor": {
          "ref": "4e3c8f26-c9c9-49fa-a31f-f1da01c0d4ba",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c68dbc76-2a0e-40c8-864d-c83e56ab10dc"
        },
        "item": {
          "id": "d7735323-55a3-4d95-bd72-f3397e6df327",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c14bfab5-7448-4edd-b2b9-77d0bc072e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ac9cc1-bca3-4137-8d18-90998947b8ee",
        "cursor": {
          "ref": "7ad5f5fd-c1b1-447d-bedd-1ecda56207df",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a2b864fb-41b4-4415-9d35-07511ae2ba65"
        },
        "item": {
          "id": "77ac9cc1-bca3-4137-8d18-90998947b8ee",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8940d1de-810d-4c71-b5b8-20acadf2c218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d2065c-b565-4d39-b359-1651e725008c",
        "cursor": {
          "ref": "445a1e53-98f6-4ad1-84c7-ce4110794de3",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "9d4ee0bd-9811-42cb-8d95-ac9a2af19a63"
        },
        "item": {
          "id": "48d2065c-b565-4d39-b359-1651e725008c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a7ea007d-42b2-4782-b1c7-0737a0116870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c11879c-5979-40c4-bbdc-1d89ce2f5347",
        "cursor": {
          "ref": "7e2d1e11-bfb5-4258-ab28-e1519db9b765",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "90f20d33-0704-4a30-ad93-5952bb57c227"
        },
        "item": {
          "id": "6c11879c-5979-40c4-bbdc-1d89ce2f5347",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "896e00d4-7927-44e4-a041-a314edfdc54c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a1a1dc-9940-41b5-9195-8f36f79f6261",
        "cursor": {
          "ref": "b6854155-b904-4f27-a6ea-dc542d38a2c5",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "45bed4ee-45d4-465f-b93e-7bc638a67a70"
        },
        "item": {
          "id": "88a1a1dc-9940-41b5-9195-8f36f79f6261",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0c682cff-6df8-4c19-a3ad-aa44813cedcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef218210-5b7e-4503-ad08-e135a2614a60",
        "cursor": {
          "ref": "0d3fdb5f-f1e5-46ba-97a8-fd5c55e24a62",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9ef957ff-7803-408f-9fb6-c326ee7ec169"
        },
        "item": {
          "id": "ef218210-5b7e-4503-ad08-e135a2614a60",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a678500b-7250-4801-9e53-0c0cc2d16711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251e9161-2dc1-46ed-b0d3-ec7c0675254c",
        "cursor": {
          "ref": "c5d63f2b-ce12-4ae9-a354-9c2745e39d96",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "dfbbbb4c-689f-46a2-bf5b-07b4f3f6ff10"
        },
        "item": {
          "id": "251e9161-2dc1-46ed-b0d3-ec7c0675254c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e1b115c6-6996-43c5-9cbf-c405e965871e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7106fca-6436-4cb6-a77a-048cafebb763",
        "cursor": {
          "ref": "c2a99393-f5c5-4b36-a7b9-6056571b99cb",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4677c739-c361-45f0-b18f-e1eb445413d9"
        },
        "item": {
          "id": "c7106fca-6436-4cb6-a77a-048cafebb763",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6db1be7b-54cc-459d-8800-616a31eee40a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "811ca4e1-c174-4848-9dd4-efd8d2cbeda8",
        "cursor": {
          "ref": "aed3ec5c-9488-4d28-b727-a0afda1c2db5",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "35226a56-8ded-4088-ac75-a271b915f9c0"
        },
        "item": {
          "id": "811ca4e1-c174-4848-9dd4-efd8d2cbeda8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "62d6b193-3bdf-466b-a454-014b22d63f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fdf9afa-35a5-4090-877c-19c7ae9860c4",
        "cursor": {
          "ref": "b4af4e14-e1f3-493b-afca-6937e0c75c9d",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "14b99454-47a0-49f8-b4e0-ba990c925fe5"
        },
        "item": {
          "id": "9fdf9afa-35a5-4090-877c-19c7ae9860c4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fc677746-8853-4ede-ae56-7dd1e72eb8c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b8d160-6e31-4044-9ae9-169ecc53a850",
        "cursor": {
          "ref": "16706faf-c45d-43cb-b970-6b205a4b9fcc",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c197622b-6b44-4ce2-bfed-b8a1521184f9"
        },
        "item": {
          "id": "48b8d160-6e31-4044-9ae9-169ecc53a850",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0ec0a219-e285-4dee-8eed-b79e3e242431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd896be-0f9a-416c-94ee-10a05d8ff219",
        "cursor": {
          "ref": "39fa3f58-e6a2-4f73-a127-75d490a2059f",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "cbc8e3a0-a92e-45c7-9061-0f1e0236c9d6"
        },
        "item": {
          "id": "ffd896be-0f9a-416c-94ee-10a05d8ff219",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "04966e2e-8a08-4321-bb89-59a9555b1de6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec37633-c100-4987-8cbb-74c9b8cb96c3",
        "cursor": {
          "ref": "d6eb2a50-3aaf-4d93-9546-a8fa191b7c25",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1a43f497-1025-4349-ab45-319c6f1a2904"
        },
        "item": {
          "id": "7ec37633-c100-4987-8cbb-74c9b8cb96c3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ae7a1c99-8414-4f98-963b-770600c5a014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28c3056c-276b-4ecf-b213-a5437e265113",
        "cursor": {
          "ref": "4e52e0e6-3a0a-4a3c-b97d-cc36e9fe7811",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9c840860-13f6-41bb-a51f-d08720f94604"
        },
        "item": {
          "id": "28c3056c-276b-4ecf-b213-a5437e265113",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f8dea919-06f4-4a23-8f79-6848017dd57b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d3fb33-2560-49ed-8529-7296b1eb5624",
        "cursor": {
          "ref": "a0487a74-16fc-4b21-a7a9-b18c3be4fd18",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "bd452758-ae00-4034-94c6-fc8cd5d3c1dd"
        },
        "item": {
          "id": "b2d3fb33-2560-49ed-8529-7296b1eb5624",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "17b67123-9236-4c67-bb2b-e4527c06a782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d31c50-0993-481e-ad47-79cc0c23b721",
        "cursor": {
          "ref": "5e52f89d-1a13-4b9a-95d6-a469738bc9f3",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "bc6bc7a3-bda2-402b-8293-aa84912dfabc"
        },
        "item": {
          "id": "d1d31c50-0993-481e-ad47-79cc0c23b721",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f7d8c941-8347-478d-8653-42c3d59dd8d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb623b1-6e60-4a53-b932-a1b10b3516da",
        "cursor": {
          "ref": "e875e907-9d7a-44c2-8533-4807e4e2ec41",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "48ecb21d-04f0-4596-aaa4-25a4c4ce578a"
        },
        "item": {
          "id": "0bb623b1-6e60-4a53-b932-a1b10b3516da",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3a8a9ac7-b3a3-4726-a59e-f7ed736d4e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ccd881-a8d9-4030-a6d2-c5af7f498963",
        "cursor": {
          "ref": "de5aa212-db8d-499c-86d4-cd506bca0202",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "18320ee3-4452-42e8-b19a-dad0ff1d6857"
        },
        "item": {
          "id": "b4ccd881-a8d9-4030-a6d2-c5af7f498963",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a510cbce-22bc-4395-bd7b-9bfb0f24393a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2246db37-5df8-48fc-9453-0d3a91b95e53",
        "cursor": {
          "ref": "e8290860-c1fd-4028-8fc3-5408e71bc95a",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ae8032ff-4e7f-44c6-a401-65a33fe4d7ec"
        },
        "item": {
          "id": "2246db37-5df8-48fc-9453-0d3a91b95e53",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9ca8d396-bc63-451b-a544-2aa9de112cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d29b49-6f8a-4736-810a-1142bc05ac91",
        "cursor": {
          "ref": "502a5cdc-5f9a-4ee5-97a9-44ef62609fee",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "24f1fe55-5b09-40f1-b24b-b8e25e16a636"
        },
        "item": {
          "id": "73d29b49-6f8a-4736-810a-1142bc05ac91",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a6335de6-a98a-4a00-865d-8dbc74332826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c17adab-6198-46a0-970b-b9b4f7e2cf4e",
        "cursor": {
          "ref": "c65b2b98-6c17-4531-914b-0a91a324c2b1",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "20960857-2522-438c-a543-d269ea45aed4"
        },
        "item": {
          "id": "8c17adab-6198-46a0-970b-b9b4f7e2cf4e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "32aa823f-bc19-4c4d-9a2e-ba8e1c0fd530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c513ee-5c46-417e-a538-4817e40abeec",
        "cursor": {
          "ref": "d8a140c4-e99d-46f5-96b2-b6896a6d0bf3",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d9e4bb02-5000-49e2-ac59-58582f8fdac7"
        },
        "item": {
          "id": "48c513ee-5c46-417e-a538-4817e40abeec",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "357e125c-cb6e-4fe2-b762-f7b43f55fd2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce24c982-7517-435e-96a7-a5f68017f8fa",
        "cursor": {
          "ref": "43b0bffe-2109-450d-90e1-30636558ee45",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b7ec6c98-d516-4442-9acb-c2bb57e166d7"
        },
        "item": {
          "id": "ce24c982-7517-435e-96a7-a5f68017f8fa",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "faf3c7a0-2bf8-4473-9818-4180f6ac339a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b256f578-53b1-4046-a43a-9b4f554956ca",
        "cursor": {
          "ref": "a9008679-cf64-4b82-a7c6-f40dba42d01f",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c807893a-c647-4969-a1e4-e515ba1dac6a"
        },
        "item": {
          "id": "b256f578-53b1-4046-a43a-9b4f554956ca",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4d861098-9247-4334-92bf-01bbb2e995c7",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "8dc7bcff-51d4-4f43-84ce-81fec99aa15b",
        "cursor": {
          "ref": "2d438001-b37a-4c0d-a146-74170efd79ee",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "761444de-22ee-4ea8-9546-31851dcf691d"
        },
        "item": {
          "id": "8dc7bcff-51d4-4f43-84ce-81fec99aa15b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1bfd4465-da24-497f-a7f2-6e2078d60032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d9be52-1fb4-4732-b5a6-4db1282b4370",
        "cursor": {
          "ref": "6288a5a2-5194-4993-a386-66e19285add3",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f56b4cfc-eed1-49e1-82c9-ad32808aeecd"
        },
        "item": {
          "id": "a2d9be52-1fb4-4732-b5a6-4db1282b4370",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e2a5def0-606f-4a40-b59c-b432e4d89b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d830dd1f-50da-48d4-8d50-4f9ba914bf98",
        "cursor": {
          "ref": "ebbefc21-72a4-461d-b079-59df4d0671cd",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "fef93ab4-088a-440e-a100-a68559f12115"
        },
        "item": {
          "id": "d830dd1f-50da-48d4-8d50-4f9ba914bf98",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c48821b8-e713-4ea2-a355-83ca1e454a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a80709-b3d1-4a63-8d35-aee44b9597ad",
        "cursor": {
          "ref": "b824b765-ca75-4862-b26f-c163746b3f55",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b413faf0-5fb1-4ed3-94d1-11a297a85e5a"
        },
        "item": {
          "id": "33a80709-b3d1-4a63-8d35-aee44b9597ad",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d1632c1d-3007-48ca-928c-3b9cd531cf58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed7f735-aa94-4251-ac87-b34b95cb34b7",
        "cursor": {
          "ref": "01b4fb63-6019-46b1-b8e2-7a1342bd2f4c",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5e724ca0-55e6-45eb-96f2-6c219c545525"
        },
        "item": {
          "id": "fed7f735-aa94-4251-ac87-b34b95cb34b7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "aeb9302f-a041-43f1-adb8-edf4cf7db726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96f693b-9e47-4d9c-b600-03771dcf03e8",
        "cursor": {
          "ref": "6284aa9f-bd58-4ed0-89aa-65c8b52a1aa4",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "66923543-6dc5-4d4f-a8c8-f4f00a4eaf16"
        },
        "item": {
          "id": "d96f693b-9e47-4d9c-b600-03771dcf03e8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "57f7a0d9-d2db-4fdc-97df-d00a5892420f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21706a11-8ecd-40e3-b026-caa9c2cee462",
        "cursor": {
          "ref": "95b5ae4f-efcc-4e8a-9f35-7d784f1bedd1",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3f2fbb72-7b22-40b4-acfc-4613ce6952d4"
        },
        "item": {
          "id": "21706a11-8ecd-40e3-b026-caa9c2cee462",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4a3ca78a-64e0-4545-98af-5452c5218ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb6c9676-0568-461e-b82f-cc43c09e8278",
        "cursor": {
          "ref": "85dc5981-fad0-44a9-b9cc-1525488c7192",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2312ee86-bb7b-4b0b-aa29-a5ac26e1f952"
        },
        "item": {
          "id": "bb6c9676-0568-461e-b82f-cc43c09e8278",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "62a05422-5891-4339-badb-3b004e3db79f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e83882-36bd-44aa-9dcf-c77eb692bc32",
        "cursor": {
          "ref": "737c5fc7-f1ae-4eb0-8292-68eb7ebf557b",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f0aff76e-bcfd-4255-9af9-e5d5c688d39b"
        },
        "item": {
          "id": "93e83882-36bd-44aa-9dcf-c77eb692bc32",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "eed3713d-5d99-46f5-978c-df00b8f46eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc19c680-0b10-4f82-a626-726e506ee480",
        "cursor": {
          "ref": "5171a7aa-bb81-4736-a9cd-c93cb8bae9d2",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ce6a1369-a47c-4e6f-afdb-8f7348cd62c0"
        },
        "item": {
          "id": "dc19c680-0b10-4f82-a626-726e506ee480",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "52208d1b-a733-4408-ba4e-d79f88719adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe12a1c9-0ae0-4452-9017-d5142112e900",
        "cursor": {
          "ref": "a610b105-f4b9-488c-8971-09ff17ac3fd2",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "579fd14a-4f9d-4fe9-a112-4b334b72dbfe"
        },
        "item": {
          "id": "fe12a1c9-0ae0-4452-9017-d5142112e900",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "81abeeab-2ef6-4e6c-8599-af329968ce95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874a2ecc-f6f0-4058-9719-2078cca1c117",
        "cursor": {
          "ref": "16cf758a-f989-4b99-98a6-8da708988aaa",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "bd91e3c4-f960-4935-a718-442cc8d96374"
        },
        "item": {
          "id": "874a2ecc-f6f0-4058-9719-2078cca1c117",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2f5272c3-bfaf-459b-a9c5-f4996b53089c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b735b39-ee47-4248-be09-3f9cdc5f6e03",
        "cursor": {
          "ref": "e9713411-5bbb-4893-9fd5-fde65d64b1b1",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f0e18b85-d8ba-45fc-a2f9-2d8dec170d71"
        },
        "item": {
          "id": "5b735b39-ee47-4248-be09-3f9cdc5f6e03",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2746315d-f3f6-4909-bd87-de2be32e416b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2538c0a-30ec-4257-a92b-23edfda4b820",
        "cursor": {
          "ref": "48ad50c2-1fa7-40f9-bf56-794dceaffe00",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "998eb67e-b5e1-46fa-a847-66b548bea5df"
        },
        "item": {
          "id": "a2538c0a-30ec-4257-a92b-23edfda4b820",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "089ac3f7-c3e2-4c60-acc1-8c97ba6ea0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55719271-3de5-4238-96f6-02b0c673227a",
        "cursor": {
          "ref": "50ebd7fd-bb82-4b26-b129-e7cee554a2ce",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d0c17f65-daf2-43a2-aec3-7bc7e596ee0f"
        },
        "item": {
          "id": "55719271-3de5-4238-96f6-02b0c673227a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "628da5b9-6583-4a13-97d0-16fe2d49e09a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43301e4-29e7-430f-8451-fdd435f68d11",
        "cursor": {
          "ref": "e1df3f43-a1b0-4a45-905b-c4a059c237e8",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5ffd463a-100c-45c0-b080-aa5dda8a2127"
        },
        "item": {
          "id": "c43301e4-29e7-430f-8451-fdd435f68d11",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "38e3f409-b2a6-4b67-b4c6-7f8349d78ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6054ff-1a81-4f52-8f81-9d3479bfcca1",
        "cursor": {
          "ref": "e0987510-831e-44a3-9ed8-0b19e66c57d2",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "627f6682-f7d6-4459-8933-b3d237affc0d"
        },
        "item": {
          "id": "1a6054ff-1a81-4f52-8f81-9d3479bfcca1",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "46155994-975a-4583-962b-ab76f274de9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa77cd8a-773a-4bdb-8955-925ae64f6548",
        "cursor": {
          "ref": "f70f19ca-3591-4c61-8af8-92a8634f3f8e",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "63733891-4970-4ba9-a23e-c5e917d4d0d7"
        },
        "item": {
          "id": "fa77cd8a-773a-4bdb-8955-925ae64f6548",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4ecccfd6-4de3-4f1b-808d-3db5849196bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62064926-5bb6-40f1-8530-3451c6bb7510",
        "cursor": {
          "ref": "b893b5cc-39c1-488d-b3d9-b481e1de884a",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7df14242-977d-486a-938c-ea5cbc7cbaa6"
        },
        "item": {
          "id": "62064926-5bb6-40f1-8530-3451c6bb7510",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "02cb7e10-edec-4149-a80b-3802c666951b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa322c02-8b92-4cbf-9cd6-90f0bdf559b7",
        "cursor": {
          "ref": "337b2da2-a534-4074-b7b4-f08f1115f3e1",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "412a9b93-c3e1-43b8-8bf4-515bc7611b62"
        },
        "item": {
          "id": "aa322c02-8b92-4cbf-9cd6-90f0bdf559b7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a6d4db37-e988-47b5-9e6c-d927a9090e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b52dcb0-0da7-4f92-b025-4cc8be452017",
        "cursor": {
          "ref": "5f0f8a05-ba88-4fc9-a892-b66ba3859a74",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "62ce24bb-2ccd-47a3-9ee9-b5cd98345cb4"
        },
        "item": {
          "id": "6b52dcb0-0da7-4f92-b025-4cc8be452017",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "eb4ccad7-9454-4a8e-be6a-cb13b3720b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d780511-bc14-4f4b-ba31-c1ca5e523887",
        "cursor": {
          "ref": "63c93981-6ffc-412e-a6dc-14f5092ee6b8",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "82a7d015-979e-424a-b044-a0be2d2080a6"
        },
        "item": {
          "id": "2d780511-bc14-4f4b-ba31-c1ca5e523887",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "76d8787b-f339-4560-9c16-0900d09414b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b2ed61d-d409-48a3-9edb-b01c824ffdf5",
        "cursor": {
          "ref": "f421e0c9-03f8-49ca-8e64-87a49cf484db",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9dc622f0-f08d-414d-a11f-6139aa1716c8"
        },
        "item": {
          "id": "7b2ed61d-d409-48a3-9edb-b01c824ffdf5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "93c32152-14f1-404f-acfb-1639d161ce92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05de4733-70e1-4ada-8b6e-84debcf4e262",
        "cursor": {
          "ref": "10a20683-050f-409b-903b-48b165b01bec",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "32128410-54a5-4392-8e2f-04acc02af8e1"
        },
        "item": {
          "id": "05de4733-70e1-4ada-8b6e-84debcf4e262",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "21657ce4-45a9-4d84-a9f3-f79d8d46dac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ff5cf0c-c2a1-47d1-a628-841a841708f0",
        "cursor": {
          "ref": "cae558c0-0262-444e-b64e-84a1637df3b4",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9054b4e7-f5f8-4a1a-8d1a-93d57d30e8d8"
        },
        "item": {
          "id": "1ff5cf0c-c2a1-47d1-a628-841a841708f0",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8cc8f53d-825f-4ec4-ae48-6234a8f2030c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255b56b6-2d72-47d8-a87a-bd0b8922b12d",
        "cursor": {
          "ref": "6d3b6aa6-f213-4288-b0d7-7c51e84160a1",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1eb91c35-fe1b-4663-a44e-77388e90accf"
        },
        "item": {
          "id": "255b56b6-2d72-47d8-a87a-bd0b8922b12d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5d98b212-46d5-4050-aef0-4d24a4650b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2274cf9f-79e3-4f08-8f63-784f5308a8de",
        "cursor": {
          "ref": "7c9c6a61-17ad-46fe-a8fc-ea1f71cc0430",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6e5794ce-84f3-4ab9-b96a-4c8449aa5757"
        },
        "item": {
          "id": "2274cf9f-79e3-4f08-8f63-784f5308a8de",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b4e50203-51d7-4522-9ade-2f375f132277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50371b15-1723-4dc7-97ff-04011e5b6db2",
        "cursor": {
          "ref": "9cb46a8d-eaee-4b3c-9212-1c8603960e14",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d2d405ae-3ace-4158-947f-314979b97b56"
        },
        "item": {
          "id": "50371b15-1723-4dc7-97ff-04011e5b6db2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "984cf63d-48b1-409c-8612-748b547237e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f36d578-39ba-470f-8fc9-8a84ca1db98d",
        "cursor": {
          "ref": "5727dc9c-2ef8-48bc-943c-e609dfea1188",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "586351c6-f140-4913-b33b-6e5175750268"
        },
        "item": {
          "id": "9f36d578-39ba-470f-8fc9-8a84ca1db98d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "181b71b3-7007-4d26-9757-2be8dfaeb37b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ff4403-ed7f-4cff-8a7b-8f9878bef56e",
        "cursor": {
          "ref": "49e6eef7-9c67-46ce-ae51-b064944b3285",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e777d572-056a-4565-b02e-0f8f1f095f2b"
        },
        "item": {
          "id": "13ff4403-ed7f-4cff-8a7b-8f9878bef56e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5108d070-6a2d-4e03-9f45-1271140a4f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6336f2-8fd7-4405-a04f-06ed7771e327",
        "cursor": {
          "ref": "cd06b339-cedb-4ef7-ad13-d18cd719dbbd",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "90130a22-f90a-415a-b220-702ad417dea5"
        },
        "item": {
          "id": "fe6336f2-8fd7-4405-a04f-06ed7771e327",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e772dfc6-fd87-4766-b437-07de9553a926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f814de1d-4ebb-45f0-b9fa-50d2fc4f6cf6",
        "cursor": {
          "ref": "20b8e790-c94b-453b-8f4f-0dcc9cf51c58",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d63b886d-77ed-4fbc-afd1-76b5c7d279ac"
        },
        "item": {
          "id": "f814de1d-4ebb-45f0-b9fa-50d2fc4f6cf6",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "08b0242d-4a72-438d-a6ad-19e54044c641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4855587b-f5de-4e01-b1c7-df90e0f0e694",
        "cursor": {
          "ref": "05cca4f6-0da8-4422-b114-200b0cde204e",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4d409667-2a30-4612-b3ea-28f9d3e07643"
        },
        "item": {
          "id": "4855587b-f5de-4e01-b1c7-df90e0f0e694",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "95a8a091-c0f8-4f24-9a7c-9a8a976f6936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03fd4b32-53f5-4b7a-bd5a-3bc3f9e1cbb6",
        "cursor": {
          "ref": "f590c33b-7bb7-4717-a79f-c039e7f03eb8",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4773babf-acd9-49da-921c-58bcd3c10e45"
        },
        "item": {
          "id": "03fd4b32-53f5-4b7a-bd5a-3bc3f9e1cbb6",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c488a308-cbbd-4084-8536-c81558b8e8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe17d3d-24d3-4322-9524-a55673d7f8b9",
        "cursor": {
          "ref": "5f41c103-36c8-4a83-adb0-b7fc8a3b587e",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "799bf8ad-c236-4324-94e9-d370e69365b4"
        },
        "item": {
          "id": "abe17d3d-24d3-4322-9524-a55673d7f8b9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "fcb213fb-beee-4add-b403-a76ba96d08ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12e4c4a-879a-467c-b061-67dc87613d49",
        "cursor": {
          "ref": "d2c3b117-d60b-4a9f-8c7e-398de61c00f6",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "83972075-0c45-49c8-be15-0bf2501f2e9e"
        },
        "item": {
          "id": "b12e4c4a-879a-467c-b061-67dc87613d49",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "560376f8-b27e-40e5-a068-161e91efe03e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f81a78-0d98-492b-8abf-454bc82fa679",
        "cursor": {
          "ref": "e13b0221-cd12-4a2d-b717-c7b29e7494c9",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f09bcc89-f589-4b02-8ac9-33468df25380"
        },
        "item": {
          "id": "58f81a78-0d98-492b-8abf-454bc82fa679",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a6b7b286-dbd2-4516-bca3-4978e4c11b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1438d4a1-f4a5-4921-bc0b-6e10dfc51a14",
        "cursor": {
          "ref": "c9bee7bd-0513-4a19-bd00-dd8d47720056",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "5c4d6323-d0f2-44ee-bca6-1a986fd37b89"
        },
        "item": {
          "id": "1438d4a1-f4a5-4921-bc0b-6e10dfc51a14",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5f87d5f4-aba1-45fd-b130-002176eeceea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b725faba-e585-49a7-8c46-c7f7b4602462",
        "cursor": {
          "ref": "a9923cfe-4e3f-4ca9-aa7c-814cb5597077",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "08e69b5b-313b-4dca-bcc1-34f983b0944c"
        },
        "item": {
          "id": "b725faba-e585-49a7-8c46-c7f7b4602462",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "de25f577-4fd4-4db8-8c45-5ada8261f116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50676936-e460-4476-a5a7-8b30c7f088a2",
        "cursor": {
          "ref": "3450b066-9777-493d-b941-a36e2c4157cd",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "cd711a27-e310-4166-bd01-cdf052c3b902"
        },
        "item": {
          "id": "50676936-e460-4476-a5a7-8b30c7f088a2",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2eb546f4-df23-4433-bab8-e0fac30b3b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bae564b-9652-40f4-8956-d8a65c56960e",
        "cursor": {
          "ref": "93b21a9e-0c7e-4fc4-8d01-dc982adb5629",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8af5f4a8-b006-4cf3-884b-8914b1495e1c"
        },
        "item": {
          "id": "8bae564b-9652-40f4-8956-d8a65c56960e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "fc4d6a99-db53-403d-94a7-eeea5b181138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa88be6-2b54-4c68-b0bf-839ac530b371",
        "cursor": {
          "ref": "2b60af0c-b192-4a6b-8798-232a04ed9210",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "24aa6ce1-3415-4d4f-9c83-24d6a7beb4cc"
        },
        "item": {
          "id": "5aa88be6-2b54-4c68-b0bf-839ac530b371",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "42ba7a3e-a41e-48db-b713-b7f79de757e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8def2079-bcda-4c2b-a5ce-4eef0b111428",
        "cursor": {
          "ref": "47c741ef-0add-458a-a0c2-e2b1e4d2e7ab",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "1bcae864-5b11-4c33-ae99-2c0617972790"
        },
        "item": {
          "id": "8def2079-bcda-4c2b-a5ce-4eef0b111428",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "bbf0ea03-82ba-4688-8afe-40ca202b6e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc485ab-47a3-4d7a-b3a5-7954b158fecc",
        "cursor": {
          "ref": "2eea7f60-9cb4-4e86-b39d-bddbcd296ffa",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "701f6fe0-3291-42f9-9d68-662ed7f9ff8e"
        },
        "item": {
          "id": "8dc485ab-47a3-4d7a-b3a5-7954b158fecc",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e61fd368-255f-4a23-bfa2-158d7038f6a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213da140-7002-4433-ba03-cbcffd724190",
        "cursor": {
          "ref": "ad142f3f-fb73-4c61-b952-0aa893eba954",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f053cba3-7e85-4f13-8293-bdc530e5b000"
        },
        "item": {
          "id": "213da140-7002-4433-ba03-cbcffd724190",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4a108b4d-c812-498f-9c47-1a30839c74d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1b7a5f-1efa-4624-9a11-2b22f7cfe392",
        "cursor": {
          "ref": "eb1326a2-e000-4e92-a395-8aae6fbd577c",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "49460d9a-1399-49f7-90f8-ee9824864506"
        },
        "item": {
          "id": "5d1b7a5f-1efa-4624-9a11-2b22f7cfe392",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7c0833ce-5da6-46ce-9b1c-f2c85902eeb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fd3a0c-dbd3-49ce-aa21-da95495c2f6b",
        "cursor": {
          "ref": "651baeae-d66e-4d5d-ad8a-8e0ba3f0f2ca",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3ef5d29d-37c2-418b-bd25-4f0fa0a58d41"
        },
        "item": {
          "id": "55fd3a0c-dbd3-49ce-aa21-da95495c2f6b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5b5e6656-24b8-4954-8877-d38339285212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e096af-1b0f-4d00-aecc-2b698771704f",
        "cursor": {
          "ref": "5e3fa6e0-1632-4af5-a7b2-6b96aea032b0",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c28c7d15-5992-4e0e-9a7e-926a76b12f52"
        },
        "item": {
          "id": "e1e096af-1b0f-4d00-aecc-2b698771704f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9b68507d-c7b5-44e7-9aba-fc00a2a444f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f23bf7-27c2-4b80-9cec-61066453865b",
        "cursor": {
          "ref": "2e55e796-cc25-4787-aa8b-8f0059631f39",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d37b52e2-a036-4846-a345-0d4ce5d1b45f"
        },
        "item": {
          "id": "11f23bf7-27c2-4b80-9cec-61066453865b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5156a5bb-7631-4e1d-8ac9-55653303abfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8be05f4-554a-4303-974a-f9b70255da7d",
        "cursor": {
          "ref": "d5156bfb-b550-4a78-8ced-47b622f44a50",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ff80bf72-468f-44ef-a3c8-7a7c600d37ff"
        },
        "item": {
          "id": "f8be05f4-554a-4303-974a-f9b70255da7d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6c244e52-b96b-4720-8918-c4455a300592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6066fcc-0446-45c7-946f-c34d952ed7e4",
        "cursor": {
          "ref": "ed9b8ad4-f97e-4f7f-8d87-9d9a3995b010",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "55b43113-839b-49e8-a399-90664b6df0ae"
        },
        "item": {
          "id": "a6066fcc-0446-45c7-946f-c34d952ed7e4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0da5a921-a00a-4544-95c7-2f2122a4c016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d66b7af-f15a-4fcb-ab56-8fbfefd63274",
        "cursor": {
          "ref": "bfe1ed77-3288-473b-bdbc-561fa4505647",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4c58a195-ae90-4486-990b-14ed02011467"
        },
        "item": {
          "id": "4d66b7af-f15a-4fcb-ab56-8fbfefd63274",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "24cefcca-e91e-4505-a5bc-1dcc9039308d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b785efd4-042c-4307-9398-70fe59f7610e",
        "cursor": {
          "ref": "58791e2a-7604-4e01-9681-6d3b6a95098d",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ba9b8520-046d-4390-824d-772a290ffcb6"
        },
        "item": {
          "id": "b785efd4-042c-4307-9398-70fe59f7610e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "60165524-bee6-47c6-919a-21b8d64e4efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb89949a-f714-403e-9f18-ac4d636fd016",
        "cursor": {
          "ref": "f038d3b6-8cf9-4796-ad42-7455b9815413",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "94797296-62ff-4de7-b4b2-6206b1789836"
        },
        "item": {
          "id": "cb89949a-f714-403e-9f18-ac4d636fd016",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8def9ebf-e3da-4dbe-a194-b62d6ef53489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1b5188-f649-4fdb-8872-8184ad24cbda",
        "cursor": {
          "ref": "c6a1091c-9313-4384-9ef5-9f6dc0f6e79f",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9f44302a-5818-4774-885b-caa65d8436e8"
        },
        "item": {
          "id": "be1b5188-f649-4fdb-8872-8184ad24cbda",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a737f54a-6eb1-4f08-9f6c-a7bf25e910ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9fc618-6786-4bb9-89f2-f0c87a30c5ce",
        "cursor": {
          "ref": "c1621ba6-1627-4491-9170-b9caf8eddb8b",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "730aeee8-c175-4e35-9fd0-8b8ad95e8312"
        },
        "item": {
          "id": "be9fc618-6786-4bb9-89f2-f0c87a30c5ce",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "fa29c852-a558-45d7-9942-afde2d7f9561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa19362b-b5c7-47bb-ae3f-aa04fcbba8d2",
        "cursor": {
          "ref": "597a8419-330d-432c-a90d-a463298bcd71",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "020ccc9c-1b76-41f1-9ded-8e90f85f41fd"
        },
        "item": {
          "id": "aa19362b-b5c7-47bb-ae3f-aa04fcbba8d2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "121b72a3-bdc0-489d-bb20-3857ea0b0e97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e524e48c-3bbc-4620-a083-2ff5b018f8c4",
        "cursor": {
          "ref": "636d6a11-e364-4498-98b9-13aa45dab24d",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "998bdc5e-7234-4264-b9f8-b4456542dc29"
        },
        "item": {
          "id": "e524e48c-3bbc-4620-a083-2ff5b018f8c4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "11e6c05e-caf2-47d9-8dc1-f4206033c838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066185a3-ff74-432c-8dd0-c65cb5a0d095",
        "cursor": {
          "ref": "276566cb-d38b-4cf4-b3a7-3a0acab2a5ac",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "2e72839f-6c1b-4892-81be-d7d882574b6c"
        },
        "item": {
          "id": "066185a3-ff74-432c-8dd0-c65cb5a0d095",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d0fb0977-4d6b-408a-b131-3d8cef660279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ab2a26-c9ed-44a4-9359-a23b775b91e6",
        "cursor": {
          "ref": "3029a96a-c027-42ca-a1d7-e9e5baa63738",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ecfaaa0e-48a0-448f-b3ee-58e80f13f716"
        },
        "item": {
          "id": "e4ab2a26-c9ed-44a4-9359-a23b775b91e6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e6311270-a691-41ee-8cb2-8050bf52cc91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e7b976-0cce-4c0c-a27f-cd60f89dc8e7",
        "cursor": {
          "ref": "56f037e2-a305-42d5-9eab-da4bfe3485bc",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1618fd1c-2dd7-46a5-bdf0-dc3e80881270"
        },
        "item": {
          "id": "78e7b976-0cce-4c0c-a27f-cd60f89dc8e7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "791905fe-0adf-4c4e-a1aa-e7f60010b565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2924bb04-9a86-453b-9607-f1dd19e3fc30",
        "cursor": {
          "ref": "4b886399-1627-47ae-a9d9-572b521ad961",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6f8c89ee-f129-48de-9786-61c24e950a02"
        },
        "item": {
          "id": "2924bb04-9a86-453b-9607-f1dd19e3fc30",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "45f15086-7d05-46b6-89f8-4f6766067719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70710afc-ccae-4755-89d0-1d405a60ce26",
        "cursor": {
          "ref": "6e98b9dd-6b3f-4e90-bc53-942f5366bc90",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "37888f86-145a-4173-b52f-0c62b1bf717f"
        },
        "item": {
          "id": "70710afc-ccae-4755-89d0-1d405a60ce26",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2da513e8-21f1-48ad-aebf-67b82c257891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f607ee7-6ca6-4491-a838-1f454ce7236d",
        "cursor": {
          "ref": "365d6d26-8f35-491e-91a1-1bb887fe25ad",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c5dc982a-626f-4332-ba33-234a55c94208"
        },
        "item": {
          "id": "8f607ee7-6ca6-4491-a838-1f454ce7236d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "cd2364db-5771-4226-8993-fa842127bdef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfeca339-4aa7-49f7-a99d-f2cfd286597d",
        "cursor": {
          "ref": "5baa03bc-d867-473f-9e06-97c6873c76d1",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f7e062e2-303c-421c-a095-9fc1c2e96599"
        },
        "item": {
          "id": "dfeca339-4aa7-49f7-a99d-f2cfd286597d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "14dac7cb-3451-437f-b831-966328d3a802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49fbcb1-a639-4a0b-80ee-5d15a0b75d51",
        "cursor": {
          "ref": "319eeb40-84bf-470f-b50c-a7864c2a7689",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2c0a077a-96d8-4ac9-9637-c8b27d4912bb"
        },
        "item": {
          "id": "c49fbcb1-a639-4a0b-80ee-5d15a0b75d51",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "485d20df-e6fd-4f55-8fde-1e7d03baa991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599f1f84-4fdc-4eb8-b3c4-a2cbf46e84e8",
        "cursor": {
          "ref": "243ddffc-bfc3-4f04-89bb-c94ebe7b9b8b",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "28b12fbf-6a58-4581-8546-d9d9de05e323"
        },
        "item": {
          "id": "599f1f84-4fdc-4eb8-b3c4-a2cbf46e84e8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a78d16d1-f9ed-4eaa-a1b6-16edcf97a6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99681d9-05c2-48eb-b745-fa8752682bc6",
        "cursor": {
          "ref": "fafab1e9-1846-48a3-88c0-7398f906d722",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ad3cec4c-17bd-44b3-ade4-87f1008a865e"
        },
        "item": {
          "id": "c99681d9-05c2-48eb-b745-fa8752682bc6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "97e559e6-3655-4015-9744-c98485d8c484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6296d333-20e8-4fb4-ba1e-1e025ebca0fc",
        "cursor": {
          "ref": "5667b08e-fa78-4da7-bf3c-8b2ad469bc59",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "fa0b4bb6-83aa-43c7-9bc6-97fa00f56066"
        },
        "item": {
          "id": "6296d333-20e8-4fb4-ba1e-1e025ebca0fc",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8d1038a6-252f-40cb-b44d-58a683e4e0a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44dc631d-52bc-4005-a6c9-56fb13aa48bb",
        "cursor": {
          "ref": "018e81a2-76e0-4628-826f-e89f1961ac61",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d8a8ddc6-c8e1-44d5-8052-d064b99f1b78"
        },
        "item": {
          "id": "44dc631d-52bc-4005-a6c9-56fb13aa48bb",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f2085efb-9116-4e09-ae0c-64835b4e35e3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 48,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d20348-e741-4ba0-bc0c-99d88504548c",
        "cursor": {
          "ref": "ce885af0-df2b-45df-b2d2-edf79959ecbf",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d5b55f93-b925-4b6b-846e-0f0ff4b435dc"
        },
        "item": {
          "id": "52d20348-e741-4ba0-bc0c-99d88504548c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "bafaca1e-2b36-4ecf-bd20-5f059759a187",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "db05d01c-e297-49f3-baf1-5802381d7e6f",
        "cursor": {
          "ref": "dc65ec24-855c-430b-b8ab-0d5ee46f9115",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2cfdc3ee-b9b2-469f-a634-3ca43c795384"
        },
        "item": {
          "id": "db05d01c-e297-49f3-baf1-5802381d7e6f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2a6187b9-4a7f-4125-b06e-2f42aac327d7",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0977abdc-00a2-47b4-bbd4-6583b8b11c56",
        "cursor": {
          "ref": "4e88a170-6b12-4e69-9718-7265db452ba1",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "077ebd8a-4818-4f55-8f0c-a5b1f6f4f74b"
        },
        "item": {
          "id": "0977abdc-00a2-47b4-bbd4-6583b8b11c56",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0dc4b118-1b21-4d4e-80c4-c1ecc5dc96d3",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c124bb2-f368-4dfc-a50f-7a46e22d9dcf",
        "cursor": {
          "ref": "a0e24cdc-d7cf-455e-be94-65e5c32627e9",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "56162735-7c23-4b9d-8c2f-62cb0f5e5572"
        },
        "item": {
          "id": "7c124bb2-f368-4dfc-a50f-7a46e22d9dcf",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e88f0e8f-75fe-4238-9719-7fd34de86f5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c124bb2-f368-4dfc-a50f-7a46e22d9dcf",
        "cursor": {
          "ref": "a0e24cdc-d7cf-455e-be94-65e5c32627e9",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "56162735-7c23-4b9d-8c2f-62cb0f5e5572"
        },
        "item": {
          "id": "7c124bb2-f368-4dfc-a50f-7a46e22d9dcf",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e88f0e8f-75fe-4238-9719-7fd34de86f5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c124bb2-f368-4dfc-a50f-7a46e22d9dcf",
        "cursor": {
          "ref": "a0e24cdc-d7cf-455e-be94-65e5c32627e9",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "56162735-7c23-4b9d-8c2f-62cb0f5e5572"
        },
        "item": {
          "id": "7c124bb2-f368-4dfc-a50f-7a46e22d9dcf",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e88f0e8f-75fe-4238-9719-7fd34de86f5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97d8433-5e05-4045-889a-6f9116a5dde6",
        "cursor": {
          "ref": "d1a6e546-1591-4345-ae37-ac23ac248889",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e42a46a5-63b4-4b57-84f4-ff46a26b69ec"
        },
        "item": {
          "id": "e97d8433-5e05-4045-889a-6f9116a5dde6",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "7be5f43a-dbc9-4173-89f2-822731618f2e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 49,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7811015c-9025-4ff3-bcd9-2d26704e1006",
        "cursor": {
          "ref": "7613bb8e-5539-424f-98f9-b202f25bdabb",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "843c2bfe-b240-44e9-982f-1b22cb095422"
        },
        "item": {
          "id": "7811015c-9025-4ff3-bcd9-2d26704e1006",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e8345869-c636-46b1-8cdd-0536337bfd40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "7811015c-9025-4ff3-bcd9-2d26704e1006",
        "cursor": {
          "ref": "7613bb8e-5539-424f-98f9-b202f25bdabb",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "843c2bfe-b240-44e9-982f-1b22cb095422"
        },
        "item": {
          "id": "7811015c-9025-4ff3-bcd9-2d26704e1006",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e8345869-c636-46b1-8cdd-0536337bfd40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "df39a2d2-aa18-467f-8ce4-25636a937fc6",
        "cursor": {
          "ref": "f86e08ba-f819-45b9-9509-6ac062ed786c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "06c6e6ec-c589-406d-9256-2e01b40c3f3d"
        },
        "item": {
          "id": "df39a2d2-aa18-467f-8ce4-25636a937fc6",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "34e4b4dd-d55a-4c3d-8f18-6fb4d4980b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "11366b38-518f-4b0e-8f9a-d22ff788ee6c",
        "cursor": {
          "ref": "3ceb0fcd-d139-4a04-bd7a-e187908451d1",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f583ed25-c1c9-4b30-9aef-2b3bc238dfe3"
        },
        "item": {
          "id": "11366b38-518f-4b0e-8f9a-d22ff788ee6c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "084b6884-ca17-4207-b5d3-482351f90331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "11366b38-518f-4b0e-8f9a-d22ff788ee6c",
        "cursor": {
          "ref": "3ceb0fcd-d139-4a04-bd7a-e187908451d1",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f583ed25-c1c9-4b30-9aef-2b3bc238dfe3"
        },
        "item": {
          "id": "11366b38-518f-4b0e-8f9a-d22ff788ee6c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "084b6884-ca17-4207-b5d3-482351f90331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "29fc9c8c-5dad-411f-b824-36eb438df6b9",
        "cursor": {
          "ref": "cfdaadc2-f6c3-4495-80b2-72e4ef78aa8b",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6e08c8a2-c9fc-4d40-b6f9-fa5c55965db2"
        },
        "item": {
          "id": "29fc9c8c-5dad-411f-b824-36eb438df6b9",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "726abba6-e98c-47d7-b807-8b9bf523f812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}