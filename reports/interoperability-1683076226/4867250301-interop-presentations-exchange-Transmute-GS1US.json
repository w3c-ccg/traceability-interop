{
  "collection": {
    "info": {
      "_postman_id": "8b877171-8d96-4bec-aefb-538d3e4cf0bb",
      "name": "Presentations Exchange Tutorial",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5eee54cc-73d7-43e6-8423-d3eff4492a0d",
        "name": "Get Access Token (Issuer)",
        "request": {
          "url": {
            "host": [
              "{{ISSUER_TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "audience",
                "value": "{{ISSUER_TOKEN_AUDIENCE}}"
              },
              {
                "key": "client_id",
                "value": "{{ISSUER_CLIENT_ID}}"
              },
              {
                "key": "client_secret",
                "value": "{{ISSUER_CLIENT_SECRET}}"
              },
              {
                "key": "grant_type",
                "value": "client_credentials"
              },
              {
                "key": "scope",
                "value": "resolve:dids issue:credentials prove:presentations"
              }
            ]
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "64bd09f3-2e80-4dfe-97db-ce93188418ee",
              "type": "text/javascript",
              "exec": [
                "// Token requests are expected to return a `200 Success` response code. Any",
                "// other response code should trigger a failure.",
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response should include an `access_token` value - this will be presented",
                "// to authenticated API endpoints in the `Authentication` header (see the last",
                "// testing code block for details on how this is persisted).",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The type of `access_token` returned by the token request is expected to be",
                "// `Bearer`.",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "// The returned data includes an `expires_in` field that indicates time until",
                "// token expiration. Validate that this value is a whole number greater than",
                "// zero, as anything less than or equal to zero means that the `access_token`",
                "// is already expired.",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "});",
                "",
                "// The returned `access_token` value is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// `pm.collectionVariables.get(\"issuer_access_token\")`.",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"issuer_access_token\", access_token);",
                "});"
              ],
              "_lastExecutionId": "f089e16d-a0bb-4c64-acb6-8275c9447056"
            }
          }
        ]
      },
      {
        "id": "df529999-db8e-43f8-960b-65350d070827",
        "name": "Get Access Token (Verifier)",
        "request": {
          "url": {
            "host": [
              "{{VERIFIER_TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "audience",
                "value": "{{VERIFIER_TOKEN_AUDIENCE}}"
              },
              {
                "key": "client_id",
                "value": "{{VERIFIER_CLIENT_ID}}"
              },
              {
                "key": "client_secret",
                "value": "{{VERIFIER_CLIENT_SECRET}}"
              },
              {
                "key": "grant_type",
                "value": "client_credentials"
              },
              {
                "key": "scope",
                "value": "resolve:dids"
              }
            ]
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "fcfd35d8-776a-4767-8832-3cde021a1cfe",
              "type": "text/javascript",
              "exec": [
                "// Token requests are expected to return a `200 Success` response code. Any",
                "// other response code should trigger a failure.",
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response should include an `access_token` value - this will be presented",
                "// to authenticated API endpoints in the `Authentication` header (see the last",
                "// testing code block for details on how this is persisted).",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The type of `access_token` returned by the token request is expected to be",
                "// `Bearer`.",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "// The returned data includes an `expires_in` field that indicates time until",
                "// token expiration. Validate that this value is a whole number greater than",
                "// zero, as anything less than or equal to zero means that the `access_token`",
                "// is already expired.",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "});",
                "",
                "// The returned `access_token` value is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// `pm.collectionVariables.get(\"verifier_access_token\")`.",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"verifier_access_token\", access_token);",
                "});"
              ],
              "_lastExecutionId": "9be94e48-748e-4b7b-b6a0-3df05413d9a2"
            }
          }
        ]
      },
      {
        "id": "0cb8d992-87e3-47cb-8f4c-8762dc54d183",
        "name": "Get Organization DIDs (Issuer)",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{ISSUER_ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{ISSUER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{issuer_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "ce0f93e0-0805-4732-b578-ac04dd0ddf54",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `issuer_access_token` collection variable is missing, but it",
                "// will give an indication of why the request failed in that scenario.",
                "pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
                "    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
                "    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "});",
                "",
                "// The response JSON must include a didDocument property that contains the",
                "// resolved DID document.",
                "pm.test(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "});",
                "",
                "// Service array is used to look up traceability API service endpoint",
                "pm.test(\"Response must include 'service' array\", function() {",
                "    const { service } = pm.response.json().didDocument;",
                "    pm.expect(service).to.be.an('array').that.is.not.empty;",
                "});",
                "",
                "// If a verificationMethod property is present, the controller property must",
                "// match the didDocument.id property.",
                "pm.test(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});",
                "",
                "// Service array must be correctly defined in DID document",
                "pm.test(\"'service' array must define Traceability API service endpoint\", function() {",
                "    const { service } = pm.response.json().didDocument;",
                "    const entry = service.find((s) => s.type == \"TraceabilityAPI\");",
                "    pm.expect(entry).to.be.an('object').that.is.not.empty;",
                "    pm.expect(entry.serviceEndpoint).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The value of didDocument.id is persisted as a Postman collection variable",
                "// that can be accessed by other requests in the collection by calling",
                "// pm.collectionVariables.get(\"credential_issuer_id\").",
                "pm.test(\"`credential_issuer_id` persisted to collectionVariables\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    pm.collectionVariables.set(\"credential_issuer_id\", didDocument.id);",
                "});"
              ],
              "_lastExecutionId": "73ac0c79-05af-4e35-84b6-b3dc48e0bc49"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "a1b86914-6d35-4e4b-989a-43cc645d7d75",
        "name": "Get Organization DIDs (Verifier)",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{VERIFIER_ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{VERIFIER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{verifier_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "857cab72-aea0-4485-9a50-ffef1c702409",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `issuer_access_token` collection variable is missing, but it",
                "// will give an indication of why the request failed in that scenario.",
                "pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
                "    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
                "    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "});",
                "",
                "// The response JSON must include a didDocument property that contains the",
                "// resolved DID document.",
                "pm.test(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "});",
                "",
                "// If a verificationMethod property is present, the controller property must",
                "// match the didDocument.id property.",
                "pm.test(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});",
                "",
                "// Service array must be correctly defined in DID document",
                "pm.test(\"'service' array must define Traceability API service endpoint\", function() {",
                "    const { service } = pm.response.json().didDocument;",
                "    const entry = service.find((s) => s.type == \"TraceabilityAPI\");",
                "    pm.expect(entry).to.be.an('object').that.is.not.empty;",
                "    pm.expect(entry.serviceEndpoint).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The serviceEndpoint for the verifier must be persisted for later use",
                "pm.test(\"`verifier_exchange_endpoint` is persisted to collectionVariables\", function() {",
                "    const { service } = pm.response.json().didDocument;",
                "    const entry = service.find((s) => s.type == \"TraceabilityAPI\");",
                "    pm.collectionVariables.set(\"verifier_exchange_endpoint\", entry.serviceEndpoint);",
                "});",
                ""
              ],
              "_lastExecutionId": "9da7de36-4989-4664-a455-0a250d3bc565"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "a0578ab5-3a22-49ff-bd01-50eda9c52283",
        "name": "Issue Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "issue"
            ],
            "host": [
              "{{ISSUER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"id\": \"urn:uuid:{{$randomUUID}}\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{credential_issuer_id}}\",\n        \"issuanceDate\": \"{{$isoTimestamp}}\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        }\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\",\n        \"created\": \"{{$isoTimestamp}}\"\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{issuer_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "89502d04-7c98-43f0-b703-7efff1887e17",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `issuer_access_token` collection variable is missing, but it",
                "// will give an indication of why the request failed in that scenario.",
                "pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
                "    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
                "    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    const credential_issuer_id = pm.collectionVariables.get(\"credential_issuer_id\");",
                "    pm.expect(credential_issuer_id).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"must return `201 Created` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "// Verifiable credential must be made available to later requests",
                "pm.test(\"`verifiable_credential` persisted to collectionVariables\", function() {",
                "    const {verifiableCredential} = pm.response.json();",
                "    pm.collectionVariables.set(\"verifiable_credential\", JSON.stringify(verifiableCredential));",
                "});"
              ],
              "_lastExecutionId": "845d703e-35f7-4b9d-a93b-cc3543737c05"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "8c56a7bc-2104-4227-af89-86700afecb20",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7dba5fd0-ff9d-41aa-95ca-c39d51dd569e"
            }
          }
        ]
      },
      {
        "id": "6fcf9dca-b137-406d-b876-d04e8cc410c8",
        "name": "Initiate Exchange",
        "request": {
          "url": {
            "path": [
              "presentations",
              "available"
            ],
            "host": [
              "{{verifier_exchange_endpoint}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"query\": [\n    {\n      \"type\": \"QueryByExample\",\n      \"credentialQuery\": [\n        {\n          \"type\": [\n            \"VerifiableCredential\"\n          ],\n          \"reason\": \"We want to present credentials.\"\n        }\n      ]\n    }\n  ]\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{verifier_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "997b1834-2ed1-4316-9938-9f7366293af2",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `verifier_access_token` collection variable is missing, but",
                "// it will give an indication of why the request failed in that scenario.",
                "pm.test(\"`verifier_access_token` collection variable must be set\", function () {",
                "    const verifier_access_token = pm.collectionVariables.get(\"verifier_access_token\");",
                "    pm.expect(verifier_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Presentations Available\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response body must include a \"domain\" property.",
                "pm.test(\"response must include 'domain' property\", function() {",
                "    const { domain } = pm.response.json()",
                "    pm.expect(domain).to.be.a('string').that.is.not.empty;",
                "    // Domain must be made available to later requests",
                "    pm.collectionVariables.set(\"domain\", domain);",
                "});",
                "",
                "// The response body must include a \"challenge\" property.",
                "pm.test(\"response must include 'challenge' property\", function() {",
                "    const { challenge } = pm.response.json()",
                "    pm.expect(challenge).to.be.a('string').that.is.not.empty;",
                "    // Challenge must be made available to later requests",
                "    pm.collectionVariables.set(\"challenge\", challenge);",
                "});",
                ""
              ],
              "_lastExecutionId": "cf21304c-e9f1-46f5-9f4b-d2b9ed860431"
            }
          }
        ]
      },
      {
        "id": "92e7226b-858e-44c4-9847-4bbda11abbea",
        "name": "Sign Presentation",
        "request": {
          "url": {
            "path": [
              "presentations",
              "prove"
            ],
            "host": [
              "{{ISSUER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"presentation\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"type\": [\n            \"VerifiablePresentation\"\n        ],\n        \"holder\": \"{{credential_issuer_id}}\",\n        \"verifiableCredential\": [\n            {{verifiable_credential}}\n        ]\n    },\n    \"options\": {\n        \"domain\": \"{{domain}}\",\n        \"challenge\": \"{{challenge}}\"\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{issuer_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "0aed8693-4d20-4bb5-8001-eb208bb12499",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `issuer_access_token` collection variable is missing, but it",
                "// will give an indication of why the request failed in that scenario.",
                "pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
                "    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
                "    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Credential issuer id is a required element item used in the request body",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    const credential_issuer_id = pm.collectionVariables.get(\"credential_issuer_id\");",
                "    pm.expect(credential_issuer_id).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Verifiable credential is a required element item used in the request body",
                "pm.test(\"`verifiable_credential` collection variable must be set\", function () {",
                "    const verifiable_credential = pm.collectionVariables.get(\"verifiable_credential\");",
                "    pm.expect(verifiable_credential).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Domain is a required element item used in the request body",
                "pm.test(\"`domain` collection variable must be set\", function () {",
                "    const domain = pm.collectionVariables.get(\"domain\");",
                "    pm.expect(domain).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Challenge is a required element item used in the request body",
                "pm.test(\"`challenge` collection variable must be set\", function () {",
                "    const challenge = pm.collectionVariables.get(\"challenge\");",
                "    pm.expect(challenge).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Sign Presentation\" request is",
                "// `201 Success`.",
                "pm.test(\"must return `201 Success` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "// Verifiable presentation must be made available to later requests",
                "pm.test(\"`verifiable_presentation` persisted to collectionVariables\", function() {",
                "    const {verifiablePresentation} = pm.response.json();",
                "    pm.collectionVariables.set(\"verifiable_presentation\", JSON.stringify(verifiablePresentation));",
                "});"
              ],
              "_lastExecutionId": "a6064a63-e6b3-44b5-9cb5-5bee44543da7"
            }
          }
        ]
      },
      {
        "id": "05d0e305-04eb-47e3-8823-8ac0908c7e87",
        "name": "Complete Exchange",
        "request": {
          "url": {
            "path": [
              "presentations",
              "submissions"
            ],
            "host": [
              "{{verifier_exchange_endpoint}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{{verifiable_presentation}}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{verifier_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "ce8d8106-03cb-4e05-83b8-6309dc71169f",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `verifier_access_token` collection variable is missing, but",
                "// it will give an indication of why the request failed in that scenario.",
                "pm.test(\"`verifier_access_token` collection variable must be set\", function () {",
                "    const verifier_access_token = pm.collectionVariables.get(\"verifier_access_token\");",
                "    pm.expect(verifier_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Complete Exchange\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// Response should confirm the submission is accepted.",
                "pm.test(\"verification response should be 'true'\", function() {",
                "    const { verified } = pm.response.json()",
                "    pm.expect(verified).to.be.true;",
                "});"
              ],
              "_lastExecutionId": "dab3a874-b1e2-413f-b49a-1187fa4756e3"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 25,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 43,
        "pending": 0,
        "failed": 3
      },
      "testScripts": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 9,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 2059.875,
      "responseMin": 64,
      "responseMax": 6866,
      "responseSd": 2519.590365391763,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1683075806381,
      "completed": 1683075823186
    },
    "executions": [
      {
        "id": "5eee54cc-73d7-43e6-8423-d3eff4492a0d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2fb014c5-5a93-45da-9c2c-815ea82911b3",
          "httpRequestId": "1a68e80a-b681-4305-bd62-91a9dd61980c"
        },
        "item": {
          "id": "5eee54cc-73d7-43e6-8423-d3eff4492a0d",
          "name": "Get Access Token (Issuer)"
        },
        "response": {
          "id": "7bb430a4-fc40-4362-88fe-eb9db203802f",
          "status": "OK",
          "code": 200,
          "responseTime": 857,
          "responseSize": 1001
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "df529999-db8e-43f8-960b-65350d070827",
        "cursor": {
          "ref": "d35e8d2a-7f59-4f89-9ac7-3ed0c3cb5ee1",
          "length": 8,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5f7510a1-8a6c-4fd2-b505-fb6f72e5173e"
        },
        "item": {
          "id": "df529999-db8e-43f8-960b-65350d070827",
          "name": "Get Access Token (Verifier)"
        },
        "response": {
          "id": "a80c2253-57a1-4648-b4b6-74e279619fcc",
          "status": "OK",
          "code": 200,
          "responseTime": 5585,
          "responseSize": 1339
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb8d992-87e3-47cb-8f4c-8762dc54d183",
        "cursor": {
          "ref": "4c5eb42c-a235-4410-b338-0e25023c9dd5",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0bc85659-a66a-4d53-a5d9-1344d093c103"
        },
        "item": {
          "id": "0cb8d992-87e3-47cb-8f4c-8762dc54d183",
          "name": "Get Organization DIDs (Issuer)"
        },
        "response": {
          "id": "4ca42abc-4a1f-435a-8a18-c69fc113037e",
          "status": "OK",
          "code": 200,
          "responseTime": 2270,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "`issuer_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": false
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": false
          },
          {
            "assertion": "Response must include 'service' array",
            "skipped": false
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": false
          },
          {
            "assertion": "'service' array must define Traceability API service endpoint",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b86914-6d35-4e4b-989a-43cc645d7d75",
        "cursor": {
          "ref": "1fc65e0a-1455-4c6e-af4b-9775b054b875",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "64edb9f3-38d1-43bb-a413-5e8a8f124347"
        },
        "item": {
          "id": "a1b86914-6d35-4e4b-989a-43cc645d7d75",
          "name": "Get Organization DIDs (Verifier)"
        },
        "response": {
          "id": "73eb59f1-754d-4476-b835-d8e09c9a7de3",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "`issuer_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": false
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": false
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": false
          },
          {
            "assertion": "'service' array must define Traceability API service endpoint",
            "skipped": false
          },
          {
            "assertion": "`verifier_exchange_endpoint` is persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0578ab5-3a22-49ff-bd01-50eda9c52283",
        "cursor": {
          "ref": "a94d06f7-b672-4c88-a224-773d1b4f0354",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "56e825d6-d29e-41e7-8f1d-1221056ddf37"
        },
        "item": {
          "id": "a0578ab5-3a22-49ff-bd01-50eda9c52283",
          "name": "Issue Credential"
        },
        "response": {
          "id": "7e778ac9-0b70-44df-8384-78f8bcb83ba0",
          "status": "Created",
          "code": 201,
          "responseTime": 6866,
          "responseSize": 740
        },
        "assertions": [
          {
            "assertion": "`issuer_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `201 Created` status",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fcf9dca-b137-406d-b876-d04e8cc410c8",
        "cursor": {
          "ref": "8a96e848-1f00-455c-8f15-d8f1f1ed2d10",
          "length": 8,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bbfc4f7f-658c-4a1f-9de2-9c02ba00209c"
        },
        "item": {
          "id": "6fcf9dca-b137-406d-b876-d04e8cc410c8",
          "name": "Initiate Exchange"
        },
        "response": {
          "id": "bcbdb49f-3c92-42c2-bb84-a9b759ec4770",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "`verifier_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response must include 'domain' property",
            "skipped": false
          },
          {
            "assertion": "response must include 'challenge' property",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e7226b-858e-44c4-9847-4bbda11abbea",
        "cursor": {
          "ref": "c1f31947-65fe-49cf-8af9-74f34a043489",
          "length": 8,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1f94503a-7745-4eb8-a31a-859537b1dd0a"
        },
        "item": {
          "id": "92e7226b-858e-44c4-9847-4bbda11abbea",
          "name": "Sign Presentation"
        },
        "response": {
          "id": "fdfcaddc-f318-4d91-91da-12a7b317aa76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 705,
          "responseSize": 1325
        },
        "assertions": [
          {
            "assertion": "`issuer_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`domain` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`challenge` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `201 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 5,
              "test": "must return `201 Success` status",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:6:7)"
            }
          },
          {
            "assertion": "`verifiable_presentation` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d0e305-04eb-47e3-8823-8ac0908c7e87",
        "cursor": {
          "ref": "d6180e21-52cf-4d36-89cd-bef5a15bc73f",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "67886a19-3af7-4e1b-b50e-b94c5812d3b6"
        },
        "item": {
          "id": "05d0e305-04eb-47e3-8823-8ac0908c7e87",
          "name": "Complete Exchange"
        },
        "response": {
          "id": "64923615-d6dc-4ffb-95d2-882858b6997d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 1001
        },
        "assertions": [
          {
            "assertion": "`verifier_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "must return `200 Success` status",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:2:8)"
            }
          },
          {
            "assertion": "verification response should be 'true'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "verification response should be 'true'",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^\n   at Object.eval sandbox-script.js:3:8)"
            }
          }
        ]
      }
    ]
  }
}